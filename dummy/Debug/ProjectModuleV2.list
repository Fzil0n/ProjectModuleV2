
ProjectModuleV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f218  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  0800f3b0  0800f3b0  0001f3b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f6a0  0800f6a0  000202a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f6a0  0800f6a0  0001f6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f6a8  0800f6a8  000202a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f6a8  0800f6a8  0001f6a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f6ac  0800f6ac  0001f6ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a4  20000000  0800f6b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001038  200002a4  0800f954  000202a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012dc  0800f954  000212dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001beb0  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004359  00000000  00000000  0003c184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  000404e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001250  00000000  00000000  00041928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c357  00000000  00000000  00042b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021a9a  00000000  00000000  0005eecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a00a6  00000000  00000000  00080969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00120a0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000597c  00000000  00000000  00120a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200002a4 	.word	0x200002a4
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800f398 	.word	0x0800f398

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200002a8 	.word	0x200002a8
 80001d4:	0800f398 	.word	0x0800f398

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b974 	b.w	8000ee0 <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9d08      	ldr	r5, [sp, #32]
 8000c16:	4604      	mov	r4, r0
 8000c18:	468e      	mov	lr, r1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d14d      	bne.n	8000cba <__udivmoddi4+0xaa>
 8000c1e:	428a      	cmp	r2, r1
 8000c20:	4694      	mov	ip, r2
 8000c22:	d969      	bls.n	8000cf8 <__udivmoddi4+0xe8>
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	b152      	cbz	r2, 8000c40 <__udivmoddi4+0x30>
 8000c2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2e:	f1c2 0120 	rsb	r1, r2, #32
 8000c32:	fa20 f101 	lsr.w	r1, r0, r1
 8000c36:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c3a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c3e:	4094      	lsls	r4, r2
 8000c40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c44:	0c21      	lsrs	r1, r4, #16
 8000c46:	fbbe f6f8 	udiv	r6, lr, r8
 8000c4a:	fa1f f78c 	uxth.w	r7, ip
 8000c4e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c52:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c56:	fb06 f107 	mul.w	r1, r6, r7
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	d90a      	bls.n	8000c74 <__udivmoddi4+0x64>
 8000c5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c62:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c66:	f080 811f 	bcs.w	8000ea8 <__udivmoddi4+0x298>
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	f240 811c 	bls.w	8000ea8 <__udivmoddi4+0x298>
 8000c70:	3e02      	subs	r6, #2
 8000c72:	4463      	add	r3, ip
 8000c74:	1a5b      	subs	r3, r3, r1
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c7c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c84:	fb00 f707 	mul.w	r7, r0, r7
 8000c88:	42a7      	cmp	r7, r4
 8000c8a:	d90a      	bls.n	8000ca2 <__udivmoddi4+0x92>
 8000c8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c90:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c94:	f080 810a 	bcs.w	8000eac <__udivmoddi4+0x29c>
 8000c98:	42a7      	cmp	r7, r4
 8000c9a:	f240 8107 	bls.w	8000eac <__udivmoddi4+0x29c>
 8000c9e:	4464      	add	r4, ip
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca6:	1be4      	subs	r4, r4, r7
 8000ca8:	2600      	movs	r6, #0
 8000caa:	b11d      	cbz	r5, 8000cb4 <__udivmoddi4+0xa4>
 8000cac:	40d4      	lsrs	r4, r2
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d909      	bls.n	8000cd2 <__udivmoddi4+0xc2>
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	f000 80ef 	beq.w	8000ea2 <__udivmoddi4+0x292>
 8000cc4:	2600      	movs	r6, #0
 8000cc6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cca:	4630      	mov	r0, r6
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	fab3 f683 	clz	r6, r3
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d14a      	bne.n	8000d70 <__udivmoddi4+0x160>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xd4>
 8000cde:	4282      	cmp	r2, r0
 8000ce0:	f200 80f9 	bhi.w	8000ed6 <__udivmoddi4+0x2c6>
 8000ce4:	1a84      	subs	r4, r0, r2
 8000ce6:	eb61 0303 	sbc.w	r3, r1, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	469e      	mov	lr, r3
 8000cee:	2d00      	cmp	r5, #0
 8000cf0:	d0e0      	beq.n	8000cb4 <__udivmoddi4+0xa4>
 8000cf2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cf6:	e7dd      	b.n	8000cb4 <__udivmoddi4+0xa4>
 8000cf8:	b902      	cbnz	r2, 8000cfc <__udivmoddi4+0xec>
 8000cfa:	deff      	udf	#255	; 0xff
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f040 8092 	bne.w	8000e2a <__udivmoddi4+0x21a>
 8000d06:	eba1 010c 	sub.w	r1, r1, ip
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2601      	movs	r6, #1
 8000d14:	0c20      	lsrs	r0, r4, #16
 8000d16:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d1a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d1e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d22:	fb0e f003 	mul.w	r0, lr, r3
 8000d26:	4288      	cmp	r0, r1
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x12c>
 8000d2a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x12a>
 8000d34:	4288      	cmp	r0, r1
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2c0>
 8000d3a:	4643      	mov	r3, r8
 8000d3c:	1a09      	subs	r1, r1, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d44:	fb07 1110 	mls	r1, r7, r0, r1
 8000d48:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x156>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x154>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2ca>
 8000d64:	4608      	mov	r0, r1
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d6e:	e79c      	b.n	8000caa <__udivmoddi4+0x9a>
 8000d70:	f1c6 0720 	rsb	r7, r6, #32
 8000d74:	40b3      	lsls	r3, r6
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d82:	fa01 f306 	lsl.w	r3, r1, r6
 8000d86:	431c      	orrs	r4, r3
 8000d88:	40f9      	lsrs	r1, r7
 8000d8a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d92:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d96:	0c20      	lsrs	r0, r4, #16
 8000d98:	fa1f fe8c 	uxth.w	lr, ip
 8000d9c:	fb09 1118 	mls	r1, r9, r8, r1
 8000da0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000da4:	fb08 f00e 	mul.w	r0, r8, lr
 8000da8:	4288      	cmp	r0, r1
 8000daa:	fa02 f206 	lsl.w	r2, r2, r6
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b8>
 8000db0:	eb1c 0101 	adds.w	r1, ip, r1
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2bc>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2bc>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4461      	add	r1, ip
 8000dc8:	1a09      	subs	r1, r1, r0
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd0:	fb09 1110 	mls	r1, r9, r0, r1
 8000dd4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ddc:	458e      	cmp	lr, r1
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1e2>
 8000de0:	eb1c 0101 	adds.w	r1, ip, r1
 8000de4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2b4>
 8000dea:	458e      	cmp	lr, r1
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2b4>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4461      	add	r1, ip
 8000df2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000df6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dfa:	eba1 010e 	sub.w	r1, r1, lr
 8000dfe:	42a1      	cmp	r1, r4
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46a6      	mov	lr, r4
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x2a4>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x2a0>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x212>
 8000e0a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e0e:	eb61 010e 	sbc.w	r1, r1, lr
 8000e12:	fa01 f707 	lsl.w	r7, r1, r7
 8000e16:	fa22 f306 	lsr.w	r3, r2, r6
 8000e1a:	40f1      	lsrs	r1, r6
 8000e1c:	431f      	orrs	r7, r3
 8000e1e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e22:	2600      	movs	r6, #0
 8000e24:	4631      	mov	r1, r6
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	f1c2 0320 	rsb	r3, r2, #32
 8000e2e:	40d8      	lsrs	r0, r3
 8000e30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e34:	fa21 f303 	lsr.w	r3, r1, r3
 8000e38:	4091      	lsls	r1, r2
 8000e3a:	4301      	orrs	r1, r0
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e48:	fb07 3610 	mls	r6, r7, r0, r3
 8000e4c:	0c0b      	lsrs	r3, r1, #16
 8000e4e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e52:	fb00 f60e 	mul.w	r6, r0, lr
 8000e56:	429e      	cmp	r6, r3
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x260>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b8>
 8000e68:	429e      	cmp	r6, r3
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b8>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4463      	add	r3, ip
 8000e70:	1b9b      	subs	r3, r3, r6
 8000e72:	b289      	uxth	r1, r1
 8000e74:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e78:	fb07 3316 	mls	r3, r7, r6, r3
 8000e7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e80:	fb06 f30e 	mul.w	r3, r6, lr
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x28a>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2b0>
 8000e92:	428b      	cmp	r3, r1
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2b0>
 8000e96:	3e02      	subs	r6, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	1ac9      	subs	r1, r1, r3
 8000e9c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0x104>
 8000ea2:	462e      	mov	r6, r5
 8000ea4:	4628      	mov	r0, r5
 8000ea6:	e705      	b.n	8000cb4 <__udivmoddi4+0xa4>
 8000ea8:	4606      	mov	r6, r0
 8000eaa:	e6e3      	b.n	8000c74 <__udivmoddi4+0x64>
 8000eac:	4618      	mov	r0, r3
 8000eae:	e6f8      	b.n	8000ca2 <__udivmoddi4+0x92>
 8000eb0:	454b      	cmp	r3, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f8>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ebc:	3801      	subs	r0, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f8>
 8000ec0:	4646      	mov	r6, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x28a>
 8000ec4:	4620      	mov	r0, r4
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1e2>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x260>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b8>
 8000ed0:	3b02      	subs	r3, #2
 8000ed2:	4461      	add	r1, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x12c>
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	e709      	b.n	8000cee <__udivmoddi4+0xde>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x156>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <Endeffector_Update_Status>:
uint8_t Emergency_Status;
uint8_t TestMode_Status;
uint8_t RunMode_Status;
uint8_t GripperMode_Status;

void Endeffector_Update_Status(){
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
	Error_Status = (ReadData >> 5) & 0b00000111;
 8000ee8:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <Endeffector_Update_Status+0x60>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	095b      	lsrs	r3, r3, #5
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <Endeffector_Update_Status+0x64>)
 8000ef2:	701a      	strb	r2, [r3, #0]
	Emergency_Status = (ReadData >> 4) & 0b00000001;
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <Endeffector_Update_Status+0x60>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	091b      	lsrs	r3, r3, #4
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <Endeffector_Update_Status+0x68>)
 8000f04:	701a      	strb	r2, [r3, #0]
	TestMode_Status = (ReadData >> 3) & 0b00000001;
 8000f06:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <Endeffector_Update_Status+0x60>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	08db      	lsrs	r3, r3, #3
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <Endeffector_Update_Status+0x6c>)
 8000f16:	701a      	strb	r2, [r3, #0]
	RunMode_Status = (ReadData >> 2) & 0b00000001;
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <Endeffector_Update_Status+0x60>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	089b      	lsrs	r3, r3, #2
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <Endeffector_Update_Status+0x70>)
 8000f28:	701a      	strb	r2, [r3, #0]
	GripperMode_Status = ReadData & 0b00000011;
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <Endeffector_Update_Status+0x60>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <Endeffector_Update_Status+0x74>)
 8000f36:	701a      	strb	r2, [r3, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	200002c5 	.word	0x200002c5
 8000f48:	200002c8 	.word	0x200002c8
 8000f4c:	200002c9 	.word	0x200002c9
 8000f50:	200002ca 	.word	0x200002ca
 8000f54:	200002cb 	.word	0x200002cb
 8000f58:	200002cc 	.word	0x200002cc

08000f5c <Endeffector_Read_Status>:

void Endeffector_Read_Status(){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <Endeffector_Read_Status+0x74>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d125      	bne.n	8000fb4 <Endeffector_Read_Status+0x58>
 8000f68:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <Endeffector_Read_Status+0x78>)
 8000f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b20      	cmp	r3, #32
 8000f72:	d11f      	bne.n	8000fb4 <Endeffector_Read_Status+0x58>
		HAL_I2C_Master_Receive_IT(&hi2c1, SlaveAddr, &ReadData, sizeof(ReadData));
 8000f74:	2301      	movs	r3, #1
 8000f76:	4a18      	ldr	r2, [pc, #96]	; (8000fd8 <Endeffector_Read_Status+0x7c>)
 8000f78:	212a      	movs	r1, #42	; 0x2a
 8000f7a:	4816      	ldr	r0, [pc, #88]	; (8000fd4 <Endeffector_Read_Status+0x78>)
 8000f7c:	f006 fd1a 	bl	80079b4 <HAL_I2C_Master_Receive_IT>
		count++;
 8000f80:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <Endeffector_Read_Status+0x80>)
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	3301      	adds	r3, #1
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <Endeffector_Read_Status+0x80>)
 8000f8a:	801a      	strh	r2, [r3, #0]
	}

	static uint32_t timestamp = 0;
	while(i < 150){
 8000f8c:	e012      	b.n	8000fb4 <Endeffector_Read_Status+0x58>
		if(HAL_GetTick() >= timestamp){
 8000f8e:	f005 f81d 	bl	8005fcc <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <Endeffector_Read_Status+0x84>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d30b      	bcc.n	8000fb4 <Endeffector_Read_Status+0x58>
			timestamp = HAL_GetTick() + 10;
 8000f9c:	f005 f816 	bl	8005fcc <HAL_GetTick>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	330a      	adds	r3, #10
 8000fa4:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <Endeffector_Read_Status+0x84>)
 8000fa6:	6013      	str	r3, [r2, #0]
			i++;
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <Endeffector_Read_Status+0x88>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <Endeffector_Read_Status+0x88>)
 8000fb2:	801a      	strh	r2, [r3, #0]
	while(i < 150){
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <Endeffector_Read_Status+0x88>)
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	2b95      	cmp	r3, #149	; 0x95
 8000fba:	d9e8      	bls.n	8000f8e <Endeffector_Read_Status+0x32>
		}
	}

	Endeffector_Update_Status();
 8000fbc:	f7ff ff92 	bl	8000ee4 <Endeffector_Update_Status>
	Stamp = 0;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <Endeffector_Read_Status+0x74>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
	i = 0;
 8000fc6:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <Endeffector_Read_Status+0x88>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	801a      	strh	r2, [r3, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200002c0 	.word	0x200002c0
 8000fd4:	200003b8 	.word	0x200003b8
 8000fd8:	200002c5 	.word	0x200002c5
 8000fdc:	200002c6 	.word	0x200002c6
 8000fe0:	200002d0 	.word	0x200002d0
 8000fe4:	200002c2 	.word	0x200002c2

08000fe8 <Endeffector_SoftReset>:

void Endeffector_SoftReset(){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	static uint8_t CommandSeq[4] = {SoftReset_Seq1, SoftReset_Seq2, SoftReset_Seq3, SoftReset_Seq4};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <Endeffector_SoftReset+0x68>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d11f      	bne.n	8001034 <Endeffector_SoftReset+0x4c>
 8000ff4:	4b17      	ldr	r3, [pc, #92]	; (8001054 <Endeffector_SoftReset+0x6c>)
 8000ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b20      	cmp	r3, #32
 8000ffe:	d119      	bne.n	8001034 <Endeffector_SoftReset+0x4c>
		HAL_I2C_Master_Transmit_IT(&hi2c1, SlaveAddr, CommandSeq, sizeof(CommandSeq));
 8001000:	2304      	movs	r3, #4
 8001002:	4a15      	ldr	r2, [pc, #84]	; (8001058 <Endeffector_SoftReset+0x70>)
 8001004:	212a      	movs	r1, #42	; 0x2a
 8001006:	4813      	ldr	r0, [pc, #76]	; (8001054 <Endeffector_SoftReset+0x6c>)
 8001008:	f006 fc2e 	bl	8007868 <HAL_I2C_Master_Transmit_IT>
	}

	static uint32_t timestamp = 0;
	while(i < 150){
 800100c:	e012      	b.n	8001034 <Endeffector_SoftReset+0x4c>
		if(HAL_GetTick() >= timestamp){
 800100e:	f004 ffdd 	bl	8005fcc <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <Endeffector_SoftReset+0x74>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	429a      	cmp	r2, r3
 800101a:	d30b      	bcc.n	8001034 <Endeffector_SoftReset+0x4c>
			timestamp = HAL_GetTick() + 10;
 800101c:	f004 ffd6 	bl	8005fcc <HAL_GetTick>
 8001020:	4603      	mov	r3, r0
 8001022:	330a      	adds	r3, #10
 8001024:	4a0d      	ldr	r2, [pc, #52]	; (800105c <Endeffector_SoftReset+0x74>)
 8001026:	6013      	str	r3, [r2, #0]
			i++;
 8001028:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <Endeffector_SoftReset+0x78>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	3301      	adds	r3, #1
 800102e:	b29a      	uxth	r2, r3
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <Endeffector_SoftReset+0x78>)
 8001032:	801a      	strh	r2, [r3, #0]
	while(i < 150){
 8001034:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <Endeffector_SoftReset+0x78>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	2b95      	cmp	r3, #149	; 0x95
 800103a:	d9e8      	bls.n	800100e <Endeffector_SoftReset+0x26>
		}
	}
	Endeffector_Read_Status();
 800103c:	f7ff ff8e 	bl	8000f5c <Endeffector_Read_Status>
	Stamp = 0;
 8001040:	4b03      	ldr	r3, [pc, #12]	; (8001050 <Endeffector_SoftReset+0x68>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
	i = 0;
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <Endeffector_SoftReset+0x78>)
 8001048:	2200      	movs	r2, #0
 800104a:	801a      	strh	r2, [r3, #0]
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200002c0 	.word	0x200002c0
 8001054:	200003b8 	.word	0x200003b8
 8001058:	20000000 	.word	0x20000000
 800105c:	200002d4 	.word	0x200002d4
 8001060:	200002c2 	.word	0x200002c2

08001064 <Endeffector_EmergencyTrigger>:

void Endeffector_EmergencyTrigger(){
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	static uint8_t EmergencyCommand[1] = {EmergencyTrigger};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 8001068:	4b18      	ldr	r3, [pc, #96]	; (80010cc <Endeffector_EmergencyTrigger+0x68>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d11f      	bne.n	80010b0 <Endeffector_EmergencyTrigger+0x4c>
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <Endeffector_EmergencyTrigger+0x6c>)
 8001072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b20      	cmp	r3, #32
 800107a:	d119      	bne.n	80010b0 <Endeffector_EmergencyTrigger+0x4c>
		HAL_I2C_Master_Transmit_IT(&hi2c1, SlaveAddr, EmergencyCommand, sizeof(EmergencyCommand));
 800107c:	2301      	movs	r3, #1
 800107e:	4a15      	ldr	r2, [pc, #84]	; (80010d4 <Endeffector_EmergencyTrigger+0x70>)
 8001080:	212a      	movs	r1, #42	; 0x2a
 8001082:	4813      	ldr	r0, [pc, #76]	; (80010d0 <Endeffector_EmergencyTrigger+0x6c>)
 8001084:	f006 fbf0 	bl	8007868 <HAL_I2C_Master_Transmit_IT>
	}

	static uint32_t timestamp = 0;
	while(i < 150){
 8001088:	e012      	b.n	80010b0 <Endeffector_EmergencyTrigger+0x4c>
		if(HAL_GetTick() >= timestamp){
 800108a:	f004 ff9f 	bl	8005fcc <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <Endeffector_EmergencyTrigger+0x74>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	429a      	cmp	r2, r3
 8001096:	d30b      	bcc.n	80010b0 <Endeffector_EmergencyTrigger+0x4c>
			timestamp = HAL_GetTick() + 10;
 8001098:	f004 ff98 	bl	8005fcc <HAL_GetTick>
 800109c:	4603      	mov	r3, r0
 800109e:	330a      	adds	r3, #10
 80010a0:	4a0d      	ldr	r2, [pc, #52]	; (80010d8 <Endeffector_EmergencyTrigger+0x74>)
 80010a2:	6013      	str	r3, [r2, #0]
			i++;
 80010a4:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <Endeffector_EmergencyTrigger+0x78>)
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	3301      	adds	r3, #1
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <Endeffector_EmergencyTrigger+0x78>)
 80010ae:	801a      	strh	r2, [r3, #0]
	while(i < 150){
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <Endeffector_EmergencyTrigger+0x78>)
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	2b95      	cmp	r3, #149	; 0x95
 80010b6:	d9e8      	bls.n	800108a <Endeffector_EmergencyTrigger+0x26>
		}
	}

	Endeffector_Read_Status();
 80010b8:	f7ff ff50 	bl	8000f5c <Endeffector_Read_Status>
	Stamp = 0;
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <Endeffector_EmergencyTrigger+0x68>)
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
	i = 0;
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <Endeffector_EmergencyTrigger+0x78>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	801a      	strh	r2, [r3, #0]
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200002c0 	.word	0x200002c0
 80010d0:	200003b8 	.word	0x200003b8
 80010d4:	20000004 	.word	0x20000004
 80010d8:	200002d8 	.word	0x200002d8
 80010dc:	200002c2 	.word	0x200002c2

080010e0 <Endeffector_EmergencyExit>:

void Endeffector_EmergencyExit(){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	static uint8_t EmergencySeq[4] = {EmergencyOut_Seq1, EmergencyOut_Seq2, EmergencyOut_Seq3, EmergencyOut_Seq4};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <Endeffector_EmergencyExit+0x68>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d11f      	bne.n	800112c <Endeffector_EmergencyExit+0x4c>
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <Endeffector_EmergencyExit+0x6c>)
 80010ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b20      	cmp	r3, #32
 80010f6:	d119      	bne.n	800112c <Endeffector_EmergencyExit+0x4c>
		HAL_I2C_Master_Transmit_IT(&hi2c1, SlaveAddr, EmergencySeq, sizeof(EmergencySeq));
 80010f8:	2304      	movs	r3, #4
 80010fa:	4a15      	ldr	r2, [pc, #84]	; (8001150 <Endeffector_EmergencyExit+0x70>)
 80010fc:	212a      	movs	r1, #42	; 0x2a
 80010fe:	4813      	ldr	r0, [pc, #76]	; (800114c <Endeffector_EmergencyExit+0x6c>)
 8001100:	f006 fbb2 	bl	8007868 <HAL_I2C_Master_Transmit_IT>
	}

	static uint32_t timestamp = 0;
	while(i < 150){
 8001104:	e012      	b.n	800112c <Endeffector_EmergencyExit+0x4c>
		if(HAL_GetTick() >= timestamp){
 8001106:	f004 ff61 	bl	8005fcc <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <Endeffector_EmergencyExit+0x74>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d30b      	bcc.n	800112c <Endeffector_EmergencyExit+0x4c>
			timestamp = HAL_GetTick() + 10;
 8001114:	f004 ff5a 	bl	8005fcc <HAL_GetTick>
 8001118:	4603      	mov	r3, r0
 800111a:	330a      	adds	r3, #10
 800111c:	4a0d      	ldr	r2, [pc, #52]	; (8001154 <Endeffector_EmergencyExit+0x74>)
 800111e:	6013      	str	r3, [r2, #0]
			i++;
 8001120:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <Endeffector_EmergencyExit+0x78>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	3301      	adds	r3, #1
 8001126:	b29a      	uxth	r2, r3
 8001128:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <Endeffector_EmergencyExit+0x78>)
 800112a:	801a      	strh	r2, [r3, #0]
	while(i < 150){
 800112c:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <Endeffector_EmergencyExit+0x78>)
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	2b95      	cmp	r3, #149	; 0x95
 8001132:	d9e8      	bls.n	8001106 <Endeffector_EmergencyExit+0x26>
		}
	}

	Endeffector_Read_Status();
 8001134:	f7ff ff12 	bl	8000f5c <Endeffector_Read_Status>
	Stamp = 0;
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <Endeffector_EmergencyExit+0x68>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
	i = 0;
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <Endeffector_EmergencyExit+0x78>)
 8001140:	2200      	movs	r2, #0
 8001142:	801a      	strh	r2, [r3, #0]
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200002c0 	.word	0x200002c0
 800114c:	200003b8 	.word	0x200003b8
 8001150:	20000008 	.word	0x20000008
 8001154:	200002dc 	.word	0x200002dc
 8001158:	200002c2 	.word	0x200002c2

0800115c <Endeffector_TestModeOn>:

void Endeffector_TestModeOn(){
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	static uint8_t TestModeON[2] = {TestMode_Command, TestMode_On};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 8001160:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <Endeffector_TestModeOn+0x68>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d11f      	bne.n	80011a8 <Endeffector_TestModeOn+0x4c>
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <Endeffector_TestModeOn+0x6c>)
 800116a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b20      	cmp	r3, #32
 8001172:	d119      	bne.n	80011a8 <Endeffector_TestModeOn+0x4c>
		HAL_I2C_Master_Transmit_IT(&hi2c1, SlaveAddr, TestModeON, sizeof(TestModeON));
 8001174:	2302      	movs	r3, #2
 8001176:	4a15      	ldr	r2, [pc, #84]	; (80011cc <Endeffector_TestModeOn+0x70>)
 8001178:	212a      	movs	r1, #42	; 0x2a
 800117a:	4813      	ldr	r0, [pc, #76]	; (80011c8 <Endeffector_TestModeOn+0x6c>)
 800117c:	f006 fb74 	bl	8007868 <HAL_I2C_Master_Transmit_IT>
	}

	static uint32_t timestamp = 0;
	while(i < 150){
 8001180:	e012      	b.n	80011a8 <Endeffector_TestModeOn+0x4c>
		if(HAL_GetTick() >= timestamp){
 8001182:	f004 ff23 	bl	8005fcc <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <Endeffector_TestModeOn+0x74>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	429a      	cmp	r2, r3
 800118e:	d30b      	bcc.n	80011a8 <Endeffector_TestModeOn+0x4c>
			timestamp = HAL_GetTick() + 10;
 8001190:	f004 ff1c 	bl	8005fcc <HAL_GetTick>
 8001194:	4603      	mov	r3, r0
 8001196:	330a      	adds	r3, #10
 8001198:	4a0d      	ldr	r2, [pc, #52]	; (80011d0 <Endeffector_TestModeOn+0x74>)
 800119a:	6013      	str	r3, [r2, #0]
			i++;
 800119c:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <Endeffector_TestModeOn+0x78>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	3301      	adds	r3, #1
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <Endeffector_TestModeOn+0x78>)
 80011a6:	801a      	strh	r2, [r3, #0]
	while(i < 150){
 80011a8:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <Endeffector_TestModeOn+0x78>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	2b95      	cmp	r3, #149	; 0x95
 80011ae:	d9e8      	bls.n	8001182 <Endeffector_TestModeOn+0x26>
		}
	}

	Endeffector_Read_Status();
 80011b0:	f7ff fed4 	bl	8000f5c <Endeffector_Read_Status>
	Stamp = 0;
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <Endeffector_TestModeOn+0x68>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
	i = 0;
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <Endeffector_TestModeOn+0x78>)
 80011bc:	2200      	movs	r2, #0
 80011be:	801a      	strh	r2, [r3, #0]
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200002c0 	.word	0x200002c0
 80011c8:	200003b8 	.word	0x200003b8
 80011cc:	2000000c 	.word	0x2000000c
 80011d0:	200002e0 	.word	0x200002e0
 80011d4:	200002c2 	.word	0x200002c2

080011d8 <Endeffector_TestModeOff>:

void Endeffector_TestModeOff(){
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	static uint8_t TestModeOff[2] = {TestMode_Command, TestMode_Off};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 80011dc:	4b18      	ldr	r3, [pc, #96]	; (8001240 <Endeffector_TestModeOff+0x68>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d11f      	bne.n	8001224 <Endeffector_TestModeOff+0x4c>
 80011e4:	4b17      	ldr	r3, [pc, #92]	; (8001244 <Endeffector_TestModeOff+0x6c>)
 80011e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b20      	cmp	r3, #32
 80011ee:	d119      	bne.n	8001224 <Endeffector_TestModeOff+0x4c>
		HAL_I2C_Master_Transmit_IT(&hi2c1, SlaveAddr, TestModeOff, sizeof(TestModeOff));
 80011f0:	2302      	movs	r3, #2
 80011f2:	4a15      	ldr	r2, [pc, #84]	; (8001248 <Endeffector_TestModeOff+0x70>)
 80011f4:	212a      	movs	r1, #42	; 0x2a
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <Endeffector_TestModeOff+0x6c>)
 80011f8:	f006 fb36 	bl	8007868 <HAL_I2C_Master_Transmit_IT>
	}

	static uint32_t timestamp = 0;
	while(i < 150){
 80011fc:	e012      	b.n	8001224 <Endeffector_TestModeOff+0x4c>
		if(HAL_GetTick() >= timestamp){
 80011fe:	f004 fee5 	bl	8005fcc <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <Endeffector_TestModeOff+0x74>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	429a      	cmp	r2, r3
 800120a:	d30b      	bcc.n	8001224 <Endeffector_TestModeOff+0x4c>
			timestamp = HAL_GetTick() + 10;
 800120c:	f004 fede 	bl	8005fcc <HAL_GetTick>
 8001210:	4603      	mov	r3, r0
 8001212:	330a      	adds	r3, #10
 8001214:	4a0d      	ldr	r2, [pc, #52]	; (800124c <Endeffector_TestModeOff+0x74>)
 8001216:	6013      	str	r3, [r2, #0]
			i++;
 8001218:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <Endeffector_TestModeOff+0x78>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	3301      	adds	r3, #1
 800121e:	b29a      	uxth	r2, r3
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <Endeffector_TestModeOff+0x78>)
 8001222:	801a      	strh	r2, [r3, #0]
	while(i < 150){
 8001224:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <Endeffector_TestModeOff+0x78>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	2b95      	cmp	r3, #149	; 0x95
 800122a:	d9e8      	bls.n	80011fe <Endeffector_TestModeOff+0x26>
		}
	}

	Endeffector_Read_Status();
 800122c:	f7ff fe96 	bl	8000f5c <Endeffector_Read_Status>
	Stamp = 0;
 8001230:	4b03      	ldr	r3, [pc, #12]	; (8001240 <Endeffector_TestModeOff+0x68>)
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
	i = 0;
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <Endeffector_TestModeOff+0x78>)
 8001238:	2200      	movs	r2, #0
 800123a:	801a      	strh	r2, [r3, #0]
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	200002c0 	.word	0x200002c0
 8001244:	200003b8 	.word	0x200003b8
 8001248:	20000010 	.word	0x20000010
 800124c:	200002e4 	.word	0x200002e4
 8001250:	200002c2 	.word	0x200002c2

08001254 <Endeffector_GripperModeOn>:

void Endeffector_GripperModeOn(){
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	static uint8_t GripperOn[2] = {GripperMode_Command, GripperMode_On};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 8001258:	4b18      	ldr	r3, [pc, #96]	; (80012bc <Endeffector_GripperModeOn+0x68>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d11f      	bne.n	80012a0 <Endeffector_GripperModeOn+0x4c>
 8001260:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <Endeffector_GripperModeOn+0x6c>)
 8001262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b20      	cmp	r3, #32
 800126a:	d119      	bne.n	80012a0 <Endeffector_GripperModeOn+0x4c>
		HAL_I2C_Master_Transmit_IT(&hi2c1, SlaveAddr, GripperOn, sizeof(GripperOn));
 800126c:	2302      	movs	r3, #2
 800126e:	4a15      	ldr	r2, [pc, #84]	; (80012c4 <Endeffector_GripperModeOn+0x70>)
 8001270:	212a      	movs	r1, #42	; 0x2a
 8001272:	4813      	ldr	r0, [pc, #76]	; (80012c0 <Endeffector_GripperModeOn+0x6c>)
 8001274:	f006 faf8 	bl	8007868 <HAL_I2C_Master_Transmit_IT>
	}

	static uint32_t timestamp = 0;
	while(i < 150){
 8001278:	e012      	b.n	80012a0 <Endeffector_GripperModeOn+0x4c>
		if(HAL_GetTick() >= timestamp){
 800127a:	f004 fea7 	bl	8005fcc <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <Endeffector_GripperModeOn+0x74>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	429a      	cmp	r2, r3
 8001286:	d30b      	bcc.n	80012a0 <Endeffector_GripperModeOn+0x4c>
			timestamp = HAL_GetTick() + 10;
 8001288:	f004 fea0 	bl	8005fcc <HAL_GetTick>
 800128c:	4603      	mov	r3, r0
 800128e:	330a      	adds	r3, #10
 8001290:	4a0d      	ldr	r2, [pc, #52]	; (80012c8 <Endeffector_GripperModeOn+0x74>)
 8001292:	6013      	str	r3, [r2, #0]
			i++;
 8001294:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <Endeffector_GripperModeOn+0x78>)
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	3301      	adds	r3, #1
 800129a:	b29a      	uxth	r2, r3
 800129c:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <Endeffector_GripperModeOn+0x78>)
 800129e:	801a      	strh	r2, [r3, #0]
	while(i < 150){
 80012a0:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <Endeffector_GripperModeOn+0x78>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	2b95      	cmp	r3, #149	; 0x95
 80012a6:	d9e8      	bls.n	800127a <Endeffector_GripperModeOn+0x26>
		}
	}

	Endeffector_Read_Status();
 80012a8:	f7ff fe58 	bl	8000f5c <Endeffector_Read_Status>
	Stamp = 0;
 80012ac:	4b03      	ldr	r3, [pc, #12]	; (80012bc <Endeffector_GripperModeOn+0x68>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
	i = 0;
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <Endeffector_GripperModeOn+0x78>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	801a      	strh	r2, [r3, #0]
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200002c0 	.word	0x200002c0
 80012c0:	200003b8 	.word	0x200003b8
 80012c4:	20000014 	.word	0x20000014
 80012c8:	200002e8 	.word	0x200002e8
 80012cc:	200002c2 	.word	0x200002c2

080012d0 <Endeffector_GripperModeOff>:

void Endeffector_GripperModeOff(){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	static uint8_t GripperOff[2] = {GripperMode_Command, GripperMode_Off};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 80012d4:	4b18      	ldr	r3, [pc, #96]	; (8001338 <Endeffector_GripperModeOff+0x68>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d11f      	bne.n	800131c <Endeffector_GripperModeOff+0x4c>
 80012dc:	4b17      	ldr	r3, [pc, #92]	; (800133c <Endeffector_GripperModeOff+0x6c>)
 80012de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b20      	cmp	r3, #32
 80012e6:	d119      	bne.n	800131c <Endeffector_GripperModeOff+0x4c>
		HAL_I2C_Master_Transmit_IT(&hi2c1, SlaveAddr, GripperOff, sizeof(GripperOff));
 80012e8:	2302      	movs	r3, #2
 80012ea:	4a15      	ldr	r2, [pc, #84]	; (8001340 <Endeffector_GripperModeOff+0x70>)
 80012ec:	212a      	movs	r1, #42	; 0x2a
 80012ee:	4813      	ldr	r0, [pc, #76]	; (800133c <Endeffector_GripperModeOff+0x6c>)
 80012f0:	f006 faba 	bl	8007868 <HAL_I2C_Master_Transmit_IT>
	}

	static uint32_t timestamp = 0;
	while(i < 150){
 80012f4:	e012      	b.n	800131c <Endeffector_GripperModeOff+0x4c>
		if(HAL_GetTick() >= timestamp){
 80012f6:	f004 fe69 	bl	8005fcc <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	4b11      	ldr	r3, [pc, #68]	; (8001344 <Endeffector_GripperModeOff+0x74>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	429a      	cmp	r2, r3
 8001302:	d30b      	bcc.n	800131c <Endeffector_GripperModeOff+0x4c>
			timestamp = HAL_GetTick() + 10;
 8001304:	f004 fe62 	bl	8005fcc <HAL_GetTick>
 8001308:	4603      	mov	r3, r0
 800130a:	330a      	adds	r3, #10
 800130c:	4a0d      	ldr	r2, [pc, #52]	; (8001344 <Endeffector_GripperModeOff+0x74>)
 800130e:	6013      	str	r3, [r2, #0]
			i++;
 8001310:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <Endeffector_GripperModeOff+0x78>)
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	3301      	adds	r3, #1
 8001316:	b29a      	uxth	r2, r3
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <Endeffector_GripperModeOff+0x78>)
 800131a:	801a      	strh	r2, [r3, #0]
	while(i < 150){
 800131c:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <Endeffector_GripperModeOff+0x78>)
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	2b95      	cmp	r3, #149	; 0x95
 8001322:	d9e8      	bls.n	80012f6 <Endeffector_GripperModeOff+0x26>
		}
	}

	Endeffector_Read_Status();
 8001324:	f7ff fe1a 	bl	8000f5c <Endeffector_Read_Status>
	Stamp = 0;
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <Endeffector_GripperModeOff+0x68>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
	i = 0;
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <Endeffector_GripperModeOff+0x78>)
 8001330:	2200      	movs	r2, #0
 8001332:	801a      	strh	r2, [r3, #0]
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	200002c0 	.word	0x200002c0
 800133c:	200003b8 	.word	0x200003b8
 8001340:	20000018 	.word	0x20000018
 8001344:	200002ec 	.word	0x200002ec
 8001348:	200002c2 	.word	0x200002c2

0800134c <Endeffector_PickUp>:

void Endeffector_PickUp(){
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	static uint8_t PickUp[2] = {GripperMode_Command, GripperMode_PickUp};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 8001350:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <Endeffector_PickUp+0x68>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d11f      	bne.n	8001398 <Endeffector_PickUp+0x4c>
 8001358:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <Endeffector_PickUp+0x6c>)
 800135a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b20      	cmp	r3, #32
 8001362:	d119      	bne.n	8001398 <Endeffector_PickUp+0x4c>
		HAL_I2C_Master_Transmit_IT(&hi2c1, SlaveAddr, PickUp, sizeof(PickUp));
 8001364:	2302      	movs	r3, #2
 8001366:	4a15      	ldr	r2, [pc, #84]	; (80013bc <Endeffector_PickUp+0x70>)
 8001368:	212a      	movs	r1, #42	; 0x2a
 800136a:	4813      	ldr	r0, [pc, #76]	; (80013b8 <Endeffector_PickUp+0x6c>)
 800136c:	f006 fa7c 	bl	8007868 <HAL_I2C_Master_Transmit_IT>
	}

	static uint32_t timestamp = 0;
	while(i < 150){
 8001370:	e012      	b.n	8001398 <Endeffector_PickUp+0x4c>
		if(HAL_GetTick() >= timestamp){
 8001372:	f004 fe2b 	bl	8005fcc <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <Endeffector_PickUp+0x74>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	429a      	cmp	r2, r3
 800137e:	d30b      	bcc.n	8001398 <Endeffector_PickUp+0x4c>
			timestamp = HAL_GetTick() + 10;
 8001380:	f004 fe24 	bl	8005fcc <HAL_GetTick>
 8001384:	4603      	mov	r3, r0
 8001386:	330a      	adds	r3, #10
 8001388:	4a0d      	ldr	r2, [pc, #52]	; (80013c0 <Endeffector_PickUp+0x74>)
 800138a:	6013      	str	r3, [r2, #0]
			i++;
 800138c:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <Endeffector_PickUp+0x78>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	3301      	adds	r3, #1
 8001392:	b29a      	uxth	r2, r3
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <Endeffector_PickUp+0x78>)
 8001396:	801a      	strh	r2, [r3, #0]
	while(i < 150){
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <Endeffector_PickUp+0x78>)
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	2b95      	cmp	r3, #149	; 0x95
 800139e:	d9e8      	bls.n	8001372 <Endeffector_PickUp+0x26>
		}
	}

	Endeffector_Read_Status();
 80013a0:	f7ff fddc 	bl	8000f5c <Endeffector_Read_Status>
	Stamp = 0;
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <Endeffector_PickUp+0x68>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
	i = 0;
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <Endeffector_PickUp+0x78>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	801a      	strh	r2, [r3, #0]
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200002c0 	.word	0x200002c0
 80013b8:	200003b8 	.word	0x200003b8
 80013bc:	2000001c 	.word	0x2000001c
 80013c0:	200002f0 	.word	0x200002f0
 80013c4:	200002c2 	.word	0x200002c2

080013c8 <Endeffector_PlaceDown>:

void Endeffector_PlaceDown(){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	static uint8_t PlaceDown[2] = {GripperMode_Command, GripperMode_PlaceDown};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 80013cc:	4b18      	ldr	r3, [pc, #96]	; (8001430 <Endeffector_PlaceDown+0x68>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d11f      	bne.n	8001414 <Endeffector_PlaceDown+0x4c>
 80013d4:	4b17      	ldr	r3, [pc, #92]	; (8001434 <Endeffector_PlaceDown+0x6c>)
 80013d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b20      	cmp	r3, #32
 80013de:	d119      	bne.n	8001414 <Endeffector_PlaceDown+0x4c>
		HAL_I2C_Master_Transmit_IT(&hi2c1, SlaveAddr, PlaceDown, sizeof(PlaceDown));
 80013e0:	2302      	movs	r3, #2
 80013e2:	4a15      	ldr	r2, [pc, #84]	; (8001438 <Endeffector_PlaceDown+0x70>)
 80013e4:	212a      	movs	r1, #42	; 0x2a
 80013e6:	4813      	ldr	r0, [pc, #76]	; (8001434 <Endeffector_PlaceDown+0x6c>)
 80013e8:	f006 fa3e 	bl	8007868 <HAL_I2C_Master_Transmit_IT>
	}

	static uint32_t timestamp = 0;
	while(i < 150){
 80013ec:	e012      	b.n	8001414 <Endeffector_PlaceDown+0x4c>
		if(HAL_GetTick() >= timestamp){
 80013ee:	f004 fded 	bl	8005fcc <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <Endeffector_PlaceDown+0x74>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d30b      	bcc.n	8001414 <Endeffector_PlaceDown+0x4c>
			timestamp = HAL_GetTick() + 10;
 80013fc:	f004 fde6 	bl	8005fcc <HAL_GetTick>
 8001400:	4603      	mov	r3, r0
 8001402:	330a      	adds	r3, #10
 8001404:	4a0d      	ldr	r2, [pc, #52]	; (800143c <Endeffector_PlaceDown+0x74>)
 8001406:	6013      	str	r3, [r2, #0]
			i++;
 8001408:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <Endeffector_PlaceDown+0x78>)
 800140a:	881b      	ldrh	r3, [r3, #0]
 800140c:	3301      	adds	r3, #1
 800140e:	b29a      	uxth	r2, r3
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <Endeffector_PlaceDown+0x78>)
 8001412:	801a      	strh	r2, [r3, #0]
	while(i < 150){
 8001414:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <Endeffector_PlaceDown+0x78>)
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	2b95      	cmp	r3, #149	; 0x95
 800141a:	d9e8      	bls.n	80013ee <Endeffector_PlaceDown+0x26>
		}
	}
	Endeffector_Read_Status();
 800141c:	f7ff fd9e 	bl	8000f5c <Endeffector_Read_Status>
	Stamp = 0;
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <Endeffector_PlaceDown+0x68>)
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]
	i = 0;
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <Endeffector_PlaceDown+0x78>)
 8001428:	2200      	movs	r2, #0
 800142a:	801a      	strh	r2, [r3, #0]
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	200002c0 	.word	0x200002c0
 8001434:	200003b8 	.word	0x200003b8
 8001438:	20000020 	.word	0x20000020
 800143c:	200002f4 	.word	0x200002f4
 8001440:	200002c2 	.word	0x200002c2

08001444 <TestMode>:

void TestMode(){
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	switch(TestState){
 8001448:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <TestMode+0x7c>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b09      	cmp	r3, #9
 800144e:	d835      	bhi.n	80014bc <TestMode+0x78>
 8001450:	a201      	add	r2, pc, #4	; (adr r2, 8001458 <TestMode+0x14>)
 8001452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001456:	bf00      	nop
 8001458:	08001481 	.word	0x08001481
 800145c:	08001487 	.word	0x08001487
 8001460:	0800148d 	.word	0x0800148d
 8001464:	08001493 	.word	0x08001493
 8001468:	08001499 	.word	0x08001499
 800146c:	0800149f 	.word	0x0800149f
 8001470:	080014a5 	.word	0x080014a5
 8001474:	080014ab 	.word	0x080014ab
 8001478:	080014b1 	.word	0x080014b1
 800147c:	080014b7 	.word	0x080014b7
	case Read_Status:
		Endeffector_Read_Status();
 8001480:	f7ff fd6c 	bl	8000f5c <Endeffector_Read_Status>
		break;
 8001484:	e01a      	b.n	80014bc <TestMode+0x78>
	case SoftReset:
		Endeffector_SoftReset();
 8001486:	f7ff fdaf 	bl	8000fe8 <Endeffector_SoftReset>
		break;
 800148a:	e017      	b.n	80014bc <TestMode+0x78>
	case TestModeOn:
		Endeffector_TestModeOn();
 800148c:	f7ff fe66 	bl	800115c <Endeffector_TestModeOn>
		break;
 8001490:	e014      	b.n	80014bc <TestMode+0x78>
	case TestModeOff:
		Endeffector_TestModeOff();
 8001492:	f7ff fea1 	bl	80011d8 <Endeffector_TestModeOff>
		break;
 8001496:	e011      	b.n	80014bc <TestMode+0x78>
	case GripperModeOn:
		Endeffector_GripperModeOn();
 8001498:	f7ff fedc 	bl	8001254 <Endeffector_GripperModeOn>
		break;
 800149c:	e00e      	b.n	80014bc <TestMode+0x78>
	case PickUp:
		Endeffector_PickUp();
 800149e:	f7ff ff55 	bl	800134c <Endeffector_PickUp>
		break;
 80014a2:	e00b      	b.n	80014bc <TestMode+0x78>
	case PlaceDown:
		Endeffector_PlaceDown();
 80014a4:	f7ff ff90 	bl	80013c8 <Endeffector_PlaceDown>
		break;
 80014a8:	e008      	b.n	80014bc <TestMode+0x78>
	case GripperModeOff:
		Endeffector_GripperModeOff();
 80014aa:	f7ff ff11 	bl	80012d0 <Endeffector_GripperModeOff>
		break;
 80014ae:	e005      	b.n	80014bc <TestMode+0x78>
	case GripperEmerTrigger:
		Endeffector_EmergencyTrigger();
 80014b0:	f7ff fdd8 	bl	8001064 <Endeffector_EmergencyTrigger>
		break;
 80014b4:	e002      	b.n	80014bc <TestMode+0x78>
	case GripperEmerExit:
		Endeffector_EmergencyExit();
 80014b6:	f7ff fe13 	bl	80010e0 <Endeffector_EmergencyExit>
		break;
 80014ba:	bf00      	nop
	}
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	200002c4 	.word	0x200002c4

080014c4 <CheckJoystick>:
uint32_t VR[2] = {0};
int8_t flag = 0;
int16_t counter = 0;

void CheckJoystick()
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
	if ((VR[0] >= 1800) && (VR[0] <= 2200) && (VR[1] >= 1800) && (VR[1] <= 2200))
 80014c8:	4b36      	ldr	r3, [pc, #216]	; (80015a4 <CheckJoystick+0xe0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80014d0:	d317      	bcc.n	8001502 <CheckJoystick+0x3e>
 80014d2:	4b34      	ldr	r3, [pc, #208]	; (80015a4 <CheckJoystick+0xe0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f640 0298 	movw	r2, #2200	; 0x898
 80014da:	4293      	cmp	r3, r2
 80014dc:	d811      	bhi.n	8001502 <CheckJoystick+0x3e>
 80014de:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <CheckJoystick+0xe0>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80014e6:	d30c      	bcc.n	8001502 <CheckJoystick+0x3e>
 80014e8:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <CheckJoystick+0xe0>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f640 0298 	movw	r2, #2200	; 0x898
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d806      	bhi.n	8001502 <CheckJoystick+0x3e>
	{
	Joy.X = 0;
 80014f4:	4b2c      	ldr	r3, [pc, #176]	; (80015a8 <CheckJoystick+0xe4>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	801a      	strh	r2, [r3, #0]
	Joy.Y = 0;
 80014fa:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <CheckJoystick+0xe4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	805a      	strh	r2, [r3, #2]
 8001500:	e04b      	b.n	800159a <CheckJoystick+0xd6>
   }

  // down
	else if ((VR[0] <= 100) && (VR[1] <= 2200))
 8001502:	4b28      	ldr	r3, [pc, #160]	; (80015a4 <CheckJoystick+0xe0>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b64      	cmp	r3, #100	; 0x64
 8001508:	d80d      	bhi.n	8001526 <CheckJoystick+0x62>
 800150a:	4b26      	ldr	r3, [pc, #152]	; (80015a4 <CheckJoystick+0xe0>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f640 0298 	movw	r2, #2200	; 0x898
 8001512:	4293      	cmp	r3, r2
 8001514:	d807      	bhi.n	8001526 <CheckJoystick+0x62>
	{
	Joy.X = 0;
 8001516:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <CheckJoystick+0xe4>)
 8001518:	2200      	movs	r2, #0
 800151a:	801a      	strh	r2, [r3, #0]
	Joy.Y = -1;
 800151c:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <CheckJoystick+0xe4>)
 800151e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001522:	805a      	strh	r2, [r3, #2]
 8001524:	e039      	b.n	800159a <CheckJoystick+0xd6>
   }
 // up
  else if ((VR[0] >= 3900) && (VR[1] >= 2100))
 8001526:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <CheckJoystick+0xe0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f640 723b 	movw	r2, #3899	; 0xf3b
 800152e:	4293      	cmp	r3, r2
 8001530:	d90c      	bls.n	800154c <CheckJoystick+0x88>
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <CheckJoystick+0xe0>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f640 0233 	movw	r2, #2099	; 0x833
 800153a:	4293      	cmp	r3, r2
 800153c:	d906      	bls.n	800154c <CheckJoystick+0x88>
	{
	Joy.X = 0;
 800153e:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <CheckJoystick+0xe4>)
 8001540:	2200      	movs	r2, #0
 8001542:	801a      	strh	r2, [r3, #0]
	Joy.Y = 1;
 8001544:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <CheckJoystick+0xe4>)
 8001546:	2201      	movs	r2, #1
 8001548:	805a      	strh	r2, [r3, #2]
 800154a:	e026      	b.n	800159a <CheckJoystick+0xd6>
   }

  // left
  else if ((VR[0] <= 2100) && (VR[1] <= 1500))
 800154c:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <CheckJoystick+0xe0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f640 0234 	movw	r2, #2100	; 0x834
 8001554:	4293      	cmp	r3, r2
 8001556:	d80d      	bhi.n	8001574 <CheckJoystick+0xb0>
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <CheckJoystick+0xe0>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001560:	4293      	cmp	r3, r2
 8001562:	d807      	bhi.n	8001574 <CheckJoystick+0xb0>
	{
	Joy.X = -1;
 8001564:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <CheckJoystick+0xe4>)
 8001566:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800156a:	801a      	strh	r2, [r3, #0]
	Joy.Y = 0;
 800156c:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <CheckJoystick+0xe4>)
 800156e:	2200      	movs	r2, #0
 8001570:	805a      	strh	r2, [r3, #2]
 8001572:	e012      	b.n	800159a <CheckJoystick+0xd6>
   }

  // right
  else if ((VR[0] >= 1900) && (VR[1] >= 2100))
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <CheckJoystick+0xe0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f240 726b 	movw	r2, #1899	; 0x76b
 800157c:	4293      	cmp	r3, r2
 800157e:	d90c      	bls.n	800159a <CheckJoystick+0xd6>
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <CheckJoystick+0xe0>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f640 0233 	movw	r2, #2099	; 0x833
 8001588:	4293      	cmp	r3, r2
 800158a:	d906      	bls.n	800159a <CheckJoystick+0xd6>
   {
	Joy.X = 1;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <CheckJoystick+0xe4>)
 800158e:	2201      	movs	r2, #1
 8001590:	801a      	strh	r2, [r3, #0]
	Joy.Y = 0;
 8001592:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <CheckJoystick+0xe4>)
 8001594:	2200      	movs	r2, #0
 8001596:	805a      	strh	r2, [r3, #2]
   }
}
 8001598:	e7ff      	b.n	800159a <CheckJoystick+0xd6>
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	20000304 	.word	0x20000304
 80015a8:	200002f8 	.word	0x200002f8

080015ac <CheckButton>:

int CheckButton()
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	// Button 1
		if(Joy.B1Log == 0 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0){
 80015b0:	4b39      	ldr	r3, [pc, #228]	; (8001698 <CheckButton+0xec>)
 80015b2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10d      	bne.n	80015d6 <CheckButton+0x2a>
 80015ba:	2110      	movs	r1, #16
 80015bc:	4837      	ldr	r0, [pc, #220]	; (800169c <CheckButton+0xf0>)
 80015be:	f005 ffc5 	bl	800754c <HAL_GPIO_ReadPin>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d106      	bne.n	80015d6 <CheckButton+0x2a>
			Joy.status = 1;
 80015c8:	4b33      	ldr	r3, [pc, #204]	; (8001698 <CheckButton+0xec>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	809a      	strh	r2, [r3, #4]
			Joy.B1Log = 1;
 80015ce:	4b32      	ldr	r3, [pc, #200]	; (8001698 <CheckButton+0xec>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	80da      	strh	r2, [r3, #6]
 80015d4:	e024      	b.n	8001620 <CheckButton+0x74>
		}
		// Button 2
		else if(Joy.B2Log ==  0 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 0){
 80015d6:	4b30      	ldr	r3, [pc, #192]	; (8001698 <CheckButton+0xec>)
 80015d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d10d      	bne.n	80015fc <CheckButton+0x50>
 80015e0:	2101      	movs	r1, #1
 80015e2:	482f      	ldr	r0, [pc, #188]	; (80016a0 <CheckButton+0xf4>)
 80015e4:	f005 ffb2 	bl	800754c <HAL_GPIO_ReadPin>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d106      	bne.n	80015fc <CheckButton+0x50>
			Joy.status = 2;
 80015ee:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <CheckButton+0xec>)
 80015f0:	2202      	movs	r2, #2
 80015f2:	809a      	strh	r2, [r3, #4]
			Joy.B2Log = 1;
 80015f4:	4b28      	ldr	r3, [pc, #160]	; (8001698 <CheckButton+0xec>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	811a      	strh	r2, [r3, #8]
 80015fa:	e011      	b.n	8001620 <CheckButton+0x74>
	//		UpdatePosition();

		}
		// Button 3
		else if(Joy.B3Log ==  0 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == 0){
 80015fc:	4b26      	ldr	r3, [pc, #152]	; (8001698 <CheckButton+0xec>)
 80015fe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10c      	bne.n	8001620 <CheckButton+0x74>
 8001606:	2104      	movs	r1, #4
 8001608:	4826      	ldr	r0, [pc, #152]	; (80016a4 <CheckButton+0xf8>)
 800160a:	f005 ff9f 	bl	800754c <HAL_GPIO_ReadPin>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d105      	bne.n	8001620 <CheckButton+0x74>
			Joy.status = 3;
 8001614:	4b20      	ldr	r3, [pc, #128]	; (8001698 <CheckButton+0xec>)
 8001616:	2203      	movs	r2, #3
 8001618:	809a      	strh	r2, [r3, #4]
			Joy.B3Log = 1;
 800161a:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <CheckButton+0xec>)
 800161c:	2201      	movs	r2, #1
 800161e:	815a      	strh	r2, [r3, #10]
		}

		// Check log
		if(Joy.B1Log == 1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)){
 8001620:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <CheckButton+0xec>)
 8001622:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d10d      	bne.n	8001646 <CheckButton+0x9a>
 800162a:	2110      	movs	r1, #16
 800162c:	481b      	ldr	r0, [pc, #108]	; (800169c <CheckButton+0xf0>)
 800162e:	f005 ff8d 	bl	800754c <HAL_GPIO_ReadPin>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d006      	beq.n	8001646 <CheckButton+0x9a>
			Joy.status = 0;
 8001638:	4b17      	ldr	r3, [pc, #92]	; (8001698 <CheckButton+0xec>)
 800163a:	2200      	movs	r2, #0
 800163c:	809a      	strh	r2, [r3, #4]
			Joy.B1Log = 0;
 800163e:	4b16      	ldr	r3, [pc, #88]	; (8001698 <CheckButton+0xec>)
 8001640:	2200      	movs	r2, #0
 8001642:	80da      	strh	r2, [r3, #6]
 8001644:	e024      	b.n	8001690 <CheckButton+0xe4>
			// start
		}
		else if(Joy.B2Log == 1 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)){
 8001646:	4b14      	ldr	r3, [pc, #80]	; (8001698 <CheckButton+0xec>)
 8001648:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d10d      	bne.n	800166c <CheckButton+0xc0>
 8001650:	2101      	movs	r1, #1
 8001652:	4813      	ldr	r0, [pc, #76]	; (80016a0 <CheckButton+0xf4>)
 8001654:	f005 ff7a 	bl	800754c <HAL_GPIO_ReadPin>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d006      	beq.n	800166c <CheckButton+0xc0>
			Joy.status = 0;
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <CheckButton+0xec>)
 8001660:	2200      	movs	r2, #0
 8001662:	809a      	strh	r2, [r3, #4]
			Joy.B2Log = 0;
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <CheckButton+0xec>)
 8001666:	2200      	movs	r2, #0
 8001668:	811a      	strh	r2, [r3, #8]
 800166a:	e011      	b.n	8001690 <CheckButton+0xe4>
		}
		else if(Joy.B3Log == 1 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)){
 800166c:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <CheckButton+0xec>)
 800166e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d10c      	bne.n	8001690 <CheckButton+0xe4>
 8001676:	2104      	movs	r1, #4
 8001678:	480a      	ldr	r0, [pc, #40]	; (80016a4 <CheckButton+0xf8>)
 800167a:	f005 ff67 	bl	800754c <HAL_GPIO_ReadPin>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <CheckButton+0xe4>
			Joy.status = 0;
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <CheckButton+0xec>)
 8001686:	2200      	movs	r2, #0
 8001688:	809a      	strh	r2, [r3, #4]
			Joy.B3Log = 0;
 800168a:	4b03      	ldr	r3, [pc, #12]	; (8001698 <CheckButton+0xec>)
 800168c:	2200      	movs	r2, #0
 800168e:	815a      	strh	r2, [r3, #10]
		}

	return Joy.status;
 8001690:	4b01      	ldr	r3, [pc, #4]	; (8001698 <CheckButton+0xec>)
 8001692:	889b      	ldrh	r3, [r3, #4]
}
 8001694:	4618      	mov	r0, r3
 8001696:	bd80      	pop	{r7, pc}
 8001698:	200002f8 	.word	0x200002f8
 800169c:	40020000 	.word	0x40020000
 80016a0:	40020400 	.word	0x40020400
 80016a4:	40020800 	.word	0x40020800

080016a8 <InitKalmanStruct>:
extern arm_matrix_instance_f32 mat_P, mat_P_minus, mat_Q;
extern arm_matrix_instance_f32 mat_C, mat_R, mat_S, mat_K;
extern arm_matrix_instance_f32 mat_temp3x3A,mat_temp3x3B, mat_temp3x1,mat_temp1x3, mat_temp1x1;

void InitKalmanStruct(Kalman* KF,float32_t q,float32_t r)
{
 80016a8:	b5b0      	push	{r4, r5, r7, lr}
 80016aa:	b0a0      	sub	sp, #128	; 0x80
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80016b4:	edc7 0a01 	vstr	s1, [r7, #4]
	KF->R = r;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	655a      	str	r2, [r3, #84]	; 0x54
	KF->var_Q = q;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	68ba      	ldr	r2, [r7, #8]
 80016c2:	659a      	str	r2, [r3, #88]	; 0x58
	KF->D = 0;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	float32_t a[9] = {
 80016ce:	4b8d      	ldr	r3, [pc, #564]	; (8001904 <InitKalmanStruct+0x25c>)
 80016d0:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80016d4:	461d      	mov	r5, r3
 80016d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016de:	682b      	ldr	r3, [r5, #0]
 80016e0:	6023      	str	r3, [r4, #0]
			1.0, 0.001/2.5, 0.0000005/(2.5*2.5),
			0  , 1.0      , 0.001/2.5,
			0  , 0        , 1.0
	};
	float iden[9] = {
 80016e2:	4b89      	ldr	r3, [pc, #548]	; (8001908 <InitKalmanStruct+0x260>)
 80016e4:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80016e8:	461d      	mov	r5, r3
 80016ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016f2:	682b      	ldr	r3, [r5, #0]
 80016f4:	6023      	str	r3, [r4, #0]
			1.0, 0  , 0,
			0  , 1.0, 0,
			0  , 0  , 1.0
	};
	int i;
	for(i=0;i<9;i++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80016fa:	e023      	b.n	8001744 <InitKalmanStruct+0x9c>
	{
		KF->A[i] = a[i];
 80016fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	3380      	adds	r3, #128	; 0x80
 8001702:	443b      	add	r3, r7
 8001704:	3b28      	subs	r3, #40	; 0x28
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	68f9      	ldr	r1, [r7, #12]
 800170a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800170c:	3318      	adds	r3, #24
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	601a      	str	r2, [r3, #0]
		KF->I[i] = iden[i];
 8001714:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	3380      	adds	r3, #128	; 0x80
 800171a:	443b      	add	r3, r7
 800171c:	3b4c      	subs	r3, #76	; 0x4c
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	68f9      	ldr	r1, [r7, #12]
 8001722:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001724:	332e      	adds	r3, #46	; 0x2e
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	601a      	str	r2, [r3, #0]
		KF->P[i] = 0;
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001730:	3302      	adds	r3, #2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	3304      	adds	r3, #4
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
	for(i=0;i<9;i++)
 800173e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001740:	3301      	adds	r3, #1
 8001742:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001744:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001746:	2b08      	cmp	r3, #8
 8001748:	ddd8      	ble.n	80016fc <InitKalmanStruct+0x54>
	}
	float32_t b[3] = {
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001756:	f04f 0300 	mov.w	r3, #0
 800175a:	633b      	str	r3, [r7, #48]	; 0x30
			0, 0, 0
	};
	float32_t c[3] = {
 800175c:	f04f 0300 	mov.w	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
 8001762:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001766:	623b      	str	r3, [r7, #32]
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
			0, 1, 0
	};
	float32_t g[3] = {
 800176e:	4a67      	ldr	r2, [pc, #412]	; (800190c <InitKalmanStruct+0x264>)
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	ca07      	ldmia	r2, {r0, r1, r2}
 8001776:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0.001 * 0.001 * 0.001 / (6*2.5*2.5*2.5),
			0.0000005/(2.5*2.5),
			0.001/2.5
	};

	for(i=0;i<3;i++)
 800177a:	2300      	movs	r3, #0
 800177c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800177e:	e02e      	b.n	80017de <InitKalmanStruct+0x136>
	{
		KF->B[i] = b[i];
 8001780:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	3380      	adds	r3, #128	; 0x80
 8001786:	443b      	add	r3, r7
 8001788:	3b58      	subs	r3, #88	; 0x58
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68f9      	ldr	r1, [r7, #12]
 800178e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001790:	3320      	adds	r3, #32
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	440b      	add	r3, r1
 8001796:	3304      	adds	r3, #4
 8001798:	601a      	str	r2, [r3, #0]
		KF->C[i] = c[i];
 800179a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	3380      	adds	r3, #128	; 0x80
 80017a0:	443b      	add	r3, r7
 80017a2:	3b64      	subs	r3, #100	; 0x64
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68f9      	ldr	r1, [r7, #12]
 80017a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017aa:	3324      	adds	r3, #36	; 0x24
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	440b      	add	r3, r1
 80017b0:	601a      	str	r2, [r3, #0]
		KF->G[i] = g[i];
 80017b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	3380      	adds	r3, #128	; 0x80
 80017b8:	443b      	add	r3, r7
 80017ba:	3b70      	subs	r3, #112	; 0x70
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	68f9      	ldr	r1, [r7, #12]
 80017c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017c2:	3328      	adds	r3, #40	; 0x28
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	440b      	add	r3, r1
 80017c8:	601a      	str	r2, [r3, #0]
		KF->x_hat[i] = 0;
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
	for(i=0;i<3;i++)
 80017d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017da:	3301      	adds	r3, #1
 80017dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	ddcd      	ble.n	8001780 <InitKalmanStruct+0xd8>
	}

	  arm_mat_init_f32(&mat_A, 3, 3,KF->A);//3x3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	3360      	adds	r3, #96	; 0x60
 80017e8:	2203      	movs	r2, #3
 80017ea:	2103      	movs	r1, #3
 80017ec:	4848      	ldr	r0, [pc, #288]	; (8001910 <InitKalmanStruct+0x268>)
 80017ee:	f003 fecc 	bl	800558a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_x_hat, 3, 1, KF->x_hat);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2201      	movs	r2, #1
 80017f6:	2103      	movs	r1, #3
 80017f8:	4846      	ldr	r0, [pc, #280]	; (8001914 <InitKalmanStruct+0x26c>)
 80017fa:	f003 fec6 	bl	800558a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_x_hat_minus, 3, 1, KF->x_hat_minus);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	33dc      	adds	r3, #220	; 0xdc
 8001802:	2201      	movs	r2, #1
 8001804:	2103      	movs	r1, #3
 8001806:	4844      	ldr	r0, [pc, #272]	; (8001918 <InitKalmanStruct+0x270>)
 8001808:	f003 febf 	bl	800558a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_B, 3, 1, KF->B);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	3384      	adds	r3, #132	; 0x84
 8001810:	2201      	movs	r2, #1
 8001812:	2103      	movs	r1, #3
 8001814:	4841      	ldr	r0, [pc, #260]	; (800191c <InitKalmanStruct+0x274>)
 8001816:	f003 feb8 	bl	800558a <arm_mat_init_f32>
	  //arm_mat_init_f32(&mat_u, 1, 1, NULL);  // Set the input control vector if needed
	  arm_mat_init_f32(&mat_P, 3, 3, KF->P);//3x3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	330c      	adds	r3, #12
 800181e:	2203      	movs	r2, #3
 8001820:	2103      	movs	r1, #3
 8001822:	483f      	ldr	r0, [pc, #252]	; (8001920 <InitKalmanStruct+0x278>)
 8001824:	f003 feb1 	bl	800558a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_P_minus, 3, 3, KF->P_minus);//3x3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	33e8      	adds	r3, #232	; 0xe8
 800182c:	2203      	movs	r2, #3
 800182e:	2103      	movs	r1, #3
 8001830:	483c      	ldr	r0, [pc, #240]	; (8001924 <InitKalmanStruct+0x27c>)
 8001832:	f003 feaa 	bl	800558a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_Q, 3, 3,KF->Q);//3x3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	3330      	adds	r3, #48	; 0x30
 800183a:	2203      	movs	r2, #3
 800183c:	2103      	movs	r1, #3
 800183e:	483a      	ldr	r0, [pc, #232]	; (8001928 <InitKalmanStruct+0x280>)
 8001840:	f003 fea3 	bl	800558a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_C, 1, 3, KF->C);//1x3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	3390      	adds	r3, #144	; 0x90
 8001848:	2203      	movs	r2, #3
 800184a:	2101      	movs	r1, #1
 800184c:	4837      	ldr	r0, [pc, #220]	; (800192c <InitKalmanStruct+0x284>)
 800184e:	f003 fe9c 	bl	800558a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_R, 1, 1, &KF->R);//1x1
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	3354      	adds	r3, #84	; 0x54
 8001856:	2201      	movs	r2, #1
 8001858:	2101      	movs	r1, #1
 800185a:	4835      	ldr	r0, [pc, #212]	; (8001930 <InitKalmanStruct+0x288>)
 800185c:	f003 fe95 	bl	800558a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_S, 1, 1, KF->S);//1x1
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001866:	2201      	movs	r2, #1
 8001868:	2101      	movs	r1, #1
 800186a:	4832      	ldr	r0, [pc, #200]	; (8001934 <InitKalmanStruct+0x28c>)
 800186c:	f003 fe8d 	bl	800558a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_K, 3, 1, KF->K);//3x1
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001876:	2201      	movs	r2, #1
 8001878:	2103      	movs	r1, #3
 800187a:	482f      	ldr	r0, [pc, #188]	; (8001938 <InitKalmanStruct+0x290>)
 800187c:	f003 fe85 	bl	800558a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x3A, 3, 3, KF->temp3x3A);//3x3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8001886:	2203      	movs	r2, #3
 8001888:	2103      	movs	r1, #3
 800188a:	482c      	ldr	r0, [pc, #176]	; (800193c <InitKalmanStruct+0x294>)
 800188c:	f003 fe7d 	bl	800558a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x3B, 3, 3, KF->temp3x3B);//3x3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001896:	2203      	movs	r2, #3
 8001898:	2103      	movs	r1, #3
 800189a:	4829      	ldr	r0, [pc, #164]	; (8001940 <InitKalmanStruct+0x298>)
 800189c:	f003 fe75 	bl	800558a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x1, 3, 1, KF->temp3x1);//3x1
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80018a6:	2201      	movs	r2, #1
 80018a8:	2103      	movs	r1, #3
 80018aa:	4826      	ldr	r0, [pc, #152]	; (8001944 <InitKalmanStruct+0x29c>)
 80018ac:	f003 fe6d 	bl	800558a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp1x3, 1, 3, KF->temp1x3);//1x3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 80018b6:	2203      	movs	r2, #3
 80018b8:	2101      	movs	r1, #1
 80018ba:	4823      	ldr	r0, [pc, #140]	; (8001948 <InitKalmanStruct+0x2a0>)
 80018bc:	f003 fe65 	bl	800558a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp1x1, 1, 1, &KF->temp1x1);//1x1
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80018c6:	2201      	movs	r2, #1
 80018c8:	2101      	movs	r1, #1
 80018ca:	4820      	ldr	r0, [pc, #128]	; (800194c <InitKalmanStruct+0x2a4>)
 80018cc:	f003 fe5d 	bl	800558a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_G, 3, 1, KF->G);//3x1
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	33a0      	adds	r3, #160	; 0xa0
 80018d4:	2201      	movs	r2, #1
 80018d6:	2103      	movs	r1, #3
 80018d8:	481d      	ldr	r0, [pc, #116]	; (8001950 <InitKalmanStruct+0x2a8>)
 80018da:	f003 fe56 	bl	800558a <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_GT, 1, 3, KF->GT);//1x3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	33ac      	adds	r3, #172	; 0xac
 80018e2:	2203      	movs	r2, #3
 80018e4:	2101      	movs	r1, #1
 80018e6:	481b      	ldr	r0, [pc, #108]	; (8001954 <InitKalmanStruct+0x2ac>)
 80018e8:	f003 fe4f 	bl	800558a <arm_mat_init_f32>
	  arm_mat_init_f32(&eye, 3, 3, KF->I);//1x3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	33b8      	adds	r3, #184	; 0xb8
 80018f0:	2203      	movs	r2, #3
 80018f2:	2103      	movs	r1, #3
 80018f4:	4818      	ldr	r0, [pc, #96]	; (8001958 <InitKalmanStruct+0x2b0>)
 80018f6:	f003 fe48 	bl	800558a <arm_mat_init_f32>

}
 80018fa:	bf00      	nop
 80018fc:	3780      	adds	r7, #128	; 0x80
 80018fe:	46bd      	mov	sp, r7
 8001900:	bdb0      	pop	{r4, r5, r7, pc}
 8001902:	bf00      	nop
 8001904:	0800f3b0 	.word	0x0800f3b0
 8001908:	0800f3d4 	.word	0x0800f3d4
 800190c:	0800f3f8 	.word	0x0800f3f8
 8001910:	20000674 	.word	0x20000674
 8001914:	2000067c 	.word	0x2000067c
 8001918:	20000684 	.word	0x20000684
 800191c:	2000068c 	.word	0x2000068c
 8001920:	2000069c 	.word	0x2000069c
 8001924:	200006a4 	.word	0x200006a4
 8001928:	200006ac 	.word	0x200006ac
 800192c:	200006c4 	.word	0x200006c4
 8001930:	200006cc 	.word	0x200006cc
 8001934:	200006d4 	.word	0x200006d4
 8001938:	200006dc 	.word	0x200006dc
 800193c:	200006e4 	.word	0x200006e4
 8001940:	200006ec 	.word	0x200006ec
 8001944:	200006f4 	.word	0x200006f4
 8001948:	200006fc 	.word	0x200006fc
 800194c:	20000704 	.word	0x20000704
 8001950:	200006bc 	.word	0x200006bc
 8001954:	200006b4 	.word	0x200006b4
 8001958:	20000694 	.word	0x20000694

0800195c <kalman_filter>:

void kalman_filter()
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
    //Process model: x_hat_minus = mat_A*x_hat
    arm_mat_mult_f32(&mat_A, &mat_x_hat, &mat_x_hat_minus);			//A*X
 8001960:	4a39      	ldr	r2, [pc, #228]	; (8001a48 <kalman_filter+0xec>)
 8001962:	493a      	ldr	r1, [pc, #232]	; (8001a4c <kalman_filter+0xf0>)
 8001964:	483a      	ldr	r0, [pc, #232]	; (8001a50 <kalman_filter+0xf4>)
 8001966:	f004 f99f 	bl	8005ca8 <arm_mat_mult_f32>
    // If an input control vector is used:
    // arm_mat_mult_f32(&mat_B, &mat_u, &mat_temp3x3A);
    // arm_mat_add_f32(&mat_x_hat_minus, &mat_temp3x3A, &mat_x_hat_minus);

    // Predict covariance matrix: P_minus = A * P * A^T + Q
    arm_mat_trans_f32(&mat_A, &mat_temp3x3A);					    //AT
 800196a:	493a      	ldr	r1, [pc, #232]	; (8001a54 <kalman_filter+0xf8>)
 800196c:	4838      	ldr	r0, [pc, #224]	; (8001a50 <kalman_filter+0xf4>)
 800196e:	f004 fa86 	bl	8005e7e <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_A, &mat_P, &mat_temp3x3B);			    //A*P
 8001972:	4a39      	ldr	r2, [pc, #228]	; (8001a58 <kalman_filter+0xfc>)
 8001974:	4939      	ldr	r1, [pc, #228]	; (8001a5c <kalman_filter+0x100>)
 8001976:	4836      	ldr	r0, [pc, #216]	; (8001a50 <kalman_filter+0xf4>)
 8001978:	f004 f996 	bl	8005ca8 <arm_mat_mult_f32>
    arm_mat_mult_f32(&mat_temp3x3B, &mat_temp3x3A, &mat_P_minus);	//A*P*AT
 800197c:	4a38      	ldr	r2, [pc, #224]	; (8001a60 <kalman_filter+0x104>)
 800197e:	4935      	ldr	r1, [pc, #212]	; (8001a54 <kalman_filter+0xf8>)
 8001980:	4835      	ldr	r0, [pc, #212]	; (8001a58 <kalman_filter+0xfc>)
 8001982:	f004 f991 	bl	8005ca8 <arm_mat_mult_f32>
    arm_mat_trans_f32(&mat_G, &mat_GT);								//GT
 8001986:	4937      	ldr	r1, [pc, #220]	; (8001a64 <kalman_filter+0x108>)
 8001988:	4837      	ldr	r0, [pc, #220]	; (8001a68 <kalman_filter+0x10c>)
 800198a:	f004 fa78 	bl	8005e7e <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_G, &mat_GT, &mat_Q);						//G*GT
 800198e:	4a37      	ldr	r2, [pc, #220]	; (8001a6c <kalman_filter+0x110>)
 8001990:	4934      	ldr	r1, [pc, #208]	; (8001a64 <kalman_filter+0x108>)
 8001992:	4835      	ldr	r0, [pc, #212]	; (8001a68 <kalman_filter+0x10c>)
 8001994:	f004 f988 	bl	8005ca8 <arm_mat_mult_f32>
    arm_mat_scale_f32(&mat_Q,KF.var_Q, &mat_Q);						//G*GT*var_q
 8001998:	4b35      	ldr	r3, [pc, #212]	; (8001a70 <kalman_filter+0x114>)
 800199a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800199e:	4933      	ldr	r1, [pc, #204]	; (8001a6c <kalman_filter+0x110>)
 80019a0:	eeb0 0a67 	vmov.f32	s0, s15
 80019a4:	4831      	ldr	r0, [pc, #196]	; (8001a6c <kalman_filter+0x110>)
 80019a6:	f004 f9f9 	bl	8005d9c <arm_mat_scale_f32>
    arm_mat_add_f32(&mat_P_minus, &mat_Q, &mat_P_minus);			//A * P * A^T + Q
 80019aa:	4a2d      	ldr	r2, [pc, #180]	; (8001a60 <kalman_filter+0x104>)
 80019ac:	492f      	ldr	r1, [pc, #188]	; (8001a6c <kalman_filter+0x110>)
 80019ae:	482c      	ldr	r0, [pc, #176]	; (8001a60 <kalman_filter+0x104>)
 80019b0:	f003 fdb0 	bl	8005514 <arm_mat_add_f32>

    // Calculate innovation covariance: S = C * P_minus * C^T + R
    arm_mat_mult_f32(&mat_C, &mat_P_minus, &mat_temp1x3);			//C*P
 80019b4:	4a2f      	ldr	r2, [pc, #188]	; (8001a74 <kalman_filter+0x118>)
 80019b6:	492a      	ldr	r1, [pc, #168]	; (8001a60 <kalman_filter+0x104>)
 80019b8:	482f      	ldr	r0, [pc, #188]	; (8001a78 <kalman_filter+0x11c>)
 80019ba:	f004 f975 	bl	8005ca8 <arm_mat_mult_f32>
    arm_mat_trans_f32(&mat_C, &mat_temp3x1);						//CT
 80019be:	492f      	ldr	r1, [pc, #188]	; (8001a7c <kalman_filter+0x120>)
 80019c0:	482d      	ldr	r0, [pc, #180]	; (8001a78 <kalman_filter+0x11c>)
 80019c2:	f004 fa5c 	bl	8005e7e <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_temp1x3, &mat_temp3x1, &mat_temp1x1);		//C*P*C^T
 80019c6:	4a2e      	ldr	r2, [pc, #184]	; (8001a80 <kalman_filter+0x124>)
 80019c8:	492c      	ldr	r1, [pc, #176]	; (8001a7c <kalman_filter+0x120>)
 80019ca:	482a      	ldr	r0, [pc, #168]	; (8001a74 <kalman_filter+0x118>)
 80019cc:	f004 f96c 	bl	8005ca8 <arm_mat_mult_f32>
    arm_mat_add_f32(&mat_temp1x1, &mat_R, &mat_S);					//C*P*C^T + R
 80019d0:	4a2c      	ldr	r2, [pc, #176]	; (8001a84 <kalman_filter+0x128>)
 80019d2:	492d      	ldr	r1, [pc, #180]	; (8001a88 <kalman_filter+0x12c>)
 80019d4:	482a      	ldr	r0, [pc, #168]	; (8001a80 <kalman_filter+0x124>)
 80019d6:	f003 fd9d 	bl	8005514 <arm_mat_add_f32>

    //==> Calculate Kalman gain: K = P_minus * C^T * S^(-1)
    arm_mat_inverse_f32(&mat_S, &mat_temp1x1);						//inv(S)
 80019da:	4929      	ldr	r1, [pc, #164]	; (8001a80 <kalman_filter+0x124>)
 80019dc:	4829      	ldr	r0, [pc, #164]	; (8001a84 <kalman_filter+0x128>)
 80019de:	f003 fdec 	bl	80055ba <arm_mat_inverse_f32>
    arm_mat_mult_f32(&mat_P_minus, &mat_temp3x1, &mat_temp3x3A);	//P*CT
 80019e2:	4a1c      	ldr	r2, [pc, #112]	; (8001a54 <kalman_filter+0xf8>)
 80019e4:	4925      	ldr	r1, [pc, #148]	; (8001a7c <kalman_filter+0x120>)
 80019e6:	481e      	ldr	r0, [pc, #120]	; (8001a60 <kalman_filter+0x104>)
 80019e8:	f004 f95e 	bl	8005ca8 <arm_mat_mult_f32>
    arm_mat_mult_f32(&mat_temp3x3A, &mat_temp1x1, &mat_K);			//P*CT*inv(S)
 80019ec:	4a27      	ldr	r2, [pc, #156]	; (8001a8c <kalman_filter+0x130>)
 80019ee:	4924      	ldr	r1, [pc, #144]	; (8001a80 <kalman_filter+0x124>)
 80019f0:	4818      	ldr	r0, [pc, #96]	; (8001a54 <kalman_filter+0xf8>)
 80019f2:	f004 f959 	bl	8005ca8 <arm_mat_mult_f32>

    //==> Update state estimate: x_hat = x_hat_minus + K * (z - C * x_hat_minus)
    arm_mat_mult_f32(&mat_C, &mat_x_hat_minus, &mat_temp1x1);		//C*X
 80019f6:	4a22      	ldr	r2, [pc, #136]	; (8001a80 <kalman_filter+0x124>)
 80019f8:	4913      	ldr	r1, [pc, #76]	; (8001a48 <kalman_filter+0xec>)
 80019fa:	481f      	ldr	r0, [pc, #124]	; (8001a78 <kalman_filter+0x11c>)
 80019fc:	f004 f954 	bl	8005ca8 <arm_mat_mult_f32>
    //float32_t innovation = z - temp1x1;								//Z-C*X
    arm_mat_scale_f32(&mat_K, KF.z - KF.temp1x1, &mat_temp3x1);			//K*(Z-C*X)
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <kalman_filter+0x114>)
 8001a02:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8001a06:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <kalman_filter+0x114>)
 8001a08:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
 8001a0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a10:	491a      	ldr	r1, [pc, #104]	; (8001a7c <kalman_filter+0x120>)
 8001a12:	eeb0 0a67 	vmov.f32	s0, s15
 8001a16:	481d      	ldr	r0, [pc, #116]	; (8001a8c <kalman_filter+0x130>)
 8001a18:	f004 f9c0 	bl	8005d9c <arm_mat_scale_f32>
    arm_mat_add_f32(&mat_x_hat_minus, &mat_temp3x1, &mat_x_hat);	//X - K*(Z-C*X) ========> X estimate
 8001a1c:	4a0b      	ldr	r2, [pc, #44]	; (8001a4c <kalman_filter+0xf0>)
 8001a1e:	4917      	ldr	r1, [pc, #92]	; (8001a7c <kalman_filter+0x120>)
 8001a20:	4809      	ldr	r0, [pc, #36]	; (8001a48 <kalman_filter+0xec>)
 8001a22:	f003 fd77 	bl	8005514 <arm_mat_add_f32>

    // Update covariance matrix: P = (I - K * C) * P_minus
    arm_mat_mult_f32(&mat_K, &mat_C, &mat_temp3x3B);				//K*C
 8001a26:	4a0c      	ldr	r2, [pc, #48]	; (8001a58 <kalman_filter+0xfc>)
 8001a28:	4913      	ldr	r1, [pc, #76]	; (8001a78 <kalman_filter+0x11c>)
 8001a2a:	4818      	ldr	r0, [pc, #96]	; (8001a8c <kalman_filter+0x130>)
 8001a2c:	f004 f93c 	bl	8005ca8 <arm_mat_mult_f32>
    arm_mat_sub_f32(&eye, &mat_P_minus, &mat_temp3x3A);				//I - K*C
 8001a30:	4a08      	ldr	r2, [pc, #32]	; (8001a54 <kalman_filter+0xf8>)
 8001a32:	490b      	ldr	r1, [pc, #44]	; (8001a60 <kalman_filter+0x104>)
 8001a34:	4816      	ldr	r0, [pc, #88]	; (8001a90 <kalman_filter+0x134>)
 8001a36:	f004 f9e7 	bl	8005e08 <arm_mat_sub_f32>
    arm_mat_mult_f32(&mat_temp3x3A, &mat_P_minus, &mat_P);			//(I - K*C)*P ===========> P estimate
 8001a3a:	4a08      	ldr	r2, [pc, #32]	; (8001a5c <kalman_filter+0x100>)
 8001a3c:	4908      	ldr	r1, [pc, #32]	; (8001a60 <kalman_filter+0x104>)
 8001a3e:	4805      	ldr	r0, [pc, #20]	; (8001a54 <kalman_filter+0xf8>)
 8001a40:	f004 f932 	bl	8005ca8 <arm_mat_mult_f32>
}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000684 	.word	0x20000684
 8001a4c:	2000067c 	.word	0x2000067c
 8001a50:	20000674 	.word	0x20000674
 8001a54:	200006e4 	.word	0x200006e4
 8001a58:	200006ec 	.word	0x200006ec
 8001a5c:	2000069c 	.word	0x2000069c
 8001a60:	200006a4 	.word	0x200006a4
 8001a64:	200006b4 	.word	0x200006b4
 8001a68:	200006bc 	.word	0x200006bc
 8001a6c:	200006ac 	.word	0x200006ac
 8001a70:	200004f4 	.word	0x200004f4
 8001a74:	200006fc 	.word	0x200006fc
 8001a78:	200006c4 	.word	0x200006c4
 8001a7c:	200006f4 	.word	0x200006f4
 8001a80:	20000704 	.word	0x20000704
 8001a84:	200006d4 	.word	0x200006d4
 8001a88:	200006cc 	.word	0x200006cc
 8001a8c:	200006dc 	.word	0x200006dc
 8001a90:	20000694 	.word	0x20000694

08001a94 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001a9c:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <modbus_1t5_Timeout+0x1c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	751a      	strb	r2, [r3, #20]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	2000030c 	.word	0x2000030c

08001ab4 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001abc:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <modbus_3t5_Timeout+0x1c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	755a      	strb	r2, [r3, #21]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	2000030c 	.word	0x2000030c

08001ad4 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <modbus_UART_Recived+0x60>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8001ae6:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <modbus_UART_Recived+0x60>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8001aee:	1c59      	adds	r1, r3, #1
 8001af0:	b289      	uxth	r1, r1
 8001af2:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8001af6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001afa:	d210      	bcs.n	8001b1e <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001afc:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <modbus_UART_Recived+0x60>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68d8      	ldr	r0, [r3, #12]
 8001b02:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <modbus_UART_Recived+0x60>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <modbus_UART_Recived+0x60>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001b0e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001b12:	4413      	add	r3, r2
 8001b14:	3302      	adds	r3, #2
 8001b16:	2201      	movs	r2, #1
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f009 ff1b 	bl	800b954 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001b1e:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <modbus_UART_Recived+0x60>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2200      	movs	r2, #0
 8001b28:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	2000030c 	.word	0x2000030c

08001b38 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001b42:	4a24      	ldr	r2, [pc, #144]	; (8001bd4 <Modbus_init+0x9c>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8001b48:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <Modbus_init+0x9c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8001b50:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <Modbus_init+0x9c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	4a20      	ldr	r2, [pc, #128]	; (8001bd8 <Modbus_init+0xa0>)
 8001b58:	2114      	movs	r1, #20
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f009 f8fe 	bl	800ad5c <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001b60:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <Modbus_init+0x9c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	4a1d      	ldr	r2, [pc, #116]	; (8001bdc <Modbus_init+0xa4>)
 8001b68:	210e      	movs	r1, #14
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f009 f8f6 	bl	800ad5c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8001b70:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <Modbus_init+0x9c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	4a1a      	ldr	r2, [pc, #104]	; (8001be0 <Modbus_init+0xa8>)
 8001b78:	2103      	movs	r1, #3
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f009 fe42 	bl	800b804 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001b80:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <Modbus_init+0x9c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68d8      	ldr	r0, [r3, #12]
 8001b86:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <Modbus_init+0x9c>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <Modbus_init+0x9c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001b92:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001b96:	4413      	add	r3, r2
 8001b98:	3302      	adds	r3, #2
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f009 fed9 	bl	800b954 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <Modbus_init+0x9c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d10c      	bne.n	8001bcc <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001bb2:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <Modbus_init+0x9c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f008 f979 	bl	8009eb0 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001bbe:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <Modbus_init+0x9c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f008 fbb8 	bl	800a33c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	2000030c 	.word	0x2000030c
 8001bd8:	08001a95 	.word	0x08001a95
 8001bdc:	08001ab5 	.word	0x08001ab5
 8001be0:	08001ad5 	.word	0x08001ad5

08001be4 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001bf0:	23ff      	movs	r3, #255	; 0xff
 8001bf2:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001bf4:	23ff      	movs	r3, #255	; 0xff
 8001bf6:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001bf8:	e013      	b.n	8001c22 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	607a      	str	r2, [r7, #4]
 8001c00:	781a      	ldrb	r2, [r3, #0]
 8001c02:	7bbb      	ldrb	r3, [r7, #14]
 8001c04:	4053      	eors	r3, r2
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001c0a:	4a0f      	ldr	r2, [pc, #60]	; (8001c48 <CRC16+0x64>)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4413      	add	r3, r2
 8001c10:	781a      	ldrb	r2, [r3, #0]
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	4053      	eors	r3, r2
 8001c16:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001c18:	4a0c      	ldr	r2, [pc, #48]	; (8001c4c <CRC16+0x68>)
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001c22:	883b      	ldrh	r3, [r7, #0]
 8001c24:	1e5a      	subs	r2, r3, #1
 8001c26:	803a      	strh	r2, [r7, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1e6      	bne.n	8001bfa <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	021b      	lsls	r3, r3, #8
 8001c30:	b21a      	sxth	r2, r3
 8001c32:	7bbb      	ldrb	r3, [r7, #14]
 8001c34:	b21b      	sxth	r3, r3
 8001c36:	4313      	orrs	r3, r2
 8001c38:	b21b      	sxth	r3, r3
 8001c3a:	b29b      	uxth	r3, r3
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	20000124 	.word	0x20000124
 8001c4c:	20000024 	.word	0x20000024

08001c50 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8001c56:	4b81      	ldr	r3, [pc, #516]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	7e1b      	ldrb	r3, [r3, #24]
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d80a      	bhi.n	8001c78 <Modbus_Protocal_Worker+0x28>
 8001c62:	a201      	add	r2, pc, #4	; (adr r2, 8001c68 <Modbus_Protocal_Worker+0x18>)
 8001c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c68:	08001c83 	.word	0x08001c83
 8001c6c:	08001e23 	.word	0x08001e23
 8001c70:	08001d0f 	.word	0x08001d0f
 8001c74:	08001d35 	.word	0x08001d35
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001c78:	4b78      	ldr	r3, [pc, #480]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	761a      	strb	r2, [r3, #24]
		break;
 8001c80:	e0e8      	b.n	8001e54 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8001c82:	4b76      	ldr	r3, [pc, #472]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8001c8e:	f000 f9dd 	bl	800204c <Modbus_Emission>
 8001c92:	e01c      	b.n	8001cce <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8001c94:	4b71      	ldr	r3, [pc, #452]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	7d9b      	ldrb	r3, [r3, #22]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d017      	beq.n	8001cce <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001c9e:	4b6f      	ldr	r3, [pc, #444]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001ca6:	4b6d      	ldr	r3, [pc, #436]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2200      	movs	r2, #0
 8001cac:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8001cae:	4b6b      	ldr	r3, [pc, #428]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b68      	ldr	r3, [pc, #416]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f042 0201 	orr.w	r2, r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8001cc6:	4b65      	ldr	r3, [pc, #404]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2203      	movs	r2, #3
 8001ccc:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001cce:	4b63      	ldr	r3, [pc, #396]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b20      	cmp	r3, #32
 8001cdc:	f040 80b3 	bne.w	8001e46 <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001ce0:	4b5e      	ldr	r3, [pc, #376]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001cea:	4b5c      	ldr	r3, [pc, #368]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68d8      	ldr	r0, [r3, #12]
 8001cf0:	4b5a      	ldr	r3, [pc, #360]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b59      	ldr	r3, [pc, #356]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001cfc:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001d00:	4413      	add	r3, r2
 8001d02:	3302      	adds	r3, #2
 8001d04:	2201      	movs	r2, #1
 8001d06:	4619      	mov	r1, r3
 8001d08:	f009 fe24 	bl	800b954 <HAL_UART_Receive_IT>
		}
		break;
 8001d0c:	e09b      	b.n	8001e46 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001d0e:	4b53      	ldr	r3, [pc, #332]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	7d1b      	ldrb	r3, [r3, #20]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 8098 	beq.w	8001e4a <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8001d1a:	4b50      	ldr	r3, [pc, #320]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001d22:	4b4e      	ldr	r3, [pc, #312]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	22fe      	movs	r2, #254	; 0xfe
 8001d28:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001d2a:	4b4c      	ldr	r3, [pc, #304]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2204      	movs	r2, #4
 8001d30:	761a      	strb	r2, [r3, #24]
		}
		break;
 8001d32:	e08a      	b.n	8001e4a <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8001d34:	4b49      	ldr	r3, [pc, #292]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	7d9b      	ldrb	r3, [r3, #22]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d009      	beq.n	8001d52 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 8001d3e:	4b47      	ldr	r3, [pc, #284]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d103      	bne.n	8001d52 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001d4a:	4b44      	ldr	r3, [pc, #272]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	22ff      	movs	r2, #255	; 0xff
 8001d50:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001d52:	4b42      	ldr	r3, [pc, #264]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001d5a:	f113 0f02 	cmn.w	r3, #2
 8001d5e:	d150      	bne.n	8001e02 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001d60:	4b3e      	ldr	r3, [pc, #248]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2200      	movs	r2, #0
 8001d66:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001d68:	4b3c      	ldr	r3, [pc, #240]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f203 2272 	addw	r2, r3, #626	; 0x272
 8001d70:	4b3a      	ldr	r3, [pc, #232]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001d78:	3b02      	subs	r3, #2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	f7ff ff31 	bl	8001be4 <CRC16>
 8001d82:	4603      	mov	r3, r0
 8001d84:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001d86:	793a      	ldrb	r2, [r7, #4]
 8001d88:	4b34      	ldr	r3, [pc, #208]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d8a:	6819      	ldr	r1, [r3, #0]
 8001d8c:	4b33      	ldr	r3, [pc, #204]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001d94:	3b02      	subs	r3, #2
 8001d96:	440b      	add	r3, r1
 8001d98:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d10c      	bne.n	8001dba <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001da0:	797a      	ldrb	r2, [r7, #5]
 8001da2:	4b2e      	ldr	r3, [pc, #184]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001da4:	6819      	ldr	r1, [r3, #0]
 8001da6:	4b2d      	ldr	r3, [pc, #180]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001dae:	3b01      	subs	r3, #1
 8001db0:	440b      	add	r3, r1
 8001db2:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d004      	beq.n	8001dc4 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001dba:	4b28      	ldr	r3, [pc, #160]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	22ff      	movs	r2, #255	; 0xff
 8001dc0:	75da      	strb	r2, [r3, #23]
				break;
 8001dc2:	e047      	b.n	8001e54 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001dc4:	4b25      	ldr	r3, [pc, #148]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001dcc:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d113      	bne.n	8001dfe <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001dd6:	4b21      	ldr	r3, [pc, #132]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001dde:	4b1f      	ldr	r3, [pc, #124]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 8001de6:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001de8:	4b1c      	ldr	r3, [pc, #112]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001df0:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001df2:	461a      	mov	r2, r3
 8001df4:	f00a ff70 	bl	800ccd8 <memcpy>

			//execute command
			Modbus_frame_response();
 8001df8:	f000 f910 	bl	800201c <Modbus_frame_response>
 8001dfc:	e001      	b.n	8001e02 <Modbus_Protocal_Worker+0x1b2>
				break;
 8001dfe:	bf00      	nop
					}
		break;


	}
}
 8001e00:	e028      	b.n	8001e54 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8001e02:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	7d5b      	ldrb	r3, [r3, #21]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d020      	beq.n	8001e4e <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001e0c:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2201      	movs	r2, #1
 8001e12:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001e14:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f009 fe48 	bl	800bab0 <HAL_UART_AbortReceive>
		break;
 8001e20:	e015      	b.n	8001e4e <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b20      	cmp	r3, #32
 8001e30:	d10f      	bne.n	8001e52 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8001e3c:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <Modbus_Protocal_Worker+0x20c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2201      	movs	r2, #1
 8001e42:	761a      	strb	r2, [r3, #24]
		break;
 8001e44:	e005      	b.n	8001e52 <Modbus_Protocal_Worker+0x202>
		break;
 8001e46:	bf00      	nop
 8001e48:	e004      	b.n	8001e54 <Modbus_Protocal_Worker+0x204>
		break;
 8001e4a:	bf00      	nop
 8001e4c:	e002      	b.n	8001e54 <Modbus_Protocal_Worker+0x204>
		break;
 8001e4e:	bf00      	nop
 8001e50:	e000      	b.n	8001e54 <Modbus_Protocal_Worker+0x204>
		break;
 8001e52:	bf00      	nop
}
 8001e54:	bf00      	nop
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	2000030c 	.word	0x2000030c

08001e60 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001e66:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <modbusWrite1Register+0x80>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	7e9b      	ldrb	r3, [r3, #26]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <modbusWrite1Register+0x80>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	7edb      	ldrb	r3, [r3, #27]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8001e7e:	88fa      	ldrh	r2, [r7, #6]
 8001e80:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <modbusWrite1Register+0x80>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d903      	bls.n	8001e92 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001e8a:	2002      	movs	r0, #2
 8001e8c:	f000 f8a4 	bl	8001fd8 <ModbusErrorReply>
			 return;
 8001e90:	e023      	b.n	8001eda <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001e92:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <modbusWrite1Register+0x80>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <modbusWrite1Register+0x80>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6859      	ldr	r1, [r3, #4]
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	440b      	add	r3, r1
 8001ea2:	7f12      	ldrb	r2, [r2, #28]
 8001ea4:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <modbusWrite1Register+0x80>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <modbusWrite1Register+0x80>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6859      	ldr	r1, [r3, #4]
 8001eb0:	88fb      	ldrh	r3, [r7, #6]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	440b      	add	r3, r1
 8001eb6:	7f52      	ldrb	r2, [r2, #29]
 8001eb8:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001eba:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <modbusWrite1Register+0x80>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 8001ec2:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <modbusWrite1Register+0x80>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8001ec8:	2208      	movs	r2, #8
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f00a ff04 	bl	800ccd8 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001ed0:	4b03      	ldr	r3, [pc, #12]	; (8001ee0 <modbusWrite1Register+0x80>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2205      	movs	r2, #5
 8001ed6:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	2000030c 	.word	0x2000030c

08001ee4 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001ee4:	b590      	push	{r4, r7, lr}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001eea:	4b3a      	ldr	r3, [pc, #232]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	7f1b      	ldrb	r3, [r3, #28]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	021b      	lsls	r3, r3, #8
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	4b37      	ldr	r3, [pc, #220]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	7f5b      	ldrb	r3, [r3, #29]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	4413      	add	r3, r2
 8001f00:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001f02:	4b34      	ldr	r3, [pc, #208]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	7e9b      	ldrb	r3, [r3, #26]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	021b      	lsls	r3, r3, #8
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	4b31      	ldr	r3, [pc, #196]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	7edb      	ldrb	r3, [r3, #27]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	4413      	add	r3, r2
 8001f18:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001f1a:	88fb      	ldrh	r3, [r7, #6]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <modbusRead1Register+0x42>
 8001f20:	88fb      	ldrh	r3, [r7, #6]
 8001f22:	2b7d      	cmp	r3, #125	; 0x7d
 8001f24:	d903      	bls.n	8001f2e <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001f26:	2003      	movs	r0, #3
 8001f28:	f000 f856 	bl	8001fd8 <ModbusErrorReply>
		 return;
 8001f2c:	e04e      	b.n	8001fcc <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8001f2e:	88ba      	ldrh	r2, [r7, #4]
 8001f30:	4b28      	ldr	r3, [pc, #160]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d808      	bhi.n	8001f4c <modbusRead1Register+0x68>
 8001f3a:	88ba      	ldrh	r2, [r7, #4]
 8001f3c:	88fb      	ldrh	r3, [r7, #6]
 8001f3e:	4413      	add	r3, r2
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d903      	bls.n	8001f54 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001f4c:	2002      	movs	r0, #2
 8001f4e:	f000 f843 	bl	8001fd8 <ModbusErrorReply>
		 return;
 8001f52:	e03b      	b.n	8001fcc <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001f54:	4b1f      	ldr	r3, [pc, #124]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2203      	movs	r2, #3
 8001f5a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001f5e:	88fb      	ldrh	r3, [r7, #6]
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	0052      	lsls	r2, r2, #1
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001f6e:	2400      	movs	r4, #0
 8001f70:	e020      	b.n	8001fb4 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001f72:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	88bb      	ldrh	r3, [r7, #4]
 8001f7a:	4423      	add	r3, r4
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	18d1      	adds	r1, r2, r3
 8001f80:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	1c63      	adds	r3, r4, #1
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	7849      	ldrb	r1, [r1, #1]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	460a      	mov	r2, r1
 8001f8e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001f92:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	88bb      	ldrh	r3, [r7, #4]
 8001f9a:	4423      	add	r3, r4
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	18d1      	adds	r1, r2, r3
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	0063      	lsls	r3, r4, #1
 8001fa6:	3303      	adds	r3, #3
 8001fa8:	7809      	ldrb	r1, [r1, #0]
 8001faa:	4413      	add	r3, r2
 8001fac:	460a      	mov	r2, r1
 8001fae:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8001fb2:	3401      	adds	r4, #1
 8001fb4:	88fb      	ldrh	r3, [r7, #6]
 8001fb6:	429c      	cmp	r4, r3
 8001fb8:	dbdb      	blt.n	8001f72 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <modbusRead1Register+0xf0>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	0052      	lsls	r2, r2, #1
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd90      	pop	{r4, r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	2000030c 	.word	0x2000030c

08001fd8 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <ModbusErrorReply+0x40>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	7e5a      	ldrb	r2, [r3, #25]
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <ModbusErrorReply+0x40>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <ModbusErrorReply+0x40>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	79fa      	ldrb	r2, [r7, #7]
 8001ffc:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8002000:	4b05      	ldr	r3, [pc, #20]	; (8002018 <ModbusErrorReply+0x40>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2202      	movs	r2, #2
 8002006:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	2000030c 	.word	0x2000030c

0800201c <Modbus_frame_response>:

void Modbus_frame_response()
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8002020:	4b09      	ldr	r3, [pc, #36]	; (8002048 <Modbus_frame_response+0x2c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	7e5b      	ldrb	r3, [r3, #25]
 8002026:	2b03      	cmp	r3, #3
 8002028:	d004      	beq.n	8002034 <Modbus_frame_response+0x18>
 800202a:	2b06      	cmp	r3, #6
 800202c:	d105      	bne.n	800203a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800202e:	f7ff ff17 	bl	8001e60 <modbusWrite1Register>
		break;
 8002032:	e006      	b.n	8002042 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8002034:	f7ff ff56 	bl	8001ee4 <modbusRead1Register>
		break;
 8002038:	e003      	b.n	8002042 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800203a:	2001      	movs	r0, #1
 800203c:	f7ff ffcc 	bl	8001fd8 <ModbusErrorReply>
		break;
 8002040:	bf00      	nop

	}
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	2000030c 	.word	0x2000030c

0800204c <Modbus_Emission>:

void Modbus_Emission()
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002052:	4b3d      	ldr	r3, [pc, #244]	; (8002148 <Modbus_Emission+0xfc>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b20      	cmp	r3, #32
 8002060:	d15e      	bne.n	8002120 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8002062:	4b39      	ldr	r3, [pc, #228]	; (8002148 <Modbus_Emission+0xfc>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	4b38      	ldr	r3, [pc, #224]	; (8002148 <Modbus_Emission+0xfc>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	7812      	ldrb	r2, [r2, #0]
 800206c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8002070:	4b35      	ldr	r3, [pc, #212]	; (8002148 <Modbus_Emission+0xfc>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8002078:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800207a:	4b33      	ldr	r3, [pc, #204]	; (8002148 <Modbus_Emission+0xfc>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 8002082:	4b31      	ldr	r3, [pc, #196]	; (8002148 <Modbus_Emission+0xfc>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 800208a:	461a      	mov	r2, r3
 800208c:	f00a fe24 	bl	800ccd8 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8002090:	4b2d      	ldr	r3, [pc, #180]	; (8002148 <Modbus_Emission+0xfc>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8002098:	b29a      	uxth	r2, r3
 800209a:	4b2b      	ldr	r3, [pc, #172]	; (8002148 <Modbus_Emission+0xfc>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	3203      	adds	r2, #3
 80020a0:	b292      	uxth	r2, r2
 80020a2:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80020a6:	4b28      	ldr	r3, [pc, #160]	; (8002148 <Modbus_Emission+0xfc>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80020ae:	4b26      	ldr	r3, [pc, #152]	; (8002148 <Modbus_Emission+0xfc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80020b6:	3b02      	subs	r3, #2
 80020b8:	4619      	mov	r1, r3
 80020ba:	4610      	mov	r0, r2
 80020bc:	f7ff fd92 	bl	8001be4 <CRC16>
 80020c0:	4603      	mov	r3, r0
 80020c2:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80020c4:	4b20      	ldr	r3, [pc, #128]	; (8002148 <Modbus_Emission+0xfc>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4b1f      	ldr	r3, [pc, #124]	; (8002148 <Modbus_Emission+0xfc>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80020d0:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80020d2:	7939      	ldrb	r1, [r7, #4]
 80020d4:	4413      	add	r3, r2
 80020d6:	460a      	mov	r2, r1
 80020d8:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80020dc:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <Modbus_Emission+0xfc>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4b19      	ldr	r3, [pc, #100]	; (8002148 <Modbus_Emission+0xfc>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80020e8:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80020ea:	7979      	ldrb	r1, [r7, #5]
 80020ec:	4413      	add	r3, r2
 80020ee:	460a      	mov	r2, r1
 80020f0:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80020f4:	4b14      	ldr	r3, [pc, #80]	; (8002148 <Modbus_Emission+0xfc>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b20      	cmp	r3, #32
 8002102:	d10d      	bne.n	8002120 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8002104:	4b10      	ldr	r3, [pc, #64]	; (8002148 <Modbus_Emission+0xfc>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 800210a:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <Modbus_Emission+0xfc>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8002112:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <Modbus_Emission+0xfc>)
 8002114:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8002116:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800211a:	461a      	mov	r2, r3
 800211c:	f009 fc4a 	bl	800b9b4 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8002120:	4b09      	ldr	r3, [pc, #36]	; (8002148 <Modbus_Emission+0xfc>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2200      	movs	r2, #0
 8002126:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8002128:	4b07      	ldr	r3, [pc, #28]	; (8002148 <Modbus_Emission+0xfc>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2200      	movs	r2, #0
 800212e:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <Modbus_Emission+0xfc>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2200      	movs	r2, #0
 8002136:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8002138:	4b03      	ldr	r3, [pc, #12]	; (8002148 <Modbus_Emission+0xfc>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2202      	movs	r2, #2
 800213e:	761a      	strb	r2, [r3, #24]
}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	2000030c 	.word	0x2000030c

0800214c <PIDSetup>:
 */

#include "PIDController.h"

void PIDSetup(PID* temp,float32_t Kp, float32_t Ki, float32_t Kd, float32_t tolerance)
{
 800214c:	b480      	push	{r7}
 800214e:	b087      	sub	sp, #28
 8002150:	af00      	add	r7, sp, #0
 8002152:	6178      	str	r0, [r7, #20]
 8002154:	ed87 0a04 	vstr	s0, [r7, #16]
 8002158:	edc7 0a03 	vstr	s1, [r7, #12]
 800215c:	ed87 1a02 	vstr	s2, [r7, #8]
 8002160:	edc7 1a01 	vstr	s3, [r7, #4]
	temp->Kp = Kp;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	601a      	str	r2, [r3, #0]
	temp->Ki = Ki;
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	605a      	str	r2, [r3, #4]
	temp->Kd = Kd;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	609a      	str	r2, [r3, #8]
	temp->tolerance = tolerance;
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	629a      	str	r2, [r3, #40]	; 0x28
	temp->U = 0;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	2200      	movs	r2, #0
 8002180:	60da      	str	r2, [r3, #12]
	temp->Delta_U = 0;
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	2200      	movs	r2, #0
 8002186:	611a      	str	r2, [r3, #16]
	temp->U_minus = 0;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	2200      	movs	r2, #0
 800218c:	615a      	str	r2, [r3, #20]
	temp->Error = 0;
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	2200      	movs	r2, #0
 8002192:	619a      	str	r2, [r3, #24]
	temp->Error_minus = 0;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	2200      	movs	r2, #0
 8002198:	61da      	str	r2, [r3, #28]
	temp->Error_minus2 = 0;
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	2200      	movs	r2, #0
 800219e:	621a      	str	r2, [r3, #32]
}
 80021a0:	bf00      	nop
 80021a2:	371c      	adds	r7, #28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <PIDRun>:

void PIDRun(PID* temp, float32_t Feedback, float32_t Ref)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80021b8:	edc7 0a01 	vstr	s1, [r7, #4]
	temp->Error = Ref - Feedback;
 80021bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80021c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80021c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021cc:	ee17 2a90 	vmov	r2, s15
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	619a      	str	r2, [r3, #24]
	if(temp->Error > 0)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	dd04      	ble.n	80021e6 <PIDRun+0x3a>
	{
		temp->MotorDir = 0;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80021e4:	e007      	b.n	80021f6 <PIDRun+0x4a>
	}
	else if (temp->Error < 0)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	da03      	bge.n	80021f6 <PIDRun+0x4a>
	{
		temp->MotorDir = 1;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
	//U Update
	temp->Delta_U = (temp->Kp + temp->Ki + temp->Kd) * temp->Error
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	ed93 7a00 	vldr	s14, [r3]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8002202:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	edd3 7a02 	vldr	s15, [r3, #8]
 800220c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	ee07 3a90 	vmov	s15, r3
 8002218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800221c:	ee27 7a27 	vmul.f32	s14, s14, s15
			  - (temp->Kp + 2*temp->Kd) * temp->Error_minus
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	edd3 6a00 	vldr	s13, [r3]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	edd3 7a02 	vldr	s15, [r3, #8]
 800222c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002230:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	ee07 3a90 	vmov	s15, r3
 800223c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002240:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002244:	ee37 7a67 	vsub.f32	s14, s14, s15
			  + temp->Kd * temp->Error_minus2;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	edd3 6a02 	vldr	s13, [r3, #8]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	ee07 3a90 	vmov	s15, r3
 8002256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800225a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800225e:	ee77 7a27 	vadd.f32	s15, s14, s15
	temp->Delta_U = (temp->Kp + temp->Ki + temp->Kd) * temp->Error
 8002262:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002266:	ee17 2a90 	vmov	r2, s15
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	611a      	str	r2, [r3, #16]
	temp->U = temp->Delta_U + temp->U_minus;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	691a      	ldr	r2, [r3, #16]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	441a      	add	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	60da      	str	r2, [r3, #12]
	temp->U_minus = temp->U;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	615a      	str	r2, [r3, #20]
	//Error Update
	temp->Error_minus2 = temp->Error_minus;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	69da      	ldr	r2, [r3, #28]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	621a      	str	r2, [r3, #32]
	temp->Error_minus = temp->Error;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	699a      	ldr	r2, [r3, #24]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	61da      	str	r2, [r3, #28]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <CascadeLoop>:

void CascadeLoop(PID* Pos, PID* Velo, float32_t xPosFeedback, float32_t VeloFeedback, QuinticTraj* TrajReference, float32_t tolerance)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6178      	str	r0, [r7, #20]
 80022a8:	6139      	str	r1, [r7, #16]
 80022aa:	ed87 0a03 	vstr	s0, [r7, #12]
 80022ae:	edc7 0a02 	vstr	s1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
 80022b4:	ed87 1a00 	vstr	s2, [r7]
	int32_t PosFeedback = __HAL_TIM_GET_COUNTER(&htim2);
 80022b8:	4b3a      	ldr	r3, [pc, #232]	; (80023a4 <CascadeLoop+0x104>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	61fb      	str	r3, [r7, #28]
	if(TrajReference->time >= TrajReference->TotalTime)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80022cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d4:	db27      	blt.n	8002326 <CascadeLoop+0x86>
	{
		//int32_t CurrentError = TrajReference->current_pos - PosFeedback;
		if((TrajReference->final_pos - __HAL_TIM_GET_COUNTER(&htim2) <= 13) || (TrajReference->final_pos - __HAL_TIM_GET_COUNTER(&htim2) >= -13))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	461a      	mov	r2, r3
 80022dc:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <CascadeLoop+0x104>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b0d      	cmp	r3, #13
 80022e6:	d909      	bls.n	80022fc <CascadeLoop+0x5c>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	461a      	mov	r2, r3
 80022ee:	4b2d      	ldr	r3, [pc, #180]	; (80023a4 <CascadeLoop+0x104>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	f113 0f0e 	cmn.w	r3, #14
 80022fa:	d93c      	bls.n	8002376 <CascadeLoop+0xd6>
		{
				Pos->IsSteady = 1;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				Velo->U = 0;
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	2200      	movs	r2, #0
 8002308:	60da      	str	r2, [r3, #12]
				Pos->ESS = TrajReference->final_pos - __HAL_TIM_GET_COUNTER(&htim2);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	b2da      	uxtb	r2, r3
 8002310:	4b24      	ldr	r3, [pc, #144]	; (80023a4 <CascadeLoop+0x104>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	b2db      	uxtb	r3, r3
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	b2db      	uxtb	r3, r3
 800231c:	b25a      	sxtb	r2, r3
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8002324:	e027      	b.n	8002376 <CascadeLoop+0xd6>
		}
	}
	else
	{
		Pos->IsSteady = 0;
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		PIDRun(Pos, PosFeedback, TrajReference->current_pos);
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	ee07 3a90 	vmov	s15, r3
 8002334:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	ee07 3a10 	vmov	s14, r3
 8002340:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002344:	eef0 0a47 	vmov.f32	s1, s14
 8002348:	eeb0 0a67 	vmov.f32	s0, s15
 800234c:	6978      	ldr	r0, [r7, #20]
 800234e:	f7ff ff2d 	bl	80021ac <PIDRun>
		float32_t veloRef = Pos->U + TrajReference->current_velo;
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	4413      	add	r3, r2
 800235c:	ee07 3a90 	vmov	s15, r3
 8002360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002364:	edc7 7a06 	vstr	s15, [r7, #24]
		PIDRun(Velo, VeloFeedback, veloRef);
 8002368:	edd7 0a06 	vldr	s1, [r7, #24]
 800236c:	ed97 0a02 	vldr	s0, [r7, #8]
 8002370:	6938      	ldr	r0, [r7, #16]
 8002372:	f7ff ff1b 	bl	80021ac <PIDRun>
	}
	if(Velo->U > 40000)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	f649 4240 	movw	r2, #40000	; 0x9c40
 800237e:	4293      	cmp	r3, r2
 8002380:	dd04      	ble.n	800238c <CascadeLoop+0xec>
	{
		Velo->U = 40000;
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002388:	60da      	str	r2, [r3, #12]
	{
		Velo->U = -40000;
	}


}
 800238a:	e007      	b.n	800239c <CascadeLoop+0xfc>
	else if (Velo->U < -40000)
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4a05      	ldr	r2, [pc, #20]	; (80023a8 <CascadeLoop+0x108>)
 8002392:	4293      	cmp	r3, r2
 8002394:	da02      	bge.n	800239c <CascadeLoop+0xfc>
		Velo->U = -40000;
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4a03      	ldr	r2, [pc, #12]	; (80023a8 <CascadeLoop+0x108>)
 800239a:	60da      	str	r2, [r3, #12]
}
 800239c:	bf00      	nop
 800239e:	3720      	adds	r7, #32
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20000e80 	.word	0x20000e80
 80023a8:	ffff63c0 	.word	0xffff63c0

080023ac <QuinticSetup>:
 *      Author: tanawatp
 */
#include "QuinticTrajectory.h"

void QuinticSetup(QuinticTraj* temp, float32_t vmax, float32_t amax)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80023b8:	edc7 0a01 	vstr	s1, [r7, #4]
	temp->v_max = vmax;
 80023bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80023c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023c4:	ee17 2a90 	vmov	r2, s15
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	619a      	str	r2, [r3, #24]
	temp->a_max = amax;
 80023cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80023d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023d4:	ee17 2a90 	vmov	r2, s15
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	61da      	str	r2, [r3, #28]
	temp->State = Ready;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	//temp->final_pos = 300;
}
 80023e4:	bf00      	nop
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <QuinticGenerator>:
void QuinticGenerator(QuinticTraj* temp,int8_t ess)
{
 80023f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023f4:	b082      	sub	sp, #8
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	460b      	mov	r3, r1
 80023fc:	70fb      	strb	r3, [r7, #3]
	//temp->final_pos = temp->final_pos * 8192/120;
	temp->displacement = temp->final_pos - temp->start_pos;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	1ad2      	subs	r2, r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	609a      	str	r2, [r3, #8]
	if(temp->displacement<0)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	da04      	bge.n	800241e <QuinticGenerator+0x2e>
	{
		temp->Dir = 1;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2020 	strb.w	r2, [r3, #32]
 800241c:	e007      	b.n	800242e <QuinticGenerator+0x3e>
	}
	else if (temp->displacement>0)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	dd03      	ble.n	800242e <QuinticGenerator+0x3e>
	{
		temp->Dir = 0;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2020 	strb.w	r2, [r3, #32]
	}
	temp->timeAcc = 0.5*sqrtf(23.094*fabs(temp->displacement)/temp->a_max);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe f822 	bl	800047c <__aeabi_i2d>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4690      	mov	r8, r2
 800243e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002442:	a388      	add	r3, pc, #544	; (adr r3, 8002664 <QuinticGenerator+0x274>)
 8002444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002448:	4640      	mov	r0, r8
 800244a:	4649      	mov	r1, r9
 800244c:	f7fe f880 	bl	8000550 <__aeabi_dmul>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4690      	mov	r8, r2
 8002456:	4699      	mov	r9, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe f80d 	bl	800047c <__aeabi_i2d>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4640      	mov	r0, r8
 8002468:	4649      	mov	r1, r9
 800246a:	f7fe f99b 	bl	80007a4 <__aeabi_ddiv>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4610      	mov	r0, r2
 8002474:	4619      	mov	r1, r3
 8002476:	f7fe fb63 	bl	8000b40 <__aeabi_d2f>
 800247a:	4603      	mov	r3, r0
 800247c:	ee00 3a10 	vmov	s0, r3
 8002480:	f00a fde2 	bl	800d048 <sqrtf>
 8002484:	ee10 3a10 	vmov	r3, s0
 8002488:	4618      	mov	r0, r3
 800248a:	f7fe f809 	bl	80004a0 <__aeabi_f2d>
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	4b6f      	ldr	r3, [pc, #444]	; (8002650 <QuinticGenerator+0x260>)
 8002494:	f7fe f85c 	bl	8000550 <__aeabi_dmul>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4610      	mov	r0, r2
 800249e:	4619      	mov	r1, r3
 80024a0:	f7fe fb4e 	bl	8000b40 <__aeabi_d2f>
 80024a4:	4602      	mov	r2, r0
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	645a      	str	r2, [r3, #68]	; 0x44
	temp->timeVelo = 1.875*fabs(temp->displacement)/temp->v_max;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fd ffe4 	bl	800047c <__aeabi_i2d>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	4614      	mov	r4, r2
 80024ba:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	4b64      	ldr	r3, [pc, #400]	; (8002654 <QuinticGenerator+0x264>)
 80024c4:	4620      	mov	r0, r4
 80024c6:	4629      	mov	r1, r5
 80024c8:	f7fe f842 	bl	8000550 <__aeabi_dmul>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4614      	mov	r4, r2
 80024d2:	461d      	mov	r5, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fd ffcf 	bl	800047c <__aeabi_i2d>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4620      	mov	r0, r4
 80024e4:	4629      	mov	r1, r5
 80024e6:	f7fe f95d 	bl	80007a4 <__aeabi_ddiv>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4610      	mov	r0, r2
 80024f0:	4619      	mov	r1, r3
 80024f2:	f7fe fb25 	bl	8000b40 <__aeabi_d2f>
 80024f6:	4602      	mov	r2, r0
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	649a      	str	r2, [r3, #72]	; 0x48
	temp->TotalTime = MAX(temp->timeAcc,temp->timeVelo);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002508:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800250c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002510:	dd02      	ble.n	8002518 <QuinticGenerator+0x128>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	e001      	b.n	800251c <QuinticGenerator+0x12c>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	63d3      	str	r3, [r2, #60]	; 0x3c
	temp->coeff[0] = temp->start_pos;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	ee07 3a90 	vmov	s15, r3
 8002528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	temp->coeff[1] = 0;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	629a      	str	r2, [r3, #40]	; 0x28
	temp->coeff[2] = 0;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	62da      	str	r2, [r3, #44]	; 0x2c
	temp->coeff[3] = 10.0*temp->displacement/powf(temp->TotalTime,3);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	4618      	mov	r0, r3
 8002548:	f7fd ff98 	bl	800047c <__aeabi_i2d>
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	4b41      	ldr	r3, [pc, #260]	; (8002658 <QuinticGenerator+0x268>)
 8002552:	f7fd fffd 	bl	8000550 <__aeabi_dmul>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	4614      	mov	r4, r2
 800255c:	461d      	mov	r5, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002564:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8002568:	eeb0 0a67 	vmov.f32	s0, s15
 800256c:	f00a fd14 	bl	800cf98 <powf>
 8002570:	ee10 3a10 	vmov	r3, s0
 8002574:	4618      	mov	r0, r3
 8002576:	f7fd ff93 	bl	80004a0 <__aeabi_f2d>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	4620      	mov	r0, r4
 8002580:	4629      	mov	r1, r5
 8002582:	f7fe f90f 	bl	80007a4 <__aeabi_ddiv>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4610      	mov	r0, r2
 800258c:	4619      	mov	r1, r3
 800258e:	f7fe fad7 	bl	8000b40 <__aeabi_d2f>
 8002592:	4602      	mov	r2, r0
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	631a      	str	r2, [r3, #48]	; 0x30
	temp->coeff[4] = -15.0*temp->displacement/powf(temp->TotalTime,4);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd ff6d 	bl	800047c <__aeabi_i2d>
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	4b2d      	ldr	r3, [pc, #180]	; (800265c <QuinticGenerator+0x26c>)
 80025a8:	f7fd ffd2 	bl	8000550 <__aeabi_dmul>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4614      	mov	r4, r2
 80025b2:	461d      	mov	r5, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80025ba:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80025be:	eeb0 0a67 	vmov.f32	s0, s15
 80025c2:	f00a fce9 	bl	800cf98 <powf>
 80025c6:	ee10 3a10 	vmov	r3, s0
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fd ff68 	bl	80004a0 <__aeabi_f2d>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4620      	mov	r0, r4
 80025d6:	4629      	mov	r1, r5
 80025d8:	f7fe f8e4 	bl	80007a4 <__aeabi_ddiv>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4610      	mov	r0, r2
 80025e2:	4619      	mov	r1, r3
 80025e4:	f7fe faac 	bl	8000b40 <__aeabi_d2f>
 80025e8:	4602      	mov	r2, r0
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	635a      	str	r2, [r3, #52]	; 0x34
	temp->coeff[5] = 6.0*temp->displacement/powf(temp->TotalTime,5);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fd ff42 	bl	800047c <__aeabi_i2d>
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	4b18      	ldr	r3, [pc, #96]	; (8002660 <QuinticGenerator+0x270>)
 80025fe:	f7fd ffa7 	bl	8000550 <__aeabi_dmul>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4614      	mov	r4, r2
 8002608:	461d      	mov	r5, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002610:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8002614:	eeb0 0a67 	vmov.f32	s0, s15
 8002618:	f00a fcbe 	bl	800cf98 <powf>
 800261c:	ee10 3a10 	vmov	r3, s0
 8002620:	4618      	mov	r0, r3
 8002622:	f7fd ff3d 	bl	80004a0 <__aeabi_f2d>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4620      	mov	r0, r4
 800262c:	4629      	mov	r1, r5
 800262e:	f7fe f8b9 	bl	80007a4 <__aeabi_ddiv>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	4610      	mov	r0, r2
 8002638:	4619      	mov	r1, r3
 800263a:	f7fe fa81 	bl	8000b40 <__aeabi_d2f>
 800263e:	4602      	mov	r2, r0
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002644:	bf00      	nop
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800264e:	bf00      	nop
 8002650:	3fe00000 	.word	0x3fe00000
 8002654:	3ffe0000 	.word	0x3ffe0000
 8002658:	40240000 	.word	0x40240000
 800265c:	c02e0000 	.word	0xc02e0000
 8002660:	40180000 	.word	0x40180000
 8002664:	624dd2f2 	.word	0x624dd2f2
 8002668:	40371810 	.word	0x40371810

0800266c <QuinticEvaluator>:
void QuinticEvaluator(QuinticTraj* temp)
{
 800266c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002670:	ed2d 8b02 	vpush	{d8}
 8002674:	b084      	sub	sp, #16
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
	float32_t time = temp->time;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	60fb      	str	r3, [r7, #12]
	temp->current_pos = temp->coeff[0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
						+ temp->coeff[1]*time
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800268c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002690:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002694:	ee37 8a27 	vadd.f32	s16, s14, s15
						+ temp->coeff[2]*powf(time,2)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	edd3 8a0b 	vldr	s17, [r3, #44]	; 0x2c
 800269e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80026a2:	ed97 0a03 	vldr	s0, [r7, #12]
 80026a6:	f00a fc77 	bl	800cf98 <powf>
 80026aa:	eef0 7a40 	vmov.f32	s15, s0
 80026ae:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80026b2:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[3]*powf(time,3)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	edd3 8a0c 	vldr	s17, [r3, #48]	; 0x30
 80026bc:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80026c0:	ed97 0a03 	vldr	s0, [r7, #12]
 80026c4:	f00a fc68 	bl	800cf98 <powf>
 80026c8:	eef0 7a40 	vmov.f32	s15, s0
 80026cc:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80026d0:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[4]*powf(time,4)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	edd3 8a0d 	vldr	s17, [r3, #52]	; 0x34
 80026da:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80026de:	ed97 0a03 	vldr	s0, [r7, #12]
 80026e2:	f00a fc59 	bl	800cf98 <powf>
 80026e6:	eef0 7a40 	vmov.f32	s15, s0
 80026ea:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80026ee:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[5]*powf(time,5);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	edd3 8a0e 	vldr	s17, [r3, #56]	; 0x38
 80026f8:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80026fc:	ed97 0a03 	vldr	s0, [r7, #12]
 8002700:	f00a fc4a 	bl	800cf98 <powf>
 8002704:	eef0 7a40 	vmov.f32	s15, s0
 8002708:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800270c:	ee78 7a27 	vadd.f32	s15, s16, s15
	temp->current_pos = temp->coeff[0]
 8002710:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002714:	ee17 2a90 	vmov	r2, s15
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	60da      	str	r2, [r3, #12]

	temp->current_velo = temp->coeff[1]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	4618      	mov	r0, r3
 8002722:	f7fd febd 	bl	80004a0 <__aeabi_f2d>
 8002726:	4604      	mov	r4, r0
 8002728:	460d      	mov	r5, r1
						+ 2.0*temp->coeff[2]*time
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272e:	4618      	mov	r0, r3
 8002730:	f7fd feb6 	bl	80004a0 <__aeabi_f2d>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	f7fd fd54 	bl	80001e4 <__adddf3>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4690      	mov	r8, r2
 8002742:	4699      	mov	r9, r3
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f7fd feab 	bl	80004a0 <__aeabi_f2d>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4640      	mov	r0, r8
 8002750:	4649      	mov	r1, r9
 8002752:	f7fd fefd 	bl	8000550 <__aeabi_dmul>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4620      	mov	r0, r4
 800275c:	4629      	mov	r1, r5
 800275e:	f7fd fd41 	bl	80001e4 <__adddf3>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4614      	mov	r4, r2
 8002768:	461d      	mov	r5, r3
						+ 3.0*temp->coeff[3]*powf(time,2)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	4618      	mov	r0, r3
 8002770:	f7fd fe96 	bl	80004a0 <__aeabi_f2d>
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	4b8e      	ldr	r3, [pc, #568]	; (80029b4 <QuinticEvaluator+0x348>)
 800277a:	f7fd fee9 	bl	8000550 <__aeabi_dmul>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4690      	mov	r8, r2
 8002784:	4699      	mov	r9, r3
 8002786:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800278a:	ed97 0a03 	vldr	s0, [r7, #12]
 800278e:	f00a fc03 	bl	800cf98 <powf>
 8002792:	ee10 3a10 	vmov	r3, s0
 8002796:	4618      	mov	r0, r3
 8002798:	f7fd fe82 	bl	80004a0 <__aeabi_f2d>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	4640      	mov	r0, r8
 80027a2:	4649      	mov	r1, r9
 80027a4:	f7fd fed4 	bl	8000550 <__aeabi_dmul>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	4620      	mov	r0, r4
 80027ae:	4629      	mov	r1, r5
 80027b0:	f7fd fd18 	bl	80001e4 <__adddf3>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4614      	mov	r4, r2
 80027ba:	461d      	mov	r5, r3
						+ 4.0*temp->coeff[4]*powf(time,3)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fd fe6d 	bl	80004a0 <__aeabi_f2d>
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	4b7b      	ldr	r3, [pc, #492]	; (80029b8 <QuinticEvaluator+0x34c>)
 80027cc:	f7fd fec0 	bl	8000550 <__aeabi_dmul>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4690      	mov	r8, r2
 80027d6:	4699      	mov	r9, r3
 80027d8:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80027dc:	ed97 0a03 	vldr	s0, [r7, #12]
 80027e0:	f00a fbda 	bl	800cf98 <powf>
 80027e4:	ee10 3a10 	vmov	r3, s0
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fd fe59 	bl	80004a0 <__aeabi_f2d>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4640      	mov	r0, r8
 80027f4:	4649      	mov	r1, r9
 80027f6:	f7fd feab 	bl	8000550 <__aeabi_dmul>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	4620      	mov	r0, r4
 8002800:	4629      	mov	r1, r5
 8002802:	f7fd fcef 	bl	80001e4 <__adddf3>
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	4614      	mov	r4, r2
 800280c:	461d      	mov	r5, r3
						+ 5.0*temp->coeff[5]*powf(time,4);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002812:	4618      	mov	r0, r3
 8002814:	f7fd fe44 	bl	80004a0 <__aeabi_f2d>
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	4b67      	ldr	r3, [pc, #412]	; (80029bc <QuinticEvaluator+0x350>)
 800281e:	f7fd fe97 	bl	8000550 <__aeabi_dmul>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4690      	mov	r8, r2
 8002828:	4699      	mov	r9, r3
 800282a:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800282e:	ed97 0a03 	vldr	s0, [r7, #12]
 8002832:	f00a fbb1 	bl	800cf98 <powf>
 8002836:	ee10 3a10 	vmov	r3, s0
 800283a:	4618      	mov	r0, r3
 800283c:	f7fd fe30 	bl	80004a0 <__aeabi_f2d>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4640      	mov	r0, r8
 8002846:	4649      	mov	r1, r9
 8002848:	f7fd fe82 	bl	8000550 <__aeabi_dmul>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4620      	mov	r0, r4
 8002852:	4629      	mov	r1, r5
 8002854:	f7fd fcc6 	bl	80001e4 <__adddf3>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
	temp->current_velo = temp->coeff[1]
 800285c:	4610      	mov	r0, r2
 800285e:	4619      	mov	r1, r3
 8002860:	f7fe f926 	bl	8000ab0 <__aeabi_d2iz>
 8002864:	4602      	mov	r2, r0
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	611a      	str	r2, [r3, #16]

	temp->current_acc = 2.0*temp->coeff[2]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286e:	4618      	mov	r0, r3
 8002870:	f7fd fe16 	bl	80004a0 <__aeabi_f2d>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	f7fd fcb4 	bl	80001e4 <__adddf3>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4614      	mov	r4, r2
 8002882:	461d      	mov	r5, r3
						+ 6.0*temp->coeff[3]*time
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	4618      	mov	r0, r3
 800288a:	f7fd fe09 	bl	80004a0 <__aeabi_f2d>
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	4b4b      	ldr	r3, [pc, #300]	; (80029c0 <QuinticEvaluator+0x354>)
 8002894:	f7fd fe5c 	bl	8000550 <__aeabi_dmul>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4690      	mov	r8, r2
 800289e:	4699      	mov	r9, r3
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f7fd fdfd 	bl	80004a0 <__aeabi_f2d>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4640      	mov	r0, r8
 80028ac:	4649      	mov	r1, r9
 80028ae:	f7fd fe4f 	bl	8000550 <__aeabi_dmul>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4620      	mov	r0, r4
 80028b8:	4629      	mov	r1, r5
 80028ba:	f7fd fc93 	bl	80001e4 <__adddf3>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	4614      	mov	r4, r2
 80028c4:	461d      	mov	r5, r3
						+ 12.0*temp->coeff[4]*powf(time,2)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fd fde8 	bl	80004a0 <__aeabi_f2d>
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	4b3b      	ldr	r3, [pc, #236]	; (80029c4 <QuinticEvaluator+0x358>)
 80028d6:	f7fd fe3b 	bl	8000550 <__aeabi_dmul>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4690      	mov	r8, r2
 80028e0:	4699      	mov	r9, r3
 80028e2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80028e6:	ed97 0a03 	vldr	s0, [r7, #12]
 80028ea:	f00a fb55 	bl	800cf98 <powf>
 80028ee:	ee10 3a10 	vmov	r3, s0
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fd fdd4 	bl	80004a0 <__aeabi_f2d>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	4640      	mov	r0, r8
 80028fe:	4649      	mov	r1, r9
 8002900:	f7fd fe26 	bl	8000550 <__aeabi_dmul>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4620      	mov	r0, r4
 800290a:	4629      	mov	r1, r5
 800290c:	f7fd fc6a 	bl	80001e4 <__adddf3>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4614      	mov	r4, r2
 8002916:	461d      	mov	r5, r3
						+ 20.0*temp->coeff[5]*powf(time,3);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291c:	4618      	mov	r0, r3
 800291e:	f7fd fdbf 	bl	80004a0 <__aeabi_f2d>
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	4b28      	ldr	r3, [pc, #160]	; (80029c8 <QuinticEvaluator+0x35c>)
 8002928:	f7fd fe12 	bl	8000550 <__aeabi_dmul>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4690      	mov	r8, r2
 8002932:	4699      	mov	r9, r3
 8002934:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8002938:	ed97 0a03 	vldr	s0, [r7, #12]
 800293c:	f00a fb2c 	bl	800cf98 <powf>
 8002940:	ee10 3a10 	vmov	r3, s0
 8002944:	4618      	mov	r0, r3
 8002946:	f7fd fdab 	bl	80004a0 <__aeabi_f2d>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4640      	mov	r0, r8
 8002950:	4649      	mov	r1, r9
 8002952:	f7fd fdfd 	bl	8000550 <__aeabi_dmul>
 8002956:	4602      	mov	r2, r0
 8002958:	460b      	mov	r3, r1
 800295a:	4620      	mov	r0, r4
 800295c:	4629      	mov	r1, r5
 800295e:	f7fd fc41 	bl	80001e4 <__adddf3>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
	temp->current_acc = 2.0*temp->coeff[2]
 8002966:	4610      	mov	r0, r2
 8002968:	4619      	mov	r1, r3
 800296a:	f7fe f8a1 	bl	8000ab0 <__aeabi_d2iz>
 800296e:	4602      	mov	r2, r0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	615a      	str	r2, [r3, #20]
	if(time >= temp->TotalTime)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800297a:	ed97 7a03 	vldr	s14, [r7, #12]
 800297e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002986:	da00      	bge.n	800298a <QuinticEvaluator+0x31e>
		temp->start_pos = temp->final_pos;
		temp->current_pos = temp->start_pos;
		temp->current_velo = 0;
		temp->current_acc = 0;
	}
}
 8002988:	e00d      	b.n	80029a6 <QuinticEvaluator+0x33a>
		temp->start_pos = temp->final_pos;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	601a      	str	r2, [r3, #0]
		temp->current_pos = temp->start_pos;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	60da      	str	r2, [r3, #12]
		temp->current_velo = 0;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	611a      	str	r2, [r3, #16]
		temp->current_acc = 0;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	615a      	str	r2, [r3, #20]
}
 80029a6:	bf00      	nop
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	ecbd 8b02 	vpop	{d8}
 80029b0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80029b4:	40080000 	.word	0x40080000
 80029b8:	40100000 	.word	0x40100000
 80029bc:	40140000 	.word	0x40140000
 80029c0:	40180000 	.word	0x40180000
 80029c4:	40280000 	.word	0x40280000
 80029c8:	40340000 	.word	0x40340000

080029cc <QuinticRun>:
void QuinticRun(QuinticTraj* temp, int8_t ess, float32_t dt)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	460b      	mov	r3, r1
 80029d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80029da:	72fb      	strb	r3, [r7, #11]
	switch(temp->State)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d020      	beq.n	8002a28 <QuinticRun+0x5c>
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	dc3d      	bgt.n	8002a66 <QuinticRun+0x9a>
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <QuinticRun+0x28>
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d00b      	beq.n	8002a0a <QuinticRun+0x3e>
		{
			temp->State = Ready;
		}
		break;
	}
}
 80029f2:	e038      	b.n	8002a66 <QuinticRun+0x9a>
		if(temp->start_pos != temp->final_pos)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d031      	beq.n	8002a64 <QuinticRun+0x98>
			temp->State = PreCal;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8002a08:	e02c      	b.n	8002a64 <QuinticRun+0x98>
		temp->time = 0;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	641a      	str	r2, [r3, #64]	; 0x40
		QuinticGenerator(temp,ess);
 8002a12:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002a16:	4619      	mov	r1, r3
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f7ff fce9 	bl	80023f0 <QuinticGenerator>
		temp->State = Run;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2202      	movs	r2, #2
 8002a22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8002a26:	e01e      	b.n	8002a66 <QuinticRun+0x9a>
		temp->time = temp->time + dt;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002a2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		QuinticEvaluator(temp);
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f7ff fe15 	bl	800266c <QuinticEvaluator>
		if(temp->time > temp->TotalTime)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002a4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a56:	dc00      	bgt.n	8002a5a <QuinticRun+0x8e>
		break;
 8002a58:	e005      	b.n	8002a66 <QuinticRun+0x9a>
			temp->State = Ready;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8002a62:	e000      	b.n	8002a66 <QuinticRun+0x9a>
		break;
 8002a64:	bf00      	nop
}
 8002a66:	bf00      	nop
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <InitReadEncoder>:
//{ //get time in micros
//	return __HAL_TIM_GET_COUNTER(&htim5)+ ReadEncoderParam._micros;
//}

void InitReadEncoder(ReadEncoder* Read, uint32_t samplingtime)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
 8002a76:	6039      	str	r1, [r7, #0]
	Read->MotorSetDuty = 0;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	701a      	strb	r2, [r3, #0]
	Read->Pulse_Compare = 0;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	805a      	strh	r2, [r3, #2]
	Read->DIR = 0;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	711a      	strb	r2, [r3, #4]
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
	...

08002a98 <QEIGetFeedback>:
//	//Delay
//	QEIData.data[1] = QEIData.data[0];
//	QEIData.timestamp[1] = QEIData.timestamp[0];
//}
void QEIGetFeedback(QEI* temp, uint16_t Hz)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	807b      	strh	r3, [r7, #2]
	temp->QEIPosition = __HAL_TIM_GET_COUNTER(&htim2);
 8002aa4:	4b0f      	ldr	r3, [pc, #60]	; (8002ae4 <QEIGetFeedback+0x4c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	461a      	mov	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	605a      	str	r2, [r3, #4]
	temp->QEIVelocity = (temp->QEIPosition - temp->QEIPosition_minus) * Hz;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	887a      	ldrh	r2, [r7, #2]
 8002abc:	fb02 f303 	mul.w	r3, r2, r3
 8002ac0:	ee07 3a90 	vmov	s15, r3
 8002ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	edc3 7a02 	vstr	s15, [r3, #8]
	temp->QEIPosition_minus = temp->QEIPosition;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	601a      	str	r2, [r3, #0]
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	20000e80 	.word	0x20000e80

08002ae8 <SetHome>:
 */
#include "Storage.h"
extern u16u8_t registerFrame[200];

void SetHome(OperationVar* temp)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
	temp->HomingKey = 1;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	721a      	strb	r2, [r3, #8]
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,35*500);
 8002af6:	4b07      	ldr	r3, [pc, #28]	; (8002b14 <SetHome+0x2c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f244 425c 	movw	r2, #17500	; 0x445c
 8002afe:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 8002b00:	2201      	movs	r2, #1
 8002b02:	2140      	movs	r1, #64	; 0x40
 8002b04:	4804      	ldr	r0, [pc, #16]	; (8002b18 <SetHome+0x30>)
 8002b06:	f004 fd39 	bl	800757c <HAL_GPIO_WritePin>
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000f34 	.word	0x20000f34
 8002b18:	40020800 	.word	0x40020800

08002b1c <RunX_Axis>:

void RunX_Axis(int32_t XFinalPos, uint16_t velo, uint16_t accel)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	807b      	strh	r3, [r7, #2]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	803b      	strh	r3, [r7, #0]
	registerFrame[0x41].U16 = XFinalPos;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <RunX_Axis+0x40>)
 8002b32:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	registerFrame[0x42].U16 = velo;	//250 mm/s
 8002b36:	4a09      	ldr	r2, [pc, #36]	; (8002b5c <RunX_Axis+0x40>)
 8002b38:	887b      	ldrh	r3, [r7, #2]
 8002b3a:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
	registerFrame[0x43].U16 = accel;	//1000 mm/s^2
 8002b3e:	4a07      	ldr	r2, [pc, #28]	; (8002b5c <RunX_Axis+0x40>)
 8002b40:	883b      	ldrh	r3, [r7, #0]
 8002b42:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
	registerFrame[0x40].U16 = 0b0010;	//Run
 8002b46:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <RunX_Axis+0x40>)
 8002b48:	2202      	movs	r2, #2
 8002b4a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	20000cb8 	.word	0x20000cb8

08002b60 <TraySetup>:
 */
#include "TrayLocalization.h"
#include "arm_math.h"
#include  "math.h"
void TraySetup(Tray* temp, float32_t x1, float32_t y1, float32_t x2, float32_t y2)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6178      	str	r0, [r7, #20]
 8002b68:	ed87 0a04 	vstr	s0, [r7, #16]
 8002b6c:	edc7 0a03 	vstr	s1, [r7, #12]
 8002b70:	ed87 1a02 	vstr	s2, [r7, #8]
 8002b74:	edc7 1a01 	vstr	s3, [r7, #4]
	temp->Edge1_X = x1;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	601a      	str	r2, [r3, #0]
	temp->Edge1_Y = y1;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	605a      	str	r2, [r3, #4]
	temp->Edge2_X = x2;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	609a      	str	r2, [r3, #8]
	temp->Edge2_Y = y2;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	60da      	str	r2, [r3, #12]

	float32_t Cal_OriginX = x2 * 10;
 8002b90:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b94:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b9c:	edc7 7a07 	vstr	s15, [r7, #28]
	float32_t Cal_OriginY = ( (y2*120.0/8192.0) - 350) * 10;
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7fd fc7d 	bl	80004a0 <__aeabi_f2d>
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	4b31      	ldr	r3, [pc, #196]	; (8002c70 <TraySetup+0x110>)
 8002bac:	f7fd fcd0 	bl	8000550 <__aeabi_dmul>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	4b2d      	ldr	r3, [pc, #180]	; (8002c74 <TraySetup+0x114>)
 8002bbe:	f7fd fdf1 	bl	80007a4 <__aeabi_ddiv>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	4619      	mov	r1, r3
 8002bca:	a327      	add	r3, pc, #156	; (adr r3, 8002c68 <TraySetup+0x108>)
 8002bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd0:	f7fd fb06 	bl	80001e0 <__aeabi_dsub>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	4b25      	ldr	r3, [pc, #148]	; (8002c78 <TraySetup+0x118>)
 8002be2:	f7fd fcb5 	bl	8000550 <__aeabi_dmul>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4610      	mov	r0, r2
 8002bec:	4619      	mov	r1, r3
 8002bee:	f7fd ffa7 	bl	8000b40 <__aeabi_d2f>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	61bb      	str	r3, [r7, #24]
	if(Cal_OriginX < 0){
 8002bf6:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bfa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c02:	d507      	bpl.n	8002c14 <TraySetup+0xb4>
		Cal_OriginX = 65536 + Cal_OriginX;
 8002c04:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c08:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002c7c <TraySetup+0x11c>
 8002c0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c10:	edc7 7a07 	vstr	s15, [r7, #28]
	}
	if(Cal_OriginY < 0){
 8002c14:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c20:	d507      	bpl.n	8002c32 <TraySetup+0xd2>
		Cal_OriginY = 65536 + Cal_OriginY;
 8002c22:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c26:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002c7c <TraySetup+0x11c>
 8002c2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c2e:	edc7 7a06 	vstr	s15, [r7, #24]
	}
	temp->ForBaseOriginX = Cal_OriginX ;
 8002c32:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c3a:	ee17 3a90 	vmov	r3, s15
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	821a      	strh	r2, [r3, #16]
	temp->ForBaseOriginY = Cal_OriginY + 10 ;
 8002c44:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c48:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002c4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c54:	ee17 3a90 	vmov	r3, s15
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	825a      	strh	r2, [r3, #18]
}
 8002c5e:	bf00      	nop
 8002c60:	3720      	adds	r7, #32
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	00000000 	.word	0x00000000
 8002c6c:	4075e000 	.word	0x4075e000
 8002c70:	405e0000 	.word	0x405e0000
 8002c74:	40c00000 	.word	0x40c00000
 8002c78:	40240000 	.word	0x40240000
 8002c7c:	47800000 	.word	0x47800000

08002c80 <TrayLocalization>:
void TrayLocalization(Tray* temp)
{
 8002c80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c84:	b094      	sub	sp, #80	; 0x50
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
	float32_t RefX_case1[3] = {10.0,30.0,50.0};
 8002c8a:	4a7d      	ldr	r2, [pc, #500]	; (8002e80 <TrayLocalization+0x200>)
 8002c8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c90:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float32_t RefY_case1[3] = {40*8192.0/120.0,25*8192.0/120.0,10*8192.0/120.0};
 8002c96:	4a7b      	ldr	r2, [pc, #492]	; (8002e84 <TrayLocalization+0x204>)
 8002c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	float32_t RefX_case2[3] = {10.0,25.0,40.0};
 8002ca2:	4a79      	ldr	r2, [pc, #484]	; (8002e88 <TrayLocalization+0x208>)
 8002ca4:	f107 0318 	add.w	r3, r7, #24
 8002ca8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002caa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float32_t RefY_case2[3] = {50*8192.0/120.0,30*8192.0/120.0,10*8192.0/120.0};
 8002cae:	4a77      	ldr	r2, [pc, #476]	; (8002e8c <TrayLocalization+0x20c>)
 8002cb0:	f107 030c 	add.w	r3, r7, #12
 8002cb4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float32_t deltaX = (temp->Edge2_X - temp->Edge1_X)*8192.0/120.0;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	ed93 7a02 	vldr	s14, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	edd3 7a00 	vldr	s15, [r3]
 8002cc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cca:	ee17 0a90 	vmov	r0, s15
 8002cce:	f7fd fbe7 	bl	80004a0 <__aeabi_f2d>
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	4b6e      	ldr	r3, [pc, #440]	; (8002e90 <TrayLocalization+0x210>)
 8002cd8:	f7fd fc3a 	bl	8000550 <__aeabi_dmul>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	4b6a      	ldr	r3, [pc, #424]	; (8002e94 <TrayLocalization+0x214>)
 8002cea:	f7fd fd5b 	bl	80007a4 <__aeabi_ddiv>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	f7fd ff23 	bl	8000b40 <__aeabi_d2f>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	647b      	str	r3, [r7, #68]	; 0x44
	float32_t deltaY = temp->Edge2_Y - temp->Edge1_Y;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	ed93 7a03 	vldr	s14, [r3, #12]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d0e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	float32_t lengh = sqrt(pow(deltaX,2) + pow(deltaY,2));
 8002d12:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002d14:	f7fd fbc4 	bl	80004a0 <__aeabi_f2d>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8002e78 <TrayLocalization+0x1f8>
 8002d20:	ec43 2b10 	vmov	d0, r2, r3
 8002d24:	f00a f89c 	bl	800ce60 <pow>
 8002d28:	ec55 4b10 	vmov	r4, r5, d0
 8002d2c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002d2e:	f7fd fbb7 	bl	80004a0 <__aeabi_f2d>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	ed9f 1b50 	vldr	d1, [pc, #320]	; 8002e78 <TrayLocalization+0x1f8>
 8002d3a:	ec43 2b10 	vmov	d0, r2, r3
 8002d3e:	f00a f88f 	bl	800ce60 <pow>
 8002d42:	ec53 2b10 	vmov	r2, r3, d0
 8002d46:	4620      	mov	r0, r4
 8002d48:	4629      	mov	r1, r5
 8002d4a:	f7fd fa4b 	bl	80001e4 <__adddf3>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	ec43 2b17 	vmov	d7, r2, r3
 8002d56:	eeb0 0a47 	vmov.f32	s0, s14
 8002d5a:	eef0 0a67 	vmov.f32	s1, s15
 8002d5e:	f00a f8ef 	bl	800cf40 <sqrt>
 8002d62:	ec53 2b10 	vmov	r2, r3, d0
 8002d66:	4610      	mov	r0, r2
 8002d68:	4619      	mov	r1, r3
 8002d6a:	f7fd fee9 	bl	8000b40 <__aeabi_d2f>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	63fb      	str	r3, [r7, #60]	; 0x3c

	if((3276 <= lengh)&&(lengh <= 3550))
 8002d72:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002d76:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002e98 <TrayLocalization+0x218>
 8002d7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d82:	db0d      	blt.n	8002da0 <TrayLocalization+0x120>
 8002d84:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002d88:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002e9c <TrayLocalization+0x21c>
 8002d8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d94:	d804      	bhi.n	8002da0 <TrayLocalization+0x120>
	{
		temp->Flag = 2; //swap case
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2202      	movs	r2, #2
 8002d9a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8002d9e:	e01a      	b.n	8002dd6 <TrayLocalization+0x156>
	}
	else if ((3960 <= lengh)&&(lengh <= 4233))
 8002da0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002da4:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002ea0 <TrayLocalization+0x220>
 8002da8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db0:	db0d      	blt.n	8002dce <TrayLocalization+0x14e>
 8002db2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002db6:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002ea4 <TrayLocalization+0x224>
 8002dba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc2:	d804      	bhi.n	8002dce <TrayLocalization+0x14e>
	{
		temp->Flag = 1;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8002dcc:	e003      	b.n	8002dd6 <TrayLocalization+0x156>
	}
	else
	{
		temp->Flag = 0;//Lenght Error!!
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	}
	float32_t theta;
	arm_atan2_f32(deltaY,deltaX,&theta);
 8002dd6:	f107 0308 	add.w	r3, r7, #8
 8002dda:	4618      	mov	r0, r3
 8002ddc:	edd7 0a11 	vldr	s1, [r7, #68]	; 0x44
 8002de0:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8002de4:	f002 f970 	bl	80050c8 <arm_atan2_f32>
	temp->angle = theta;
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	665a      	str	r2, [r3, #100]	; 0x64

	float32_t Cal_Orientation = -(theta * (180/PI) ) - 90;
 8002dee:	edd7 7a02 	vldr	s15, [r7, #8]
 8002df2:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002ea8 <TrayLocalization+0x228>
 8002df6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dfa:	eef1 7a67 	vneg.f32	s15, s15
 8002dfe:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002eac <TrayLocalization+0x22c>
 8002e02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e06:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	if(Cal_Orientation < 0){
 8002e0a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002e0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e16:	d507      	bpl.n	8002e28 <TrayLocalization+0x1a8>
		Cal_Orientation = Cal_Orientation + 360;
 8002e18:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002e1c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002eb0 <TrayLocalization+0x230>
 8002e20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e24:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	}
	temp->ForBaseOrientation = Cal_Orientation * 100;
 8002e28:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002e2c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002eb4 <TrayLocalization+0x234>
 8002e30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e38:	ee17 3a90 	vmov	r3, s15
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	829a      	strh	r2, [r3, #20]

	int8_t i;
	int8_t j;
	uint8_t ind = 0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	switch(temp->Flag)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f993 3061 	ldrsb.w	r3, [r3, #97]	; 0x61
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	f000 8130 	beq.w	80030b4 <TrayLocalization+0x434>
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	f300 8238 	bgt.w	80032ca <TrayLocalization+0x64a>
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 8234 	beq.w	80032c8 <TrayLocalization+0x648>
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	f040 8232 	bne.w	80032ca <TrayLocalization+0x64a>
	{
	case 1:
		for(i=0;i<3;i++)
 8002e66:	2300      	movs	r3, #0
 8002e68:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8002e6c:	e11c      	b.n	80030a8 <TrayLocalization+0x428>
		{
			for(j=0;j<3;j++)
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8002e74:	e10c      	b.n	8003090 <TrayLocalization+0x410>
 8002e76:	bf00      	nop
 8002e78:	00000000 	.word	0x00000000
 8002e7c:	40000000 	.word	0x40000000
 8002e80:	0800f404 	.word	0x0800f404
 8002e84:	0800f410 	.word	0x0800f410
 8002e88:	0800f41c 	.word	0x0800f41c
 8002e8c:	0800f428 	.word	0x0800f428
 8002e90:	40c00000 	.word	0x40c00000
 8002e94:	405e0000 	.word	0x405e0000
 8002e98:	454cc000 	.word	0x454cc000
 8002e9c:	455de000 	.word	0x455de000
 8002ea0:	45778000 	.word	0x45778000
 8002ea4:	45844800 	.word	0x45844800
 8002ea8:	42652ee0 	.word	0x42652ee0
 8002eac:	42b40000 	.word	0x42b40000
 8002eb0:	43b40000 	.word	0x43b40000
 8002eb4:	42c80000 	.word	0x42c80000
			{
				temp->Holes_X[ind] = temp->Edge1_X
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fd faef 	bl	80004a0 <__aeabi_f2d>
 8002ec2:	4604      	mov	r4, r0
 8002ec4:	460d      	mov	r5, r1
								+ (cos(theta)*RefX_case1[i])
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fd fae9 	bl	80004a0 <__aeabi_f2d>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	ec43 2b10 	vmov	d0, r2, r3
 8002ed6:	f009 ff17 	bl	800cd08 <cos>
 8002eda:	ec59 8b10 	vmov	r8, r9, d0
 8002ede:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	3350      	adds	r3, #80	; 0x50
 8002ee6:	443b      	add	r3, r7
 8002ee8:	3b20      	subs	r3, #32
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fd fad7 	bl	80004a0 <__aeabi_f2d>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4640      	mov	r0, r8
 8002ef8:	4649      	mov	r1, r9
 8002efa:	f7fd fb29 	bl	8000550 <__aeabi_dmul>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4620      	mov	r0, r4
 8002f04:	4629      	mov	r1, r5
 8002f06:	f7fd f96d 	bl	80001e4 <__adddf3>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	4614      	mov	r4, r2
 8002f10:	461d      	mov	r5, r3
								- (sin(theta)*RefY_case1[j]*120.0/8192.0);
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fd fac3 	bl	80004a0 <__aeabi_f2d>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	ec43 2b10 	vmov	d0, r2, r3
 8002f22:	f009 ff45 	bl	800cdb0 <sin>
 8002f26:	ec59 8b10 	vmov	r8, r9, d0
 8002f2a:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	3350      	adds	r3, #80	; 0x50
 8002f32:	443b      	add	r3, r7
 8002f34:	3b2c      	subs	r3, #44	; 0x2c
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7fd fab1 	bl	80004a0 <__aeabi_f2d>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4640      	mov	r0, r8
 8002f44:	4649      	mov	r1, r9
 8002f46:	f7fd fb03 	bl	8000550 <__aeabi_dmul>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4610      	mov	r0, r2
 8002f50:	4619      	mov	r1, r3
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	4bda      	ldr	r3, [pc, #872]	; (80032c0 <TrayLocalization+0x640>)
 8002f58:	f7fd fafa 	bl	8000550 <__aeabi_dmul>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4610      	mov	r0, r2
 8002f62:	4619      	mov	r1, r3
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	4bd6      	ldr	r3, [pc, #856]	; (80032c4 <TrayLocalization+0x644>)
 8002f6a:	f7fd fc1b 	bl	80007a4 <__aeabi_ddiv>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	4620      	mov	r0, r4
 8002f74:	4629      	mov	r1, r5
 8002f76:	f7fd f933 	bl	80001e0 <__aeabi_dsub>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
				temp->Holes_X[ind] = temp->Edge1_X
 8002f7e:	f897 4049 	ldrb.w	r4, [r7, #73]	; 0x49
								- (sin(theta)*RefY_case1[j]*120.0/8192.0);
 8002f82:	4610      	mov	r0, r2
 8002f84:	4619      	mov	r1, r3
 8002f86:	f7fd fddb 	bl	8000b40 <__aeabi_d2f>
 8002f8a:	4601      	mov	r1, r0
				temp->Holes_X[ind] = temp->Edge1_X
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	1da3      	adds	r3, r4, #6
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	6019      	str	r1, [r3, #0]
				temp->Holes_Y[ind] = temp->Edge1_Y
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fd fa80 	bl	80004a0 <__aeabi_f2d>
 8002fa0:	4604      	mov	r4, r0
 8002fa2:	460d      	mov	r5, r1
								+ (cos(theta)*RefY_case1[j])
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fd fa7a 	bl	80004a0 <__aeabi_f2d>
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	ec43 2b10 	vmov	d0, r2, r3
 8002fb4:	f009 fea8 	bl	800cd08 <cos>
 8002fb8:	ec59 8b10 	vmov	r8, r9, d0
 8002fbc:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	3350      	adds	r3, #80	; 0x50
 8002fc4:	443b      	add	r3, r7
 8002fc6:	3b2c      	subs	r3, #44	; 0x2c
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fd fa68 	bl	80004a0 <__aeabi_f2d>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4640      	mov	r0, r8
 8002fd6:	4649      	mov	r1, r9
 8002fd8:	f7fd faba 	bl	8000550 <__aeabi_dmul>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4620      	mov	r0, r4
 8002fe2:	4629      	mov	r1, r5
 8002fe4:	f7fd f8fe 	bl	80001e4 <__adddf3>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4614      	mov	r4, r2
 8002fee:	461d      	mov	r5, r3
								+ (sin(theta)*RefX_case1[i]*8192.0/120.0);
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fd fa54 	bl	80004a0 <__aeabi_f2d>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	ec43 2b10 	vmov	d0, r2, r3
 8003000:	f009 fed6 	bl	800cdb0 <sin>
 8003004:	ec59 8b10 	vmov	r8, r9, d0
 8003008:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	3350      	adds	r3, #80	; 0x50
 8003010:	443b      	add	r3, r7
 8003012:	3b20      	subs	r3, #32
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f7fd fa42 	bl	80004a0 <__aeabi_f2d>
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	4640      	mov	r0, r8
 8003022:	4649      	mov	r1, r9
 8003024:	f7fd fa94 	bl	8000550 <__aeabi_dmul>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4610      	mov	r0, r2
 800302e:	4619      	mov	r1, r3
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	4ba3      	ldr	r3, [pc, #652]	; (80032c4 <TrayLocalization+0x644>)
 8003036:	f7fd fa8b 	bl	8000550 <__aeabi_dmul>
 800303a:	4602      	mov	r2, r0
 800303c:	460b      	mov	r3, r1
 800303e:	4610      	mov	r0, r2
 8003040:	4619      	mov	r1, r3
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	4b9e      	ldr	r3, [pc, #632]	; (80032c0 <TrayLocalization+0x640>)
 8003048:	f7fd fbac 	bl	80007a4 <__aeabi_ddiv>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	4620      	mov	r0, r4
 8003052:	4629      	mov	r1, r5
 8003054:	f7fd f8c6 	bl	80001e4 <__adddf3>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
				temp->Holes_Y[ind] = temp->Edge1_Y
 800305c:	f897 4049 	ldrb.w	r4, [r7, #73]	; 0x49
								+ (sin(theta)*RefX_case1[i]*8192.0/120.0);
 8003060:	4610      	mov	r0, r2
 8003062:	4619      	mov	r1, r3
 8003064:	f7fd fd6c 	bl	8000b40 <__aeabi_d2f>
 8003068:	4601      	mov	r1, r0
				temp->Holes_Y[ind] = temp->Edge1_Y
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	f104 030e 	add.w	r3, r4, #14
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	3304      	adds	r3, #4
 8003076:	6019      	str	r1, [r3, #0]
				ind += 1;
 8003078:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800307c:	3301      	adds	r3, #1
 800307e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
			for(j=0;j<3;j++)
 8003082:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 8003086:	b2db      	uxtb	r3, r3
 8003088:	3301      	adds	r3, #1
 800308a:	b2db      	uxtb	r3, r3
 800308c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8003090:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 8003094:	2b02      	cmp	r3, #2
 8003096:	f77f af0f 	ble.w	8002eb8 <TrayLocalization+0x238>
		for(i=0;i<3;i++)
 800309a:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	3301      	adds	r3, #1
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80030a8:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	f77f aede 	ble.w	8002e6e <TrayLocalization+0x1ee>
			}
		}
		break;
 80030b2:	e10a      	b.n	80032ca <TrayLocalization+0x64a>
	case 2:
		for(i=0;i<3;i++)
 80030b4:	2300      	movs	r3, #0
 80030b6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80030ba:	e0fb      	b.n	80032b4 <TrayLocalization+0x634>
		{
			for(j=0;j<3;j++)
 80030bc:	2300      	movs	r3, #0
 80030be:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80030c2:	e0eb      	b.n	800329c <TrayLocalization+0x61c>
			{
				temp->Holes_X[ind] = temp->Edge1_X
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fd f9e9 	bl	80004a0 <__aeabi_f2d>
 80030ce:	4604      	mov	r4, r0
 80030d0:	460d      	mov	r5, r1
								+ (cos(theta)*RefX_case2[i])
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fd f9e3 	bl	80004a0 <__aeabi_f2d>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	ec43 2b10 	vmov	d0, r2, r3
 80030e2:	f009 fe11 	bl	800cd08 <cos>
 80030e6:	ec59 8b10 	vmov	r8, r9, d0
 80030ea:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	3350      	adds	r3, #80	; 0x50
 80030f2:	443b      	add	r3, r7
 80030f4:	3b38      	subs	r3, #56	; 0x38
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7fd f9d1 	bl	80004a0 <__aeabi_f2d>
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	4640      	mov	r0, r8
 8003104:	4649      	mov	r1, r9
 8003106:	f7fd fa23 	bl	8000550 <__aeabi_dmul>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	4620      	mov	r0, r4
 8003110:	4629      	mov	r1, r5
 8003112:	f7fd f867 	bl	80001e4 <__adddf3>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	4614      	mov	r4, r2
 800311c:	461d      	mov	r5, r3
								- (sin(theta)*RefY_case2[j]*120.0/8192.0);
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	4618      	mov	r0, r3
 8003122:	f7fd f9bd 	bl	80004a0 <__aeabi_f2d>
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	ec43 2b10 	vmov	d0, r2, r3
 800312e:	f009 fe3f 	bl	800cdb0 <sin>
 8003132:	ec59 8b10 	vmov	r8, r9, d0
 8003136:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	3350      	adds	r3, #80	; 0x50
 800313e:	443b      	add	r3, r7
 8003140:	3b44      	subs	r3, #68	; 0x44
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f7fd f9ab 	bl	80004a0 <__aeabi_f2d>
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4640      	mov	r0, r8
 8003150:	4649      	mov	r1, r9
 8003152:	f7fd f9fd 	bl	8000550 <__aeabi_dmul>
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	4610      	mov	r0, r2
 800315c:	4619      	mov	r1, r3
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	4b57      	ldr	r3, [pc, #348]	; (80032c0 <TrayLocalization+0x640>)
 8003164:	f7fd f9f4 	bl	8000550 <__aeabi_dmul>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	4610      	mov	r0, r2
 800316e:	4619      	mov	r1, r3
 8003170:	f04f 0200 	mov.w	r2, #0
 8003174:	4b53      	ldr	r3, [pc, #332]	; (80032c4 <TrayLocalization+0x644>)
 8003176:	f7fd fb15 	bl	80007a4 <__aeabi_ddiv>
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	4620      	mov	r0, r4
 8003180:	4629      	mov	r1, r5
 8003182:	f7fd f82d 	bl	80001e0 <__aeabi_dsub>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
				temp->Holes_X[ind] = temp->Edge1_X
 800318a:	f897 4049 	ldrb.w	r4, [r7, #73]	; 0x49
								- (sin(theta)*RefY_case2[j]*120.0/8192.0);
 800318e:	4610      	mov	r0, r2
 8003190:	4619      	mov	r1, r3
 8003192:	f7fd fcd5 	bl	8000b40 <__aeabi_d2f>
 8003196:	4601      	mov	r1, r0
				temp->Holes_X[ind] = temp->Edge1_X
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	1da3      	adds	r3, r4, #6
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	6019      	str	r1, [r3, #0]
				temp->Holes_Y[ind] = temp->Edge1_Y
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fd f97a 	bl	80004a0 <__aeabi_f2d>
 80031ac:	4604      	mov	r4, r0
 80031ae:	460d      	mov	r5, r1
								+ (cos(theta)*RefY_case2[j])
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fd f974 	bl	80004a0 <__aeabi_f2d>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	ec43 2b10 	vmov	d0, r2, r3
 80031c0:	f009 fda2 	bl	800cd08 <cos>
 80031c4:	ec59 8b10 	vmov	r8, r9, d0
 80031c8:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	3350      	adds	r3, #80	; 0x50
 80031d0:	443b      	add	r3, r7
 80031d2:	3b44      	subs	r3, #68	; 0x44
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fd f962 	bl	80004a0 <__aeabi_f2d>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4640      	mov	r0, r8
 80031e2:	4649      	mov	r1, r9
 80031e4:	f7fd f9b4 	bl	8000550 <__aeabi_dmul>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4620      	mov	r0, r4
 80031ee:	4629      	mov	r1, r5
 80031f0:	f7fc fff8 	bl	80001e4 <__adddf3>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4614      	mov	r4, r2
 80031fa:	461d      	mov	r5, r3
								+ (sin(theta)*RefX_case2[i]*8192.0/120.0);
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fd f94e 	bl	80004a0 <__aeabi_f2d>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	ec43 2b10 	vmov	d0, r2, r3
 800320c:	f009 fdd0 	bl	800cdb0 <sin>
 8003210:	ec59 8b10 	vmov	r8, r9, d0
 8003214:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	3350      	adds	r3, #80	; 0x50
 800321c:	443b      	add	r3, r7
 800321e:	3b38      	subs	r3, #56	; 0x38
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7fd f93c 	bl	80004a0 <__aeabi_f2d>
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	4640      	mov	r0, r8
 800322e:	4649      	mov	r1, r9
 8003230:	f7fd f98e 	bl	8000550 <__aeabi_dmul>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	4610      	mov	r0, r2
 800323a:	4619      	mov	r1, r3
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	4b20      	ldr	r3, [pc, #128]	; (80032c4 <TrayLocalization+0x644>)
 8003242:	f7fd f985 	bl	8000550 <__aeabi_dmul>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4610      	mov	r0, r2
 800324c:	4619      	mov	r1, r3
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	4b1b      	ldr	r3, [pc, #108]	; (80032c0 <TrayLocalization+0x640>)
 8003254:	f7fd faa6 	bl	80007a4 <__aeabi_ddiv>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4620      	mov	r0, r4
 800325e:	4629      	mov	r1, r5
 8003260:	f7fc ffc0 	bl	80001e4 <__adddf3>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
				temp->Holes_Y[ind] = temp->Edge1_Y
 8003268:	f897 4049 	ldrb.w	r4, [r7, #73]	; 0x49
								+ (sin(theta)*RefX_case2[i]*8192.0/120.0);
 800326c:	4610      	mov	r0, r2
 800326e:	4619      	mov	r1, r3
 8003270:	f7fd fc66 	bl	8000b40 <__aeabi_d2f>
 8003274:	4601      	mov	r1, r0
				temp->Holes_Y[ind] = temp->Edge1_Y
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	f104 030e 	add.w	r3, r4, #14
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	3304      	adds	r3, #4
 8003282:	6019      	str	r1, [r3, #0]
				ind += 1;
 8003284:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003288:	3301      	adds	r3, #1
 800328a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
			for(j=0;j<3;j++)
 800328e:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 8003292:	b2db      	uxtb	r3, r3
 8003294:	3301      	adds	r3, #1
 8003296:	b2db      	uxtb	r3, r3
 8003298:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 800329c:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	f77f af0f 	ble.w	80030c4 <TrayLocalization+0x444>
		for(i=0;i<3;i++)
 80032a6:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	3301      	adds	r3, #1
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80032b4:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	f77f aeff 	ble.w	80030bc <TrayLocalization+0x43c>
			}
		}
		break;
 80032be:	e004      	b.n	80032ca <TrayLocalization+0x64a>
 80032c0:	405e0000 	.word	0x405e0000
 80032c4:	40c00000 	.word	0x40c00000
	case 0:
		break;
 80032c8:	bf00      	nop
	}
}
 80032ca:	bf00      	nop
 80032cc:	3750      	adds	r7, #80	; 0x50
 80032ce:	46bd      	mov	sp, r7
 80032d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080032d4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80032da:	463b      	mov	r3, r7
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	609a      	str	r2, [r3, #8]
 80032e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80032e6:	4b28      	ldr	r3, [pc, #160]	; (8003388 <MX_ADC1_Init+0xb4>)
 80032e8:	4a28      	ldr	r2, [pc, #160]	; (800338c <MX_ADC1_Init+0xb8>)
 80032ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80032ec:	4b26      	ldr	r3, [pc, #152]	; (8003388 <MX_ADC1_Init+0xb4>)
 80032ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80032f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80032f4:	4b24      	ldr	r3, [pc, #144]	; (8003388 <MX_ADC1_Init+0xb4>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80032fa:	4b23      	ldr	r3, [pc, #140]	; (8003388 <MX_ADC1_Init+0xb4>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003300:	4b21      	ldr	r3, [pc, #132]	; (8003388 <MX_ADC1_Init+0xb4>)
 8003302:	2201      	movs	r2, #1
 8003304:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003306:	4b20      	ldr	r3, [pc, #128]	; (8003388 <MX_ADC1_Init+0xb4>)
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800330e:	4b1e      	ldr	r3, [pc, #120]	; (8003388 <MX_ADC1_Init+0xb4>)
 8003310:	2200      	movs	r2, #0
 8003312:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003314:	4b1c      	ldr	r3, [pc, #112]	; (8003388 <MX_ADC1_Init+0xb4>)
 8003316:	4a1e      	ldr	r2, [pc, #120]	; (8003390 <MX_ADC1_Init+0xbc>)
 8003318:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800331a:	4b1b      	ldr	r3, [pc, #108]	; (8003388 <MX_ADC1_Init+0xb4>)
 800331c:	2200      	movs	r2, #0
 800331e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8003320:	4b19      	ldr	r3, [pc, #100]	; (8003388 <MX_ADC1_Init+0xb4>)
 8003322:	2202      	movs	r2, #2
 8003324:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003326:	4b18      	ldr	r3, [pc, #96]	; (8003388 <MX_ADC1_Init+0xb4>)
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800332e:	4b16      	ldr	r3, [pc, #88]	; (8003388 <MX_ADC1_Init+0xb4>)
 8003330:	2201      	movs	r2, #1
 8003332:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003334:	4814      	ldr	r0, [pc, #80]	; (8003388 <MX_ADC1_Init+0xb4>)
 8003336:	f002 fe55 	bl	8005fe4 <HAL_ADC_Init>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003340:	f001 fa5a 	bl	80047f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003344:	230a      	movs	r3, #10
 8003346:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003348:	2301      	movs	r3, #1
 800334a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800334c:	2306      	movs	r3, #6
 800334e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003350:	463b      	mov	r3, r7
 8003352:	4619      	mov	r1, r3
 8003354:	480c      	ldr	r0, [pc, #48]	; (8003388 <MX_ADC1_Init+0xb4>)
 8003356:	f002 ff97 	bl	8006288 <HAL_ADC_ConfigChannel>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003360:	f001 fa4a 	bl	80047f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003364:	230b      	movs	r3, #11
 8003366:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003368:	2302      	movs	r3, #2
 800336a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800336c:	463b      	mov	r3, r7
 800336e:	4619      	mov	r1, r3
 8003370:	4805      	ldr	r0, [pc, #20]	; (8003388 <MX_ADC1_Init+0xb4>)
 8003372:	f002 ff89 	bl	8006288 <HAL_ADC_ConfigChannel>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800337c:	f001 fa3c 	bl	80047f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003380:	bf00      	nop
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	20000310 	.word	0x20000310
 800338c:	40012000 	.word	0x40012000
 8003390:	0f000001 	.word	0x0f000001

08003394 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b08a      	sub	sp, #40	; 0x28
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800339c:	f107 0314 	add.w	r3, r7, #20
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	605a      	str	r2, [r3, #4]
 80033a6:	609a      	str	r2, [r3, #8]
 80033a8:	60da      	str	r2, [r3, #12]
 80033aa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a2f      	ldr	r2, [pc, #188]	; (8003470 <HAL_ADC_MspInit+0xdc>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d157      	bne.n	8003466 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033b6:	2300      	movs	r3, #0
 80033b8:	613b      	str	r3, [r7, #16]
 80033ba:	4b2e      	ldr	r3, [pc, #184]	; (8003474 <HAL_ADC_MspInit+0xe0>)
 80033bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033be:	4a2d      	ldr	r2, [pc, #180]	; (8003474 <HAL_ADC_MspInit+0xe0>)
 80033c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c4:	6453      	str	r3, [r2, #68]	; 0x44
 80033c6:	4b2b      	ldr	r3, [pc, #172]	; (8003474 <HAL_ADC_MspInit+0xe0>)
 80033c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ce:	613b      	str	r3, [r7, #16]
 80033d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033d2:	2300      	movs	r3, #0
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	4b27      	ldr	r3, [pc, #156]	; (8003474 <HAL_ADC_MspInit+0xe0>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	4a26      	ldr	r2, [pc, #152]	; (8003474 <HAL_ADC_MspInit+0xe0>)
 80033dc:	f043 0304 	orr.w	r3, r3, #4
 80033e0:	6313      	str	r3, [r2, #48]	; 0x30
 80033e2:	4b24      	ldr	r3, [pc, #144]	; (8003474 <HAL_ADC_MspInit+0xe0>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80033ee:	2303      	movs	r3, #3
 80033f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033f2:	2303      	movs	r3, #3
 80033f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033fa:	f107 0314 	add.w	r3, r7, #20
 80033fe:	4619      	mov	r1, r3
 8003400:	481d      	ldr	r0, [pc, #116]	; (8003478 <HAL_ADC_MspInit+0xe4>)
 8003402:	f003 ff1f 	bl	8007244 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003406:	4b1d      	ldr	r3, [pc, #116]	; (800347c <HAL_ADC_MspInit+0xe8>)
 8003408:	4a1d      	ldr	r2, [pc, #116]	; (8003480 <HAL_ADC_MspInit+0xec>)
 800340a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800340c:	4b1b      	ldr	r3, [pc, #108]	; (800347c <HAL_ADC_MspInit+0xe8>)
 800340e:	2200      	movs	r2, #0
 8003410:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003412:	4b1a      	ldr	r3, [pc, #104]	; (800347c <HAL_ADC_MspInit+0xe8>)
 8003414:	2200      	movs	r2, #0
 8003416:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003418:	4b18      	ldr	r3, [pc, #96]	; (800347c <HAL_ADC_MspInit+0xe8>)
 800341a:	2200      	movs	r2, #0
 800341c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800341e:	4b17      	ldr	r3, [pc, #92]	; (800347c <HAL_ADC_MspInit+0xe8>)
 8003420:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003424:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003426:	4b15      	ldr	r3, [pc, #84]	; (800347c <HAL_ADC_MspInit+0xe8>)
 8003428:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800342c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800342e:	4b13      	ldr	r3, [pc, #76]	; (800347c <HAL_ADC_MspInit+0xe8>)
 8003430:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003434:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003436:	4b11      	ldr	r3, [pc, #68]	; (800347c <HAL_ADC_MspInit+0xe8>)
 8003438:	f44f 7280 	mov.w	r2, #256	; 0x100
 800343c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800343e:	4b0f      	ldr	r3, [pc, #60]	; (800347c <HAL_ADC_MspInit+0xe8>)
 8003440:	2200      	movs	r2, #0
 8003442:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003444:	4b0d      	ldr	r3, [pc, #52]	; (800347c <HAL_ADC_MspInit+0xe8>)
 8003446:	2200      	movs	r2, #0
 8003448:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800344a:	480c      	ldr	r0, [pc, #48]	; (800347c <HAL_ADC_MspInit+0xe8>)
 800344c:	f003 fade 	bl	8006a0c <HAL_DMA_Init>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003456:	f001 f9cf 	bl	80047f8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a07      	ldr	r2, [pc, #28]	; (800347c <HAL_ADC_MspInit+0xe8>)
 800345e:	639a      	str	r2, [r3, #56]	; 0x38
 8003460:	4a06      	ldr	r2, [pc, #24]	; (800347c <HAL_ADC_MspInit+0xe8>)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003466:	bf00      	nop
 8003468:	3728      	adds	r7, #40	; 0x28
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40012000 	.word	0x40012000
 8003474:	40023800 	.word	0x40023800
 8003478:	40020800 	.word	0x40020800
 800347c:	20000358 	.word	0x20000358
 8003480:	40026410 	.word	0x40026410

08003484 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	607b      	str	r3, [r7, #4]
 800348e:	4b17      	ldr	r3, [pc, #92]	; (80034ec <MX_DMA_Init+0x68>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	4a16      	ldr	r2, [pc, #88]	; (80034ec <MX_DMA_Init+0x68>)
 8003494:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003498:	6313      	str	r3, [r2, #48]	; 0x30
 800349a:	4b14      	ldr	r3, [pc, #80]	; (80034ec <MX_DMA_Init+0x68>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034a2:	607b      	str	r3, [r7, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	603b      	str	r3, [r7, #0]
 80034aa:	4b10      	ldr	r3, [pc, #64]	; (80034ec <MX_DMA_Init+0x68>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	4a0f      	ldr	r2, [pc, #60]	; (80034ec <MX_DMA_Init+0x68>)
 80034b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034b4:	6313      	str	r3, [r2, #48]	; 0x30
 80034b6:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <MX_DMA_Init+0x68>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80034c2:	2200      	movs	r2, #0
 80034c4:	2100      	movs	r1, #0
 80034c6:	2011      	movs	r0, #17
 80034c8:	f003 fa69 	bl	800699e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80034cc:	2011      	movs	r0, #17
 80034ce:	f003 fa82 	bl	80069d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80034d2:	2200      	movs	r2, #0
 80034d4:	2100      	movs	r1, #0
 80034d6:	2038      	movs	r0, #56	; 0x38
 80034d8:	f003 fa61 	bl	800699e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80034dc:	2038      	movs	r0, #56	; 0x38
 80034de:	f003 fa7a 	bl	80069d6 <HAL_NVIC_EnableIRQ>

}
 80034e2:	bf00      	nop
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40023800 	.word	0x40023800

080034f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08a      	sub	sp, #40	; 0x28
 80034f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f6:	f107 0314 	add.w	r3, r7, #20
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	605a      	str	r2, [r3, #4]
 8003500:	609a      	str	r2, [r3, #8]
 8003502:	60da      	str	r2, [r3, #12]
 8003504:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003506:	2300      	movs	r3, #0
 8003508:	613b      	str	r3, [r7, #16]
 800350a:	4b70      	ldr	r3, [pc, #448]	; (80036cc <MX_GPIO_Init+0x1dc>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	4a6f      	ldr	r2, [pc, #444]	; (80036cc <MX_GPIO_Init+0x1dc>)
 8003510:	f043 0304 	orr.w	r3, r3, #4
 8003514:	6313      	str	r3, [r2, #48]	; 0x30
 8003516:	4b6d      	ldr	r3, [pc, #436]	; (80036cc <MX_GPIO_Init+0x1dc>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	613b      	str	r3, [r7, #16]
 8003520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	4b69      	ldr	r3, [pc, #420]	; (80036cc <MX_GPIO_Init+0x1dc>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	4a68      	ldr	r2, [pc, #416]	; (80036cc <MX_GPIO_Init+0x1dc>)
 800352c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003530:	6313      	str	r3, [r2, #48]	; 0x30
 8003532:	4b66      	ldr	r3, [pc, #408]	; (80036cc <MX_GPIO_Init+0x1dc>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	60bb      	str	r3, [r7, #8]
 8003542:	4b62      	ldr	r3, [pc, #392]	; (80036cc <MX_GPIO_Init+0x1dc>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	4a61      	ldr	r2, [pc, #388]	; (80036cc <MX_GPIO_Init+0x1dc>)
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	6313      	str	r3, [r2, #48]	; 0x30
 800354e:	4b5f      	ldr	r3, [pc, #380]	; (80036cc <MX_GPIO_Init+0x1dc>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	60bb      	str	r3, [r7, #8]
 8003558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	607b      	str	r3, [r7, #4]
 800355e:	4b5b      	ldr	r3, [pc, #364]	; (80036cc <MX_GPIO_Init+0x1dc>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	4a5a      	ldr	r2, [pc, #360]	; (80036cc <MX_GPIO_Init+0x1dc>)
 8003564:	f043 0302 	orr.w	r3, r3, #2
 8003568:	6313      	str	r3, [r2, #48]	; 0x30
 800356a:	4b58      	ldr	r3, [pc, #352]	; (80036cc <MX_GPIO_Init+0x1dc>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	607b      	str	r3, [r7, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003576:	2300      	movs	r3, #0
 8003578:	603b      	str	r3, [r7, #0]
 800357a:	4b54      	ldr	r3, [pc, #336]	; (80036cc <MX_GPIO_Init+0x1dc>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	4a53      	ldr	r2, [pc, #332]	; (80036cc <MX_GPIO_Init+0x1dc>)
 8003580:	f043 0308 	orr.w	r3, r3, #8
 8003584:	6313      	str	r3, [r2, #48]	; 0x30
 8003586:	4b51      	ldr	r3, [pc, #324]	; (80036cc <MX_GPIO_Init+0x1dc>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	603b      	str	r3, [r7, #0]
 8003590:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003592:	2200      	movs	r2, #0
 8003594:	2120      	movs	r1, #32
 8003596:	484e      	ldr	r0, [pc, #312]	; (80036d0 <MX_GPIO_Init+0x1e0>)
 8003598:	f003 fff0 	bl	800757c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800359c:	2200      	movs	r2, #0
 800359e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80035a2:	484c      	ldr	r0, [pc, #304]	; (80036d4 <MX_GPIO_Init+0x1e4>)
 80035a4:	f003 ffea 	bl	800757c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80035a8:	2200      	movs	r2, #0
 80035aa:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
 80035ae:	484a      	ldr	r0, [pc, #296]	; (80036d8 <MX_GPIO_Init+0x1e8>)
 80035b0:	f003 ffe4 	bl	800757c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80035b4:	2200      	movs	r2, #0
 80035b6:	2104      	movs	r1, #4
 80035b8:	4848      	ldr	r0, [pc, #288]	; (80036dc <MX_GPIO_Init+0x1ec>)
 80035ba:	f003 ffdf 	bl	800757c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80035be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80035c4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80035c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80035ce:	f107 0314 	add.w	r3, r7, #20
 80035d2:	4619      	mov	r1, r3
 80035d4:	4840      	ldr	r0, [pc, #256]	; (80036d8 <MX_GPIO_Init+0x1e8>)
 80035d6:	f003 fe35 	bl	8007244 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80035da:	2304      	movs	r3, #4
 80035dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035de:	2300      	movs	r3, #0
 80035e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e2:	2300      	movs	r3, #0
 80035e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035e6:	f107 0314 	add.w	r3, r7, #20
 80035ea:	4619      	mov	r1, r3
 80035ec:	483a      	ldr	r0, [pc, #232]	; (80036d8 <MX_GPIO_Init+0x1e8>)
 80035ee:	f003 fe29 	bl	8007244 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80035f2:	2310      	movs	r3, #16
 80035f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035f6:	2300      	movs	r3, #0
 80035f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fa:	2300      	movs	r3, #0
 80035fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035fe:	f107 0314 	add.w	r3, r7, #20
 8003602:	4619      	mov	r1, r3
 8003604:	4832      	ldr	r0, [pc, #200]	; (80036d0 <MX_GPIO_Init+0x1e0>)
 8003606:	f003 fe1d 	bl	8007244 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800360a:	2320      	movs	r3, #32
 800360c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800360e:	2301      	movs	r3, #1
 8003610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003612:	2300      	movs	r3, #0
 8003614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003616:	2300      	movs	r3, #0
 8003618:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800361a:	f107 0314 	add.w	r3, r7, #20
 800361e:	4619      	mov	r1, r3
 8003620:	482b      	ldr	r0, [pc, #172]	; (80036d0 <MX_GPIO_Init+0x1e0>)
 8003622:	f003 fe0f 	bl	8007244 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003626:	2301      	movs	r3, #1
 8003628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800362a:	2300      	movs	r3, #0
 800362c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362e:	2300      	movs	r3, #0
 8003630:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003632:	f107 0314 	add.w	r3, r7, #20
 8003636:	4619      	mov	r1, r3
 8003638:	4826      	ldr	r0, [pc, #152]	; (80036d4 <MX_GPIO_Init+0x1e4>)
 800363a:	f003 fe03 	bl	8007244 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800363e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003644:	2301      	movs	r3, #1
 8003646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003648:	2300      	movs	r3, #0
 800364a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800364c:	2300      	movs	r3, #0
 800364e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003650:	f107 0314 	add.w	r3, r7, #20
 8003654:	4619      	mov	r1, r3
 8003656:	481f      	ldr	r0, [pc, #124]	; (80036d4 <MX_GPIO_Init+0x1e4>)
 8003658:	f003 fdf4 	bl	8007244 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800365c:	f44f 53e2 	mov.w	r3, #7232	; 0x1c40
 8003660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003662:	2301      	movs	r3, #1
 8003664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003666:	2300      	movs	r3, #0
 8003668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800366a:	2300      	movs	r3, #0
 800366c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800366e:	f107 0314 	add.w	r3, r7, #20
 8003672:	4619      	mov	r1, r3
 8003674:	4818      	ldr	r0, [pc, #96]	; (80036d8 <MX_GPIO_Init+0x1e8>)
 8003676:	f003 fde5 	bl	8007244 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800367a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800367e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003680:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003686:	2300      	movs	r3, #0
 8003688:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800368a:	f107 0314 	add.w	r3, r7, #20
 800368e:	4619      	mov	r1, r3
 8003690:	480f      	ldr	r0, [pc, #60]	; (80036d0 <MX_GPIO_Init+0x1e0>)
 8003692:	f003 fdd7 	bl	8007244 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003696:	2304      	movs	r3, #4
 8003698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800369a:	2301      	movs	r3, #1
 800369c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369e:	2300      	movs	r3, #0
 80036a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a2:	2300      	movs	r3, #0
 80036a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036a6:	f107 0314 	add.w	r3, r7, #20
 80036aa:	4619      	mov	r1, r3
 80036ac:	480b      	ldr	r0, [pc, #44]	; (80036dc <MX_GPIO_Init+0x1ec>)
 80036ae:	f003 fdc9 	bl	8007244 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80036b2:	2200      	movs	r2, #0
 80036b4:	2100      	movs	r1, #0
 80036b6:	2028      	movs	r0, #40	; 0x28
 80036b8:	f003 f971 	bl	800699e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80036bc:	2028      	movs	r0, #40	; 0x28
 80036be:	f003 f98a 	bl	80069d6 <HAL_NVIC_EnableIRQ>

}
 80036c2:	bf00      	nop
 80036c4:	3728      	adds	r7, #40	; 0x28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40023800 	.word	0x40023800
 80036d0:	40020000 	.word	0x40020000
 80036d4:	40020400 	.word	0x40020400
 80036d8:	40020800 	.word	0x40020800
 80036dc:	40020c00 	.word	0x40020c00

080036e0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80036e4:	4b12      	ldr	r3, [pc, #72]	; (8003730 <MX_I2C1_Init+0x50>)
 80036e6:	4a13      	ldr	r2, [pc, #76]	; (8003734 <MX_I2C1_Init+0x54>)
 80036e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80036ea:	4b11      	ldr	r3, [pc, #68]	; (8003730 <MX_I2C1_Init+0x50>)
 80036ec:	4a12      	ldr	r2, [pc, #72]	; (8003738 <MX_I2C1_Init+0x58>)
 80036ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80036f0:	4b0f      	ldr	r3, [pc, #60]	; (8003730 <MX_I2C1_Init+0x50>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80036f6:	4b0e      	ldr	r3, [pc, #56]	; (8003730 <MX_I2C1_Init+0x50>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036fc:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <MX_I2C1_Init+0x50>)
 80036fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003702:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003704:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <MX_I2C1_Init+0x50>)
 8003706:	2200      	movs	r2, #0
 8003708:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800370a:	4b09      	ldr	r3, [pc, #36]	; (8003730 <MX_I2C1_Init+0x50>)
 800370c:	2200      	movs	r2, #0
 800370e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003710:	4b07      	ldr	r3, [pc, #28]	; (8003730 <MX_I2C1_Init+0x50>)
 8003712:	2200      	movs	r2, #0
 8003714:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003716:	4b06      	ldr	r3, [pc, #24]	; (8003730 <MX_I2C1_Init+0x50>)
 8003718:	2200      	movs	r2, #0
 800371a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800371c:	4804      	ldr	r0, [pc, #16]	; (8003730 <MX_I2C1_Init+0x50>)
 800371e:	f003 ff5f 	bl	80075e0 <HAL_I2C_Init>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003728:	f001 f866 	bl	80047f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800372c:	bf00      	nop
 800372e:	bd80      	pop	{r7, pc}
 8003730:	200003b8 	.word	0x200003b8
 8003734:	40005400 	.word	0x40005400
 8003738:	000186a0 	.word	0x000186a0

0800373c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b08a      	sub	sp, #40	; 0x28
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003744:	f107 0314 	add.w	r3, r7, #20
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	605a      	str	r2, [r3, #4]
 800374e:	609a      	str	r2, [r3, #8]
 8003750:	60da      	str	r2, [r3, #12]
 8003752:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a21      	ldr	r2, [pc, #132]	; (80037e0 <HAL_I2C_MspInit+0xa4>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d13c      	bne.n	80037d8 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800375e:	2300      	movs	r3, #0
 8003760:	613b      	str	r3, [r7, #16]
 8003762:	4b20      	ldr	r3, [pc, #128]	; (80037e4 <HAL_I2C_MspInit+0xa8>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	4a1f      	ldr	r2, [pc, #124]	; (80037e4 <HAL_I2C_MspInit+0xa8>)
 8003768:	f043 0302 	orr.w	r3, r3, #2
 800376c:	6313      	str	r3, [r2, #48]	; 0x30
 800376e:	4b1d      	ldr	r3, [pc, #116]	; (80037e4 <HAL_I2C_MspInit+0xa8>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	613b      	str	r3, [r7, #16]
 8003778:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800377a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800377e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003780:	2312      	movs	r3, #18
 8003782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003784:	2300      	movs	r3, #0
 8003786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003788:	2303      	movs	r3, #3
 800378a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800378c:	2304      	movs	r3, #4
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003790:	f107 0314 	add.w	r3, r7, #20
 8003794:	4619      	mov	r1, r3
 8003796:	4814      	ldr	r0, [pc, #80]	; (80037e8 <HAL_I2C_MspInit+0xac>)
 8003798:	f003 fd54 	bl	8007244 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800379c:	2300      	movs	r3, #0
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	4b10      	ldr	r3, [pc, #64]	; (80037e4 <HAL_I2C_MspInit+0xa8>)
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	4a0f      	ldr	r2, [pc, #60]	; (80037e4 <HAL_I2C_MspInit+0xa8>)
 80037a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80037aa:	6413      	str	r3, [r2, #64]	; 0x40
 80037ac:	4b0d      	ldr	r3, [pc, #52]	; (80037e4 <HAL_I2C_MspInit+0xa8>)
 80037ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80037b8:	2200      	movs	r2, #0
 80037ba:	2100      	movs	r1, #0
 80037bc:	201f      	movs	r0, #31
 80037be:	f003 f8ee 	bl	800699e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80037c2:	201f      	movs	r0, #31
 80037c4:	f003 f907 	bl	80069d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80037c8:	2200      	movs	r2, #0
 80037ca:	2100      	movs	r1, #0
 80037cc:	2020      	movs	r0, #32
 80037ce:	f003 f8e6 	bl	800699e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80037d2:	2020      	movs	r0, #32
 80037d4:	f003 f8ff 	bl	80069d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80037d8:	bf00      	nop
 80037da:	3728      	adds	r7, #40	; 0x28
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40005400 	.word	0x40005400
 80037e4:	40023800 	.word	0x40023800
 80037e8:	40020400 	.word	0x40020400

080037ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037ec:	b590      	push	{r4, r7, lr}
 80037ee:	ed2d 8b02 	vpush	{d8}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037f6:	f002 fb83 	bl	8005f00 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037fa:	f000 fd6b 	bl	80042d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037fe:	f7ff fe77 	bl	80034f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003802:	f7ff fe3f 	bl	8003484 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003806:	f001 fb87 	bl	8004f18 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800380a:	f001 f8c9 	bl	80049a0 <MX_TIM2_Init>
  MX_TIM5_Init();
 800380e:	f001 f9df 	bl	8004bd0 <MX_TIM5_Init>
  MX_TIM3_Init();
 8003812:	f001 f919 	bl	8004a48 <MX_TIM3_Init>
  MX_I2C1_Init();
 8003816:	f7ff ff63 	bl	80036e0 <MX_I2C1_Init>
  MX_TIM4_Init();
 800381a:	f001 f98b 	bl	8004b34 <MX_TIM4_Init>
  MX_TIM11_Init();
 800381e:	f001 fa25 	bl	8004c6c <MX_TIM11_Init>
  MX_ADC1_Init();
 8003822:	f7ff fd57 	bl	80032d4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  //Setup Initial vaules
  InitKalmanStruct(&KF,Var_Q,Var_R);
 8003826:	4bb9      	ldr	r3, [pc, #740]	; (8003b0c <main+0x320>)
 8003828:	edd3 7a00 	vldr	s15, [r3]
 800382c:	4bb8      	ldr	r3, [pc, #736]	; (8003b10 <main+0x324>)
 800382e:	ed93 7a00 	vldr	s14, [r3]
 8003832:	eef0 0a47 	vmov.f32	s1, s14
 8003836:	eeb0 0a67 	vmov.f32	s0, s15
 800383a:	48b6      	ldr	r0, [pc, #728]	; (8003b14 <main+0x328>)
 800383c:	f7fd ff34 	bl	80016a8 <InitKalmanStruct>

  InitReadEncoder(&ReadEncoderParam, 1000);
 8003840:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003844:	48b4      	ldr	r0, [pc, #720]	; (8003b18 <main+0x32c>)
 8003846:	f7ff f912 	bl	8002a6e <InitReadEncoder>

  QuinticSetup(&QuinticVar, vmax, amax);
 800384a:	4bb4      	ldr	r3, [pc, #720]	; (8003b1c <main+0x330>)
 800384c:	edd3 7a00 	vldr	s15, [r3]
 8003850:	4bb3      	ldr	r3, [pc, #716]	; (8003b20 <main+0x334>)
 8003852:	ed93 7a00 	vldr	s14, [r3]
 8003856:	eef0 0a47 	vmov.f32	s1, s14
 800385a:	eeb0 0a67 	vmov.f32	s0, s15
 800385e:	48b1      	ldr	r0, [pc, #708]	; (8003b24 <main+0x338>)
 8003860:	f7fe fda4 	bl	80023ac <QuinticSetup>

  PIDSetup(&PositionLoop, 15, 2.5, 0.00001, 10);
 8003864:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8003868:	ed9f 1aaf 	vldr	s2, [pc, #700]	; 8003b28 <main+0x33c>
 800386c:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
 8003870:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8003874:	48ad      	ldr	r0, [pc, #692]	; (8003b2c <main+0x340>)
 8003876:	f7fe fc69 	bl	800214c <PIDSetup>
  PIDSetup(&VelocityLoop, 5.0, 0.00000001, 0, 0.00003);
 800387a:	eddf 1aad 	vldr	s3, [pc, #692]	; 8003b30 <main+0x344>
 800387e:	ed9f 1aad 	vldr	s2, [pc, #692]	; 8003b34 <main+0x348>
 8003882:	eddf 0aad 	vldr	s1, [pc, #692]	; 8003b38 <main+0x34c>
 8003886:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800388a:	48ac      	ldr	r0, [pc, #688]	; (8003b3c <main+0x350>)
 800388c:	f7fe fc5e 	bl	800214c <PIDSetup>


  //Timers Start
  HAL_TIM_Base_Start_IT(&htim4);
 8003890:	48ab      	ldr	r0, [pc, #684]	; (8003b40 <main+0x354>)
 8003892:	f006 fb0d 	bl	8009eb0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);  //Start QEI
 8003896:	2104      	movs	r1, #4
 8003898:	48aa      	ldr	r0, [pc, #680]	; (8003b44 <main+0x358>)
 800389a:	f006 fe69 	bl	800a570 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);//Start PWM
 800389e:	2108      	movs	r1, #8
 80038a0:	48a9      	ldr	r0, [pc, #676]	; (8003b48 <main+0x35c>)
 80038a2:	f006 fc33 	bl	800a10c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 80038a6:	48a9      	ldr	r0, [pc, #676]	; (8003b4c <main+0x360>)
 80038a8:	f006 fb02 	bl	8009eb0 <HAL_TIM_Base_Start_IT>

  hmodbus.huart = &huart2;
 80038ac:	4ba8      	ldr	r3, [pc, #672]	; (8003b50 <main+0x364>)
 80038ae:	4aa9      	ldr	r2, [pc, #676]	; (8003b54 <main+0x368>)
 80038b0:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim11;
 80038b2:	4ba7      	ldr	r3, [pc, #668]	; (8003b50 <main+0x364>)
 80038b4:	4aa8      	ldr	r2, [pc, #672]	; (8003b58 <main+0x36c>)
 80038b6:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80038b8:	4ba5      	ldr	r3, [pc, #660]	; (8003b50 <main+0x364>)
 80038ba:	2215      	movs	r2, #21
 80038bc:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize = 200;
 80038be:	4ba4      	ldr	r3, [pc, #656]	; (8003b50 <main+0x364>)
 80038c0:	22c8      	movs	r2, #200	; 0xc8
 80038c2:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 80038c4:	49a5      	ldr	r1, [pc, #660]	; (8003b5c <main+0x370>)
 80038c6:	48a2      	ldr	r0, [pc, #648]	; (8003b50 <main+0x364>)
 80038c8:	f7fe f936 	bl	8001b38 <Modbus_init>

  HAL_ADC_Start_DMA(&hadc1, VR, 2); // Start ADC
 80038cc:	2202      	movs	r2, #2
 80038ce:	49a4      	ldr	r1, [pc, #656]	; (8003b60 <main+0x374>)
 80038d0:	48a4      	ldr	r0, [pc, #656]	; (8003b64 <main+0x378>)
 80038d2:	f002 fbcb 	bl	800606c <HAL_ADC_Start_DMA>

//	//EndEff
	TestState = SoftReset;
 80038d6:	4ba4      	ldr	r3, [pc, #656]	; (8003b68 <main+0x37c>)
 80038d8:	2201      	movs	r2, #1
 80038da:	701a      	strb	r2, [r3, #0]
	Stamp = 1;
 80038dc:	4ba3      	ldr	r3, [pc, #652]	; (8003b6c <main+0x380>)
 80038de:	2201      	movs	r2, #1
 80038e0:	701a      	strb	r2, [r3, #0]
	TestMode();
 80038e2:	f7fd fdaf 	bl	8001444 <TestMode>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	Modbus_Protocal_Worker();
 80038e6:	f7fe f9b3 	bl	8001c50 <Modbus_Protocal_Worker>
	static uint32_t timestamp =0;
	static uint32_t Modbustimestamp = 0;
	if((KF.x_hat[1] >= 1000) || (KF.x_hat[1] <= -1000))
 80038ea:	4b8a      	ldr	r3, [pc, #552]	; (8003b14 <main+0x328>)
 80038ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80038f0:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8003b70 <main+0x384>
 80038f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038fc:	da09      	bge.n	8003912 <main+0x126>
 80038fe:	4b85      	ldr	r3, [pc, #532]	; (8003b14 <main+0x328>)
 8003900:	edd3 7a01 	vldr	s15, [r3, #4]
 8003904:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8003b74 <main+0x388>
 8003908:	eef4 7ac7 	vcmpe.f32	s15, s14
 800390c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003910:	d806      	bhi.n	8003920 <main+0x134>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 8003912:	2201      	movs	r2, #1
 8003914:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003918:	4897      	ldr	r0, [pc, #604]	; (8003b78 <main+0x38c>)
 800391a:	f003 fe2f 	bl	800757c <HAL_GPIO_WritePin>
 800391e:	e005      	b.n	800392c <main+0x140>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
 8003920:	2200      	movs	r2, #0
 8003922:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003926:	4894      	ldr	r0, [pc, #592]	; (8003b78 <main+0x38c>)
 8003928:	f003 fe28 	bl	800757c <HAL_GPIO_WritePin>
	}

	if (HAL_GetTick() >= Modbustimestamp)
 800392c:	f002 fb4e 	bl	8005fcc <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	4b92      	ldr	r3, [pc, #584]	; (8003b7c <main+0x390>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	429a      	cmp	r2, r3
 8003938:	f0c0 80b1 	bcc.w	8003a9e <main+0x2b2>
	{
	  Modbustimestamp = HAL_GetTick() + 200;
 800393c:	f002 fb46 	bl	8005fcc <HAL_GetTick>
 8003940:	4603      	mov	r3, r0
 8003942:	33c8      	adds	r3, #200	; 0xc8
 8003944:	4a8d      	ldr	r2, [pc, #564]	; (8003b7c <main+0x390>)
 8003946:	6013      	str	r3, [r2, #0]
	  registerFrame[0x00].U16 = 0b0101100101100001;
 8003948:	4b84      	ldr	r3, [pc, #528]	; (8003b5c <main+0x370>)
 800394a:	f645 1261 	movw	r2, #22881	; 0x5961
 800394e:	801a      	strh	r2, [r3, #0]
	  //Update y axis position to basesystem
	  registerFrame[0x11].U16 = ((((QEIData.QEIPosition-OpVar.HomePosOffset) * 120) / 8192 ) + 1) * 10;
 8003950:	4b8b      	ldr	r3, [pc, #556]	; (8003b80 <main+0x394>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	461a      	mov	r2, r3
 8003956:	4b8b      	ldr	r3, [pc, #556]	; (8003b84 <main+0x398>)
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	1ad2      	subs	r2, r2, r3
 800395c:	4613      	mov	r3, r2
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	1a9b      	subs	r3, r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	0b5b      	lsrs	r3, r3, #13
 8003966:	3301      	adds	r3, #1
 8003968:	b29b      	uxth	r3, r3
 800396a:	461a      	mov	r2, r3
 800396c:	0092      	lsls	r2, r2, #2
 800396e:	4413      	add	r3, r2
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	4b79      	ldr	r3, [pc, #484]	; (8003b5c <main+0x370>)
 8003976:	845a      	strh	r2, [r3, #34]	; 0x22
	  registerFrame[0x12].U16 = (KF.x_hat[1] * 120/8192) * 10;
 8003978:	4b66      	ldr	r3, [pc, #408]	; (8003b14 <main+0x328>)
 800397a:	edd3 7a01 	vldr	s15, [r3, #4]
 800397e:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8003b88 <main+0x39c>
 8003982:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003986:	eddf 6a81 	vldr	s13, [pc, #516]	; 8003b8c <main+0x3a0>
 800398a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800398e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003992:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800399a:	ee17 3a90 	vmov	r3, s15
 800399e:	b29a      	uxth	r2, r3
 80039a0:	4b6e      	ldr	r3, [pc, #440]	; (8003b5c <main+0x370>)
 80039a2:	849a      	strh	r2, [r3, #36]	; 0x24
	  registerFrame[0x13].U16 =	((KF.x_hat[1] - KF.x_hat_minus[1])* 120/8192) * 2500 * 10;
 80039a4:	4b5b      	ldr	r3, [pc, #364]	; (8003b14 <main+0x328>)
 80039a6:	ed93 7a01 	vldr	s14, [r3, #4]
 80039aa:	4b5a      	ldr	r3, [pc, #360]	; (8003b14 <main+0x328>)
 80039ac:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 80039b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039b4:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8003b88 <main+0x39c>
 80039b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80039bc:	eddf 6a73 	vldr	s13, [pc, #460]	; 8003b8c <main+0x3a0>
 80039c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039c4:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8003b90 <main+0x3a4>
 80039c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039cc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80039d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039d8:	ee17 3a90 	vmov	r3, s15
 80039dc:	b29a      	uxth	r2, r3
 80039de:	4b5f      	ldr	r3, [pc, #380]	; (8003b5c <main+0x370>)
 80039e0:	84da      	strh	r2, [r3, #38]	; 0x26
		static uint32_t Tray_Delay = 0; // Tray delay counter
		//Set Pick Tray
		if(registerFrame[0x01].U16 == 1)
 80039e2:	4b5e      	ldr	r3, [pc, #376]	; (8003b5c <main+0x370>)
 80039e4:	885b      	ldrh	r3, [r3, #2]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d11e      	bne.n	8003a28 <main+0x23c>
		{
			registerFrame[0x20].U16 = PickTray.ForBaseOriginX;
 80039ea:	4b6a      	ldr	r3, [pc, #424]	; (8003b94 <main+0x3a8>)
 80039ec:	8a1a      	ldrh	r2, [r3, #16]
 80039ee:	4b5b      	ldr	r3, [pc, #364]	; (8003b5c <main+0x370>)
 80039f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			registerFrame[0x21].U16 = PickTray.ForBaseOriginY;
 80039f4:	4b67      	ldr	r3, [pc, #412]	; (8003b94 <main+0x3a8>)
 80039f6:	8a5a      	ldrh	r2, [r3, #18]
 80039f8:	4b58      	ldr	r3, [pc, #352]	; (8003b5c <main+0x370>)
 80039fa:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			registerFrame[0x22].U16 = PickTray.ForBaseOrientation;
 80039fe:	4b65      	ldr	r3, [pc, #404]	; (8003b94 <main+0x3a8>)
 8003a00:	8a9a      	ldrh	r2, [r3, #20]
 8003a02:	4b56      	ldr	r3, [pc, #344]	; (8003b5c <main+0x370>)
 8003a04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			registerFrame[0x01].U16 = 0;
 8003a08:	4b54      	ldr	r3, [pc, #336]	; (8003b5c <main+0x370>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	805a      	strh	r2, [r3, #2]
			OpVar.Tray_SetTo = 1;
 8003a0e:	4b5d      	ldr	r3, [pc, #372]	; (8003b84 <main+0x398>)
 8003a10:	2201      	movs	r2, #1
 8003a12:	771a      	strb	r2, [r3, #28]
			Tray_Delay = HAL_GetTick() + 350; // Add delay
 8003a14:	f002 fada 	bl	8005fcc <HAL_GetTick>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 8003a1e:	4a5e      	ldr	r2, [pc, #376]	; (8003b98 <main+0x3ac>)
 8003a20:	6013      	str	r3, [r2, #0]
			registerFrame[0x10].U16 = 1; //Jog Pick Set
 8003a22:	4b4e      	ldr	r3, [pc, #312]	; (8003b5c <main+0x370>)
 8003a24:	2201      	movs	r2, #1
 8003a26:	841a      	strh	r2, [r3, #32]
			//registerFrame[0x10].U16 = 0; //Jog Pick Reset
		}
		//Set Place Tray
		if(registerFrame[0x01].U16 == 2)
 8003a28:	4b4c      	ldr	r3, [pc, #304]	; (8003b5c <main+0x370>)
 8003a2a:	885b      	ldrh	r3, [r3, #2]
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d11e      	bne.n	8003a6e <main+0x282>
		{
			registerFrame[0x23].U16 = PlaceTray.ForBaseOriginX;
 8003a30:	4b5a      	ldr	r3, [pc, #360]	; (8003b9c <main+0x3b0>)
 8003a32:	8a1a      	ldrh	r2, [r3, #16]
 8003a34:	4b49      	ldr	r3, [pc, #292]	; (8003b5c <main+0x370>)
 8003a36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			registerFrame[0x24].U16 = PlaceTray.ForBaseOriginY;
 8003a3a:	4b58      	ldr	r3, [pc, #352]	; (8003b9c <main+0x3b0>)
 8003a3c:	8a5a      	ldrh	r2, [r3, #18]
 8003a3e:	4b47      	ldr	r3, [pc, #284]	; (8003b5c <main+0x370>)
 8003a40:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			registerFrame[0x25].U16 = PlaceTray.ForBaseOrientation;
 8003a44:	4b55      	ldr	r3, [pc, #340]	; (8003b9c <main+0x3b0>)
 8003a46:	8a9a      	ldrh	r2, [r3, #20]
 8003a48:	4b44      	ldr	r3, [pc, #272]	; (8003b5c <main+0x370>)
 8003a4a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			registerFrame[0x01].U16 = 0;
 8003a4e:	4b43      	ldr	r3, [pc, #268]	; (8003b5c <main+0x370>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	805a      	strh	r2, [r3, #2]
			OpVar.Tray_SetTo = 1;
 8003a54:	4b4b      	ldr	r3, [pc, #300]	; (8003b84 <main+0x398>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	771a      	strb	r2, [r3, #28]
			Tray_Delay = HAL_GetTick() + 350; // Add delay
 8003a5a:	f002 fab7 	bl	8005fcc <HAL_GetTick>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 8003a64:	4a4c      	ldr	r2, [pc, #304]	; (8003b98 <main+0x3ac>)
 8003a66:	6013      	str	r3, [r2, #0]
			registerFrame[0x10].U16 = 2; //Jog Place Set
 8003a68:	4b3c      	ldr	r3, [pc, #240]	; (8003b5c <main+0x370>)
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	841a      	strh	r2, [r3, #32]
			//registerFrame[0x10].U16 = 0; //Jog Place Reset
		}
		//Delay for Jog
		if (HAL_GetTick() >= Tray_Delay && OpVar.Tray_SetTo != 0){
 8003a6e:	f002 faad 	bl	8005fcc <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	4b48      	ldr	r3, [pc, #288]	; (8003b98 <main+0x3ac>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d310      	bcc.n	8003a9e <main+0x2b2>
 8003a7c:	4b41      	ldr	r3, [pc, #260]	; (8003b84 <main+0x398>)
 8003a7e:	7f1b      	ldrb	r3, [r3, #28]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00c      	beq.n	8003a9e <main+0x2b2>
			Tray_Delay = HAL_GetTick() + 350; // Add delay
 8003a84:	f002 faa2 	bl	8005fcc <HAL_GetTick>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 8003a8e:	4a42      	ldr	r2, [pc, #264]	; (8003b98 <main+0x3ac>)
 8003a90:	6013      	str	r3, [r2, #0]
			registerFrame[0x10].U16 = 0;
 8003a92:	4b32      	ldr	r3, [pc, #200]	; (8003b5c <main+0x370>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	841a      	strh	r2, [r3, #32]
			OpVar.Tray_SetTo = 0;
 8003a98:	4b3a      	ldr	r3, [pc, #232]	; (8003b84 <main+0x398>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	771a      	strb	r2, [r3, #28]
		}
	}
	if(OpVar.ProxStop == 0)
 8003a9e:	4b39      	ldr	r3, [pc, #228]	; (8003b84 <main+0x398>)
 8003aa0:	79db      	ldrb	r3, [r3, #7]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f040 83ea 	bne.w	800427c <main+0xa90>
	{
		switch(OpState)
 8003aa8:	4b3d      	ldr	r3, [pc, #244]	; (8003ba0 <main+0x3b4>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b0a      	cmp	r3, #10
 8003aae:	f63f af1a 	bhi.w	80038e6 <main+0xfa>
 8003ab2:	a201      	add	r2, pc, #4	; (adr r2, 8003ab8 <main+0x2cc>)
 8003ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab8:	08003ae5 	.word	0x08003ae5
 8003abc:	08003ba5 	.word	0x08003ba5
 8003ac0:	08003c75 	.word	0x08003c75
 8003ac4:	08003ca3 	.word	0x08003ca3
 8003ac8:	08003d31 	.word	0x08003d31
 8003acc:	080038e7 	.word	0x080038e7
 8003ad0:	080038e7 	.word	0x080038e7
 8003ad4:	08003f69 	.word	0x08003f69
 8003ad8:	08004045 	.word	0x08004045
 8003adc:	08004147 	.word	0x08004147
 8003ae0:	08004255 	.word	0x08004255
			{
			case Init:
				OpVar.ControllerEnable = 0;
 8003ae4:	4b27      	ldr	r3, [pc, #156]	; (8003b84 <main+0x398>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	745a      	strb	r2, [r3, #17]
				OpVar.JoyEnable = 0;
 8003aea:	4b26      	ldr	r3, [pc, #152]	; (8003b84 <main+0x398>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	749a      	strb	r2, [r3, #18]
				PositionLoop.IsSteady = 0;
 8003af0:	4b0e      	ldr	r3, [pc, #56]	; (8003b2c <main+0x340>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET);
 8003af8:	2200      	movs	r2, #0
 8003afa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003afe:	481e      	ldr	r0, [pc, #120]	; (8003b78 <main+0x38c>)
 8003b00:	f003 fd3c 	bl	800757c <HAL_GPIO_WritePin>
				SetHome(&OpVar);
 8003b04:	481f      	ldr	r0, [pc, #124]	; (8003b84 <main+0x398>)
 8003b06:	f7fe ffef 	bl	8002ae8 <SetHome>
			break;
 8003b0a:	e3cf      	b.n	80042ac <main+0xac0>
 8003b0c:	2000022c 	.word	0x2000022c
 8003b10:	20000230 	.word	0x20000230
 8003b14:	200004f4 	.word	0x200004f4
 8003b18:	20000430 	.word	0x20000430
 8003b1c:	20000224 	.word	0x20000224
 8003b20:	20000228 	.word	0x20000228
 8003b24:	20000444 	.word	0x20000444
 8003b28:	3727c5ac 	.word	0x3727c5ac
 8003b2c:	20000494 	.word	0x20000494
 8003b30:	37fba882 	.word	0x37fba882
 8003b34:	00000000 	.word	0x00000000
 8003b38:	322bcc77 	.word	0x322bcc77
 8003b3c:	200004c4 	.word	0x200004c4
 8003b40:	20000fe8 	.word	0x20000fe8
 8003b44:	20000e80 	.word	0x20000e80
 8003b48:	20000f34 	.word	0x20000f34
 8003b4c:	2000109c 	.word	0x2000109c
 8003b50:	200007e0 	.word	0x200007e0
 8003b54:	20001204 	.word	0x20001204
 8003b58:	20001150 	.word	0x20001150
 8003b5c:	20000cb8 	.word	0x20000cb8
 8003b60:	20000304 	.word	0x20000304
 8003b64:	20000310 	.word	0x20000310
 8003b68:	200002c4 	.word	0x200002c4
 8003b6c:	200002c0 	.word	0x200002c0
 8003b70:	447a0000 	.word	0x447a0000
 8003b74:	c47a0000 	.word	0xc47a0000
 8003b78:	40020800 	.word	0x40020800
 8003b7c:	20000e70 	.word	0x20000e70
 8003b80:	20000438 	.word	0x20000438
 8003b84:	20000410 	.word	0x20000410
 8003b88:	42f00000 	.word	0x42f00000
 8003b8c:	46000000 	.word	0x46000000
 8003b90:	451c4000 	.word	0x451c4000
 8003b94:	20000710 	.word	0x20000710
 8003b98:	20000e74 	.word	0x20000e74
 8003b9c:	20000778 	.word	0x20000778
 8003ba0:	2000040c 	.word	0x2000040c
			case PreHoming:
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8003ba4:	4b50      	ldr	r3, [pc, #320]	; (8003ce8 <main+0x4fc>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	63da      	str	r2, [r3, #60]	; 0x3c
				OpVar.ControllerEnable = 1;
 8003bac:	4b4f      	ldr	r3, [pc, #316]	; (8003cec <main+0x500>)
 8003bae:	2201      	movs	r2, #1
 8003bb0:	745a      	strb	r2, [r3, #17]
				QuinticVar.current_velo = 0;
 8003bb2:	4b4f      	ldr	r3, [pc, #316]	; (8003cf0 <main+0x504>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	611a      	str	r2, [r3, #16]
				OpVar.HomingKey = 0;
 8003bb8:	4b4c      	ldr	r3, [pc, #304]	; (8003cec <main+0x500>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	721a      	strb	r2, [r3, #8]
				if(HAL_GetTick() >= OpVar.waitTime)
 8003bbe:	f002 fa05 	bl	8005fcc <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	4b49      	ldr	r3, [pc, #292]	; (8003cec <main+0x500>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d34e      	bcc.n	8003c6a <main+0x47e>
				{
					OpVar.waitTime = 0;
 8003bcc:	4b47      	ldr	r3, [pc, #284]	; (8003cec <main+0x500>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]
					InitKalmanStruct(&KF,Var_Q,Var_R);
 8003bd2:	4b48      	ldr	r3, [pc, #288]	; (8003cf4 <main+0x508>)
 8003bd4:	edd3 7a00 	vldr	s15, [r3]
 8003bd8:	4b47      	ldr	r3, [pc, #284]	; (8003cf8 <main+0x50c>)
 8003bda:	ed93 7a00 	vldr	s14, [r3]
 8003bde:	eef0 0a47 	vmov.f32	s1, s14
 8003be2:	eeb0 0a67 	vmov.f32	s0, s15
 8003be6:	4845      	ldr	r0, [pc, #276]	; (8003cfc <main+0x510>)
 8003be8:	f7fd fd5e 	bl	80016a8 <InitKalmanStruct>
					PIDSetup(&PositionLoop, 15, 2.2, 0.00001, 10);
 8003bec:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8003bf0:	ed9f 1a43 	vldr	s2, [pc, #268]	; 8003d00 <main+0x514>
 8003bf4:	eddf 0a43 	vldr	s1, [pc, #268]	; 8003d04 <main+0x518>
 8003bf8:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8003bfc:	4842      	ldr	r0, [pc, #264]	; (8003d08 <main+0x51c>)
 8003bfe:	f7fe faa5 	bl	800214c <PIDSetup>
					PIDSetup(&VelocityLoop, 5.0, 0.00000001, 0, 0.00003);
 8003c02:	eddf 1a42 	vldr	s3, [pc, #264]	; 8003d0c <main+0x520>
 8003c06:	ed9f 1a42 	vldr	s2, [pc, #264]	; 8003d10 <main+0x524>
 8003c0a:	eddf 0a42 	vldr	s1, [pc, #264]	; 8003d14 <main+0x528>
 8003c0e:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8003c12:	4841      	ldr	r0, [pc, #260]	; (8003d18 <main+0x52c>)
 8003c14:	f7fe fa9a 	bl	800214c <PIDSetup>

					QuinticVar.start_pos = __HAL_TIM_GET_COUNTER(&htim2);
 8003c18:	4b40      	ldr	r3, [pc, #256]	; (8003d1c <main+0x530>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	461a      	mov	r2, r3
 8003c20:	4b33      	ldr	r3, [pc, #204]	; (8003cf0 <main+0x504>)
 8003c22:	601a      	str	r2, [r3, #0]
					QuinticVar.final_pos = OpVar.MaxWorkspace*0.5 - 5;
 8003c24:	4b31      	ldr	r3, [pc, #196]	; (8003cec <main+0x500>)
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7fc fc27 	bl	800047c <__aeabi_i2d>
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	4b3b      	ldr	r3, [pc, #236]	; (8003d20 <main+0x534>)
 8003c34:	f7fc fc8c 	bl	8000550 <__aeabi_dmul>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4610      	mov	r0, r2
 8003c3e:	4619      	mov	r1, r3
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	4b37      	ldr	r3, [pc, #220]	; (8003d24 <main+0x538>)
 8003c46:	f7fc facb 	bl	80001e0 <__aeabi_dsub>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4610      	mov	r0, r2
 8003c50:	4619      	mov	r1, r3
 8003c52:	f7fc ff2d 	bl	8000ab0 <__aeabi_d2iz>
 8003c56:	4603      	mov	r3, r0
 8003c58:	4a25      	ldr	r2, [pc, #148]	; (8003cf0 <main+0x504>)
 8003c5a:	6053      	str	r3, [r2, #4]
					OpVar.HomingKey = 0;	//Turn off Proximety
 8003c5c:	4b23      	ldr	r3, [pc, #140]	; (8003cec <main+0x500>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	721a      	strb	r2, [r3, #8]
					OpState = Homing;
 8003c62:	4b31      	ldr	r3, [pc, #196]	; (8003d28 <main+0x53c>)
 8003c64:	2202      	movs	r2, #2
 8003c66:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
				}
			break;
 8003c68:	e320      	b.n	80042ac <main+0xac0>
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8003c6a:	4b1f      	ldr	r3, [pc, #124]	; (8003ce8 <main+0x4fc>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8003c72:	e31b      	b.n	80042ac <main+0xac0>
			case Homing:
					OpVar.ControllerEnable = 1;
 8003c74:	4b1d      	ldr	r3, [pc, #116]	; (8003cec <main+0x500>)
 8003c76:	2201      	movs	r2, #1
 8003c78:	745a      	strb	r2, [r3, #17]
					if(PositionLoop.IsSteady == 1)
 8003c7a:	4b23      	ldr	r3, [pc, #140]	; (8003d08 <main+0x51c>)
 8003c7c:	f993 302d 	ldrsb.w	r3, [r3, #45]	; 0x2d
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	f040 8306 	bne.w	8004292 <main+0xaa6>
					{
						OpVar.HomingKey = 0;
 8003c86:	4b19      	ldr	r3, [pc, #100]	; (8003cec <main+0x500>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	721a      	strb	r2, [r3, #8]
						OpState = Buffer;
 8003c8c:	4b26      	ldr	r3, [pc, #152]	; (8003d28 <main+0x53c>)
 8003c8e:	2203      	movs	r2, #3
 8003c90:	701a      	strb	r2, [r3, #0]
						OpVar.waitTime = HAL_GetTick() + 1000;
 8003c92:	f002 f99b 	bl	8005fcc <HAL_GetTick>
 8003c96:	4603      	mov	r3, r0
 8003c98:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8003c9c:	4a13      	ldr	r2, [pc, #76]	; (8003cec <main+0x500>)
 8003c9e:	6013      	str	r3, [r2, #0]
					}
			break;
 8003ca0:	e2f7      	b.n	8004292 <main+0xaa6>
			case Buffer:
				if(HAL_GetTick() >= OpVar.waitTime)
 8003ca2:	f002 f993 	bl	8005fcc <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	4b10      	ldr	r3, [pc, #64]	; (8003cec <main+0x500>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	f0c0 82f3 	bcc.w	8004298 <main+0xaac>
				{
					if(OpVar.RunTrayMode == 1)
 8003cb2:	4b0e      	ldr	r3, [pc, #56]	; (8003cec <main+0x500>)
 8003cb4:	7f5b      	ldrb	r3, [r3, #29]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d106      	bne.n	8003cc8 <main+0x4dc>
					{
						OpState = PreProcess;
 8003cba:	4b1b      	ldr	r3, [pc, #108]	; (8003d28 <main+0x53c>)
 8003cbc:	2207      	movs	r2, #7
 8003cbe:	701a      	strb	r2, [r3, #0]
						OpVar.RunTrayMode = 0;
 8003cc0:	4b0a      	ldr	r3, [pc, #40]	; (8003cec <main+0x500>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	775a      	strb	r2, [r3, #29]
						OpState = Home_Ok;
						registerFrame[0x10].U16 = 0;
						OpVar.ControllerEnable = 0;
					}
				}
				break;
 8003cc6:	e2e7      	b.n	8004298 <main+0xaac>
					else if(OpVar.RunTrayMode == 0)
 8003cc8:	4b08      	ldr	r3, [pc, #32]	; (8003cec <main+0x500>)
 8003cca:	7f5b      	ldrb	r3, [r3, #29]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f040 82e3 	bne.w	8004298 <main+0xaac>
						OpState = Home_Ok;
 8003cd2:	4b15      	ldr	r3, [pc, #84]	; (8003d28 <main+0x53c>)
 8003cd4:	2204      	movs	r2, #4
 8003cd6:	701a      	strb	r2, [r3, #0]
						registerFrame[0x10].U16 = 0;
 8003cd8:	4b14      	ldr	r3, [pc, #80]	; (8003d2c <main+0x540>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	841a      	strh	r2, [r3, #32]
						OpVar.ControllerEnable = 0;
 8003cde:	4b03      	ldr	r3, [pc, #12]	; (8003cec <main+0x500>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	745a      	strb	r2, [r3, #17]
				break;
 8003ce4:	e2d8      	b.n	8004298 <main+0xaac>
 8003ce6:	bf00      	nop
 8003ce8:	20000f34 	.word	0x20000f34
 8003cec:	20000410 	.word	0x20000410
 8003cf0:	20000444 	.word	0x20000444
 8003cf4:	2000022c 	.word	0x2000022c
 8003cf8:	20000230 	.word	0x20000230
 8003cfc:	200004f4 	.word	0x200004f4
 8003d00:	3727c5ac 	.word	0x3727c5ac
 8003d04:	400ccccd 	.word	0x400ccccd
 8003d08:	20000494 	.word	0x20000494
 8003d0c:	37fba882 	.word	0x37fba882
 8003d10:	00000000 	.word	0x00000000
 8003d14:	322bcc77 	.word	0x322bcc77
 8003d18:	200004c4 	.word	0x200004c4
 8003d1c:	20000e80 	.word	0x20000e80
 8003d20:	3fe00000 	.word	0x3fe00000
 8003d24:	40140000 	.word	0x40140000
 8003d28:	2000040c 	.word	0x2000040c
 8003d2c:	20000cb8 	.word	0x20000cb8
			case Home_Ok:
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET);  // turn off point mode pilot lamp
 8003d30:	2200      	movs	r2, #0
 8003d32:	2104      	movs	r1, #4
 8003d34:	48b2      	ldr	r0, [pc, #712]	; (8004000 <main+0x814>)
 8003d36:	f003 fc21 	bl	800757c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET); // turn off tray mode pilot lamp
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d40:	48b0      	ldr	r0, [pc, #704]	; (8004004 <main+0x818>)
 8003d42:	f003 fc1b 	bl	800757c <HAL_GPIO_WritePin>

				if(registerFrame[0x10].U16 == 32){
 8003d46:	4bb0      	ldr	r3, [pc, #704]	; (8004008 <main+0x81c>)
 8003d48:	8c1b      	ldrh	r3, [r3, #32]
 8003d4a:	2b20      	cmp	r3, #32
 8003d4c:	d102      	bne.n	8003d54 <main+0x568>
					registerFrame[0x10].U16 = 0;
 8003d4e:	4bae      	ldr	r3, [pc, #696]	; (8004008 <main+0x81c>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	841a      	strh	r2, [r3, #32]
				}
				OpVar.ControllerEnable = 0;	//Disable Controller
 8003d54:	4bad      	ldr	r3, [pc, #692]	; (800400c <main+0x820>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	745a      	strb	r2, [r3, #17]
				OpVar.JoyEnable = 1;
 8003d5a:	4bac      	ldr	r3, [pc, #688]	; (800400c <main+0x820>)
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	749a      	strb	r2, [r3, #18]
				if(registerFrame[0x44].U16 == 0)
 8003d60:	4ba9      	ldr	r3, [pc, #676]	; (8004008 <main+0x81c>)
 8003d62:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d103      	bne.n	8003d72 <main+0x586>
				{
					registerFrame[0x40].U16 = 0b0000;	//ResetState
 8003d6a:	4ba7      	ldr	r3, [pc, #668]	; (8004008 <main+0x81c>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
				}
				if(HAL_GetTick() >= timestamp)
 8003d72:	f002 f92b 	bl	8005fcc <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	4ba5      	ldr	r3, [pc, #660]	; (8004010 <main+0x824>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	f0c0 828e 	bcc.w	800429e <main+0xab2>
				{
					timestamp = HAL_GetTick() + 10;
 8003d82:	f002 f923 	bl	8005fcc <HAL_GetTick>
 8003d86:	4603      	mov	r3, r0
 8003d88:	330a      	adds	r3, #10
 8003d8a:	4aa1      	ldr	r2, [pc, #644]	; (8004010 <main+0x824>)
 8003d8c:	6013      	str	r3, [r2, #0]

					if(!onetime){
 8003d8e:	4ba1      	ldr	r3, [pc, #644]	; (8004014 <main+0x828>)
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10a      	bne.n	8003dac <main+0x5c0>

						TestState = TestModeOn;
 8003d96:	4ba0      	ldr	r3, [pc, #640]	; (8004018 <main+0x82c>)
 8003d98:	2202      	movs	r2, #2
 8003d9a:	701a      	strb	r2, [r3, #0]
						Stamp = 1;
 8003d9c:	4b9f      	ldr	r3, [pc, #636]	; (800401c <main+0x830>)
 8003d9e:	2201      	movs	r2, #1
 8003da0:	701a      	strb	r2, [r3, #0]
						TestMode();
 8003da2:	f7fd fb4f 	bl	8001444 <TestMode>
						onetime = 1;
 8003da6:	4b9b      	ldr	r3, [pc, #620]	; (8004014 <main+0x828>)
 8003da8:	2201      	movs	r2, #1
 8003daa:	701a      	strb	r2, [r3, #0]
					}
					//JoyStick
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);	//Open Joy Pilot lamp
 8003dac:	2201      	movs	r2, #1
 8003dae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003db2:	4894      	ldr	r0, [pc, #592]	; (8004004 <main+0x818>)
 8003db4:	f003 fbe2 	bl	800757c <HAL_GPIO_WritePin>

					//set home from UI
					if(registerFrame[0x01].U16 == 4)
 8003db8:	4b93      	ldr	r3, [pc, #588]	; (8004008 <main+0x81c>)
 8003dba:	885b      	ldrh	r3, [r3, #2]
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d10c      	bne.n	8003dda <main+0x5ee>
					{
						registerFrame[0x10].U16 = 4;
 8003dc0:	4b91      	ldr	r3, [pc, #580]	; (8004008 <main+0x81c>)
 8003dc2:	2204      	movs	r2, #4
 8003dc4:	841a      	strh	r2, [r3, #32]
						registerFrame[0x40].U16 = 1; //sethome x axis
 8003dc6:	4b90      	ldr	r3, [pc, #576]	; (8004008 <main+0x81c>)
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
						OpState = Init;
 8003dce:	4b94      	ldr	r3, [pc, #592]	; (8004020 <main+0x834>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	701a      	strb	r2, [r3, #0]

						registerFrame[0x01].U16 = 0; //reset state
 8003dd4:	4b8c      	ldr	r3, [pc, #560]	; (8004008 <main+0x81c>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	805a      	strh	r2, [r3, #2]
					}

					//PointMode from UI After press RUN
					if(registerFrame[0x01].U16 == 16)
 8003dda:	4b8b      	ldr	r3, [pc, #556]	; (8004008 <main+0x81c>)
 8003ddc:	885b      	ldrh	r3, [r3, #2]
 8003dde:	2b10      	cmp	r3, #16
 8003de0:	d126      	bne.n	8003e30 <main+0x644>
					{
						registerFrame[0x10].U16 = 32;	//Update Y axis Status(Gopoint)
 8003de2:	4b89      	ldr	r3, [pc, #548]	; (8004008 <main+0x81c>)
 8003de4:	2220      	movs	r2, #32
 8003de6:	841a      	strh	r2, [r3, #32]
					   //start run status of x axis
						RunX_Axis(registerFrame[0x30].U16, 2500, 2);
 8003de8:	4b87      	ldr	r3, [pc, #540]	; (8004008 <main+0x81c>)
 8003dea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003dee:	2202      	movs	r2, #2
 8003df0:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7fe fe91 	bl	8002b1c <RunX_Axis>
						//(Code here)    //assign goal point y to trajectory y axis and PID
						OpVar.SetPointY_Axis = (Uint2Int(registerFrame[0x31].U16)*8192/(120*10)) + OpVar.HomePosOffset;
 8003dfa:	4b83      	ldr	r3, [pc, #524]	; (8004008 <main+0x81c>)
 8003dfc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 fcd9 	bl	80047b8 <Uint2Int>
 8003e06:	4603      	mov	r3, r0
 8003e08:	035b      	lsls	r3, r3, #13
 8003e0a:	4a86      	ldr	r2, [pc, #536]	; (8004024 <main+0x838>)
 8003e0c:	fb82 1203 	smull	r1, r2, r2, r3
 8003e10:	11d2      	asrs	r2, r2, #7
 8003e12:	17db      	asrs	r3, r3, #31
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	461a      	mov	r2, r3
 8003e18:	4b7c      	ldr	r3, [pc, #496]	; (800400c <main+0x820>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	461a      	mov	r2, r3
 8003e20:	4b7a      	ldr	r3, [pc, #488]	; (800400c <main+0x820>)
 8003e22:	615a      	str	r2, [r3, #20]
						OpVar.BaseMode = 1;
 8003e24:	4b79      	ldr	r3, [pc, #484]	; (800400c <main+0x820>)
 8003e26:	2201      	movs	r2, #1
 8003e28:	741a      	strb	r2, [r3, #16]
						OpState = PreProcess;
 8003e2a:	4b7d      	ldr	r3, [pc, #500]	; (8004020 <main+0x834>)
 8003e2c:	2207      	movs	r2, #7
 8003e2e:	701a      	strb	r2, [r3, #0]
					}

					//TrayMode from UI After press RUN
					if(registerFrame[0x01].U16 == 8)
 8003e30:	4b75      	ldr	r3, [pc, #468]	; (8004008 <main+0x81c>)
 8003e32:	885b      	ldrh	r3, [r3, #2]
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d108      	bne.n	8003e4a <main+0x65e>
					{
						OpVar.BaseMode = 0;
 8003e38:	4b74      	ldr	r3, [pc, #464]	; (800400c <main+0x820>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	741a      	strb	r2, [r3, #16]
						OpState = Init;
 8003e3e:	4b78      	ldr	r3, [pc, #480]	; (8004020 <main+0x834>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	701a      	strb	r2, [r3, #0]
						OpVar.RunTrayMode = 1;
 8003e44:	4b71      	ldr	r3, [pc, #452]	; (800400c <main+0x820>)
 8003e46:	2201      	movs	r2, #1
 8003e48:	775a      	strb	r2, [r3, #29]

					}
					if(TrayPoint[7] != 0)
 8003e4a:	4b77      	ldr	r3, [pc, #476]	; (8004028 <main+0x83c>)
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 8225 	beq.w	800429e <main+0xab2>
					{
						TraySetup(&PickTray,TrayPoint[0]/10.0, TrayPoint[1], TrayPoint[2]/10.0, TrayPoint[3]);
 8003e54:	4b74      	ldr	r3, [pc, #464]	; (8004028 <main+0x83c>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fc fb0f 	bl	800047c <__aeabi_i2d>
 8003e5e:	f04f 0200 	mov.w	r2, #0
 8003e62:	4b72      	ldr	r3, [pc, #456]	; (800402c <main+0x840>)
 8003e64:	f7fc fc9e 	bl	80007a4 <__aeabi_ddiv>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	4619      	mov	r1, r3
 8003e70:	f7fc fe66 	bl	8000b40 <__aeabi_d2f>
 8003e74:	4604      	mov	r4, r0
 8003e76:	4b6c      	ldr	r3, [pc, #432]	; (8004028 <main+0x83c>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	ee07 3a90 	vmov	s15, r3
 8003e7e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003e82:	4b69      	ldr	r3, [pc, #420]	; (8004028 <main+0x83c>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fc faf8 	bl	800047c <__aeabi_i2d>
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	4b66      	ldr	r3, [pc, #408]	; (800402c <main+0x840>)
 8003e92:	f7fc fc87 	bl	80007a4 <__aeabi_ddiv>
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	f7fc fe4f 	bl	8000b40 <__aeabi_d2f>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	4b60      	ldr	r3, [pc, #384]	; (8004028 <main+0x83c>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	ee07 3a90 	vmov	s15, r3
 8003eac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eb0:	eef0 1a67 	vmov.f32	s3, s15
 8003eb4:	ee01 2a10 	vmov	s2, r2
 8003eb8:	eef0 0a48 	vmov.f32	s1, s16
 8003ebc:	ee00 4a10 	vmov	s0, r4
 8003ec0:	485b      	ldr	r0, [pc, #364]	; (8004030 <main+0x844>)
 8003ec2:	f7fe fe4d 	bl	8002b60 <TraySetup>
						TraySetup(&PlaceTray,TrayPoint[4]/10.0, TrayPoint[5], TrayPoint[6]/10.0, TrayPoint[7]);
 8003ec6:	4b58      	ldr	r3, [pc, #352]	; (8004028 <main+0x83c>)
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fc fad6 	bl	800047c <__aeabi_i2d>
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	4b55      	ldr	r3, [pc, #340]	; (800402c <main+0x840>)
 8003ed6:	f7fc fc65 	bl	80007a4 <__aeabi_ddiv>
 8003eda:	4602      	mov	r2, r0
 8003edc:	460b      	mov	r3, r1
 8003ede:	4610      	mov	r0, r2
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	f7fc fe2d 	bl	8000b40 <__aeabi_d2f>
 8003ee6:	4604      	mov	r4, r0
 8003ee8:	4b4f      	ldr	r3, [pc, #316]	; (8004028 <main+0x83c>)
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	ee07 3a90 	vmov	s15, r3
 8003ef0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003ef4:	4b4c      	ldr	r3, [pc, #304]	; (8004028 <main+0x83c>)
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fc fabf 	bl	800047c <__aeabi_i2d>
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	4b4a      	ldr	r3, [pc, #296]	; (800402c <main+0x840>)
 8003f04:	f7fc fc4e 	bl	80007a4 <__aeabi_ddiv>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4610      	mov	r0, r2
 8003f0e:	4619      	mov	r1, r3
 8003f10:	f7fc fe16 	bl	8000b40 <__aeabi_d2f>
 8003f14:	4602      	mov	r2, r0
 8003f16:	4b44      	ldr	r3, [pc, #272]	; (8004028 <main+0x83c>)
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	ee07 3a90 	vmov	s15, r3
 8003f1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f22:	eef0 1a67 	vmov.f32	s3, s15
 8003f26:	ee01 2a10 	vmov	s2, r2
 8003f2a:	eef0 0a48 	vmov.f32	s1, s16
 8003f2e:	ee00 4a10 	vmov	s0, r4
 8003f32:	4840      	ldr	r0, [pc, #256]	; (8004034 <main+0x848>)
 8003f34:	f7fe fe14 	bl	8002b60 <TraySetup>
						TrayLocalization(&PickTray);
 8003f38:	483d      	ldr	r0, [pc, #244]	; (8004030 <main+0x844>)
 8003f3a:	f7fe fea1 	bl	8002c80 <TrayLocalization>
						TrayLocalization(&PlaceTray);
 8003f3e:	483d      	ldr	r0, [pc, #244]	; (8004034 <main+0x848>)
 8003f40:	f7fe fe9e 	bl	8002c80 <TrayLocalization>
						SubState = TrayP1;
 8003f44:	4b3c      	ldr	r3, [pc, #240]	; (8004038 <main+0x84c>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	701a      	strb	r2, [r3, #0]
						for (uint8_t i = 0; i <= 7; i++)
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	71fb      	strb	r3, [r7, #7]
 8003f4e:	e007      	b.n	8003f60 <main+0x774>
						{
							TrayPoint[i] = 0;
 8003f50:	79fb      	ldrb	r3, [r7, #7]
 8003f52:	4a35      	ldr	r2, [pc, #212]	; (8004028 <main+0x83c>)
 8003f54:	2100      	movs	r1, #0
 8003f56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						for (uint8_t i = 0; i <= 7; i++)
 8003f5a:	79fb      	ldrb	r3, [r7, #7]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	71fb      	strb	r3, [r7, #7]
 8003f60:	79fb      	ldrb	r3, [r7, #7]
 8003f62:	2b07      	cmp	r3, #7
 8003f64:	d9f4      	bls.n	8003f50 <main+0x764>
						}
					}
				}
			break;
 8003f66:	e19a      	b.n	800429e <main+0xab2>
			case TrayMode:
				//OpVar.ControllerEnable = 0;
			break;

			case PreProcess:
				OpVar.ControllerEnable = 0;
 8003f68:	4b28      	ldr	r3, [pc, #160]	; (800400c <main+0x820>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	745a      	strb	r2, [r3, #17]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET);
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f74:	4823      	ldr	r0, [pc, #140]	; (8004004 <main+0x818>)
 8003f76:	f003 fb01 	bl	800757c <HAL_GPIO_WritePin>
				if(OpVar.BaseMode == 0)	//TrayMode
 8003f7a:	4b24      	ldr	r3, [pc, #144]	; (800400c <main+0x820>)
 8003f7c:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d126      	bne.n	8003fd2 <main+0x7e6>
				{
					QuinticVar.final_pos = PickTray.Holes_Y[0];
 8003f84:	4b2a      	ldr	r3, [pc, #168]	; (8004030 <main+0x844>)
 8003f86:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003f8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f8e:	ee17 2a90 	vmov	r2, s15
 8003f92:	4b2a      	ldr	r3, [pc, #168]	; (800403c <main+0x850>)
 8003f94:	605a      	str	r2, [r3, #4]
					RunX_Axis(PickTray.Holes_X[0]*10, 2500, 3);
 8003f96:	4b26      	ldr	r3, [pc, #152]	; (8004030 <main+0x844>)
 8003f98:	edd3 7a06 	vldr	s15, [r3, #24]
 8003f9c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003fa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fa8:	2203      	movs	r2, #3
 8003faa:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8003fae:	ee17 0a90 	vmov	r0, s15
 8003fb2:	f7fe fdb3 	bl	8002b1c <RunX_Axis>
					OpVar.task = GoPick;	//current task.
 8003fb6:	4b15      	ldr	r3, [pc, #84]	; (800400c <main+0x820>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	715a      	strb	r2, [r3, #5]
					OpVar.holeInd = 0;
 8003fbc:	4b13      	ldr	r3, [pc, #76]	; (800400c <main+0x820>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	719a      	strb	r2, [r3, #6]
					PositionLoop.IsSteady = 0;
 8003fc2:	4b1f      	ldr	r3, [pc, #124]	; (8004040 <main+0x854>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
					OpState = ControlLoop;
 8003fca:	4b15      	ldr	r3, [pc, #84]	; (8004020 <main+0x834>)
 8003fcc:	2208      	movs	r2, #8
 8003fce:	701a      	strb	r2, [r3, #0]
					QuinticVar.final_pos = OpVar.SetPointY_Axis; //Point from Basesystem
					PositionLoop.IsSteady = 0;
					OpState = ControlLoop;

				}
			break;
 8003fd0:	e168      	b.n	80042a4 <main+0xab8>
				else if (OpVar.BaseMode == 1)	//PointMode
 8003fd2:	4b0e      	ldr	r3, [pc, #56]	; (800400c <main+0x820>)
 8003fd4:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	f040 8163 	bne.w	80042a4 <main+0xab8>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 8003fde:	2201      	movs	r2, #1
 8003fe0:	2104      	movs	r1, #4
 8003fe2:	4807      	ldr	r0, [pc, #28]	; (8004000 <main+0x814>)
 8003fe4:	f003 faca 	bl	800757c <HAL_GPIO_WritePin>
					QuinticVar.final_pos = OpVar.SetPointY_Axis; //Point from Basesystem
 8003fe8:	4b08      	ldr	r3, [pc, #32]	; (800400c <main+0x820>)
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	4a13      	ldr	r2, [pc, #76]	; (800403c <main+0x850>)
 8003fee:	6053      	str	r3, [r2, #4]
					PositionLoop.IsSteady = 0;
 8003ff0:	4b13      	ldr	r3, [pc, #76]	; (8004040 <main+0x854>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
					OpState = ControlLoop;
 8003ff8:	4b09      	ldr	r3, [pc, #36]	; (8004020 <main+0x834>)
 8003ffa:	2208      	movs	r2, #8
 8003ffc:	701a      	strb	r2, [r3, #0]
			break;
 8003ffe:	e151      	b.n	80042a4 <main+0xab8>
 8004000:	40020c00 	.word	0x40020c00
 8004004:	40020800 	.word	0x40020800
 8004008:	20000cb8 	.word	0x20000cb8
 800400c:	20000410 	.word	0x20000410
 8004010:	20000e78 	.word	0x20000e78
 8004014:	20000e6c 	.word	0x20000e6c
 8004018:	200002c4 	.word	0x200002c4
 800401c:	200002c0 	.word	0x200002c0
 8004020:	2000040c 	.word	0x2000040c
 8004024:	1b4e81b5 	.word	0x1b4e81b5
 8004028:	20000e4c 	.word	0x20000e4c
 800402c:	40240000 	.word	0x40240000
 8004030:	20000710 	.word	0x20000710
 8004034:	20000778 	.word	0x20000778
 8004038:	20000e48 	.word	0x20000e48
 800403c:	20000444 	.word	0x20000444
 8004040:	20000494 	.word	0x20000494

			case ControlLoop:
				OpVar.ControllerEnable = 1;
 8004044:	4b9a      	ldr	r3, [pc, #616]	; (80042b0 <main+0xac4>)
 8004046:	2201      	movs	r2, #1
 8004048:	745a      	strb	r2, [r3, #17]
				OpVar.JoyEnable = 0;
 800404a:	4b99      	ldr	r3, [pc, #612]	; (80042b0 <main+0xac4>)
 800404c:	2200      	movs	r2, #0
 800404e:	749a      	strb	r2, [r3, #18]
				OpVar.HomingKey = 2;
 8004050:	4b97      	ldr	r3, [pc, #604]	; (80042b0 <main+0xac4>)
 8004052:	2202      	movs	r2, #2
 8004054:	721a      	strb	r2, [r3, #8]
				if(PositionLoop.IsSteady == 1)
 8004056:	4b97      	ldr	r3, [pc, #604]	; (80042b4 <main+0xac8>)
 8004058:	f993 302d 	ldrsb.w	r3, [r3, #45]	; 0x2d
 800405c:	2b01      	cmp	r3, #1
 800405e:	f040 8124 	bne.w	80042aa <main+0xabe>
				{
					float32_t refX_Axis;
					if(OpVar.BaseMode == 0)
 8004062:	4b93      	ldr	r3, [pc, #588]	; (80042b0 <main+0xac4>)
 8004064:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d124      	bne.n	80040b6 <main+0x8ca>
					{
						switch(OpVar.task)
 800406c:	4b90      	ldr	r3, [pc, #576]	; (80042b0 <main+0xac4>)
 800406e:	795b      	ldrb	r3, [r3, #5]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <main+0x88e>
 8004074:	2b01      	cmp	r3, #1
 8004076:	d00f      	beq.n	8004098 <main+0x8ac>
 8004078:	e02f      	b.n	80040da <main+0x8ee>
						{
						case GoPick:
							refX_Axis = PickTray.Holes_X[OpVar.holeInd] * 10;
 800407a:	4b8d      	ldr	r3, [pc, #564]	; (80042b0 <main+0xac4>)
 800407c:	799b      	ldrb	r3, [r3, #6]
 800407e:	4a8e      	ldr	r2, [pc, #568]	; (80042b8 <main+0xacc>)
 8004080:	3306      	adds	r3, #6
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	edd3 7a00 	vldr	s15, [r3]
 800408a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800408e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004092:	edc7 7a00 	vstr	s15, [r7]
							break;
 8004096:	e020      	b.n	80040da <main+0x8ee>
						case GoPlace:
							refX_Axis = PlaceTray.Holes_X[OpVar.holeInd] * 10;
 8004098:	4b85      	ldr	r3, [pc, #532]	; (80042b0 <main+0xac4>)
 800409a:	799b      	ldrb	r3, [r3, #6]
 800409c:	4a87      	ldr	r2, [pc, #540]	; (80042bc <main+0xad0>)
 800409e:	3306      	adds	r3, #6
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	edd3 7a00 	vldr	s15, [r3]
 80040a8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80040ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040b0:	edc7 7a00 	vstr	s15, [r7]
							break;
 80040b4:	e011      	b.n	80040da <main+0x8ee>
						}
					}
					else if (OpVar.BaseMode == 1)
 80040b6:	4b7e      	ldr	r3, [pc, #504]	; (80042b0 <main+0xac4>)
 80040b8:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d10c      	bne.n	80040da <main+0x8ee>
					{
						refX_Axis = Uint2Int(registerFrame[0x30].U16);
 80040c0:	4b7f      	ldr	r3, [pc, #508]	; (80042c0 <main+0xad4>)
 80040c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 fb76 	bl	80047b8 <Uint2Int>
 80040cc:	4603      	mov	r3, r0
 80040ce:	ee07 3a90 	vmov	s15, r3
 80040d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040d6:	edc7 7a00 	vstr	s15, [r7]
					}
					if(abs(Uint2Int(registerFrame[0x44].U16) - refX_Axis) <= 0.1)
 80040da:	4b79      	ldr	r3, [pc, #484]	; (80042c0 <main+0xad4>)
 80040dc:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 fb69 	bl	80047b8 <Uint2Int>
 80040e6:	4603      	mov	r3, r0
 80040e8:	ee07 3a90 	vmov	s15, r3
 80040ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040f0:	edd7 7a00 	vldr	s15, [r7]
 80040f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040fc:	ee17 3a90 	vmov	r3, s15
 8004100:	2b00      	cmp	r3, #0
 8004102:	bfb8      	it	lt
 8004104:	425b      	neglt	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	f300 80cf 	bgt.w	80042aa <main+0xabe>
					{
						if(OpVar.BaseMode == 0)	//Tray
 800410c:	4b68      	ldr	r3, [pc, #416]	; (80042b0 <main+0xac4>)
 800410e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10a      	bne.n	800412c <main+0x940>
						{
							OpVar.waitTime = HAL_GetTick() + 2000;
 8004116:	f001 ff59 	bl	8005fcc <HAL_GetTick>
 800411a:	4603      	mov	r3, r0
 800411c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004120:	4a63      	ldr	r2, [pc, #396]	; (80042b0 <main+0xac4>)
 8004122:	6013      	str	r3, [r2, #0]
							OpState = GripperWaiting;
 8004124:	4b67      	ldr	r3, [pc, #412]	; (80042c4 <main+0xad8>)
 8004126:	2209      	movs	r2, #9
 8004128:	701a      	strb	r2, [r3, #0]
							registerFrame[0x01].U16 = 0;

						}
					}
				}
			break;
 800412a:	e0be      	b.n	80042aa <main+0xabe>
						else if (OpVar.BaseMode == 1)	//Point
 800412c:	4b60      	ldr	r3, [pc, #384]	; (80042b0 <main+0xac4>)
 800412e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8004132:	2b01      	cmp	r3, #1
 8004134:	f040 80b9 	bne.w	80042aa <main+0xabe>
							OpState = Home_Ok;
 8004138:	4b62      	ldr	r3, [pc, #392]	; (80042c4 <main+0xad8>)
 800413a:	2204      	movs	r2, #4
 800413c:	701a      	strb	r2, [r3, #0]
							registerFrame[0x01].U16 = 0;
 800413e:	4b60      	ldr	r3, [pc, #384]	; (80042c0 <main+0xad4>)
 8004140:	2200      	movs	r2, #0
 8004142:	805a      	strh	r2, [r3, #2]
			break;
 8004144:	e0b1      	b.n	80042aa <main+0xabe>

			case GripperWaiting:
				OpVar.ControllerEnable = 1;
 8004146:	4b5a      	ldr	r3, [pc, #360]	; (80042b0 <main+0xac4>)
 8004148:	2201      	movs	r2, #1
 800414a:	745a      	strb	r2, [r3, #17]
				if( HAL_GetTick() >= OpVar.waitTime)
 800414c:	f001 ff3e 	bl	8005fcc <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	4b57      	ldr	r3, [pc, #348]	; (80042b0 <main+0xac4>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d37a      	bcc.n	8004250 <main+0xa64>
				{
					OpVar.waitTime = 0;
 800415a:	4b55      	ldr	r3, [pc, #340]	; (80042b0 <main+0xac4>)
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]
					switch(OpVar.task)
 8004160:	4b53      	ldr	r3, [pc, #332]	; (80042b0 <main+0xac4>)
 8004162:	795b      	ldrb	r3, [r3, #5]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d002      	beq.n	800416e <main+0x982>
 8004168:	2b01      	cmp	r3, #1
 800416a:	d02b      	beq.n	80041c4 <main+0x9d8>
							OpState = ControlLoop;
						}
					break;
					}
				}
			break;
 800416c:	e09e      	b.n	80042ac <main+0xac0>
						QuinticVar.final_pos = PlaceTray.Holes_Y[OpVar.holeInd];
 800416e:	4b50      	ldr	r3, [pc, #320]	; (80042b0 <main+0xac4>)
 8004170:	799b      	ldrb	r3, [r3, #6]
 8004172:	4a52      	ldr	r2, [pc, #328]	; (80042bc <main+0xad0>)
 8004174:	330e      	adds	r3, #14
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	3304      	adds	r3, #4
 800417c:	edd3 7a00 	vldr	s15, [r3]
 8004180:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004184:	ee17 2a90 	vmov	r2, s15
 8004188:	4b4f      	ldr	r3, [pc, #316]	; (80042c8 <main+0xadc>)
 800418a:	605a      	str	r2, [r3, #4]
						RunX_Axis(PlaceTray.Holes_X[OpVar.holeInd]*10, 2500, 3);
 800418c:	4b48      	ldr	r3, [pc, #288]	; (80042b0 <main+0xac4>)
 800418e:	799b      	ldrb	r3, [r3, #6]
 8004190:	4a4a      	ldr	r2, [pc, #296]	; (80042bc <main+0xad0>)
 8004192:	3306      	adds	r3, #6
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	edd3 7a00 	vldr	s15, [r3]
 800419c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80041a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041a8:	2203      	movs	r2, #3
 80041aa:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80041ae:	ee17 0a90 	vmov	r0, s15
 80041b2:	f7fe fcb3 	bl	8002b1c <RunX_Axis>
						OpVar.task = GoPlace;
 80041b6:	4b3e      	ldr	r3, [pc, #248]	; (80042b0 <main+0xac4>)
 80041b8:	2201      	movs	r2, #1
 80041ba:	715a      	strb	r2, [r3, #5]
						OpState = ControlLoop;
 80041bc:	4b41      	ldr	r3, [pc, #260]	; (80042c4 <main+0xad8>)
 80041be:	2208      	movs	r2, #8
 80041c0:	701a      	strb	r2, [r3, #0]
					break;
 80041c2:	e046      	b.n	8004252 <main+0xa66>
						if(OpVar.holeInd >= 8)
 80041c4:	4b3a      	ldr	r3, [pc, #232]	; (80042b0 <main+0xac4>)
 80041c6:	799b      	ldrb	r3, [r3, #6]
 80041c8:	2b07      	cmp	r3, #7
 80041ca:	d910      	bls.n	80041ee <main+0xa02>
							OpState = Init;
 80041cc:	4b3d      	ldr	r3, [pc, #244]	; (80042c4 <main+0xad8>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	701a      	strb	r2, [r3, #0]
							registerFrame[0x40].U16 = 0b0001;	//Home
 80041d2:	4b3b      	ldr	r3, [pc, #236]	; (80042c0 <main+0xad4>)
 80041d4:	2201      	movs	r2, #1
 80041d6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
							OpVar.ControllerEnable = 0;
 80041da:	4b35      	ldr	r3, [pc, #212]	; (80042b0 <main+0xac4>)
 80041dc:	2200      	movs	r2, #0
 80041de:	745a      	strb	r2, [r3, #17]
							OpVar.RunTrayMode = 0;
 80041e0:	4b33      	ldr	r3, [pc, #204]	; (80042b0 <main+0xac4>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	775a      	strb	r2, [r3, #29]
							registerFrame[0x01].U16 = 0;
 80041e6:	4b36      	ldr	r3, [pc, #216]	; (80042c0 <main+0xad4>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	805a      	strh	r2, [r3, #2]
					break;
 80041ec:	e031      	b.n	8004252 <main+0xa66>
							OpVar.holeInd += 1;
 80041ee:	4b30      	ldr	r3, [pc, #192]	; (80042b0 <main+0xac4>)
 80041f0:	799b      	ldrb	r3, [r3, #6]
 80041f2:	3301      	adds	r3, #1
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	4b2e      	ldr	r3, [pc, #184]	; (80042b0 <main+0xac4>)
 80041f8:	719a      	strb	r2, [r3, #6]
							QuinticVar.final_pos = PickTray.Holes_Y[OpVar.holeInd];
 80041fa:	4b2d      	ldr	r3, [pc, #180]	; (80042b0 <main+0xac4>)
 80041fc:	799b      	ldrb	r3, [r3, #6]
 80041fe:	4a2e      	ldr	r2, [pc, #184]	; (80042b8 <main+0xacc>)
 8004200:	330e      	adds	r3, #14
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	3304      	adds	r3, #4
 8004208:	edd3 7a00 	vldr	s15, [r3]
 800420c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004210:	ee17 2a90 	vmov	r2, s15
 8004214:	4b2c      	ldr	r3, [pc, #176]	; (80042c8 <main+0xadc>)
 8004216:	605a      	str	r2, [r3, #4]
							RunX_Axis(PickTray.Holes_X[OpVar.holeInd]*10, 2500, 3);
 8004218:	4b25      	ldr	r3, [pc, #148]	; (80042b0 <main+0xac4>)
 800421a:	799b      	ldrb	r3, [r3, #6]
 800421c:	4a26      	ldr	r2, [pc, #152]	; (80042b8 <main+0xacc>)
 800421e:	3306      	adds	r3, #6
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	edd3 7a00 	vldr	s15, [r3]
 8004228:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800422c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004230:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004234:	2203      	movs	r2, #3
 8004236:	f640 11c4 	movw	r1, #2500	; 0x9c4
 800423a:	ee17 0a90 	vmov	r0, s15
 800423e:	f7fe fc6d 	bl	8002b1c <RunX_Axis>
							OpVar.task = GoPick;
 8004242:	4b1b      	ldr	r3, [pc, #108]	; (80042b0 <main+0xac4>)
 8004244:	2200      	movs	r2, #0
 8004246:	715a      	strb	r2, [r3, #5]
							OpState = ControlLoop;
 8004248:	4b1e      	ldr	r3, [pc, #120]	; (80042c4 <main+0xad8>)
 800424a:	2208      	movs	r2, #8
 800424c:	701a      	strb	r2, [r3, #0]
					break;
 800424e:	e000      	b.n	8004252 <main+0xa66>
				}
 8004250:	bf00      	nop
			break;
 8004252:	e02b      	b.n	80042ac <main+0xac0>

			case WaitingHome:
				OpVar.ControllerEnable = 0;
 8004254:	4b16      	ldr	r3, [pc, #88]	; (80042b0 <main+0xac4>)
 8004256:	2200      	movs	r2, #0
 8004258:	745a      	strb	r2, [r3, #17]
				OpVar.HomingKey = 1;
 800425a:	4b15      	ldr	r3, [pc, #84]	; (80042b0 <main+0xac4>)
 800425c:	2201      	movs	r2, #1
 800425e:	721a      	strb	r2, [r3, #8]
				OpState = WaitingHome;
 8004260:	4b18      	ldr	r3, [pc, #96]	; (80042c4 <main+0xad8>)
 8004262:	220a      	movs	r2, #10
 8004264:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);
 8004266:	2200      	movs	r2, #0
 8004268:	2140      	movs	r1, #64	; 0x40
 800426a:	4818      	ldr	r0, [pc, #96]	; (80042cc <main+0xae0>)
 800426c:	f003 f986 	bl	800757c <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,30*500);
 8004270:	4b17      	ldr	r3, [pc, #92]	; (80042d0 <main+0xae4>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f643 2298 	movw	r2, #15000	; 0x3a98
 8004278:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 800427a:	e017      	b.n	80042ac <main+0xac0>
			}
		}
	  else if (OpVar.ProxStop == 1)
 800427c:	4b0c      	ldr	r3, [pc, #48]	; (80042b0 <main+0xac4>)
 800427e:	79db      	ldrb	r3, [r3, #7]
 8004280:	2b01      	cmp	r3, #1
 8004282:	f47f ab30 	bne.w	80038e6 <main+0xfa>
	  {
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8004286:	4b12      	ldr	r3, [pc, #72]	; (80042d0 <main+0xae4>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2200      	movs	r2, #0
 800428c:	63da      	str	r2, [r3, #60]	; 0x3c
 800428e:	f7ff bb2a 	b.w	80038e6 <main+0xfa>
			break;
 8004292:	bf00      	nop
 8004294:	f7ff bb27 	b.w	80038e6 <main+0xfa>
				break;
 8004298:	bf00      	nop
 800429a:	f7ff bb24 	b.w	80038e6 <main+0xfa>
			break;
 800429e:	bf00      	nop
 80042a0:	f7ff bb21 	b.w	80038e6 <main+0xfa>
			break;
 80042a4:	bf00      	nop
 80042a6:	f7ff bb1e 	b.w	80038e6 <main+0xfa>
			break;
 80042aa:	bf00      	nop
  {
 80042ac:	f7ff bb1b 	b.w	80038e6 <main+0xfa>
 80042b0:	20000410 	.word	0x20000410
 80042b4:	20000494 	.word	0x20000494
 80042b8:	20000710 	.word	0x20000710
 80042bc:	20000778 	.word	0x20000778
 80042c0:	20000cb8 	.word	0x20000cb8
 80042c4:	2000040c 	.word	0x2000040c
 80042c8:	20000444 	.word	0x20000444
 80042cc:	40020800 	.word	0x40020800
 80042d0:	20000f34 	.word	0x20000f34

080042d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b094      	sub	sp, #80	; 0x50
 80042d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042da:	f107 0320 	add.w	r3, r7, #32
 80042de:	2230      	movs	r2, #48	; 0x30
 80042e0:	2100      	movs	r1, #0
 80042e2:	4618      	mov	r0, r3
 80042e4:	f008 fd06 	bl	800ccf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80042e8:	f107 030c 	add.w	r3, r7, #12
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	605a      	str	r2, [r3, #4]
 80042f2:	609a      	str	r2, [r3, #8]
 80042f4:	60da      	str	r2, [r3, #12]
 80042f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80042f8:	2300      	movs	r3, #0
 80042fa:	60bb      	str	r3, [r7, #8]
 80042fc:	4b27      	ldr	r3, [pc, #156]	; (800439c <SystemClock_Config+0xc8>)
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	4a26      	ldr	r2, [pc, #152]	; (800439c <SystemClock_Config+0xc8>)
 8004302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004306:	6413      	str	r3, [r2, #64]	; 0x40
 8004308:	4b24      	ldr	r3, [pc, #144]	; (800439c <SystemClock_Config+0xc8>)
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004310:	60bb      	str	r3, [r7, #8]
 8004312:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004314:	2300      	movs	r3, #0
 8004316:	607b      	str	r3, [r7, #4]
 8004318:	4b21      	ldr	r3, [pc, #132]	; (80043a0 <SystemClock_Config+0xcc>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a20      	ldr	r2, [pc, #128]	; (80043a0 <SystemClock_Config+0xcc>)
 800431e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004322:	6013      	str	r3, [r2, #0]
 8004324:	4b1e      	ldr	r3, [pc, #120]	; (80043a0 <SystemClock_Config+0xcc>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800432c:	607b      	str	r3, [r7, #4]
 800432e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004330:	2302      	movs	r3, #2
 8004332:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004334:	2301      	movs	r3, #1
 8004336:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004338:	2310      	movs	r3, #16
 800433a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800433c:	2302      	movs	r3, #2
 800433e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004340:	2300      	movs	r3, #0
 8004342:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004344:	2308      	movs	r3, #8
 8004346:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004348:	2364      	movs	r3, #100	; 0x64
 800434a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800434c:	2302      	movs	r3, #2
 800434e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004350:	2304      	movs	r3, #4
 8004352:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004354:	f107 0320 	add.w	r3, r7, #32
 8004358:	4618      	mov	r0, r3
 800435a:	f005 f8b5 	bl	80094c8 <HAL_RCC_OscConfig>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004364:	f000 fa48 	bl	80047f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004368:	230f      	movs	r3, #15
 800436a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800436c:	2302      	movs	r3, #2
 800436e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004370:	2300      	movs	r3, #0
 8004372:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004378:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800437a:	2300      	movs	r3, #0
 800437c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800437e:	f107 030c 	add.w	r3, r7, #12
 8004382:	2103      	movs	r1, #3
 8004384:	4618      	mov	r0, r3
 8004386:	f005 fb17 	bl	80099b8 <HAL_RCC_ClockConfig>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004390:	f000 fa32 	bl	80047f8 <Error_Handler>
  }
}
 8004394:	bf00      	nop
 8004396:	3750      	adds	r7, #80	; 0x50
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40023800 	.word	0x40023800
 80043a0:	40007000 	.word	0x40007000

080043a4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	4603      	mov	r3, r0
 80043ac:	80fb      	strh	r3, [r7, #6]
		if(GPIO_Pin == GPIO_PIN_11)
 80043ae:	88fb      	ldrh	r3, [r7, #6]
 80043b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b4:	d12d      	bne.n	8004412 <HAL_GPIO_EXTI_Callback+0x6e>
		{
			if(OpVar.HomingKey == 1)
 80043b6:	4b47      	ldr	r3, [pc, #284]	; (80044d4 <HAL_GPIO_EXTI_Callback+0x130>)
 80043b8:	7a1b      	ldrb	r3, [r3, #8]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d11e      	bne.n	80043fc <HAL_GPIO_EXTI_Callback+0x58>
			{
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 80043be:	4b46      	ldr	r3, [pc, #280]	; (80044d8 <HAL_GPIO_EXTI_Callback+0x134>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2200      	movs	r2, #0
 80043c4:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COUNTER(&htim2,0);
 80043c6:	4b45      	ldr	r3, [pc, #276]	; (80044dc <HAL_GPIO_EXTI_Callback+0x138>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2200      	movs	r2, #0
 80043cc:	625a      	str	r2, [r3, #36]	; 0x24
				QEIData.QEIPosition = __HAL_TIM_GET_COUNTER(&htim2);
 80043ce:	4b43      	ldr	r3, [pc, #268]	; (80044dc <HAL_GPIO_EXTI_Callback+0x138>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	461a      	mov	r2, r3
 80043d6:	4b42      	ldr	r3, [pc, #264]	; (80044e0 <HAL_GPIO_EXTI_Callback+0x13c>)
 80043d8:	605a      	str	r2, [r3, #4]
				OpVar.ProxStop = 0;
 80043da:	4b3e      	ldr	r3, [pc, #248]	; (80044d4 <HAL_GPIO_EXTI_Callback+0x130>)
 80043dc:	2200      	movs	r2, #0
 80043de:	71da      	strb	r2, [r3, #7]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);
 80043e0:	2200      	movs	r2, #0
 80043e2:	2140      	movs	r1, #64	; 0x40
 80043e4:	483f      	ldr	r0, [pc, #252]	; (80044e4 <HAL_GPIO_EXTI_Callback+0x140>)
 80043e6:	f003 f8c9 	bl	800757c <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,30*500);
 80043ea:	4b3b      	ldr	r3, [pc, #236]	; (80044d8 <HAL_GPIO_EXTI_Callback+0x134>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f643 2298 	movw	r2, #15000	; 0x3a98
 80043f2:	63da      	str	r2, [r3, #60]	; 0x3c
				OpState = WaitingHome;
 80043f4:	4b3c      	ldr	r3, [pc, #240]	; (80044e8 <HAL_GPIO_EXTI_Callback+0x144>)
 80043f6:	220a      	movs	r2, #10
 80043f8:	701a      	strb	r2, [r3, #0]
 80043fa:	e00a      	b.n	8004412 <HAL_GPIO_EXTI_Callback+0x6e>
			}
			else if(OpVar.HomingKey == 2)
 80043fc:	4b35      	ldr	r3, [pc, #212]	; (80044d4 <HAL_GPIO_EXTI_Callback+0x130>)
 80043fe:	7a1b      	ldrb	r3, [r3, #8]
 8004400:	2b02      	cmp	r3, #2
 8004402:	d106      	bne.n	8004412 <HAL_GPIO_EXTI_Callback+0x6e>
			{
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8004404:	4b34      	ldr	r3, [pc, #208]	; (80044d8 <HAL_GPIO_EXTI_Callback+0x134>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2200      	movs	r2, #0
 800440a:	63da      	str	r2, [r3, #60]	; 0x3c
				OpVar.ProxStop = 1;
 800440c:	4b31      	ldr	r3, [pc, #196]	; (80044d4 <HAL_GPIO_EXTI_Callback+0x130>)
 800440e:	2201      	movs	r2, #1
 8004410:	71da      	strb	r2, [r3, #7]
			}
		}
		if (GPIO_Pin == GPIO_PIN_12)
 8004412:	88fb      	ldrh	r3, [r7, #6]
 8004414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004418:	d158      	bne.n	80044cc <HAL_GPIO_EXTI_Callback+0x128>
		{
			if(OpVar.HomingKey == 1)
 800441a:	4b2e      	ldr	r3, [pc, #184]	; (80044d4 <HAL_GPIO_EXTI_Callback+0x130>)
 800441c:	7a1b      	ldrb	r3, [r3, #8]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d149      	bne.n	80044b6 <HAL_GPIO_EXTI_Callback+0x112>
			{
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8004422:	4b2d      	ldr	r3, [pc, #180]	; (80044d8 <HAL_GPIO_EXTI_Callback+0x134>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2200      	movs	r2, #0
 8004428:	63da      	str	r2, [r3, #60]	; 0x3c
				OpVar.HomingKey = 0;		//Disable Proximety Homing
 800442a:	4b2a      	ldr	r3, [pc, #168]	; (80044d4 <HAL_GPIO_EXTI_Callback+0x130>)
 800442c:	2200      	movs	r2, #0
 800442e:	721a      	strb	r2, [r3, #8]
				OpVar.ProxStop = 0;
 8004430:	4b28      	ldr	r3, [pc, #160]	; (80044d4 <HAL_GPIO_EXTI_Callback+0x130>)
 8004432:	2200      	movs	r2, #0
 8004434:	71da      	strb	r2, [r3, #7]
				if(OpState == WaitingHome)
 8004436:	4b2c      	ldr	r3, [pc, #176]	; (80044e8 <HAL_GPIO_EXTI_Callback+0x144>)
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b0a      	cmp	r3, #10
 800443c:	d146      	bne.n	80044cc <HAL_GPIO_EXTI_Callback+0x128>
				{
					OpVar.waitTime = HAL_GetTick() + 1000;
 800443e:	f001 fdc5 	bl	8005fcc <HAL_GetTick>
 8004442:	4603      	mov	r3, r0
 8004444:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004448:	4a22      	ldr	r2, [pc, #136]	; (80044d4 <HAL_GPIO_EXTI_Callback+0x130>)
 800444a:	6013      	str	r3, [r2, #0]
					QuinticVar.current_pos = __HAL_TIM_GET_COUNTER(&htim2);	//Dummy PID
 800444c:	4b23      	ldr	r3, [pc, #140]	; (80044dc <HAL_GPIO_EXTI_Callback+0x138>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	461a      	mov	r2, r3
 8004454:	4b25      	ldr	r3, [pc, #148]	; (80044ec <HAL_GPIO_EXTI_Callback+0x148>)
 8004456:	60da      	str	r2, [r3, #12]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 8004458:	2201      	movs	r2, #1
 800445a:	2140      	movs	r1, #64	; 0x40
 800445c:	4821      	ldr	r0, [pc, #132]	; (80044e4 <HAL_GPIO_EXTI_Callback+0x140>)
 800445e:	f003 f88d 	bl	800757c <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, 50*500);
 8004462:	4b1d      	ldr	r3, [pc, #116]	; (80044d8 <HAL_GPIO_EXTI_Callback+0x134>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800446a:	63da      	str	r2, [r3, #60]	; 0x3c
					OpState = PreHoming;
 800446c:	4b1e      	ldr	r3, [pc, #120]	; (80044e8 <HAL_GPIO_EXTI_Callback+0x144>)
 800446e:	2201      	movs	r2, #1
 8004470:	701a      	strb	r2, [r3, #0]
					OpVar.MaxWorkspace = __HAL_TIM_GET_COUNTER(&htim2);
 8004472:	4b1a      	ldr	r3, [pc, #104]	; (80044dc <HAL_GPIO_EXTI_Callback+0x138>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	461a      	mov	r2, r3
 800447a:	4b16      	ldr	r3, [pc, #88]	; (80044d4 <HAL_GPIO_EXTI_Callback+0x130>)
 800447c:	619a      	str	r2, [r3, #24]
					OpVar.HomePosOffset = __HAL_TIM_GET_COUNTER(&htim2) * 0.5;
 800447e:	4b17      	ldr	r3, [pc, #92]	; (80044dc <HAL_GPIO_EXTI_Callback+0x138>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	4618      	mov	r0, r3
 8004486:	f7fb ffe9 	bl	800045c <__aeabi_ui2d>
 800448a:	f04f 0200 	mov.w	r2, #0
 800448e:	4b18      	ldr	r3, [pc, #96]	; (80044f0 <HAL_GPIO_EXTI_Callback+0x14c>)
 8004490:	f7fc f85e 	bl	8000550 <__aeabi_dmul>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	4610      	mov	r0, r2
 800449a:	4619      	mov	r1, r3
 800449c:	f7fc fb30 	bl	8000b00 <__aeabi_d2uiz>
 80044a0:	4603      	mov	r3, r0
 80044a2:	4a0c      	ldr	r2, [pc, #48]	; (80044d4 <HAL_GPIO_EXTI_Callback+0x130>)
 80044a4:	60d3      	str	r3, [r2, #12]
					OpVar.ControllerEnable = 1;	//Enable Controller
 80044a6:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <HAL_GPIO_EXTI_Callback+0x130>)
 80044a8:	2201      	movs	r2, #1
 80044aa:	745a      	strb	r2, [r3, #17]
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, 0);
 80044ac:	4b0a      	ldr	r3, [pc, #40]	; (80044d8 <HAL_GPIO_EXTI_Callback+0x134>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2200      	movs	r2, #0
 80044b2:	63da      	str	r2, [r3, #60]	; 0x3c
			{
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
				OpVar.ProxStop = 1;
			}
		}
}
 80044b4:	e00a      	b.n	80044cc <HAL_GPIO_EXTI_Callback+0x128>
			else if(OpVar.HomingKey == 2)
 80044b6:	4b07      	ldr	r3, [pc, #28]	; (80044d4 <HAL_GPIO_EXTI_Callback+0x130>)
 80044b8:	7a1b      	ldrb	r3, [r3, #8]
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d106      	bne.n	80044cc <HAL_GPIO_EXTI_Callback+0x128>
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 80044be:	4b06      	ldr	r3, [pc, #24]	; (80044d8 <HAL_GPIO_EXTI_Callback+0x134>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2200      	movs	r2, #0
 80044c4:	63da      	str	r2, [r3, #60]	; 0x3c
				OpVar.ProxStop = 1;
 80044c6:	4b03      	ldr	r3, [pc, #12]	; (80044d4 <HAL_GPIO_EXTI_Callback+0x130>)
 80044c8:	2201      	movs	r2, #1
 80044ca:	71da      	strb	r2, [r3, #7]
}
 80044cc:	bf00      	nop
 80044ce:	3708      	adds	r7, #8
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	20000410 	.word	0x20000410
 80044d8:	20000f34 	.word	0x20000f34
 80044dc:	20000e80 	.word	0x20000e80
 80044e0:	20000438 	.word	0x20000438
 80044e4:	40020800 	.word	0x40020800
 80044e8:	2000040c 	.word	0x2000040c
 80044ec:	20000444 	.word	0x20000444
 80044f0:	3fe00000 	.word	0x3fe00000

080044f4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a2b      	ldr	r2, [pc, #172]	; (80045ac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d14f      	bne.n	80045a4 <HAL_TIM_PeriodElapsedCallback+0xb0>
	{
		QEIGetFeedback(&QEIData, 2500);
 8004504:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8004508:	4829      	ldr	r0, [pc, #164]	; (80045b0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800450a:	f7fe fac5 	bl	8002a98 <QEIGetFeedback>
		KF.z = QEIData.QEIVelocity;
 800450e:	4b28      	ldr	r3, [pc, #160]	; (80045b0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	4a28      	ldr	r2, [pc, #160]	; (80045b4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8004514:	65d3      	str	r3, [r2, #92]	; 0x5c
		kalman_filter();
 8004516:	f7fd fa21 	bl	800195c <kalman_filter>
		ZEstimateVelocity = KF.x_hat[1];
 800451a:	4b26      	ldr	r3, [pc, #152]	; (80045b4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	4a26      	ldr	r2, [pc, #152]	; (80045b8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8004520:	6013      	str	r3, [r2, #0]

		if(OpVar.ControllerEnable == 1)
 8004522:	4b26      	ldr	r3, [pc, #152]	; (80045bc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8004524:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d12e      	bne.n	800458a <HAL_TIM_PeriodElapsedCallback+0x96>
		{
			QuinticRun(&QuinticVar,PositionLoop.ESS,0.0004);
 800452c:	4b24      	ldr	r3, [pc, #144]	; (80045c0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800452e:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 8004532:	ed9f 0a24 	vldr	s0, [pc, #144]	; 80045c4 <HAL_TIM_PeriodElapsedCallback+0xd0>
 8004536:	4619      	mov	r1, r3
 8004538:	4823      	ldr	r0, [pc, #140]	; (80045c8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800453a:	f7fe fa47 	bl	80029cc <QuinticRun>
			CascadeLoop(&PositionLoop, &VelocityLoop, QEIData.QEIPosition, KF.x_hat[1],&QuinticVar, 3);
 800453e:	4b1c      	ldr	r3, [pc, #112]	; (80045b0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	ee07 3a90 	vmov	s15, r3
 8004546:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800454a:	4b1a      	ldr	r3, [pc, #104]	; (80045b4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800454c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004550:	eeb0 1a08 	vmov.f32	s2, #8	; 0x40400000  3.0
 8004554:	4a1c      	ldr	r2, [pc, #112]	; (80045c8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8004556:	eef0 0a47 	vmov.f32	s1, s14
 800455a:	eeb0 0a67 	vmov.f32	s0, s15
 800455e:	491b      	ldr	r1, [pc, #108]	; (80045cc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8004560:	4817      	ldr	r0, [pc, #92]	; (80045c0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8004562:	f7fd fe9d 	bl	80022a0 <CascadeLoop>
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,abs(VelocityLoop.U));
 8004566:	4b19      	ldr	r3, [pc, #100]	; (80045cc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800456e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004572:	4b17      	ldr	r3, [pc, #92]	; (80045d0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, VelocityLoop.MotorDir);
 8004578:	4b14      	ldr	r3, [pc, #80]	; (80045cc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800457a:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 800457e:	b2db      	uxtb	r3, r3
 8004580:	461a      	mov	r2, r3
 8004582:	2140      	movs	r1, #64	; 0x40
 8004584:	4813      	ldr	r0, [pc, #76]	; (80045d4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004586:	f002 fff9 	bl	800757c <HAL_GPIO_WritePin>
		}

		if(OpVar.JoyEnable == 1)
 800458a:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800458c:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d107      	bne.n	80045a4 <HAL_TIM_PeriodElapsedCallback+0xb0>
		{
			CheckJoystick();
 8004594:	f7fc ff96 	bl	80014c4 <CheckJoystick>
			CheckButton();
 8004598:	f7fd f808 	bl	80015ac <CheckButton>
			//joyXjog();
			joyYjog();
 800459c:	f000 f81c 	bl	80045d8 <joyYjog>
			CollectPosition();
 80045a0:	f000 f84e 	bl	8004640 <CollectPosition>
		}
	}
}
 80045a4:	bf00      	nop
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	20000fe8 	.word	0x20000fe8
 80045b0:	20000438 	.word	0x20000438
 80045b4:	200004f4 	.word	0x200004f4
 80045b8:	2000070c 	.word	0x2000070c
 80045bc:	20000410 	.word	0x20000410
 80045c0:	20000494 	.word	0x20000494
 80045c4:	39d1b717 	.word	0x39d1b717
 80045c8:	20000444 	.word	0x20000444
 80045cc:	200004c4 	.word	0x200004c4
 80045d0:	20000f34 	.word	0x20000f34
 80045d4:	40020800 	.word	0x40020800

080045d8 <joyYjog>:
    if (Joy.status == 1) {
        registerFrame[0x40].U16 = 0x0001;
    }
}
void joyYjog()
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
    if (Joy.Y == 1) {
 80045dc:	4b15      	ldr	r3, [pc, #84]	; (8004634 <joyYjog+0x5c>)
 80045de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d10a      	bne.n	80045fc <joyYjog+0x24>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, SET);
 80045e6:	2201      	movs	r2, #1
 80045e8:	2140      	movs	r1, #64	; 0x40
 80045ea:	4813      	ldr	r0, [pc, #76]	; (8004638 <joyYjog+0x60>)
 80045ec:	f002 ffc6 	bl	800757c <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 20000);
 80045f0:	4b12      	ldr	r3, [pc, #72]	; (800463c <joyYjog+0x64>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80045f8:	63da      	str	r2, [r3, #60]	; 0x3c

//    if (Joy.status == 1) {
//
//    }

}
 80045fa:	e019      	b.n	8004630 <joyYjog+0x58>
    } else if (Joy.Y == -1) {
 80045fc:	4b0d      	ldr	r3, [pc, #52]	; (8004634 <joyYjog+0x5c>)
 80045fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004606:	d10a      	bne.n	800461e <joyYjog+0x46>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, RESET);
 8004608:	2200      	movs	r2, #0
 800460a:	2140      	movs	r1, #64	; 0x40
 800460c:	480a      	ldr	r0, [pc, #40]	; (8004638 <joyYjog+0x60>)
 800460e:	f002 ffb5 	bl	800757c <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 20000);
 8004612:	4b0a      	ldr	r3, [pc, #40]	; (800463c <joyYjog+0x64>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f644 6220 	movw	r2, #20000	; 0x4e20
 800461a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800461c:	e008      	b.n	8004630 <joyYjog+0x58>
    } else if (Joy.Y == 0) {
 800461e:	4b05      	ldr	r3, [pc, #20]	; (8004634 <joyYjog+0x5c>)
 8004620:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d103      	bne.n	8004630 <joyYjog+0x58>
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8004628:	4b04      	ldr	r3, [pc, #16]	; (800463c <joyYjog+0x64>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2200      	movs	r2, #0
 800462e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004630:	bf00      	nop
 8004632:	bd80      	pop	{r7, pc}
 8004634:	200002f8 	.word	0x200002f8
 8004638:	40020800 	.word	0x40020800
 800463c:	20000f34 	.word	0x20000f34

08004640 <CollectPosition>:
void CollectPosition()
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0

    static uint8_t PreReset = 0;
    if (PreReset == 0 && Joy.status == 3) {
 8004646:	4b55      	ldr	r3, [pc, #340]	; (800479c <CollectPosition+0x15c>)
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d114      	bne.n	8004678 <CollectPosition+0x38>
 800464e:	4b54      	ldr	r3, [pc, #336]	; (80047a0 <CollectPosition+0x160>)
 8004650:	889b      	ldrh	r3, [r3, #4]
 8004652:	2b03      	cmp	r3, #3
 8004654:	d110      	bne.n	8004678 <CollectPosition+0x38>
        SubState = TrayP1;
 8004656:	4b53      	ldr	r3, [pc, #332]	; (80047a4 <CollectPosition+0x164>)
 8004658:	2200      	movs	r2, #0
 800465a:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i <= 7; i++) {
 800465c:	2300      	movs	r3, #0
 800465e:	71fb      	strb	r3, [r7, #7]
 8004660:	e007      	b.n	8004672 <CollectPosition+0x32>
            TrayPoint[i] = 0;
 8004662:	79fb      	ldrb	r3, [r7, #7]
 8004664:	4a50      	ldr	r2, [pc, #320]	; (80047a8 <CollectPosition+0x168>)
 8004666:	2100      	movs	r1, #0
 8004668:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (uint8_t i = 0; i <= 7; i++) {
 800466c:	79fb      	ldrb	r3, [r7, #7]
 800466e:	3301      	adds	r3, #1
 8004670:	71fb      	strb	r3, [r7, #7]
 8004672:	79fb      	ldrb	r3, [r7, #7]
 8004674:	2b07      	cmp	r3, #7
 8004676:	d9f4      	bls.n	8004662 <CollectPosition+0x22>
        }
    }

    static uint8_t PreRec = 0;

    switch (SubState) {
 8004678:	4b4a      	ldr	r3, [pc, #296]	; (80047a4 <CollectPosition+0x164>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b03      	cmp	r3, #3
 800467e:	d87f      	bhi.n	8004780 <CollectPosition+0x140>
 8004680:	a201      	add	r2, pc, #4	; (adr r2, 8004688 <CollectPosition+0x48>)
 8004682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004686:	bf00      	nop
 8004688:	08004699 	.word	0x08004699
 800468c:	080046d1 	.word	0x080046d1
 8004690:	08004709 	.word	0x08004709
 8004694:	08004741 	.word	0x08004741
    case TrayP1:

        if (Joy.status == 2 && PreRec == 0) {
 8004698:	4b41      	ldr	r3, [pc, #260]	; (80047a0 <CollectPosition+0x160>)
 800469a:	889b      	ldrh	r3, [r3, #4]
 800469c:	2b02      	cmp	r3, #2
 800469e:	d168      	bne.n	8004772 <CollectPosition+0x132>
 80046a0:	4b42      	ldr	r3, [pc, #264]	; (80047ac <CollectPosition+0x16c>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d164      	bne.n	8004772 <CollectPosition+0x132>
            SubState = TrayP2;
 80046a8:	4b3e      	ldr	r3, [pc, #248]	; (80047a4 <CollectPosition+0x164>)
 80046aa:	2201      	movs	r2, #1
 80046ac:	701a      	strb	r2, [r3, #0]
            TrayPoint[0] = Uint2Int(registerFrame[0x44].U16);
 80046ae:	4b40      	ldr	r3, [pc, #256]	; (80047b0 <CollectPosition+0x170>)
 80046b0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 f87f 	bl	80047b8 <Uint2Int>
 80046ba:	4603      	mov	r3, r0
 80046bc:	461a      	mov	r2, r3
 80046be:	4b3a      	ldr	r3, [pc, #232]	; (80047a8 <CollectPosition+0x168>)
 80046c0:	601a      	str	r2, [r3, #0]
            TrayPoint[1] = __HAL_TIM_GET_COUNTER(&htim2);
 80046c2:	4b3c      	ldr	r3, [pc, #240]	; (80047b4 <CollectPosition+0x174>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	461a      	mov	r2, r3
 80046ca:	4b37      	ldr	r3, [pc, #220]	; (80047a8 <CollectPosition+0x168>)
 80046cc:	605a      	str	r2, [r3, #4]
        }
        break;
 80046ce:	e050      	b.n	8004772 <CollectPosition+0x132>
    case TrayP2:

        if (Joy.status == 2 && PreRec == 0) {
 80046d0:	4b33      	ldr	r3, [pc, #204]	; (80047a0 <CollectPosition+0x160>)
 80046d2:	889b      	ldrh	r3, [r3, #4]
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d14e      	bne.n	8004776 <CollectPosition+0x136>
 80046d8:	4b34      	ldr	r3, [pc, #208]	; (80047ac <CollectPosition+0x16c>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d14a      	bne.n	8004776 <CollectPosition+0x136>
            SubState = TrayP3;
 80046e0:	4b30      	ldr	r3, [pc, #192]	; (80047a4 <CollectPosition+0x164>)
 80046e2:	2202      	movs	r2, #2
 80046e4:	701a      	strb	r2, [r3, #0]
            TrayPoint[2] = Uint2Int(registerFrame[0x44].U16);
 80046e6:	4b32      	ldr	r3, [pc, #200]	; (80047b0 <CollectPosition+0x170>)
 80046e8:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 f863 	bl	80047b8 <Uint2Int>
 80046f2:	4603      	mov	r3, r0
 80046f4:	461a      	mov	r2, r3
 80046f6:	4b2c      	ldr	r3, [pc, #176]	; (80047a8 <CollectPosition+0x168>)
 80046f8:	609a      	str	r2, [r3, #8]
            TrayPoint[3] = __HAL_TIM_GET_COUNTER(&htim2);
 80046fa:	4b2e      	ldr	r3, [pc, #184]	; (80047b4 <CollectPosition+0x174>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	461a      	mov	r2, r3
 8004702:	4b29      	ldr	r3, [pc, #164]	; (80047a8 <CollectPosition+0x168>)
 8004704:	60da      	str	r2, [r3, #12]
        }
        break;
 8004706:	e036      	b.n	8004776 <CollectPosition+0x136>
    case TrayP3:

        if (Joy.status == 2 && PreRec == 0) {
 8004708:	4b25      	ldr	r3, [pc, #148]	; (80047a0 <CollectPosition+0x160>)
 800470a:	889b      	ldrh	r3, [r3, #4]
 800470c:	2b02      	cmp	r3, #2
 800470e:	d134      	bne.n	800477a <CollectPosition+0x13a>
 8004710:	4b26      	ldr	r3, [pc, #152]	; (80047ac <CollectPosition+0x16c>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d130      	bne.n	800477a <CollectPosition+0x13a>
            SubState = TrayP4;
 8004718:	4b22      	ldr	r3, [pc, #136]	; (80047a4 <CollectPosition+0x164>)
 800471a:	2203      	movs	r2, #3
 800471c:	701a      	strb	r2, [r3, #0]
            TrayPoint[4] = Uint2Int(registerFrame[0x44].U16);
 800471e:	4b24      	ldr	r3, [pc, #144]	; (80047b0 <CollectPosition+0x170>)
 8004720:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8004724:	4618      	mov	r0, r3
 8004726:	f000 f847 	bl	80047b8 <Uint2Int>
 800472a:	4603      	mov	r3, r0
 800472c:	461a      	mov	r2, r3
 800472e:	4b1e      	ldr	r3, [pc, #120]	; (80047a8 <CollectPosition+0x168>)
 8004730:	611a      	str	r2, [r3, #16]
            TrayPoint[5] = __HAL_TIM_GET_COUNTER(&htim2);
 8004732:	4b20      	ldr	r3, [pc, #128]	; (80047b4 <CollectPosition+0x174>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	461a      	mov	r2, r3
 800473a:	4b1b      	ldr	r3, [pc, #108]	; (80047a8 <CollectPosition+0x168>)
 800473c:	615a      	str	r2, [r3, #20]

        }
        break;
 800473e:	e01c      	b.n	800477a <CollectPosition+0x13a>
    case TrayP4:

        if (Joy.status == 2 && PreRec == 0) {
 8004740:	4b17      	ldr	r3, [pc, #92]	; (80047a0 <CollectPosition+0x160>)
 8004742:	889b      	ldrh	r3, [r3, #4]
 8004744:	2b02      	cmp	r3, #2
 8004746:	d11a      	bne.n	800477e <CollectPosition+0x13e>
 8004748:	4b18      	ldr	r3, [pc, #96]	; (80047ac <CollectPosition+0x16c>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d116      	bne.n	800477e <CollectPosition+0x13e>
            TrayPoint[6] = Uint2Int(registerFrame[0x44].U16);
 8004750:	4b17      	ldr	r3, [pc, #92]	; (80047b0 <CollectPosition+0x170>)
 8004752:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8004756:	4618      	mov	r0, r3
 8004758:	f000 f82e 	bl	80047b8 <Uint2Int>
 800475c:	4603      	mov	r3, r0
 800475e:	461a      	mov	r2, r3
 8004760:	4b11      	ldr	r3, [pc, #68]	; (80047a8 <CollectPosition+0x168>)
 8004762:	619a      	str	r2, [r3, #24]
            TrayPoint[7] = __HAL_TIM_GET_COUNTER(&htim2);
 8004764:	4b13      	ldr	r3, [pc, #76]	; (80047b4 <CollectPosition+0x174>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	461a      	mov	r2, r3
 800476c:	4b0e      	ldr	r3, [pc, #56]	; (80047a8 <CollectPosition+0x168>)
 800476e:	61da      	str	r2, [r3, #28]
        }
        break;
 8004770:	e005      	b.n	800477e <CollectPosition+0x13e>
        break;
 8004772:	bf00      	nop
 8004774:	e004      	b.n	8004780 <CollectPosition+0x140>
        break;
 8004776:	bf00      	nop
 8004778:	e002      	b.n	8004780 <CollectPosition+0x140>
        break;
 800477a:	bf00      	nop
 800477c:	e000      	b.n	8004780 <CollectPosition+0x140>
        break;
 800477e:	bf00      	nop

    }

    PreReset = Joy.status;
 8004780:	4b07      	ldr	r3, [pc, #28]	; (80047a0 <CollectPosition+0x160>)
 8004782:	889b      	ldrh	r3, [r3, #4]
 8004784:	b2da      	uxtb	r2, r3
 8004786:	4b05      	ldr	r3, [pc, #20]	; (800479c <CollectPosition+0x15c>)
 8004788:	701a      	strb	r2, [r3, #0]
    PreRec = Joy.status;
 800478a:	4b05      	ldr	r3, [pc, #20]	; (80047a0 <CollectPosition+0x160>)
 800478c:	889b      	ldrh	r3, [r3, #4]
 800478e:	b2da      	uxtb	r2, r3
 8004790:	4b06      	ldr	r3, [pc, #24]	; (80047ac <CollectPosition+0x16c>)
 8004792:	701a      	strb	r2, [r3, #0]
}
 8004794:	bf00      	nop
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	20000e7c 	.word	0x20000e7c
 80047a0:	200002f8 	.word	0x200002f8
 80047a4:	20000e48 	.word	0x20000e48
 80047a8:	20000e4c 	.word	0x20000e4c
 80047ac:	20000e7d 	.word	0x20000e7d
 80047b0:	20000cb8 	.word	0x20000cb8
 80047b4:	20000e80 	.word	0x20000e80

080047b8 <Uint2Int>:

int16_t Uint2Int(uint16_t underflow)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	4603      	mov	r3, r0
 80047c0:	80fb      	strh	r3, [r7, #6]
    uint16_t integer = 0;
 80047c2:	2300      	movs	r3, #0
 80047c4:	81bb      	strh	r3, [r7, #12]
    int16_t bitwise = 0;
 80047c6:	2300      	movs	r3, #0
 80047c8:	81fb      	strh	r3, [r7, #14]

    if (underflow > 40000) {
 80047ca:	88fb      	ldrh	r3, [r7, #6]
 80047cc:	f649 4240 	movw	r2, #40000	; 0x9c40
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d907      	bls.n	80047e4 <Uint2Int+0x2c>
        integer = (uint16_t) (UINT16_MAX - underflow + 1);
 80047d4:	88fb      	ldrh	r3, [r7, #6]
 80047d6:	425b      	negs	r3, r3
 80047d8:	81bb      	strh	r3, [r7, #12]
        bitwise = ~integer;
 80047da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80047de:	43db      	mvns	r3, r3
 80047e0:	81fb      	strh	r3, [r7, #14]
 80047e2:	e001      	b.n	80047e8 <Uint2Int+0x30>
    } else {
        bitwise = underflow;
 80047e4:	88fb      	ldrh	r3, [r7, #6]
 80047e6:	81fb      	strh	r3, [r7, #14]
    }
    return bitwise;
 80047e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047fc:	b672      	cpsid	i
}
 80047fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004800:	e7fe      	b.n	8004800 <Error_Handler+0x8>
	...

08004804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800480a:	2300      	movs	r3, #0
 800480c:	607b      	str	r3, [r7, #4]
 800480e:	4b10      	ldr	r3, [pc, #64]	; (8004850 <HAL_MspInit+0x4c>)
 8004810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004812:	4a0f      	ldr	r2, [pc, #60]	; (8004850 <HAL_MspInit+0x4c>)
 8004814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004818:	6453      	str	r3, [r2, #68]	; 0x44
 800481a:	4b0d      	ldr	r3, [pc, #52]	; (8004850 <HAL_MspInit+0x4c>)
 800481c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004822:	607b      	str	r3, [r7, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004826:	2300      	movs	r3, #0
 8004828:	603b      	str	r3, [r7, #0]
 800482a:	4b09      	ldr	r3, [pc, #36]	; (8004850 <HAL_MspInit+0x4c>)
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	4a08      	ldr	r2, [pc, #32]	; (8004850 <HAL_MspInit+0x4c>)
 8004830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004834:	6413      	str	r3, [r2, #64]	; 0x40
 8004836:	4b06      	ldr	r3, [pc, #24]	; (8004850 <HAL_MspInit+0x4c>)
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800483e:	603b      	str	r3, [r7, #0]
 8004840:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004842:	2007      	movs	r0, #7
 8004844:	f002 f8a0 	bl	8006988 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004848:	bf00      	nop
 800484a:	3708      	adds	r7, #8
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40023800 	.word	0x40023800

08004854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004858:	e7fe      	b.n	8004858 <NMI_Handler+0x4>

0800485a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800485a:	b480      	push	{r7}
 800485c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800485e:	e7fe      	b.n	800485e <HardFault_Handler+0x4>

08004860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004864:	e7fe      	b.n	8004864 <MemManage_Handler+0x4>

08004866 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004866:	b480      	push	{r7}
 8004868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800486a:	e7fe      	b.n	800486a <BusFault_Handler+0x4>

0800486c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004870:	e7fe      	b.n	8004870 <UsageFault_Handler+0x4>

08004872 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004872:	b480      	push	{r7}
 8004874:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004876:	bf00      	nop
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004884:	bf00      	nop
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800488e:	b480      	push	{r7}
 8004890:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004892:	bf00      	nop
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048a0:	f001 fb80 	bl	8005fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048a4:	bf00      	nop
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80048ac:	4802      	ldr	r0, [pc, #8]	; (80048b8 <DMA1_Stream6_IRQHandler+0x10>)
 80048ae:	f002 fa45 	bl	8006d3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80048b2:	bf00      	nop
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	20001278 	.word	0x20001278

080048bc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80048c0:	4802      	ldr	r0, [pc, #8]	; (80048cc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80048c2:	f005 fee3 	bl	800a68c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80048c6:	bf00      	nop
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	20001150 	.word	0x20001150

080048d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80048d4:	4802      	ldr	r0, [pc, #8]	; (80048e0 <TIM2_IRQHandler+0x10>)
 80048d6:	f005 fed9 	bl	800a68c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80048da:	bf00      	nop
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	20000e80 	.word	0x20000e80

080048e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80048e8:	4802      	ldr	r0, [pc, #8]	; (80048f4 <TIM3_IRQHandler+0x10>)
 80048ea:	f005 fecf 	bl	800a68c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80048ee:	bf00      	nop
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20000f34 	.word	0x20000f34

080048f8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80048fc:	4802      	ldr	r0, [pc, #8]	; (8004908 <TIM4_IRQHandler+0x10>)
 80048fe:	f005 fec5 	bl	800a68c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004902:	bf00      	nop
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	20000fe8 	.word	0x20000fe8

0800490c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004910:	4802      	ldr	r0, [pc, #8]	; (800491c <I2C1_EV_IRQHandler+0x10>)
 8004912:	f003 f8fd 	bl	8007b10 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004916:	bf00      	nop
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	200003b8 	.word	0x200003b8

08004920 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004924:	4802      	ldr	r0, [pc, #8]	; (8004930 <I2C1_ER_IRQHandler+0x10>)
 8004926:	f003 fa64 	bl	8007df2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800492a:	bf00      	nop
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	200003b8 	.word	0x200003b8

08004934 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004938:	4802      	ldr	r0, [pc, #8]	; (8004944 <USART2_IRQHandler+0x10>)
 800493a:	f007 f95d 	bl	800bbf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800493e:	bf00      	nop
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	20001204 	.word	0x20001204

08004948 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800494c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004950:	f002 fe2e 	bl	80075b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004954:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004958:	f002 fe2a 	bl	80075b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800495c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004960:	f002 fe26 	bl	80075b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004964:	bf00      	nop
 8004966:	bd80      	pop	{r7, pc}

08004968 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800496c:	4802      	ldr	r0, [pc, #8]	; (8004978 <DMA2_Stream0_IRQHandler+0x10>)
 800496e:	f002 f9e5 	bl	8006d3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004972:	bf00      	nop
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	20000358 	.word	0x20000358

0800497c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004980:	4b06      	ldr	r3, [pc, #24]	; (800499c <SystemInit+0x20>)
 8004982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004986:	4a05      	ldr	r2, [pc, #20]	; (800499c <SystemInit+0x20>)
 8004988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800498c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004990:	bf00      	nop
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	e000ed00 	.word	0xe000ed00

080049a0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08c      	sub	sp, #48	; 0x30
 80049a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80049a6:	f107 030c 	add.w	r3, r7, #12
 80049aa:	2224      	movs	r2, #36	; 0x24
 80049ac:	2100      	movs	r1, #0
 80049ae:	4618      	mov	r0, r3
 80049b0:	f008 f9a0 	bl	800ccf4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049b4:	1d3b      	adds	r3, r7, #4
 80049b6:	2200      	movs	r2, #0
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80049bc:	4b21      	ldr	r3, [pc, #132]	; (8004a44 <MX_TIM2_Init+0xa4>)
 80049be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80049c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80049c4:	4b1f      	ldr	r3, [pc, #124]	; (8004a44 <MX_TIM2_Init+0xa4>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049ca:	4b1e      	ldr	r3, [pc, #120]	; (8004a44 <MX_TIM2_Init+0xa4>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80049d0:	4b1c      	ldr	r3, [pc, #112]	; (8004a44 <MX_TIM2_Init+0xa4>)
 80049d2:	f04f 32ff 	mov.w	r2, #4294967295
 80049d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049d8:	4b1a      	ldr	r3, [pc, #104]	; (8004a44 <MX_TIM2_Init+0xa4>)
 80049da:	2200      	movs	r2, #0
 80049dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049de:	4b19      	ldr	r3, [pc, #100]	; (8004a44 <MX_TIM2_Init+0xa4>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80049e4:	2303      	movs	r3, #3
 80049e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80049e8:	2300      	movs	r3, #0
 80049ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80049ec:	2301      	movs	r3, #1
 80049ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80049f0:	2300      	movs	r3, #0
 80049f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80049f4:	2300      	movs	r3, #0
 80049f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80049f8:	2300      	movs	r3, #0
 80049fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80049fc:	2301      	movs	r3, #1
 80049fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004a00:	2300      	movs	r3, #0
 8004a02:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004a04:	2300      	movs	r3, #0
 8004a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004a08:	f107 030c 	add.w	r3, r7, #12
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	480d      	ldr	r0, [pc, #52]	; (8004a44 <MX_TIM2_Init+0xa4>)
 8004a10:	f005 fcfa 	bl	800a408 <HAL_TIM_Encoder_Init>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8004a1a:	f7ff feed 	bl	80047f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a22:	2300      	movs	r3, #0
 8004a24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004a26:	1d3b      	adds	r3, r7, #4
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4806      	ldr	r0, [pc, #24]	; (8004a44 <MX_TIM2_Init+0xa4>)
 8004a2c:	f006 fe04 	bl	800b638 <HAL_TIMEx_MasterConfigSynchronization>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8004a36:	f7ff fedf 	bl	80047f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004a3a:	bf00      	nop
 8004a3c:	3730      	adds	r7, #48	; 0x30
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	20000e80 	.word	0x20000e80

08004a48 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08e      	sub	sp, #56	; 0x38
 8004a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	605a      	str	r2, [r3, #4]
 8004a58:	609a      	str	r2, [r3, #8]
 8004a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a5c:	f107 0320 	add.w	r3, r7, #32
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a66:	1d3b      	adds	r3, r7, #4
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	605a      	str	r2, [r3, #4]
 8004a6e:	609a      	str	r2, [r3, #8]
 8004a70:	60da      	str	r2, [r3, #12]
 8004a72:	611a      	str	r2, [r3, #16]
 8004a74:	615a      	str	r2, [r3, #20]
 8004a76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004a78:	4b2c      	ldr	r3, [pc, #176]	; (8004b2c <MX_TIM3_Init+0xe4>)
 8004a7a:	4a2d      	ldr	r2, [pc, #180]	; (8004b30 <MX_TIM3_Init+0xe8>)
 8004a7c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004a7e:	4b2b      	ldr	r3, [pc, #172]	; (8004b2c <MX_TIM3_Init+0xe4>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a84:	4b29      	ldr	r3, [pc, #164]	; (8004b2c <MX_TIM3_Init+0xe4>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8004a8a:	4b28      	ldr	r3, [pc, #160]	; (8004b2c <MX_TIM3_Init+0xe4>)
 8004a8c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8004a90:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a92:	4b26      	ldr	r3, [pc, #152]	; (8004b2c <MX_TIM3_Init+0xe4>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a98:	4b24      	ldr	r3, [pc, #144]	; (8004b2c <MX_TIM3_Init+0xe4>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004a9e:	4823      	ldr	r0, [pc, #140]	; (8004b2c <MX_TIM3_Init+0xe4>)
 8004aa0:	f005 f9aa 	bl	8009df8 <HAL_TIM_Base_Init>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004aaa:	f7ff fea5 	bl	80047f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004aae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004ab4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ab8:	4619      	mov	r1, r3
 8004aba:	481c      	ldr	r0, [pc, #112]	; (8004b2c <MX_TIM3_Init+0xe4>)
 8004abc:	f006 f82c 	bl	800ab18 <HAL_TIM_ConfigClockSource>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004ac6:	f7ff fe97 	bl	80047f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004aca:	4818      	ldr	r0, [pc, #96]	; (8004b2c <MX_TIM3_Init+0xe4>)
 8004acc:	f005 fab8 	bl	800a040 <HAL_TIM_PWM_Init>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004ad6:	f7ff fe8f 	bl	80047f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ada:	2300      	movs	r3, #0
 8004adc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004ae2:	f107 0320 	add.w	r3, r7, #32
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4810      	ldr	r0, [pc, #64]	; (8004b2c <MX_TIM3_Init+0xe4>)
 8004aea:	f006 fda5 	bl	800b638 <HAL_TIMEx_MasterConfigSynchronization>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004af4:	f7ff fe80 	bl	80047f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004af8:	2360      	movs	r3, #96	; 0x60
 8004afa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004afc:	2300      	movs	r3, #0
 8004afe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b00:	2300      	movs	r3, #0
 8004b02:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b04:	2300      	movs	r3, #0
 8004b06:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004b08:	1d3b      	adds	r3, r7, #4
 8004b0a:	2208      	movs	r2, #8
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4807      	ldr	r0, [pc, #28]	; (8004b2c <MX_TIM3_Init+0xe4>)
 8004b10:	f005 ff40 	bl	800a994 <HAL_TIM_PWM_ConfigChannel>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004b1a:	f7ff fe6d 	bl	80047f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004b1e:	4803      	ldr	r0, [pc, #12]	; (8004b2c <MX_TIM3_Init+0xe4>)
 8004b20:	f000 f9c0 	bl	8004ea4 <HAL_TIM_MspPostInit>

}
 8004b24:	bf00      	nop
 8004b26:	3738      	adds	r7, #56	; 0x38
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	20000f34 	.word	0x20000f34
 8004b30:	40000400 	.word	0x40000400

08004b34 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b3a:	f107 0308 	add.w	r3, r7, #8
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	605a      	str	r2, [r3, #4]
 8004b44:	609a      	str	r2, [r3, #8]
 8004b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b48:	463b      	mov	r3, r7
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004b50:	4b1d      	ldr	r3, [pc, #116]	; (8004bc8 <MX_TIM4_Init+0x94>)
 8004b52:	4a1e      	ldr	r2, [pc, #120]	; (8004bcc <MX_TIM4_Init+0x98>)
 8004b54:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8004b56:	4b1c      	ldr	r3, [pc, #112]	; (8004bc8 <MX_TIM4_Init+0x94>)
 8004b58:	2263      	movs	r2, #99	; 0x63
 8004b5a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b5c:	4b1a      	ldr	r3, [pc, #104]	; (8004bc8 <MX_TIM4_Init+0x94>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 399;
 8004b62:	4b19      	ldr	r3, [pc, #100]	; (8004bc8 <MX_TIM4_Init+0x94>)
 8004b64:	f240 128f 	movw	r2, #399	; 0x18f
 8004b68:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b6a:	4b17      	ldr	r3, [pc, #92]	; (8004bc8 <MX_TIM4_Init+0x94>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b70:	4b15      	ldr	r3, [pc, #84]	; (8004bc8 <MX_TIM4_Init+0x94>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004b76:	4814      	ldr	r0, [pc, #80]	; (8004bc8 <MX_TIM4_Init+0x94>)
 8004b78:	f005 f93e 	bl	8009df8 <HAL_TIM_Base_Init>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8004b82:	f7ff fe39 	bl	80047f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004b8c:	f107 0308 	add.w	r3, r7, #8
 8004b90:	4619      	mov	r1, r3
 8004b92:	480d      	ldr	r0, [pc, #52]	; (8004bc8 <MX_TIM4_Init+0x94>)
 8004b94:	f005 ffc0 	bl	800ab18 <HAL_TIM_ConfigClockSource>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8004b9e:	f7ff fe2b 	bl	80047f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004baa:	463b      	mov	r3, r7
 8004bac:	4619      	mov	r1, r3
 8004bae:	4806      	ldr	r0, [pc, #24]	; (8004bc8 <MX_TIM4_Init+0x94>)
 8004bb0:	f006 fd42 	bl	800b638 <HAL_TIMEx_MasterConfigSynchronization>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8004bba:	f7ff fe1d 	bl	80047f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004bbe:	bf00      	nop
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000fe8 	.word	0x20000fe8
 8004bcc:	40000800 	.word	0x40000800

08004bd0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004bd6:	f107 0308 	add.w	r3, r7, #8
 8004bda:	2200      	movs	r2, #0
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	605a      	str	r2, [r3, #4]
 8004be0:	609a      	str	r2, [r3, #8]
 8004be2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004be4:	463b      	mov	r3, r7
 8004be6:	2200      	movs	r2, #0
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004bec:	4b1d      	ldr	r3, [pc, #116]	; (8004c64 <MX_TIM5_Init+0x94>)
 8004bee:	4a1e      	ldr	r2, [pc, #120]	; (8004c68 <MX_TIM5_Init+0x98>)
 8004bf0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8004bf2:	4b1c      	ldr	r3, [pc, #112]	; (8004c64 <MX_TIM5_Init+0x94>)
 8004bf4:	2253      	movs	r2, #83	; 0x53
 8004bf6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bf8:	4b1a      	ldr	r3, [pc, #104]	; (8004c64 <MX_TIM5_Init+0x94>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8004bfe:	4b19      	ldr	r3, [pc, #100]	; (8004c64 <MX_TIM5_Init+0x94>)
 8004c00:	f04f 32ff 	mov.w	r2, #4294967295
 8004c04:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c06:	4b17      	ldr	r3, [pc, #92]	; (8004c64 <MX_TIM5_Init+0x94>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c0c:	4b15      	ldr	r3, [pc, #84]	; (8004c64 <MX_TIM5_Init+0x94>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004c12:	4814      	ldr	r0, [pc, #80]	; (8004c64 <MX_TIM5_Init+0x94>)
 8004c14:	f005 f8f0 	bl	8009df8 <HAL_TIM_Base_Init>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8004c1e:	f7ff fdeb 	bl	80047f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004c28:	f107 0308 	add.w	r3, r7, #8
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	480d      	ldr	r0, [pc, #52]	; (8004c64 <MX_TIM5_Init+0x94>)
 8004c30:	f005 ff72 	bl	800ab18 <HAL_TIM_ConfigClockSource>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8004c3a:	f7ff fddd 	bl	80047f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c42:	2300      	movs	r3, #0
 8004c44:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004c46:	463b      	mov	r3, r7
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4806      	ldr	r0, [pc, #24]	; (8004c64 <MX_TIM5_Init+0x94>)
 8004c4c:	f006 fcf4 	bl	800b638 <HAL_TIMEx_MasterConfigSynchronization>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8004c56:	f7ff fdcf 	bl	80047f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004c5a:	bf00      	nop
 8004c5c:	3718      	adds	r7, #24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	2000109c 	.word	0x2000109c
 8004c68:	40000c00 	.word	0x40000c00

08004c6c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b088      	sub	sp, #32
 8004c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c72:	1d3b      	adds	r3, r7, #4
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	605a      	str	r2, [r3, #4]
 8004c7a:	609a      	str	r2, [r3, #8]
 8004c7c:	60da      	str	r2, [r3, #12]
 8004c7e:	611a      	str	r2, [r3, #16]
 8004c80:	615a      	str	r2, [r3, #20]
 8004c82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004c84:	4b21      	ldr	r3, [pc, #132]	; (8004d0c <MX_TIM11_Init+0xa0>)
 8004c86:	4a22      	ldr	r2, [pc, #136]	; (8004d10 <MX_TIM11_Init+0xa4>)
 8004c88:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8004c8a:	4b20      	ldr	r3, [pc, #128]	; (8004d0c <MX_TIM11_Init+0xa0>)
 8004c8c:	2263      	movs	r2, #99	; 0x63
 8004c8e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c90:	4b1e      	ldr	r3, [pc, #120]	; (8004d0c <MX_TIM11_Init+0xa0>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 8004c96:	4b1d      	ldr	r3, [pc, #116]	; (8004d0c <MX_TIM11_Init+0xa0>)
 8004c98:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8004c9c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c9e:	4b1b      	ldr	r3, [pc, #108]	; (8004d0c <MX_TIM11_Init+0xa0>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ca4:	4b19      	ldr	r3, [pc, #100]	; (8004d0c <MX_TIM11_Init+0xa0>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004caa:	4818      	ldr	r0, [pc, #96]	; (8004d0c <MX_TIM11_Init+0xa0>)
 8004cac:	f005 f8a4 	bl	8009df8 <HAL_TIM_Base_Init>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8004cb6:	f7ff fd9f 	bl	80047f8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8004cba:	4814      	ldr	r0, [pc, #80]	; (8004d0c <MX_TIM11_Init+0xa0>)
 8004cbc:	f005 f95a 	bl	8009f74 <HAL_TIM_OC_Init>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8004cc6:	f7ff fd97 	bl	80047f8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 8004cca:	2108      	movs	r1, #8
 8004ccc:	480f      	ldr	r0, [pc, #60]	; (8004d0c <MX_TIM11_Init+0xa0>)
 8004cce:	f005 facd 	bl	800a26c <HAL_TIM_OnePulse_Init>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 8004cd8:	f7ff fd8e 	bl	80047f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8004cdc:	2310      	movs	r3, #16
 8004cde:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 8004ce0:	f240 5399 	movw	r3, #1433	; 0x599
 8004ce4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004cee:	1d3b      	adds	r3, r7, #4
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	4805      	ldr	r0, [pc, #20]	; (8004d0c <MX_TIM11_Init+0xa0>)
 8004cf6:	f005 fdf1 	bl	800a8dc <HAL_TIM_OC_ConfigChannel>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8004d00:	f7ff fd7a 	bl	80047f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8004d04:	bf00      	nop
 8004d06:	3720      	adds	r7, #32
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	20001150 	.word	0x20001150
 8004d10:	40014800 	.word	0x40014800

08004d14 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b08a      	sub	sp, #40	; 0x28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d1c:	f107 0314 	add.w	r3, r7, #20
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	605a      	str	r2, [r3, #4]
 8004d26:	609a      	str	r2, [r3, #8]
 8004d28:	60da      	str	r2, [r3, #12]
 8004d2a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d34:	d133      	bne.n	8004d9e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d36:	2300      	movs	r3, #0
 8004d38:	613b      	str	r3, [r7, #16]
 8004d3a:	4b1b      	ldr	r3, [pc, #108]	; (8004da8 <HAL_TIM_Encoder_MspInit+0x94>)
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	4a1a      	ldr	r2, [pc, #104]	; (8004da8 <HAL_TIM_Encoder_MspInit+0x94>)
 8004d40:	f043 0301 	orr.w	r3, r3, #1
 8004d44:	6413      	str	r3, [r2, #64]	; 0x40
 8004d46:	4b18      	ldr	r3, [pc, #96]	; (8004da8 <HAL_TIM_Encoder_MspInit+0x94>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	613b      	str	r3, [r7, #16]
 8004d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d52:	2300      	movs	r3, #0
 8004d54:	60fb      	str	r3, [r7, #12]
 8004d56:	4b14      	ldr	r3, [pc, #80]	; (8004da8 <HAL_TIM_Encoder_MspInit+0x94>)
 8004d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5a:	4a13      	ldr	r2, [pc, #76]	; (8004da8 <HAL_TIM_Encoder_MspInit+0x94>)
 8004d5c:	f043 0301 	orr.w	r3, r3, #1
 8004d60:	6313      	str	r3, [r2, #48]	; 0x30
 8004d62:	4b11      	ldr	r3, [pc, #68]	; (8004da8 <HAL_TIM_Encoder_MspInit+0x94>)
 8004d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d72:	2302      	movs	r3, #2
 8004d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d76:	2300      	movs	r3, #0
 8004d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d82:	f107 0314 	add.w	r3, r7, #20
 8004d86:	4619      	mov	r1, r3
 8004d88:	4808      	ldr	r0, [pc, #32]	; (8004dac <HAL_TIM_Encoder_MspInit+0x98>)
 8004d8a:	f002 fa5b 	bl	8007244 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004d8e:	2200      	movs	r2, #0
 8004d90:	2100      	movs	r1, #0
 8004d92:	201c      	movs	r0, #28
 8004d94:	f001 fe03 	bl	800699e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004d98:	201c      	movs	r0, #28
 8004d9a:	f001 fe1c 	bl	80069d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004d9e:	bf00      	nop
 8004da0:	3728      	adds	r7, #40	; 0x28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	40023800 	.word	0x40023800
 8004dac:	40020000 	.word	0x40020000

08004db0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a34      	ldr	r2, [pc, #208]	; (8004e90 <HAL_TIM_Base_MspInit+0xe0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d116      	bne.n	8004df0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	617b      	str	r3, [r7, #20]
 8004dc6:	4b33      	ldr	r3, [pc, #204]	; (8004e94 <HAL_TIM_Base_MspInit+0xe4>)
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	4a32      	ldr	r2, [pc, #200]	; (8004e94 <HAL_TIM_Base_MspInit+0xe4>)
 8004dcc:	f043 0302 	orr.w	r3, r3, #2
 8004dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8004dd2:	4b30      	ldr	r3, [pc, #192]	; (8004e94 <HAL_TIM_Base_MspInit+0xe4>)
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	617b      	str	r3, [r7, #20]
 8004ddc:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004dde:	2200      	movs	r2, #0
 8004de0:	2100      	movs	r1, #0
 8004de2:	201d      	movs	r0, #29
 8004de4:	f001 fddb 	bl	800699e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004de8:	201d      	movs	r0, #29
 8004dea:	f001 fdf4 	bl	80069d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8004dee:	e04a      	b.n	8004e86 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a28      	ldr	r2, [pc, #160]	; (8004e98 <HAL_TIM_Base_MspInit+0xe8>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d116      	bne.n	8004e28 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	613b      	str	r3, [r7, #16]
 8004dfe:	4b25      	ldr	r3, [pc, #148]	; (8004e94 <HAL_TIM_Base_MspInit+0xe4>)
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	4a24      	ldr	r2, [pc, #144]	; (8004e94 <HAL_TIM_Base_MspInit+0xe4>)
 8004e04:	f043 0304 	orr.w	r3, r3, #4
 8004e08:	6413      	str	r3, [r2, #64]	; 0x40
 8004e0a:	4b22      	ldr	r3, [pc, #136]	; (8004e94 <HAL_TIM_Base_MspInit+0xe4>)
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	f003 0304 	and.w	r3, r3, #4
 8004e12:	613b      	str	r3, [r7, #16]
 8004e14:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 1);
 8004e16:	2201      	movs	r2, #1
 8004e18:	2100      	movs	r1, #0
 8004e1a:	201e      	movs	r0, #30
 8004e1c:	f001 fdbf 	bl	800699e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004e20:	201e      	movs	r0, #30
 8004e22:	f001 fdd8 	bl	80069d6 <HAL_NVIC_EnableIRQ>
}
 8004e26:	e02e      	b.n	8004e86 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM5)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a1b      	ldr	r2, [pc, #108]	; (8004e9c <HAL_TIM_Base_MspInit+0xec>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d10e      	bne.n	8004e50 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004e32:	2300      	movs	r3, #0
 8004e34:	60fb      	str	r3, [r7, #12]
 8004e36:	4b17      	ldr	r3, [pc, #92]	; (8004e94 <HAL_TIM_Base_MspInit+0xe4>)
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	4a16      	ldr	r2, [pc, #88]	; (8004e94 <HAL_TIM_Base_MspInit+0xe4>)
 8004e3c:	f043 0308 	orr.w	r3, r3, #8
 8004e40:	6413      	str	r3, [r2, #64]	; 0x40
 8004e42:	4b14      	ldr	r3, [pc, #80]	; (8004e94 <HAL_TIM_Base_MspInit+0xe4>)
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	f003 0308 	and.w	r3, r3, #8
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
}
 8004e4e:	e01a      	b.n	8004e86 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM11)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a12      	ldr	r2, [pc, #72]	; (8004ea0 <HAL_TIM_Base_MspInit+0xf0>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d115      	bne.n	8004e86 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60bb      	str	r3, [r7, #8]
 8004e5e:	4b0d      	ldr	r3, [pc, #52]	; (8004e94 <HAL_TIM_Base_MspInit+0xe4>)
 8004e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e62:	4a0c      	ldr	r2, [pc, #48]	; (8004e94 <HAL_TIM_Base_MspInit+0xe4>)
 8004e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e68:	6453      	str	r3, [r2, #68]	; 0x44
 8004e6a:	4b0a      	ldr	r3, [pc, #40]	; (8004e94 <HAL_TIM_Base_MspInit+0xe4>)
 8004e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e72:	60bb      	str	r3, [r7, #8]
 8004e74:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004e76:	2200      	movs	r2, #0
 8004e78:	2100      	movs	r1, #0
 8004e7a:	201a      	movs	r0, #26
 8004e7c:	f001 fd8f 	bl	800699e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004e80:	201a      	movs	r0, #26
 8004e82:	f001 fda8 	bl	80069d6 <HAL_NVIC_EnableIRQ>
}
 8004e86:	bf00      	nop
 8004e88:	3718      	adds	r7, #24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	40000400 	.word	0x40000400
 8004e94:	40023800 	.word	0x40023800
 8004e98:	40000800 	.word	0x40000800
 8004e9c:	40000c00 	.word	0x40000c00
 8004ea0:	40014800 	.word	0x40014800

08004ea4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b088      	sub	sp, #32
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eac:	f107 030c 	add.w	r3, r7, #12
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	605a      	str	r2, [r3, #4]
 8004eb6:	609a      	str	r2, [r3, #8]
 8004eb8:	60da      	str	r2, [r3, #12]
 8004eba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a12      	ldr	r2, [pc, #72]	; (8004f0c <HAL_TIM_MspPostInit+0x68>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d11e      	bne.n	8004f04 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60bb      	str	r3, [r7, #8]
 8004eca:	4b11      	ldr	r3, [pc, #68]	; (8004f10 <HAL_TIM_MspPostInit+0x6c>)
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ece:	4a10      	ldr	r2, [pc, #64]	; (8004f10 <HAL_TIM_MspPostInit+0x6c>)
 8004ed0:	f043 0304 	orr.w	r3, r3, #4
 8004ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ed6:	4b0e      	ldr	r3, [pc, #56]	; (8004f10 <HAL_TIM_MspPostInit+0x6c>)
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	60bb      	str	r3, [r7, #8]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004ee2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ee6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ee8:	2302      	movs	r3, #2
 8004eea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eec:	2300      	movs	r3, #0
 8004eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ef8:	f107 030c 	add.w	r3, r7, #12
 8004efc:	4619      	mov	r1, r3
 8004efe:	4805      	ldr	r0, [pc, #20]	; (8004f14 <HAL_TIM_MspPostInit+0x70>)
 8004f00:	f002 f9a0 	bl	8007244 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004f04:	bf00      	nop
 8004f06:	3720      	adds	r7, #32
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	40000400 	.word	0x40000400
 8004f10:	40023800 	.word	0x40023800
 8004f14:	40020800 	.word	0x40020800

08004f18 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004f1c:	4b12      	ldr	r3, [pc, #72]	; (8004f68 <MX_USART2_UART_Init+0x50>)
 8004f1e:	4a13      	ldr	r2, [pc, #76]	; (8004f6c <MX_USART2_UART_Init+0x54>)
 8004f20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8004f22:	4b11      	ldr	r3, [pc, #68]	; (8004f68 <MX_USART2_UART_Init+0x50>)
 8004f24:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8004f28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8004f2a:	4b0f      	ldr	r3, [pc, #60]	; (8004f68 <MX_USART2_UART_Init+0x50>)
 8004f2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f30:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004f32:	4b0d      	ldr	r3, [pc, #52]	; (8004f68 <MX_USART2_UART_Init+0x50>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8004f38:	4b0b      	ldr	r3, [pc, #44]	; (8004f68 <MX_USART2_UART_Init+0x50>)
 8004f3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004f40:	4b09      	ldr	r3, [pc, #36]	; (8004f68 <MX_USART2_UART_Init+0x50>)
 8004f42:	220c      	movs	r2, #12
 8004f44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f46:	4b08      	ldr	r3, [pc, #32]	; (8004f68 <MX_USART2_UART_Init+0x50>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f4c:	4b06      	ldr	r3, [pc, #24]	; (8004f68 <MX_USART2_UART_Init+0x50>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004f52:	4805      	ldr	r0, [pc, #20]	; (8004f68 <MX_USART2_UART_Init+0x50>)
 8004f54:	f006 fbfc 	bl	800b750 <HAL_UART_Init>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d001      	beq.n	8004f62 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8004f5e:	f7ff fc4b 	bl	80047f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004f62:	bf00      	nop
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	20001204 	.word	0x20001204
 8004f6c:	40004400 	.word	0x40004400

08004f70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b08a      	sub	sp, #40	; 0x28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f78:	f107 0314 	add.w	r3, r7, #20
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	605a      	str	r2, [r3, #4]
 8004f82:	609a      	str	r2, [r3, #8]
 8004f84:	60da      	str	r2, [r3, #12]
 8004f86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a34      	ldr	r2, [pc, #208]	; (8005060 <HAL_UART_MspInit+0xf0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d161      	bne.n	8005056 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004f92:	2300      	movs	r3, #0
 8004f94:	613b      	str	r3, [r7, #16]
 8004f96:	4b33      	ldr	r3, [pc, #204]	; (8005064 <HAL_UART_MspInit+0xf4>)
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	4a32      	ldr	r2, [pc, #200]	; (8005064 <HAL_UART_MspInit+0xf4>)
 8004f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8004fa2:	4b30      	ldr	r3, [pc, #192]	; (8005064 <HAL_UART_MspInit+0xf4>)
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004faa:	613b      	str	r3, [r7, #16]
 8004fac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fae:	2300      	movs	r3, #0
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	4b2c      	ldr	r3, [pc, #176]	; (8005064 <HAL_UART_MspInit+0xf4>)
 8004fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb6:	4a2b      	ldr	r2, [pc, #172]	; (8005064 <HAL_UART_MspInit+0xf4>)
 8004fb8:	f043 0301 	orr.w	r3, r3, #1
 8004fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8004fbe:	4b29      	ldr	r3, [pc, #164]	; (8005064 <HAL_UART_MspInit+0xf4>)
 8004fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004fca:	230c      	movs	r3, #12
 8004fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fce:	2302      	movs	r3, #2
 8004fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004fda:	2307      	movs	r3, #7
 8004fdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fde:	f107 0314 	add.w	r3, r7, #20
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	4820      	ldr	r0, [pc, #128]	; (8005068 <HAL_UART_MspInit+0xf8>)
 8004fe6:	f002 f92d 	bl	8007244 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004fea:	4b20      	ldr	r3, [pc, #128]	; (800506c <HAL_UART_MspInit+0xfc>)
 8004fec:	4a20      	ldr	r2, [pc, #128]	; (8005070 <HAL_UART_MspInit+0x100>)
 8004fee:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004ff0:	4b1e      	ldr	r3, [pc, #120]	; (800506c <HAL_UART_MspInit+0xfc>)
 8004ff2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004ff6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ff8:	4b1c      	ldr	r3, [pc, #112]	; (800506c <HAL_UART_MspInit+0xfc>)
 8004ffa:	2240      	movs	r2, #64	; 0x40
 8004ffc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ffe:	4b1b      	ldr	r3, [pc, #108]	; (800506c <HAL_UART_MspInit+0xfc>)
 8005000:	2200      	movs	r2, #0
 8005002:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005004:	4b19      	ldr	r3, [pc, #100]	; (800506c <HAL_UART_MspInit+0xfc>)
 8005006:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800500a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800500c:	4b17      	ldr	r3, [pc, #92]	; (800506c <HAL_UART_MspInit+0xfc>)
 800500e:	2200      	movs	r2, #0
 8005010:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005012:	4b16      	ldr	r3, [pc, #88]	; (800506c <HAL_UART_MspInit+0xfc>)
 8005014:	2200      	movs	r2, #0
 8005016:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005018:	4b14      	ldr	r3, [pc, #80]	; (800506c <HAL_UART_MspInit+0xfc>)
 800501a:	2200      	movs	r2, #0
 800501c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800501e:	4b13      	ldr	r3, [pc, #76]	; (800506c <HAL_UART_MspInit+0xfc>)
 8005020:	2200      	movs	r2, #0
 8005022:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005024:	4b11      	ldr	r3, [pc, #68]	; (800506c <HAL_UART_MspInit+0xfc>)
 8005026:	2200      	movs	r2, #0
 8005028:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800502a:	4810      	ldr	r0, [pc, #64]	; (800506c <HAL_UART_MspInit+0xfc>)
 800502c:	f001 fcee 	bl	8006a0c <HAL_DMA_Init>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8005036:	f7ff fbdf 	bl	80047f8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a0b      	ldr	r2, [pc, #44]	; (800506c <HAL_UART_MspInit+0xfc>)
 800503e:	635a      	str	r2, [r3, #52]	; 0x34
 8005040:	4a0a      	ldr	r2, [pc, #40]	; (800506c <HAL_UART_MspInit+0xfc>)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005046:	2200      	movs	r2, #0
 8005048:	2100      	movs	r1, #0
 800504a:	2026      	movs	r0, #38	; 0x26
 800504c:	f001 fca7 	bl	800699e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005050:	2026      	movs	r0, #38	; 0x26
 8005052:	f001 fcc0 	bl	80069d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005056:	bf00      	nop
 8005058:	3728      	adds	r7, #40	; 0x28
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	40004400 	.word	0x40004400
 8005064:	40023800 	.word	0x40023800
 8005068:	40020000 	.word	0x40020000
 800506c:	20001278 	.word	0x20001278
 8005070:	400260a0 	.word	0x400260a0

08005074 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005074:	f8df d034 	ldr.w	sp, [pc, #52]	; 80050ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005078:	480d      	ldr	r0, [pc, #52]	; (80050b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800507a:	490e      	ldr	r1, [pc, #56]	; (80050b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800507c:	4a0e      	ldr	r2, [pc, #56]	; (80050b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800507e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005080:	e002      	b.n	8005088 <LoopCopyDataInit>

08005082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005086:	3304      	adds	r3, #4

08005088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800508a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800508c:	d3f9      	bcc.n	8005082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800508e:	4a0b      	ldr	r2, [pc, #44]	; (80050bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005090:	4c0b      	ldr	r4, [pc, #44]	; (80050c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005094:	e001      	b.n	800509a <LoopFillZerobss>

08005096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005098:	3204      	adds	r2, #4

0800509a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800509a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800509c:	d3fb      	bcc.n	8005096 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800509e:	f7ff fc6d 	bl	800497c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80050a2:	f007 fdf5 	bl	800cc90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80050a6:	f7fe fba1 	bl	80037ec <main>
  bx  lr    
 80050aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80050ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80050b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050b4:	200002a4 	.word	0x200002a4
  ldr r2, =_sidata
 80050b8:	0800f6b0 	.word	0x0800f6b0
  ldr r2, =_sbss
 80050bc:	200002a4 	.word	0x200002a4
  ldr r4, =_ebss
 80050c0:	200012dc 	.word	0x200012dc

080050c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80050c4:	e7fe      	b.n	80050c4 <ADC_IRQHandler>
	...

080050c8 <arm_atan2_f32>:
                   and compute the right angle.
*/


arm_status arm_atan2_f32(float32_t y,float32_t x,float32_t *result)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b0a1      	sub	sp, #132	; 0x84
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	ed87 0a03 	vstr	s0, [r7, #12]
 80050d2:	edc7 0a02 	vstr	s1, [r7, #8]
 80050d6:	6078      	str	r0, [r7, #4]
    if (x > 0.0f)
 80050d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80050dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050e4:	f340 808e 	ble.w	8005204 <arm_atan2_f32+0x13c>
    {
        *result=arm_atan_f32(y/x);
 80050e8:	edd7 6a03 	vldr	s13, [r7, #12]
 80050ec:	ed97 7a02 	vldr	s14, [r7, #8]
 80050f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050f4:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
   int sign=0;
 80050f8:	2300      	movs	r3, #0
 80050fa:	67bb      	str	r3, [r7, #120]	; 0x78
   float32_t res=0.0f;
 80050fc:	f04f 0300 	mov.w	r3, #0
 8005100:	677b      	str	r3, [r7, #116]	; 0x74
   if (x < 0.0f)
 8005102:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005106:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800510a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800510e:	d507      	bpl.n	8005120 <arm_atan2_f32+0x58>
      sign=1;
 8005110:	2301      	movs	r3, #1
 8005112:	67bb      	str	r3, [r7, #120]	; 0x78
      x=-x;
 8005114:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005118:	eef1 7a67 	vneg.f32	s15, s15
 800511c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
   if (x > 1.0f)
 8005120:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005124:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005128:	eef4 7ac7 	vcmpe.f32	s15, s14
 800512c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005130:	dd31      	ble.n	8005196 <arm_atan2_f32+0xce>
      x = 1.0f / x;
 8005132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005136:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800513a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800513e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
 8005142:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005144:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8005146:	4bb5      	ldr	r3, [pc, #724]	; (800541c <arm_atan2_f32+0x354>)
 8005148:	66fb      	str	r3, [r7, #108]	; 0x6c
    int i=1;
 800514a:	2301      	movs	r3, #1
 800514c:	66bb      	str	r3, [r7, #104]	; 0x68
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 800514e:	2301      	movs	r3, #1
 8005150:	66bb      	str	r3, [r7, #104]	; 0x68
 8005152:	e014      	b.n	800517e <arm_atan2_f32+0xb6>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8005154:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8005158:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800515c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005160:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005162:	f1c3 0309 	rsb	r3, r3, #9
 8005166:	4aae      	ldr	r2, [pc, #696]	; (8005420 <arm_atan2_f32+0x358>)
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4413      	add	r3, r2
 800516c:	edd3 7a00 	vldr	s15, [r3]
 8005170:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005174:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8005178:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800517a:	3301      	adds	r3, #1
 800517c:	66bb      	str	r3, [r7, #104]	; 0x68
 800517e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005180:	2b09      	cmp	r3, #9
 8005182:	dde7      	ble.n	8005154 <arm_atan2_f32+0x8c>
    return(res);
 8005184:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8005188:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8005424 <arm_atan2_f32+0x35c>
 800518c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005190:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 8005194:	e028      	b.n	80051e8 <arm_atan2_f32+0x120>
 8005196:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005198:	667b      	str	r3, [r7, #100]	; 0x64
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 800519a:	4ba0      	ldr	r3, [pc, #640]	; (800541c <arm_atan2_f32+0x354>)
 800519c:	663b      	str	r3, [r7, #96]	; 0x60
    int i=1;
 800519e:	2301      	movs	r3, #1
 80051a0:	65fb      	str	r3, [r7, #92]	; 0x5c
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80051a2:	2301      	movs	r3, #1
 80051a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051a6:	e014      	b.n	80051d2 <arm_atan2_f32+0x10a>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80051a8:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80051ac:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80051b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051b6:	f1c3 0309 	rsb	r3, r3, #9
 80051ba:	4a99      	ldr	r2, [pc, #612]	; (8005420 <arm_atan2_f32+0x358>)
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4413      	add	r3, r2
 80051c0:	edd3 7a00 	vldr	s15, [r3]
 80051c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051c8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80051cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051ce:	3301      	adds	r3, #1
 80051d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051d4:	2b09      	cmp	r3, #9
 80051d6:	dde7      	ble.n	80051a8 <arm_atan2_f32+0xe0>
    return(res);
 80051d8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
     res += arm_atan_limited_f32(x);
 80051dc:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80051e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051e4:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
   if (sign)
 80051e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d005      	beq.n	80051fa <arm_atan2_f32+0x132>
     res = -res;
 80051ee:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80051f2:	eef1 7a67 	vneg.f32	s15, s15
 80051f6:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
   return(res);
 80051fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
        *result=arm_atan_f32(y/x);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	601a      	str	r2, [r3, #0]
        return(ARM_MATH_SUCCESS);
 8005200:	2300      	movs	r3, #0
 8005202:	e175      	b.n	80054f0 <arm_atan2_f32+0x428>
    }
    if (x < 0.0f)
 8005204:	edd7 7a02 	vldr	s15, [r7, #8]
 8005208:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800520c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005210:	f140 814d 	bpl.w	80054ae <arm_atan2_f32+0x3e6>
    {
        if (y > 0.0f)
 8005214:	edd7 7a03 	vldr	s15, [r7, #12]
 8005218:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800521c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005220:	f340 8093 	ble.w	800534a <arm_atan2_f32+0x282>
        {
           *result=arm_atan_f32(y/x) + PI;
 8005224:	edd7 6a03 	vldr	s13, [r7, #12]
 8005228:	ed97 7a02 	vldr	s14, [r7, #8]
 800522c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005230:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
   int sign=0;
 8005234:	2300      	movs	r3, #0
 8005236:	657b      	str	r3, [r7, #84]	; 0x54
   float32_t res=0.0f;
 8005238:	f04f 0300 	mov.w	r3, #0
 800523c:	653b      	str	r3, [r7, #80]	; 0x50
   if (x < 0.0f)
 800523e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005242:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800524a:	d507      	bpl.n	800525c <arm_atan2_f32+0x194>
      sign=1;
 800524c:	2301      	movs	r3, #1
 800524e:	657b      	str	r3, [r7, #84]	; 0x54
      x=-x;
 8005250:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005254:	eef1 7a67 	vneg.f32	s15, s15
 8005258:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
   if (x > 1.0f)
 800525c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005260:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005264:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800526c:	dd31      	ble.n	80052d2 <arm_atan2_f32+0x20a>
      x = 1.0f / x;
 800526e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005272:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005276:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800527a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 800527e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005280:	64fb      	str	r3, [r7, #76]	; 0x4c
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8005282:	4b66      	ldr	r3, [pc, #408]	; (800541c <arm_atan2_f32+0x354>)
 8005284:	64bb      	str	r3, [r7, #72]	; 0x48
    int i=1;
 8005286:	2301      	movs	r3, #1
 8005288:	647b      	str	r3, [r7, #68]	; 0x44
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 800528a:	2301      	movs	r3, #1
 800528c:	647b      	str	r3, [r7, #68]	; 0x44
 800528e:	e014      	b.n	80052ba <arm_atan2_f32+0x1f2>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8005290:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005294:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005298:	ee27 7a27 	vmul.f32	s14, s14, s15
 800529c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800529e:	f1c3 0309 	rsb	r3, r3, #9
 80052a2:	4a5f      	ldr	r2, [pc, #380]	; (8005420 <arm_atan2_f32+0x358>)
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	edd3 7a00 	vldr	s15, [r3]
 80052ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052b0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80052b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052b6:	3301      	adds	r3, #1
 80052b8:	647b      	str	r3, [r7, #68]	; 0x44
 80052ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052bc:	2b09      	cmp	r3, #9
 80052be:	dde7      	ble.n	8005290 <arm_atan2_f32+0x1c8>
    return(res);
 80052c0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
      res = PIHALFF32 - arm_atan_limited_f32(x);
 80052c4:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8005424 <arm_atan2_f32+0x35c>
 80052c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052cc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 80052d0:	e028      	b.n	8005324 <arm_atan2_f32+0x25c>
 80052d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052d4:	643b      	str	r3, [r7, #64]	; 0x40
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 80052d6:	4b51      	ldr	r3, [pc, #324]	; (800541c <arm_atan2_f32+0x354>)
 80052d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    int i=1;
 80052da:	2301      	movs	r3, #1
 80052dc:	63bb      	str	r3, [r7, #56]	; 0x38
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80052de:	2301      	movs	r3, #1
 80052e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80052e2:	e014      	b.n	800530e <arm_atan2_f32+0x246>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80052e4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80052e8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80052ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f2:	f1c3 0309 	rsb	r3, r3, #9
 80052f6:	4a4a      	ldr	r2, [pc, #296]	; (8005420 <arm_atan2_f32+0x358>)
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	edd3 7a00 	vldr	s15, [r3]
 8005300:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005304:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8005308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530a:	3301      	adds	r3, #1
 800530c:	63bb      	str	r3, [r7, #56]	; 0x38
 800530e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005310:	2b09      	cmp	r3, #9
 8005312:	dde7      	ble.n	80052e4 <arm_atan2_f32+0x21c>
    return(res);
 8005314:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
     res += arm_atan_limited_f32(x);
 8005318:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800531c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005320:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
   if (sign)
 8005324:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005326:	2b00      	cmp	r3, #0
 8005328:	d005      	beq.n	8005336 <arm_atan2_f32+0x26e>
     res = -res;
 800532a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800532e:	eef1 7a67 	vneg.f32	s15, s15
 8005332:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
   return(res);
 8005336:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
           *result=arm_atan_f32(y/x) + PI;
 800533a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8005428 <arm_atan2_f32+0x360>
 800533e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	edc3 7a00 	vstr	s15, [r3]
 8005348:	e0af      	b.n	80054aa <arm_atan2_f32+0x3e2>
        }
        else if (y < 0.0f)
 800534a:	edd7 7a03 	vldr	s15, [r7, #12]
 800534e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005356:	f140 809c 	bpl.w	8005492 <arm_atan2_f32+0x3ca>
        {
           *result=arm_atan_f32(y/x) - PI;
 800535a:	edd7 6a03 	vldr	s13, [r7, #12]
 800535e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005366:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
   int sign=0;
 800536a:	2300      	movs	r3, #0
 800536c:	633b      	str	r3, [r7, #48]	; 0x30
   float32_t res=0.0f;
 800536e:	f04f 0300 	mov.w	r3, #0
 8005372:	62fb      	str	r3, [r7, #44]	; 0x2c
   if (x < 0.0f)
 8005374:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005378:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800537c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005380:	d507      	bpl.n	8005392 <arm_atan2_f32+0x2ca>
      sign=1;
 8005382:	2301      	movs	r3, #1
 8005384:	633b      	str	r3, [r7, #48]	; 0x30
      x=-x;
 8005386:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800538a:	eef1 7a67 	vneg.f32	s15, s15
 800538e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
   if (x > 1.0f)
 8005392:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005396:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800539a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800539e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a2:	dd31      	ble.n	8005408 <arm_atan2_f32+0x340>
      x = 1.0f / x;
 80053a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053a8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80053ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053b0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 80053b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b6:	62bb      	str	r3, [r7, #40]	; 0x28
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 80053b8:	4b18      	ldr	r3, [pc, #96]	; (800541c <arm_atan2_f32+0x354>)
 80053ba:	627b      	str	r3, [r7, #36]	; 0x24
    int i=1;
 80053bc:	2301      	movs	r3, #1
 80053be:	623b      	str	r3, [r7, #32]
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80053c0:	2301      	movs	r3, #1
 80053c2:	623b      	str	r3, [r7, #32]
 80053c4:	e014      	b.n	80053f0 <arm_atan2_f32+0x328>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80053c6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80053ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80053ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	f1c3 0309 	rsb	r3, r3, #9
 80053d8:	4a11      	ldr	r2, [pc, #68]	; (8005420 <arm_atan2_f32+0x358>)
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	edd3 7a00 	vldr	s15, [r3]
 80053e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053e6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80053ea:	6a3b      	ldr	r3, [r7, #32]
 80053ec:	3301      	adds	r3, #1
 80053ee:	623b      	str	r3, [r7, #32]
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	2b09      	cmp	r3, #9
 80053f4:	dde7      	ble.n	80053c6 <arm_atan2_f32+0x2fe>
    return(res);
 80053f6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
      res = PIHALFF32 - arm_atan_limited_f32(x);
 80053fa:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8005424 <arm_atan2_f32+0x35c>
 80053fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005402:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8005406:	e031      	b.n	800546c <arm_atan2_f32+0x3a4>
 8005408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540a:	61fb      	str	r3, [r7, #28]
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 800540c:	4b03      	ldr	r3, [pc, #12]	; (800541c <arm_atan2_f32+0x354>)
 800540e:	61bb      	str	r3, [r7, #24]
    int i=1;
 8005410:	2301      	movs	r3, #1
 8005412:	617b      	str	r3, [r7, #20]
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8005414:	2301      	movs	r3, #1
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	e01d      	b.n	8005456 <arm_atan2_f32+0x38e>
 800541a:	bf00      	nop
 800541c:	bd0492a5 	.word	0xbd0492a5
 8005420:	0800f44c 	.word	0x0800f44c
 8005424:	3fc90fdb 	.word	0x3fc90fdb
 8005428:	40490fdb 	.word	0x40490fdb
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 800542c:	ed97 7a07 	vldr	s14, [r7, #28]
 8005430:	edd7 7a06 	vldr	s15, [r7, #24]
 8005434:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f1c3 0309 	rsb	r3, r3, #9
 800543e:	4a2f      	ldr	r2, [pc, #188]	; (80054fc <arm_atan2_f32+0x434>)
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	edd3 7a00 	vldr	s15, [r3]
 8005448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800544c:	edc7 7a06 	vstr	s15, [r7, #24]
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	3301      	adds	r3, #1
 8005454:	617b      	str	r3, [r7, #20]
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2b09      	cmp	r3, #9
 800545a:	dde7      	ble.n	800542c <arm_atan2_f32+0x364>
    return(res);
 800545c:	edd7 7a06 	vldr	s15, [r7, #24]
     res += arm_atan_limited_f32(x);
 8005460:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005468:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
   if (sign)
 800546c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546e:	2b00      	cmp	r3, #0
 8005470:	d005      	beq.n	800547e <arm_atan2_f32+0x3b6>
     res = -res;
 8005472:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005476:	eef1 7a67 	vneg.f32	s15, s15
 800547a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
   return(res);
 800547e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
           *result=arm_atan_f32(y/x) - PI;
 8005482:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8005500 <arm_atan2_f32+0x438>
 8005486:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	edc3 7a00 	vstr	s15, [r3]
 8005490:	e00b      	b.n	80054aa <arm_atan2_f32+0x3e2>
        }
        else
        {
            if (signbit(y))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d003      	beq.n	80054a4 <arm_atan2_f32+0x3dc>
            {
               *result= -PI;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a19      	ldr	r2, [pc, #100]	; (8005504 <arm_atan2_f32+0x43c>)
 80054a0:	601a      	str	r2, [r3, #0]
 80054a2:	e002      	b.n	80054aa <arm_atan2_f32+0x3e2>
            }
            else
            {
               *result= PI;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a18      	ldr	r2, [pc, #96]	; (8005508 <arm_atan2_f32+0x440>)
 80054a8:	601a      	str	r2, [r3, #0]
            }
        }
        return(ARM_MATH_SUCCESS);
 80054aa:	2300      	movs	r3, #0
 80054ac:	e020      	b.n	80054f0 <arm_atan2_f32+0x428>
    }
    if (x == 0.0f)
 80054ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80054b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80054b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ba:	d117      	bne.n	80054ec <arm_atan2_f32+0x424>
    {
        if (y > 0.0f)
 80054bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80054c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c8:	dd04      	ble.n	80054d4 <arm_atan2_f32+0x40c>
        {
            *result=PIHALFF32;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a0f      	ldr	r2, [pc, #60]	; (800550c <arm_atan2_f32+0x444>)
 80054ce:	601a      	str	r2, [r3, #0]
            return(ARM_MATH_SUCCESS);
 80054d0:	2300      	movs	r3, #0
 80054d2:	e00d      	b.n	80054f0 <arm_atan2_f32+0x428>
        }
        if (y < 0.0f)
 80054d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80054d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054e0:	d504      	bpl.n	80054ec <arm_atan2_f32+0x424>
        {
            *result=-PIHALFF32;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a0a      	ldr	r2, [pc, #40]	; (8005510 <arm_atan2_f32+0x448>)
 80054e6:	601a      	str	r2, [r3, #0]
            return(ARM_MATH_SUCCESS);
 80054e8:	2300      	movs	r3, #0
 80054ea:	e001      	b.n	80054f0 <arm_atan2_f32+0x428>
        }
    }
    

    return(ARM_MATH_NANINF);
 80054ec:	f06f 0303 	mvn.w	r3, #3

}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3784      	adds	r7, #132	; 0x84
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr
 80054fc:	0800f44c 	.word	0x0800f44c
 8005500:	40490fdb 	.word	0x40490fdb
 8005504:	c0490fdb 	.word	0xc0490fdb
 8005508:	40490fdb 	.word	0x40490fdb
 800550c:	3fc90fdb 	.word	0x3fc90fdb
 8005510:	bfc90fdb 	.word	0xbfc90fdb

08005514 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8005514:	b480      	push	{r7}
 8005516:	b08b      	sub	sp, #44	; 0x2c
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	461a      	mov	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	885b      	ldrh	r3, [r3, #2]
 800553c:	fb02 f303 	mul.w	r3, r2, r3
 8005540:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8005546:	e013      	b.n	8005570 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	1d1a      	adds	r2, r3, #4
 800554c:	627a      	str	r2, [r7, #36]	; 0x24
 800554e:	ed93 7a00 	vldr	s14, [r3]
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	1d1a      	adds	r2, r3, #4
 8005556:	623a      	str	r2, [r7, #32]
 8005558:	edd3 7a00 	vldr	s15, [r3]
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	1d1a      	adds	r2, r3, #4
 8005560:	61fa      	str	r2, [r7, #28]
 8005562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005566:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	3b01      	subs	r3, #1
 800556e:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1e8      	bne.n	8005548 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8005576:	2300      	movs	r3, #0
 8005578:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800557a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800557e:	4618      	mov	r0, r3
 8005580:	372c      	adds	r7, #44	; 0x2c
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800558a:	b480      	push	{r7}
 800558c:	b085      	sub	sp, #20
 800558e:	af00      	add	r7, sp, #0
 8005590:	60f8      	str	r0, [r7, #12]
 8005592:	607b      	str	r3, [r7, #4]
 8005594:	460b      	mov	r3, r1
 8005596:	817b      	strh	r3, [r7, #10]
 8005598:	4613      	mov	r3, r2
 800559a:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	897a      	ldrh	r2, [r7, #10]
 80055a0:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	893a      	ldrh	r2, [r7, #8]
 80055a6:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	605a      	str	r2, [r3, #4]
}
 80055ae:	bf00      	nop
 80055b0:	3714      	adds	r7, #20
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b0bb      	sub	sp, #236	; 0xec
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	667b      	str	r3, [r7, #100]	; 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	663b      	str	r3, [r7, #96]	; 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	885b      	ldrh	r3, [r3, #2]
 80055da:	65bb      	str	r3, [r7, #88]	; 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 80055dc:	f04f 0300 	mov.w	r3, #0
 80055e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80055e4:	f04f 0300 	mov.w	r3, #0
 80055e8:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 80055ea:	2300      	movs	r3, #0
 80055ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 80055f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 80055f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 80055fc:	e03b      	b.n	8005676 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 80055fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005600:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 800560a:	e00c      	b.n	8005626 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800560c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005610:	1d1a      	adds	r2, r3, #4
 8005612:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8005616:	f04f 0200 	mov.w	r2, #0
 800561a:	601a      	str	r2, [r3, #0]
        j--;
 800561c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005620:	3b01      	subs	r3, #1
 8005622:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 8005626:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1ee      	bne.n	800560c <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800562e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005632:	1d1a      	adds	r2, r3, #4
 8005634:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8005638:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800563c:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800563e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005642:	3b01      	subs	r3, #1
 8005644:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 8005648:	e00c      	b.n	8005664 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800564a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800564e:	1d1a      	adds	r2, r3, #4
 8005650:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8005654:	f04f 0200 	mov.w	r2, #0
 8005658:	601a      	str	r2, [r3, #0]
        j--;
 800565a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800565e:	3b01      	subs	r3, #1
 8005660:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 8005664:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1ee      	bne.n	800564a <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800566c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005670:	3b01      	subs	r3, #1
 8005672:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    while (rowCnt > 0U)
 8005676:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1bf      	bne.n	80055fe <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800567e:	2300      	movs	r3, #0
 8005680:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005684:	e2c7      	b.n	8005c16 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 8005686:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800568a:	653b      	str	r3, [r7, #80]	; 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	885b      	ldrh	r3, [r3, #2]
 8005694:	3301      	adds	r3, #1
 8005696:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800569a:	fb01 f303 	mul.w	r3, r1, r3
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      pivot = *pTmp;
 80056a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      selectedRow = column;
 80056b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80056b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 80056b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80056bc:	3301      	adds	r3, #1
 80056be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80056c2:	e02c      	b.n	800571e <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	885b      	ldrh	r3, [r3, #2]
 80056cc:	4619      	mov	r1, r3
 80056ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056d2:	fb03 f101 	mul.w	r1, r3, r1
 80056d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80056da:	440b      	add	r3, r1
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
          newPivot = *pTmp;
 80056e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	657b      	str	r3, [r7, #84]	; 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 80056ec:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80056f0:	eeb0 7ae7 	vabs.f32	s14, s15
 80056f4:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80056f8:	eef0 7ae7 	vabs.f32	s15, s15
 80056fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005704:	dd06      	ble.n	8005714 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 8005706:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800570a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            pivot = newPivot;
 800570e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005710:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8005714:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005718:	3301      	adds	r3, #1
 800571a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800571e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8005722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005724:	429a      	cmp	r2, r3
 8005726:	d3cd      	bcc.n	80056c4 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 8005728:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800572c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005734:	f000 809b 	beq.w	800586e <arm_mat_inverse_f32+0x2b4>
 8005738:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800573c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005740:	429a      	cmp	r2, r3
 8005742:	f000 8094 	beq.w	800586e <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	885b      	ldrh	r3, [r3, #2]
 800575a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800575c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800575e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	64bb      	str	r3, [r7, #72]	; 0x48
 8005766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005768:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800576a:	fb03 f202 	mul.w	r2, r3, r2
 800576e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005772:	4413      	add	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800577a:	4413      	add	r3, r2
 800577c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005782:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005786:	fb03 f202 	mul.w	r2, r3, r2
 800578a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800578e:	4413      	add	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005796:	4413      	add	r3, r2
 8005798:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800579c:	2300      	movs	r3, #0
 800579e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80057a2:	e018      	b.n	80057d6 <arm_mat_inverse_f32+0x21c>
 80057a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80057ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057b0:	1d1a      	adds	r2, r3, #4
 80057b2:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 80057b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80057ba:	6812      	ldr	r2, [r2, #0]
 80057bc:	601a      	str	r2, [r3, #0]
 80057be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80057c2:	1d1a      	adds	r2, r3, #4
 80057c4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80057c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80057d0:	3301      	adds	r3, #1
 80057d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80057d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80057da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057dc:	429a      	cmp	r2, r3
 80057de:	dbe1      	blt.n	80057a4 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	885b      	ldrh	r3, [r3, #2]
 80057f4:	647b      	str	r3, [r7, #68]	; 0x44
 80057f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057f8:	643b      	str	r3, [r7, #64]	; 0x40
 80057fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80057fe:	fb02 f303 	mul.w	r3, r2, r3
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005808:	4413      	add	r3, r2
 800580a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800580e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005810:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005814:	fb02 f303 	mul.w	r3, r2, r3
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800581e:	4413      	add	r3, r2
 8005820:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005824:	2300      	movs	r3, #0
 8005826:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800582a:	e018      	b.n	800585e <arm_mat_inverse_f32+0x2a4>
 800582c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005834:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005838:	1d1a      	adds	r2, r3, #4
 800583a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800583e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005842:	6812      	ldr	r2, [r2, #0]
 8005844:	601a      	str	r2, [r3, #0]
 8005846:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800584a:	1d1a      	adds	r2, r3, #4
 800584c:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005850:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005858:	3301      	adds	r3, #1
 800585a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800585e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005864:	429a      	cmp	r2, r3
 8005866:	dbe1      	blt.n	800582c <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8005868:	2301      	movs	r3, #1
 800586a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800586e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005872:	2b01      	cmp	r3, #1
 8005874:	d009      	beq.n	800588a <arm_mat_inverse_f32+0x2d0>
 8005876:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800587a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800587e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005882:	d102      	bne.n	800588a <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 8005884:	f06f 0304 	mvn.w	r3, #4
 8005888:	e208      	b.n	8005c9c <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800588a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800588e:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 8005892:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005896:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	885b      	ldrh	r3, [r3, #2]
 80058a6:	637b      	str	r3, [r7, #52]	; 0x34
 80058a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	633b      	str	r3, [r7, #48]	; 0x30
 80058b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80058b6:	fb03 f202 	mul.w	r2, r3, r2
 80058ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80058be:	4413      	add	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80058c6:	4413      	add	r3, r2
 80058c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058cc:	2300      	movs	r3, #0
 80058ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80058d2:	e011      	b.n	80058f8 <arm_mat_inverse_f32+0x33e>
 80058d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058d8:	1d1a      	adds	r2, r3, #4
 80058da:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80058de:	ed93 7a00 	vldr	s14, [r3]
 80058e2:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80058e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ea:	edc3 7a00 	vstr	s15, [r3]
 80058ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80058f2:	3301      	adds	r3, #1
 80058f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80058f8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80058fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fe:	429a      	cmp	r2, r3
 8005900:	dbe8      	blt.n	80058d4 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	885b      	ldrh	r3, [r3, #2]
 800590e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005912:	62bb      	str	r3, [r7, #40]	; 0x28
 8005914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005916:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005918:	fb02 f303 	mul.w	r3, r2, r3
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005922:	4413      	add	r3, r2
 8005924:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005928:	2300      	movs	r3, #0
 800592a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800592e:	e011      	b.n	8005954 <arm_mat_inverse_f32+0x39a>
 8005930:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005934:	1d1a      	adds	r2, r3, #4
 8005936:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800593a:	ed93 7a00 	vldr	s14, [r3]
 800593e:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8005942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005946:	edc3 7a00 	vstr	s15, [r3]
 800594a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800594e:	3301      	adds	r3, #1
 8005950:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005954:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595a:	429a      	cmp	r2, r3
 800595c:	dbe8      	blt.n	8005930 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800595e:	2300      	movs	r3, #0
 8005960:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      for (;rowNb < pivotRow; rowNb++)
 8005964:	e0ae      	b.n	8005ac4 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	885b      	ldrh	r3, [r3, #2]
 800596e:	4619      	mov	r1, r3
 8005970:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005974:	fb03 f101 	mul.w	r1, r3, r1
 8005978:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800597c:	440b      	add	r3, r1
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           pivot = *pTmp;
 8005986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	885b      	ldrh	r3, [r3, #2]
 80059a4:	617b      	str	r3, [r7, #20]
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	613b      	str	r3, [r7, #16]
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80059b6:	fb03 f202 	mul.w	r2, r3, r2
 80059ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80059be:	4413      	add	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80059c6:	4413      	add	r3, r2
 80059c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80059d0:	fb03 f202 	mul.w	r2, r3, r2
 80059d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80059d8:	4413      	add	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80059e0:	4413      	add	r3, r2
 80059e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80059e6:	2300      	movs	r3, #0
 80059e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80059ec:	e01a      	b.n	8005a24 <arm_mat_inverse_f32+0x46a>
 80059ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059f2:	1d1a      	adds	r2, r3, #4
 80059f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80059f8:	ed93 7a00 	vldr	s14, [r3]
 80059fc:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8005a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a08:	1d1a      	adds	r2, r3, #4
 8005a0a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8005a0e:	ed93 7a00 	vldr	s14, [r3]
 8005a12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a16:	edc3 7a00 	vstr	s15, [r3]
 8005a1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005a1e:	3301      	adds	r3, #1
 8005a20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005a24:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	dbdf      	blt.n	80059ee <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	885b      	ldrh	r3, [r3, #2]
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	60bb      	str	r3, [r7, #8]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8005a4e:	fb02 f303 	mul.w	r3, r2, r3
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005a58:	4413      	add	r3, r2
 8005a5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a62:	fb02 f303 	mul.w	r3, r2, r3
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a72:	2300      	movs	r3, #0
 8005a74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a78:	e01a      	b.n	8005ab0 <arm_mat_inverse_f32+0x4f6>
 8005a7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a7e:	1d1a      	adds	r2, r3, #4
 8005a80:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a84:	ed93 7a00 	vldr	s14, [r3]
 8005a88:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8005a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a94:	1d1a      	adds	r2, r3, #4
 8005a96:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005a9a:	ed93 7a00 	vldr	s14, [r3]
 8005a9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005aa2:	edc3 7a00 	vstr	s15, [r3]
 8005aa6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005aaa:	3301      	adds	r3, #1
 8005aac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ab0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	dbdf      	blt.n	8005a7a <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 8005aba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005abe:	3301      	adds	r3, #1
 8005ac0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005ac4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8005ac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aca:	429a      	cmp	r2, r3
 8005acc:	f4ff af4b 	bcc.w	8005966 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8005ad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005ad8:	e092      	b.n	8005c00 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	885b      	ldrh	r3, [r3, #2]
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ae8:	fb03 f101 	mul.w	r1, r3, r1
 8005aec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005af0:	440b      	add	r3, r1
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           pivot = *pTmp;
 8005afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	677b      	str	r3, [r7, #116]	; 0x74
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	885b      	ldrh	r3, [r3, #2]
 8005b14:	627b      	str	r3, [r7, #36]	; 0x24
 8005b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	623b      	str	r3, [r7, #32]
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8005b26:	fb03 f202 	mul.w	r2, r3, r2
 8005b2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b2e:	4413      	add	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005b34:	4413      	add	r3, r2
 8005b36:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005b3c:	fb03 f202 	mul.w	r2, r3, r2
 8005b40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b44:	4413      	add	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005b4a:	4413      	add	r3, r2
 8005b4c:	677b      	str	r3, [r7, #116]	; 0x74
 8005b4e:	2300      	movs	r3, #0
 8005b50:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b52:	e014      	b.n	8005b7e <arm_mat_inverse_f32+0x5c4>
 8005b54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b56:	1d1a      	adds	r2, r3, #4
 8005b58:	677a      	str	r2, [r7, #116]	; 0x74
 8005b5a:	ed93 7a00 	vldr	s14, [r3]
 8005b5e:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8005b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b68:	1d1a      	adds	r2, r3, #4
 8005b6a:	67ba      	str	r2, [r7, #120]	; 0x78
 8005b6c:	ed93 7a00 	vldr	s14, [r3]
 8005b70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b74:	edc3 7a00 	vstr	s15, [r3]
 8005b78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b7e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	dbe6      	blt.n	8005b54 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	885b      	ldrh	r3, [r3, #2]
 8005b96:	61fb      	str	r3, [r7, #28]
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	61bb      	str	r3, [r7, #24]
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8005ba2:	fb02 f303 	mul.w	r3, r2, r3
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005baa:	4413      	add	r3, r2
 8005bac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005bb2:	fb02 f303 	mul.w	r3, r2, r3
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005bba:	4413      	add	r3, r2
 8005bbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	673b      	str	r3, [r7, #112]	; 0x70
 8005bc2:	e014      	b.n	8005bee <arm_mat_inverse_f32+0x634>
 8005bc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bc6:	1d1a      	adds	r2, r3, #4
 8005bc8:	66ba      	str	r2, [r7, #104]	; 0x68
 8005bca:	ed93 7a00 	vldr	s14, [r3]
 8005bce:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8005bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd8:	1d1a      	adds	r2, r3, #4
 8005bda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005bdc:	ed93 7a00 	vldr	s14, [r3]
 8005be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005be4:	edc3 7a00 	vstr	s15, [r3]
 8005be8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bea:	3301      	adds	r3, #1
 8005bec:	673b      	str	r3, [r7, #112]	; 0x70
 8005bee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	dbe6      	blt.n	8005bc4 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8005bf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005c00:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8005c04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c06:	429a      	cmp	r2, r3
 8005c08:	f4ff af67 	bcc.w	8005ada <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 8005c0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c10:	3301      	adds	r3, #1
 8005c12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005c1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	f4ff ad32 	bcc.w	8005686 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8005c22:	2300      	movs	r3, #0
 8005c24:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 8005c28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d033      	beq.n	8005c98 <arm_mat_inverse_f32+0x6de>
 8005c30:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8005c34:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c3c:	d12c      	bne.n	8005c98 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	667b      	str	r3, [r7, #100]	; 0x64
      for (i = 0; i < numRows * numCols; i++)
 8005c44:	2300      	movs	r3, #0
 8005c46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c4a:	e010      	b.n	8005c6e <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 8005c4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005c54:	4413      	add	r3, r2
 8005c56:	edd3 7a00 	vldr	s15, [r3]
 8005c5a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c62:	d10d      	bne.n	8005c80 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 8005c64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c68:	3301      	adds	r3, #1
 8005c6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c72:	fb02 f303 	mul.w	r3, r2, r3
 8005c76:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d3e6      	bcc.n	8005c4c <arm_mat_inverse_f32+0x692>
 8005c7e:	e000      	b.n	8005c82 <arm_mat_inverse_f32+0x6c8>
            break;
 8005c80:	bf00      	nop
      }

      if (i == numRows * numCols)
 8005c82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c86:	fb02 f303 	mul.w	r3, r2, r3
 8005c8a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d102      	bne.n	8005c98 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 8005c92:	23fb      	movs	r3, #251	; 0xfb
 8005c94:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
    }
  }

  /* Return to application */
  return (status);
 8005c98:	f997 30c3 	ldrsb.w	r3, [r7, #195]	; 0xc3
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	37ec      	adds	r7, #236	; 0xec
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b093      	sub	sp, #76	; 0x4c
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	643b      	str	r3, [r7, #64]	; 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	885b      	ldrh	r3, [r3, #2]
 8005cdc:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	885b      	ldrh	r3, [r3, #2]
 8005ce2:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ce8:	8b7b      	ldrh	r3, [r7, #26]
 8005cea:	62bb      	str	r3, [r7, #40]	; 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 8005cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	69fa      	ldr	r2, [r7, #28]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	63bb      	str	r3, [r7, #56]	; 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 8005cf6:	8b3b      	ldrh	r3, [r7, #24]
 8005cf8:	633b      	str	r3, [r7, #48]	; 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	643b      	str	r3, [r7, #64]	; 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8005d00:	f04f 0300 	mov.w	r3, #0
 8005d04:	637b      	str	r3, [r7, #52]	; 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 8005d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d08:	647b      	str	r3, [r7, #68]	; 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 8005d0a:	8afb      	ldrh	r3, [r7, #22]
 8005d0c:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 8005d0e:	e017      	b.n	8005d40 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 8005d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d12:	1d1a      	adds	r2, r3, #4
 8005d14:	647a      	str	r2, [r7, #68]	; 0x44
 8005d16:	ed93 7a00 	vldr	s14, [r3]
 8005d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d1c:	edd3 7a00 	vldr	s15, [r3]
 8005d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d24:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005d28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d2c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
          pIn2 += numColsB;
 8005d30:	8b3b      	ldrh	r3, [r7, #24]
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d36:	4413      	add	r3, r2
 8005d38:	643b      	str	r3, [r7, #64]	; 0x40

          /* Decrement loop counter */
          colCnt--;
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	627b      	str	r3, [r7, #36]	; 0x24
        while (colCnt > 0U)
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1e4      	bne.n	8005d10 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 8005d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d48:	1d1a      	adds	r2, r3, #4
 8005d4a:	63ba      	str	r2, [r7, #56]	; 0x38
 8005d4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d4e:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 8005d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d52:	3b01      	subs	r3, #1
 8005d54:	633b      	str	r3, [r7, #48]	; 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 8005d56:	8b3a      	ldrh	r2, [r7, #24]
 8005d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	6a3a      	ldr	r2, [r7, #32]
 8005d60:	4413      	add	r3, r2
 8005d62:	643b      	str	r3, [r7, #64]	; 0x40

      } while (col > 0U);
 8005d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1ca      	bne.n	8005d00 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 8005d6a:	8b3b      	ldrh	r3, [r7, #24]
 8005d6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d6e:	4413      	add	r3, r2
 8005d70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pInA = pInA + numColsA;
 8005d72:	8afb      	ldrh	r3, [r7, #22]
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d78:	4413      	add	r3, r2
 8005d7a:	63fb      	str	r3, [r7, #60]	; 0x3c

      /* Decrement row loop counter */
      row--;
 8005d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	62bb      	str	r3, [r7, #40]	; 0x28

    } while (row > 0U);
 8005d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1b1      	bne.n	8005cec <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 8005d8c:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	374c      	adds	r7, #76	; 0x4c
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b08b      	sub	sp, #44	; 0x2c
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	ed87 0a02 	vstr	s0, [r7, #8]
 8005da8:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	885b      	ldrh	r3, [r3, #2]
 8005dc0:	fb02 f303 	mul.w	r3, r2, r3
 8005dc4:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8005dca:	e010      	b.n	8005dee <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	1d1a      	adds	r2, r3, #4
 8005dd0:	627a      	str	r2, [r7, #36]	; 0x24
 8005dd2:	ed93 7a00 	vldr	s14, [r3]
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	1d1a      	adds	r2, r3, #4
 8005dda:	623a      	str	r2, [r7, #32]
 8005ddc:	edd7 7a02 	vldr	s15, [r7, #8]
 8005de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005de4:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	3b01      	subs	r3, #1
 8005dec:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1eb      	bne.n	8005dcc <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8005df4:	2300      	movs	r3, #0
 8005df6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8005df8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	372c      	adds	r7, #44	; 0x2c
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b08b      	sub	sp, #44	; 0x2c
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	881b      	ldrh	r3, [r3, #0]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	885b      	ldrh	r3, [r3, #2]
 8005e30:	fb02 f303 	mul.w	r3, r2, r3
 8005e34:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8005e3a:	e013      	b.n	8005e64 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	1d1a      	adds	r2, r3, #4
 8005e40:	627a      	str	r2, [r7, #36]	; 0x24
 8005e42:	ed93 7a00 	vldr	s14, [r3]
 8005e46:	6a3b      	ldr	r3, [r7, #32]
 8005e48:	1d1a      	adds	r2, r3, #4
 8005e4a:	623a      	str	r2, [r7, #32]
 8005e4c:	edd3 7a00 	vldr	s15, [r3]
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	1d1a      	adds	r2, r3, #4
 8005e54:	61fa      	str	r2, [r7, #28]
 8005e56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e5a:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	3b01      	subs	r3, #1
 8005e62:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1e8      	bne.n	8005e3c <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8005e6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	372c      	adds	r7, #44	; 0x2c
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b08b      	sub	sp, #44	; 0x2c
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	885b      	ldrh	r3, [r3, #2]
 8005e9e:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8005ea0:	89fb      	ldrh	r3, [r7, #14]
 8005ea2:	61bb      	str	r3, [r7, #24]
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	4413      	add	r3, r2
 8005eb0:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8005eb2:	89bb      	ldrh	r3, [r7, #12]
 8005eb4:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8005eb6:	e00d      	b.n	8005ed4 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	1d1a      	adds	r2, r3, #4
 8005ebc:	627a      	str	r2, [r7, #36]	; 0x24
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	6a3b      	ldr	r3, [r7, #32]
 8005ec2:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8005ec4:	89fb      	ldrh	r3, [r7, #14]
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	6a3a      	ldr	r2, [r7, #32]
 8005eca:	4413      	add	r3, r2
 8005ecc:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1ee      	bne.n	8005eb8 <arm_mat_trans_f32+0x3a>
      }

      i++;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	3301      	adds	r3, #1
 8005ede:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1dd      	bne.n	8005ea8 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8005eec:	2300      	movs	r3, #0
 8005eee:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 8005ef0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	372c      	adds	r7, #44	; 0x2c
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005f04:	4b0e      	ldr	r3, [pc, #56]	; (8005f40 <HAL_Init+0x40>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a0d      	ldr	r2, [pc, #52]	; (8005f40 <HAL_Init+0x40>)
 8005f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005f10:	4b0b      	ldr	r3, [pc, #44]	; (8005f40 <HAL_Init+0x40>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a0a      	ldr	r2, [pc, #40]	; (8005f40 <HAL_Init+0x40>)
 8005f16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005f1c:	4b08      	ldr	r3, [pc, #32]	; (8005f40 <HAL_Init+0x40>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a07      	ldr	r2, [pc, #28]	; (8005f40 <HAL_Init+0x40>)
 8005f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f28:	2003      	movs	r0, #3
 8005f2a:	f000 fd2d 	bl	8006988 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005f2e:	2000      	movs	r0, #0
 8005f30:	f000 f808 	bl	8005f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005f34:	f7fe fc66 	bl	8004804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	40023c00 	.word	0x40023c00

08005f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005f4c:	4b12      	ldr	r3, [pc, #72]	; (8005f98 <HAL_InitTick+0x54>)
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	4b12      	ldr	r3, [pc, #72]	; (8005f9c <HAL_InitTick+0x58>)
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	4619      	mov	r1, r3
 8005f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f62:	4618      	mov	r0, r3
 8005f64:	f000 fd45 	bl	80069f2 <HAL_SYSTICK_Config>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d001      	beq.n	8005f72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e00e      	b.n	8005f90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2b0f      	cmp	r3, #15
 8005f76:	d80a      	bhi.n	8005f8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f78:	2200      	movs	r2, #0
 8005f7a:	6879      	ldr	r1, [r7, #4]
 8005f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f80:	f000 fd0d 	bl	800699e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005f84:	4a06      	ldr	r2, [pc, #24]	; (8005fa0 <HAL_InitTick+0x5c>)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	e000      	b.n	8005f90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	20000234 	.word	0x20000234
 8005f9c:	2000023c 	.word	0x2000023c
 8005fa0:	20000238 	.word	0x20000238

08005fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005fa8:	4b06      	ldr	r3, [pc, #24]	; (8005fc4 <HAL_IncTick+0x20>)
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	461a      	mov	r2, r3
 8005fae:	4b06      	ldr	r3, [pc, #24]	; (8005fc8 <HAL_IncTick+0x24>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	4a04      	ldr	r2, [pc, #16]	; (8005fc8 <HAL_IncTick+0x24>)
 8005fb6:	6013      	str	r3, [r2, #0]
}
 8005fb8:	bf00      	nop
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	2000023c 	.word	0x2000023c
 8005fc8:	200012d8 	.word	0x200012d8

08005fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	af00      	add	r7, sp, #0
  return uwTick;
 8005fd0:	4b03      	ldr	r3, [pc, #12]	; (8005fe0 <HAL_GetTick+0x14>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	200012d8 	.word	0x200012d8

08005fe4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005fec:	2300      	movs	r3, #0
 8005fee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e033      	b.n	8006062 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d109      	bne.n	8006016 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7fd f9c6 	bl	8003394 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601a:	f003 0310 	and.w	r3, r3, #16
 800601e:	2b00      	cmp	r3, #0
 8006020:	d118      	bne.n	8006054 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800602a:	f023 0302 	bic.w	r3, r3, #2
 800602e:	f043 0202 	orr.w	r2, r3, #2
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fa58 	bl	80064ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006046:	f023 0303 	bic.w	r3, r3, #3
 800604a:	f043 0201 	orr.w	r2, r3, #1
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	641a      	str	r2, [r3, #64]	; 0x40
 8006052:	e001      	b.n	8006058 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006060:	7bfb      	ldrb	r3, [r7, #15]
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
	...

0800606c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006082:	2b01      	cmp	r3, #1
 8006084:	d101      	bne.n	800608a <HAL_ADC_Start_DMA+0x1e>
 8006086:	2302      	movs	r3, #2
 8006088:	e0ce      	b.n	8006228 <HAL_ADC_Start_DMA+0x1bc>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	2b01      	cmp	r3, #1
 800609e:	d018      	beq.n	80060d2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	689a      	ldr	r2, [r3, #8]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f042 0201 	orr.w	r2, r2, #1
 80060ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80060b0:	4b5f      	ldr	r3, [pc, #380]	; (8006230 <HAL_ADC_Start_DMA+0x1c4>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a5f      	ldr	r2, [pc, #380]	; (8006234 <HAL_ADC_Start_DMA+0x1c8>)
 80060b6:	fba2 2303 	umull	r2, r3, r2, r3
 80060ba:	0c9a      	lsrs	r2, r3, #18
 80060bc:	4613      	mov	r3, r2
 80060be:	005b      	lsls	r3, r3, #1
 80060c0:	4413      	add	r3, r2
 80060c2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80060c4:	e002      	b.n	80060cc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	3b01      	subs	r3, #1
 80060ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1f9      	bne.n	80060c6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060e0:	d107      	bne.n	80060f2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689a      	ldr	r2, [r3, #8]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	f040 8086 	bne.w	800620e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006106:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800610a:	f023 0301 	bic.w	r3, r3, #1
 800610e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006120:	2b00      	cmp	r3, #0
 8006122:	d007      	beq.n	8006134 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006128:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800612c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006138:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800613c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006140:	d106      	bne.n	8006150 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006146:	f023 0206 	bic.w	r2, r3, #6
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	645a      	str	r2, [r3, #68]	; 0x44
 800614e:	e002      	b.n	8006156 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800615e:	4b36      	ldr	r3, [pc, #216]	; (8006238 <HAL_ADC_Start_DMA+0x1cc>)
 8006160:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006166:	4a35      	ldr	r2, [pc, #212]	; (800623c <HAL_ADC_Start_DMA+0x1d0>)
 8006168:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616e:	4a34      	ldr	r2, [pc, #208]	; (8006240 <HAL_ADC_Start_DMA+0x1d4>)
 8006170:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006176:	4a33      	ldr	r2, [pc, #204]	; (8006244 <HAL_ADC_Start_DMA+0x1d8>)
 8006178:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006182:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006192:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689a      	ldr	r2, [r3, #8]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061a2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	334c      	adds	r3, #76	; 0x4c
 80061ae:	4619      	mov	r1, r3
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f000 fcd8 	bl	8006b68 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f003 031f 	and.w	r3, r3, #31
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10f      	bne.n	80061e4 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d129      	bne.n	8006226 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80061e0:	609a      	str	r2, [r3, #8]
 80061e2:	e020      	b.n	8006226 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a17      	ldr	r2, [pc, #92]	; (8006248 <HAL_ADC_Start_DMA+0x1dc>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d11b      	bne.n	8006226 <HAL_ADC_Start_DMA+0x1ba>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d114      	bne.n	8006226 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689a      	ldr	r2, [r3, #8]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800620a:	609a      	str	r2, [r3, #8]
 800620c:	e00b      	b.n	8006226 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	f043 0210 	orr.w	r2, r3, #16
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800621e:	f043 0201 	orr.w	r2, r3, #1
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3718      	adds	r7, #24
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	20000234 	.word	0x20000234
 8006234:	431bde83 	.word	0x431bde83
 8006238:	40012300 	.word	0x40012300
 800623c:	080066e5 	.word	0x080066e5
 8006240:	0800679f 	.word	0x0800679f
 8006244:	080067bb 	.word	0x080067bb
 8006248:	40012000 	.word	0x40012000

0800624c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006292:	2300      	movs	r3, #0
 8006294:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800629c:	2b01      	cmp	r3, #1
 800629e:	d101      	bne.n	80062a4 <HAL_ADC_ConfigChannel+0x1c>
 80062a0:	2302      	movs	r3, #2
 80062a2:	e113      	b.n	80064cc <HAL_ADC_ConfigChannel+0x244>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2b09      	cmp	r3, #9
 80062b2:	d925      	bls.n	8006300 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68d9      	ldr	r1, [r3, #12]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	b29b      	uxth	r3, r3
 80062c0:	461a      	mov	r2, r3
 80062c2:	4613      	mov	r3, r2
 80062c4:	005b      	lsls	r3, r3, #1
 80062c6:	4413      	add	r3, r2
 80062c8:	3b1e      	subs	r3, #30
 80062ca:	2207      	movs	r2, #7
 80062cc:	fa02 f303 	lsl.w	r3, r2, r3
 80062d0:	43da      	mvns	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	400a      	ands	r2, r1
 80062d8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68d9      	ldr	r1, [r3, #12]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	4618      	mov	r0, r3
 80062ec:	4603      	mov	r3, r0
 80062ee:	005b      	lsls	r3, r3, #1
 80062f0:	4403      	add	r3, r0
 80062f2:	3b1e      	subs	r3, #30
 80062f4:	409a      	lsls	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	60da      	str	r2, [r3, #12]
 80062fe:	e022      	b.n	8006346 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6919      	ldr	r1, [r3, #16]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	b29b      	uxth	r3, r3
 800630c:	461a      	mov	r2, r3
 800630e:	4613      	mov	r3, r2
 8006310:	005b      	lsls	r3, r3, #1
 8006312:	4413      	add	r3, r2
 8006314:	2207      	movs	r2, #7
 8006316:	fa02 f303 	lsl.w	r3, r2, r3
 800631a:	43da      	mvns	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	400a      	ands	r2, r1
 8006322:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6919      	ldr	r1, [r3, #16]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	689a      	ldr	r2, [r3, #8]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	b29b      	uxth	r3, r3
 8006334:	4618      	mov	r0, r3
 8006336:	4603      	mov	r3, r0
 8006338:	005b      	lsls	r3, r3, #1
 800633a:	4403      	add	r3, r0
 800633c:	409a      	lsls	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	2b06      	cmp	r3, #6
 800634c:	d824      	bhi.n	8006398 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	4613      	mov	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4413      	add	r3, r2
 800635e:	3b05      	subs	r3, #5
 8006360:	221f      	movs	r2, #31
 8006362:	fa02 f303 	lsl.w	r3, r2, r3
 8006366:	43da      	mvns	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	400a      	ands	r2, r1
 800636e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	b29b      	uxth	r3, r3
 800637c:	4618      	mov	r0, r3
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	4613      	mov	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	3b05      	subs	r3, #5
 800638a:	fa00 f203 	lsl.w	r2, r0, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	635a      	str	r2, [r3, #52]	; 0x34
 8006396:	e04c      	b.n	8006432 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	2b0c      	cmp	r3, #12
 800639e:	d824      	bhi.n	80063ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	4613      	mov	r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	3b23      	subs	r3, #35	; 0x23
 80063b2:	221f      	movs	r2, #31
 80063b4:	fa02 f303 	lsl.w	r3, r2, r3
 80063b8:	43da      	mvns	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	400a      	ands	r2, r1
 80063c0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	4618      	mov	r0, r3
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685a      	ldr	r2, [r3, #4]
 80063d4:	4613      	mov	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	3b23      	subs	r3, #35	; 0x23
 80063dc:	fa00 f203 	lsl.w	r2, r0, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	430a      	orrs	r2, r1
 80063e6:	631a      	str	r2, [r3, #48]	; 0x30
 80063e8:	e023      	b.n	8006432 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	4613      	mov	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	3b41      	subs	r3, #65	; 0x41
 80063fc:	221f      	movs	r2, #31
 80063fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006402:	43da      	mvns	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	400a      	ands	r2, r1
 800640a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	b29b      	uxth	r3, r3
 8006418:	4618      	mov	r0, r3
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	4613      	mov	r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	3b41      	subs	r3, #65	; 0x41
 8006426:	fa00 f203 	lsl.w	r2, r0, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	430a      	orrs	r2, r1
 8006430:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006432:	4b29      	ldr	r3, [pc, #164]	; (80064d8 <HAL_ADC_ConfigChannel+0x250>)
 8006434:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a28      	ldr	r2, [pc, #160]	; (80064dc <HAL_ADC_ConfigChannel+0x254>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d10f      	bne.n	8006460 <HAL_ADC_ConfigChannel+0x1d8>
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2b12      	cmp	r3, #18
 8006446:	d10b      	bne.n	8006460 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a1d      	ldr	r2, [pc, #116]	; (80064dc <HAL_ADC_ConfigChannel+0x254>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d12b      	bne.n	80064c2 <HAL_ADC_ConfigChannel+0x23a>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a1c      	ldr	r2, [pc, #112]	; (80064e0 <HAL_ADC_ConfigChannel+0x258>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d003      	beq.n	800647c <HAL_ADC_ConfigChannel+0x1f4>
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b11      	cmp	r3, #17
 800647a:	d122      	bne.n	80064c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a11      	ldr	r2, [pc, #68]	; (80064e0 <HAL_ADC_ConfigChannel+0x258>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d111      	bne.n	80064c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800649e:	4b11      	ldr	r3, [pc, #68]	; (80064e4 <HAL_ADC_ConfigChannel+0x25c>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a11      	ldr	r2, [pc, #68]	; (80064e8 <HAL_ADC_ConfigChannel+0x260>)
 80064a4:	fba2 2303 	umull	r2, r3, r2, r3
 80064a8:	0c9a      	lsrs	r2, r3, #18
 80064aa:	4613      	mov	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	005b      	lsls	r3, r3, #1
 80064b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80064b4:	e002      	b.n	80064bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	3b01      	subs	r3, #1
 80064ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1f9      	bne.n	80064b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr
 80064d8:	40012300 	.word	0x40012300
 80064dc:	40012000 	.word	0x40012000
 80064e0:	10000012 	.word	0x10000012
 80064e4:	20000234 	.word	0x20000234
 80064e8:	431bde83 	.word	0x431bde83

080064ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80064f4:	4b79      	ldr	r3, [pc, #484]	; (80066dc <ADC_Init+0x1f0>)
 80064f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	431a      	orrs	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	685a      	ldr	r2, [r3, #4]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006520:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	6859      	ldr	r1, [r3, #4]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	021a      	lsls	r2, r3, #8
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	430a      	orrs	r2, r1
 8006534:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006544:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6859      	ldr	r1, [r3, #4]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	689a      	ldr	r2, [r3, #8]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	430a      	orrs	r2, r1
 8006556:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	689a      	ldr	r2, [r3, #8]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006566:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6899      	ldr	r1, [r3, #8]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	68da      	ldr	r2, [r3, #12]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657e:	4a58      	ldr	r2, [pc, #352]	; (80066e0 <ADC_Init+0x1f4>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d022      	beq.n	80065ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689a      	ldr	r2, [r3, #8]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006592:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6899      	ldr	r1, [r3, #8]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	689a      	ldr	r2, [r3, #8]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80065b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6899      	ldr	r1, [r3, #8]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	430a      	orrs	r2, r1
 80065c6:	609a      	str	r2, [r3, #8]
 80065c8:	e00f      	b.n	80065ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689a      	ldr	r2, [r3, #8]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80065d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689a      	ldr	r2, [r3, #8]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80065e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	689a      	ldr	r2, [r3, #8]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f022 0202 	bic.w	r2, r2, #2
 80065f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6899      	ldr	r1, [r3, #8]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	7e1b      	ldrb	r3, [r3, #24]
 8006604:	005a      	lsls	r2, r3, #1
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	430a      	orrs	r2, r1
 800660c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d01b      	beq.n	8006650 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	685a      	ldr	r2, [r3, #4]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006626:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006636:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6859      	ldr	r1, [r3, #4]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006642:	3b01      	subs	r3, #1
 8006644:	035a      	lsls	r2, r3, #13
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	430a      	orrs	r2, r1
 800664c:	605a      	str	r2, [r3, #4]
 800664e:	e007      	b.n	8006660 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800665e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800666e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	3b01      	subs	r3, #1
 800667c:	051a      	lsls	r2, r3, #20
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	430a      	orrs	r2, r1
 8006684:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	689a      	ldr	r2, [r3, #8]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006694:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	6899      	ldr	r1, [r3, #8]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80066a2:	025a      	lsls	r2, r3, #9
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	430a      	orrs	r2, r1
 80066aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689a      	ldr	r2, [r3, #8]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6899      	ldr	r1, [r3, #8]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	029a      	lsls	r2, r3, #10
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	430a      	orrs	r2, r1
 80066ce:	609a      	str	r2, [r3, #8]
}
 80066d0:	bf00      	nop
 80066d2:	3714      	adds	r7, #20
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr
 80066dc:	40012300 	.word	0x40012300
 80066e0:	0f000001 	.word	0x0f000001

080066e4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d13c      	bne.n	8006778 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006702:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d12b      	bne.n	8006770 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800671c:	2b00      	cmp	r3, #0
 800671e:	d127      	bne.n	8006770 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006726:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800672a:	2b00      	cmp	r3, #0
 800672c:	d006      	beq.n	800673c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006738:	2b00      	cmp	r3, #0
 800673a:	d119      	bne.n	8006770 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f022 0220 	bic.w	r2, r2, #32
 800674a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006750:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d105      	bne.n	8006770 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006768:	f043 0201 	orr.w	r2, r3, #1
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f7ff fd6b 	bl	800624c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006776:	e00e      	b.n	8006796 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677c:	f003 0310 	and.w	r3, r3, #16
 8006780:	2b00      	cmp	r3, #0
 8006782:	d003      	beq.n	800678c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f7ff fd75 	bl	8006274 <HAL_ADC_ErrorCallback>
}
 800678a:	e004      	b.n	8006796 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	4798      	blx	r3
}
 8006796:	bf00      	nop
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b084      	sub	sp, #16
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067aa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f7ff fd57 	bl	8006260 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80067b2:	bf00      	nop
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b084      	sub	sp, #16
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2240      	movs	r2, #64	; 0x40
 80067cc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d2:	f043 0204 	orr.w	r2, r3, #4
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f7ff fd4a 	bl	8006274 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80067e0:	bf00      	nop
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80067f8:	4b0c      	ldr	r3, [pc, #48]	; (800682c <__NVIC_SetPriorityGrouping+0x44>)
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006804:	4013      	ands	r3, r2
 8006806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006810:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800681a:	4a04      	ldr	r2, [pc, #16]	; (800682c <__NVIC_SetPriorityGrouping+0x44>)
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	60d3      	str	r3, [r2, #12]
}
 8006820:	bf00      	nop
 8006822:	3714      	adds	r7, #20
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	e000ed00 	.word	0xe000ed00

08006830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006830:	b480      	push	{r7}
 8006832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006834:	4b04      	ldr	r3, [pc, #16]	; (8006848 <__NVIC_GetPriorityGrouping+0x18>)
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	0a1b      	lsrs	r3, r3, #8
 800683a:	f003 0307 	and.w	r3, r3, #7
}
 800683e:	4618      	mov	r0, r3
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr
 8006848:	e000ed00 	.word	0xe000ed00

0800684c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	4603      	mov	r3, r0
 8006854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800685a:	2b00      	cmp	r3, #0
 800685c:	db0b      	blt.n	8006876 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800685e:	79fb      	ldrb	r3, [r7, #7]
 8006860:	f003 021f 	and.w	r2, r3, #31
 8006864:	4907      	ldr	r1, [pc, #28]	; (8006884 <__NVIC_EnableIRQ+0x38>)
 8006866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800686a:	095b      	lsrs	r3, r3, #5
 800686c:	2001      	movs	r0, #1
 800686e:	fa00 f202 	lsl.w	r2, r0, r2
 8006872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006876:	bf00      	nop
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	e000e100 	.word	0xe000e100

08006888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	4603      	mov	r3, r0
 8006890:	6039      	str	r1, [r7, #0]
 8006892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006898:	2b00      	cmp	r3, #0
 800689a:	db0a      	blt.n	80068b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	b2da      	uxtb	r2, r3
 80068a0:	490c      	ldr	r1, [pc, #48]	; (80068d4 <__NVIC_SetPriority+0x4c>)
 80068a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068a6:	0112      	lsls	r2, r2, #4
 80068a8:	b2d2      	uxtb	r2, r2
 80068aa:	440b      	add	r3, r1
 80068ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80068b0:	e00a      	b.n	80068c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	b2da      	uxtb	r2, r3
 80068b6:	4908      	ldr	r1, [pc, #32]	; (80068d8 <__NVIC_SetPriority+0x50>)
 80068b8:	79fb      	ldrb	r3, [r7, #7]
 80068ba:	f003 030f 	and.w	r3, r3, #15
 80068be:	3b04      	subs	r3, #4
 80068c0:	0112      	lsls	r2, r2, #4
 80068c2:	b2d2      	uxtb	r2, r2
 80068c4:	440b      	add	r3, r1
 80068c6:	761a      	strb	r2, [r3, #24]
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	e000e100 	.word	0xe000e100
 80068d8:	e000ed00 	.word	0xe000ed00

080068dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80068dc:	b480      	push	{r7}
 80068de:	b089      	sub	sp, #36	; 0x24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f003 0307 	and.w	r3, r3, #7
 80068ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	f1c3 0307 	rsb	r3, r3, #7
 80068f6:	2b04      	cmp	r3, #4
 80068f8:	bf28      	it	cs
 80068fa:	2304      	movcs	r3, #4
 80068fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	3304      	adds	r3, #4
 8006902:	2b06      	cmp	r3, #6
 8006904:	d902      	bls.n	800690c <NVIC_EncodePriority+0x30>
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	3b03      	subs	r3, #3
 800690a:	e000      	b.n	800690e <NVIC_EncodePriority+0x32>
 800690c:	2300      	movs	r3, #0
 800690e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006910:	f04f 32ff 	mov.w	r2, #4294967295
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	fa02 f303 	lsl.w	r3, r2, r3
 800691a:	43da      	mvns	r2, r3
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	401a      	ands	r2, r3
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006924:	f04f 31ff 	mov.w	r1, #4294967295
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	fa01 f303 	lsl.w	r3, r1, r3
 800692e:	43d9      	mvns	r1, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006934:	4313      	orrs	r3, r2
         );
}
 8006936:	4618      	mov	r0, r3
 8006938:	3724      	adds	r7, #36	; 0x24
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
	...

08006944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	3b01      	subs	r3, #1
 8006950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006954:	d301      	bcc.n	800695a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006956:	2301      	movs	r3, #1
 8006958:	e00f      	b.n	800697a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800695a:	4a0a      	ldr	r2, [pc, #40]	; (8006984 <SysTick_Config+0x40>)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	3b01      	subs	r3, #1
 8006960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006962:	210f      	movs	r1, #15
 8006964:	f04f 30ff 	mov.w	r0, #4294967295
 8006968:	f7ff ff8e 	bl	8006888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800696c:	4b05      	ldr	r3, [pc, #20]	; (8006984 <SysTick_Config+0x40>)
 800696e:	2200      	movs	r2, #0
 8006970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006972:	4b04      	ldr	r3, [pc, #16]	; (8006984 <SysTick_Config+0x40>)
 8006974:	2207      	movs	r2, #7
 8006976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	e000e010 	.word	0xe000e010

08006988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7ff ff29 	bl	80067e8 <__NVIC_SetPriorityGrouping>
}
 8006996:	bf00      	nop
 8006998:	3708      	adds	r7, #8
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800699e:	b580      	push	{r7, lr}
 80069a0:	b086      	sub	sp, #24
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	4603      	mov	r3, r0
 80069a6:	60b9      	str	r1, [r7, #8]
 80069a8:	607a      	str	r2, [r7, #4]
 80069aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80069ac:	2300      	movs	r3, #0
 80069ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80069b0:	f7ff ff3e 	bl	8006830 <__NVIC_GetPriorityGrouping>
 80069b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	68b9      	ldr	r1, [r7, #8]
 80069ba:	6978      	ldr	r0, [r7, #20]
 80069bc:	f7ff ff8e 	bl	80068dc <NVIC_EncodePriority>
 80069c0:	4602      	mov	r2, r0
 80069c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069c6:	4611      	mov	r1, r2
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7ff ff5d 	bl	8006888 <__NVIC_SetPriority>
}
 80069ce:	bf00      	nop
 80069d0:	3718      	adds	r7, #24
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b082      	sub	sp, #8
 80069da:	af00      	add	r7, sp, #0
 80069dc:	4603      	mov	r3, r0
 80069de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80069e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7ff ff31 	bl	800684c <__NVIC_EnableIRQ>
}
 80069ea:	bf00      	nop
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b082      	sub	sp, #8
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7ff ffa2 	bl	8006944 <SysTick_Config>
 8006a00:	4603      	mov	r3, r0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
	...

08006a0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b086      	sub	sp, #24
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006a18:	f7ff fad8 	bl	8005fcc <HAL_GetTick>
 8006a1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d101      	bne.n	8006a28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e099      	b.n	8006b5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f022 0201 	bic.w	r2, r2, #1
 8006a46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a48:	e00f      	b.n	8006a6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006a4a:	f7ff fabf 	bl	8005fcc <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	2b05      	cmp	r3, #5
 8006a56:	d908      	bls.n	8006a6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2203      	movs	r2, #3
 8006a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e078      	b.n	8006b5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0301 	and.w	r3, r3, #1
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1e8      	bne.n	8006a4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	4b38      	ldr	r3, [pc, #224]	; (8006b64 <HAL_DMA_Init+0x158>)
 8006a84:	4013      	ands	r3, r2
 8006a86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685a      	ldr	r2, [r3, #4]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006aa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006aae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a1b      	ldr	r3, [r3, #32]
 8006ab4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	2b04      	cmp	r3, #4
 8006ac2:	d107      	bne.n	8006ad4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006acc:	4313      	orrs	r3, r2
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	f023 0307 	bic.w	r3, r3, #7
 8006aea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af0:	697a      	ldr	r2, [r7, #20]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d117      	bne.n	8006b2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b02:	697a      	ldr	r2, [r7, #20]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00e      	beq.n	8006b2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fb1b 	bl	800714c <DMA_CheckFifoParam>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d008      	beq.n	8006b2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2240      	movs	r2, #64	; 0x40
 8006b20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e016      	b.n	8006b5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fad2 	bl	80070e0 <DMA_CalcBaseAndBitshift>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b44:	223f      	movs	r2, #63	; 0x3f
 8006b46:	409a      	lsls	r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2201      	movs	r2, #1
 8006b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3718      	adds	r7, #24
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	f010803f 	.word	0xf010803f

08006b68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
 8006b74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b76:	2300      	movs	r3, #0
 8006b78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d101      	bne.n	8006b8e <HAL_DMA_Start_IT+0x26>
 8006b8a:	2302      	movs	r3, #2
 8006b8c:	e040      	b.n	8006c10 <HAL_DMA_Start_IT+0xa8>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d12f      	bne.n	8006c02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2202      	movs	r2, #2
 8006ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	68b9      	ldr	r1, [r7, #8]
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f000 fa64 	bl	8007084 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bc0:	223f      	movs	r2, #63	; 0x3f
 8006bc2:	409a      	lsls	r2, r3
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f042 0216 	orr.w	r2, r2, #22
 8006bd6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d007      	beq.n	8006bf0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0208 	orr.w	r2, r2, #8
 8006bee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f042 0201 	orr.w	r2, r2, #1
 8006bfe:	601a      	str	r2, [r3, #0]
 8006c00:	e005      	b.n	8006c0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3718      	adds	r7, #24
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c24:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006c26:	f7ff f9d1 	bl	8005fcc <HAL_GetTick>
 8006c2a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d008      	beq.n	8006c4a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2280      	movs	r2, #128	; 0x80
 8006c3c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e052      	b.n	8006cf0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f022 0216 	bic.w	r2, r2, #22
 8006c58:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	695a      	ldr	r2, [r3, #20]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c68:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d103      	bne.n	8006c7a <HAL_DMA_Abort+0x62>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d007      	beq.n	8006c8a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f022 0208 	bic.w	r2, r2, #8
 8006c88:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f022 0201 	bic.w	r2, r2, #1
 8006c98:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c9a:	e013      	b.n	8006cc4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c9c:	f7ff f996 	bl	8005fcc <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	2b05      	cmp	r3, #5
 8006ca8:	d90c      	bls.n	8006cc4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2220      	movs	r2, #32
 8006cae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2203      	movs	r2, #3
 8006cb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	e015      	b.n	8006cf0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1e4      	bne.n	8006c9c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cd6:	223f      	movs	r2, #63	; 0x3f
 8006cd8:	409a      	lsls	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d004      	beq.n	8006d16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2280      	movs	r2, #128	; 0x80
 8006d10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e00c      	b.n	8006d30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2205      	movs	r2, #5
 8006d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f022 0201 	bic.w	r2, r2, #1
 8006d2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006d44:	2300      	movs	r3, #0
 8006d46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006d48:	4b8e      	ldr	r3, [pc, #568]	; (8006f84 <HAL_DMA_IRQHandler+0x248>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a8e      	ldr	r2, [pc, #568]	; (8006f88 <HAL_DMA_IRQHandler+0x24c>)
 8006d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d52:	0a9b      	lsrs	r3, r3, #10
 8006d54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d66:	2208      	movs	r2, #8
 8006d68:	409a      	lsls	r2, r3
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d01a      	beq.n	8006da8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0304 	and.w	r3, r3, #4
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d013      	beq.n	8006da8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f022 0204 	bic.w	r2, r2, #4
 8006d8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d94:	2208      	movs	r2, #8
 8006d96:	409a      	lsls	r2, r3
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da0:	f043 0201 	orr.w	r2, r3, #1
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dac:	2201      	movs	r2, #1
 8006dae:	409a      	lsls	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4013      	ands	r3, r2
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d012      	beq.n	8006dde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00b      	beq.n	8006dde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dca:	2201      	movs	r2, #1
 8006dcc:	409a      	lsls	r2, r3
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd6:	f043 0202 	orr.w	r2, r3, #2
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006de2:	2204      	movs	r2, #4
 8006de4:	409a      	lsls	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	4013      	ands	r3, r2
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d012      	beq.n	8006e14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0302 	and.w	r3, r3, #2
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00b      	beq.n	8006e14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e00:	2204      	movs	r2, #4
 8006e02:	409a      	lsls	r2, r3
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e0c:	f043 0204 	orr.w	r2, r3, #4
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e18:	2210      	movs	r2, #16
 8006e1a:	409a      	lsls	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4013      	ands	r3, r2
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d043      	beq.n	8006eac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0308 	and.w	r3, r3, #8
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d03c      	beq.n	8006eac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e36:	2210      	movs	r2, #16
 8006e38:	409a      	lsls	r2, r3
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d018      	beq.n	8006e7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d108      	bne.n	8006e6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d024      	beq.n	8006eac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	4798      	blx	r3
 8006e6a:	e01f      	b.n	8006eac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d01b      	beq.n	8006eac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	4798      	blx	r3
 8006e7c:	e016      	b.n	8006eac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d107      	bne.n	8006e9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f022 0208 	bic.w	r2, r2, #8
 8006e9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d003      	beq.n	8006eac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eb0:	2220      	movs	r2, #32
 8006eb2:	409a      	lsls	r2, r3
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 808f 	beq.w	8006fdc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0310 	and.w	r3, r3, #16
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f000 8087 	beq.w	8006fdc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	409a      	lsls	r2, r3
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b05      	cmp	r3, #5
 8006ee4:	d136      	bne.n	8006f54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f022 0216 	bic.w	r2, r2, #22
 8006ef4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	695a      	ldr	r2, [r3, #20]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d103      	bne.n	8006f16 <HAL_DMA_IRQHandler+0x1da>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d007      	beq.n	8006f26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f022 0208 	bic.w	r2, r2, #8
 8006f24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f2a:	223f      	movs	r2, #63	; 0x3f
 8006f2c:	409a      	lsls	r2, r3
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d07e      	beq.n	8007048 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	4798      	blx	r3
        }
        return;
 8006f52:	e079      	b.n	8007048 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d01d      	beq.n	8006f9e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10d      	bne.n	8006f8c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d031      	beq.n	8006fdc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	4798      	blx	r3
 8006f80:	e02c      	b.n	8006fdc <HAL_DMA_IRQHandler+0x2a0>
 8006f82:	bf00      	nop
 8006f84:	20000234 	.word	0x20000234
 8006f88:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d023      	beq.n	8006fdc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	4798      	blx	r3
 8006f9c:	e01e      	b.n	8006fdc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10f      	bne.n	8006fcc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f022 0210 	bic.w	r2, r2, #16
 8006fba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d003      	beq.n	8006fdc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d032      	beq.n	800704a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe8:	f003 0301 	and.w	r3, r3, #1
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d022      	beq.n	8007036 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2205      	movs	r2, #5
 8006ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f022 0201 	bic.w	r2, r2, #1
 8007006:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	3301      	adds	r3, #1
 800700c:	60bb      	str	r3, [r7, #8]
 800700e:	697a      	ldr	r2, [r7, #20]
 8007010:	429a      	cmp	r2, r3
 8007012:	d307      	bcc.n	8007024 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1f2      	bne.n	8007008 <HAL_DMA_IRQHandler+0x2cc>
 8007022:	e000      	b.n	8007026 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007024:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2201      	movs	r2, #1
 800702a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800703a:	2b00      	cmp	r3, #0
 800703c:	d005      	beq.n	800704a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	4798      	blx	r3
 8007046:	e000      	b.n	800704a <HAL_DMA_IRQHandler+0x30e>
        return;
 8007048:	bf00      	nop
    }
  }
}
 800704a:	3718      	adds	r7, #24
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800705e:	b2db      	uxtb	r3, r3
}
 8007060:	4618      	mov	r0, r3
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007078:	4618      	mov	r0, r3
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
 8007090:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80070a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	2b40      	cmp	r3, #64	; 0x40
 80070b0:	d108      	bne.n	80070c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80070c2:	e007      	b.n	80070d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	60da      	str	r2, [r3, #12]
}
 80070d4:	bf00      	nop
 80070d6:	3714      	adds	r7, #20
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	3b10      	subs	r3, #16
 80070f0:	4a14      	ldr	r2, [pc, #80]	; (8007144 <DMA_CalcBaseAndBitshift+0x64>)
 80070f2:	fba2 2303 	umull	r2, r3, r2, r3
 80070f6:	091b      	lsrs	r3, r3, #4
 80070f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80070fa:	4a13      	ldr	r2, [pc, #76]	; (8007148 <DMA_CalcBaseAndBitshift+0x68>)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	4413      	add	r3, r2
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	461a      	mov	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2b03      	cmp	r3, #3
 800710c:	d909      	bls.n	8007122 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007116:	f023 0303 	bic.w	r3, r3, #3
 800711a:	1d1a      	adds	r2, r3, #4
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	659a      	str	r2, [r3, #88]	; 0x58
 8007120:	e007      	b.n	8007132 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800712a:	f023 0303 	bic.w	r3, r3, #3
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007136:	4618      	mov	r0, r3
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	aaaaaaab 	.word	0xaaaaaaab
 8007148:	0800f474 	.word	0x0800f474

0800714c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007154:	2300      	movs	r3, #0
 8007156:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d11f      	bne.n	80071a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	2b03      	cmp	r3, #3
 800716a:	d856      	bhi.n	800721a <DMA_CheckFifoParam+0xce>
 800716c:	a201      	add	r2, pc, #4	; (adr r2, 8007174 <DMA_CheckFifoParam+0x28>)
 800716e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007172:	bf00      	nop
 8007174:	08007185 	.word	0x08007185
 8007178:	08007197 	.word	0x08007197
 800717c:	08007185 	.word	0x08007185
 8007180:	0800721b 	.word	0x0800721b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007188:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d046      	beq.n	800721e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007194:	e043      	b.n	800721e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800719e:	d140      	bne.n	8007222 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071a4:	e03d      	b.n	8007222 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071ae:	d121      	bne.n	80071f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	2b03      	cmp	r3, #3
 80071b4:	d837      	bhi.n	8007226 <DMA_CheckFifoParam+0xda>
 80071b6:	a201      	add	r2, pc, #4	; (adr r2, 80071bc <DMA_CheckFifoParam+0x70>)
 80071b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071bc:	080071cd 	.word	0x080071cd
 80071c0:	080071d3 	.word	0x080071d3
 80071c4:	080071cd 	.word	0x080071cd
 80071c8:	080071e5 	.word	0x080071e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	73fb      	strb	r3, [r7, #15]
      break;
 80071d0:	e030      	b.n	8007234 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d025      	beq.n	800722a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071e2:	e022      	b.n	800722a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80071ec:	d11f      	bne.n	800722e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80071f2:	e01c      	b.n	800722e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d903      	bls.n	8007202 <DMA_CheckFifoParam+0xb6>
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	2b03      	cmp	r3, #3
 80071fe:	d003      	beq.n	8007208 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007200:	e018      	b.n	8007234 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	73fb      	strb	r3, [r7, #15]
      break;
 8007206:	e015      	b.n	8007234 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00e      	beq.n	8007232 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	73fb      	strb	r3, [r7, #15]
      break;
 8007218:	e00b      	b.n	8007232 <DMA_CheckFifoParam+0xe6>
      break;
 800721a:	bf00      	nop
 800721c:	e00a      	b.n	8007234 <DMA_CheckFifoParam+0xe8>
      break;
 800721e:	bf00      	nop
 8007220:	e008      	b.n	8007234 <DMA_CheckFifoParam+0xe8>
      break;
 8007222:	bf00      	nop
 8007224:	e006      	b.n	8007234 <DMA_CheckFifoParam+0xe8>
      break;
 8007226:	bf00      	nop
 8007228:	e004      	b.n	8007234 <DMA_CheckFifoParam+0xe8>
      break;
 800722a:	bf00      	nop
 800722c:	e002      	b.n	8007234 <DMA_CheckFifoParam+0xe8>
      break;   
 800722e:	bf00      	nop
 8007230:	e000      	b.n	8007234 <DMA_CheckFifoParam+0xe8>
      break;
 8007232:	bf00      	nop
    }
  } 
  
  return status; 
 8007234:	7bfb      	ldrb	r3, [r7, #15]
}
 8007236:	4618      	mov	r0, r3
 8007238:	3714      	adds	r7, #20
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop

08007244 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007244:	b480      	push	{r7}
 8007246:	b089      	sub	sp, #36	; 0x24
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800724e:	2300      	movs	r3, #0
 8007250:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007252:	2300      	movs	r3, #0
 8007254:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007256:	2300      	movs	r3, #0
 8007258:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800725a:	2300      	movs	r3, #0
 800725c:	61fb      	str	r3, [r7, #28]
 800725e:	e159      	b.n	8007514 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007260:	2201      	movs	r2, #1
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	fa02 f303 	lsl.w	r3, r2, r3
 8007268:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	4013      	ands	r3, r2
 8007272:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	429a      	cmp	r2, r3
 800727a:	f040 8148 	bne.w	800750e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	f003 0303 	and.w	r3, r3, #3
 8007286:	2b01      	cmp	r3, #1
 8007288:	d005      	beq.n	8007296 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007292:	2b02      	cmp	r3, #2
 8007294:	d130      	bne.n	80072f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	005b      	lsls	r3, r3, #1
 80072a0:	2203      	movs	r2, #3
 80072a2:	fa02 f303 	lsl.w	r3, r2, r3
 80072a6:	43db      	mvns	r3, r3
 80072a8:	69ba      	ldr	r2, [r7, #24]
 80072aa:	4013      	ands	r3, r2
 80072ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	68da      	ldr	r2, [r3, #12]
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	005b      	lsls	r3, r3, #1
 80072b6:	fa02 f303 	lsl.w	r3, r2, r3
 80072ba:	69ba      	ldr	r2, [r7, #24]
 80072bc:	4313      	orrs	r3, r2
 80072be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	69ba      	ldr	r2, [r7, #24]
 80072c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80072cc:	2201      	movs	r2, #1
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	fa02 f303 	lsl.w	r3, r2, r3
 80072d4:	43db      	mvns	r3, r3
 80072d6:	69ba      	ldr	r2, [r7, #24]
 80072d8:	4013      	ands	r3, r2
 80072da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	091b      	lsrs	r3, r3, #4
 80072e2:	f003 0201 	and.w	r2, r3, #1
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	fa02 f303 	lsl.w	r3, r2, r3
 80072ec:	69ba      	ldr	r2, [r7, #24]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	69ba      	ldr	r2, [r7, #24]
 80072f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	f003 0303 	and.w	r3, r3, #3
 8007300:	2b03      	cmp	r3, #3
 8007302:	d017      	beq.n	8007334 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	005b      	lsls	r3, r3, #1
 800730e:	2203      	movs	r2, #3
 8007310:	fa02 f303 	lsl.w	r3, r2, r3
 8007314:	43db      	mvns	r3, r3
 8007316:	69ba      	ldr	r2, [r7, #24]
 8007318:	4013      	ands	r3, r2
 800731a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	689a      	ldr	r2, [r3, #8]
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	005b      	lsls	r3, r3, #1
 8007324:	fa02 f303 	lsl.w	r3, r2, r3
 8007328:	69ba      	ldr	r2, [r7, #24]
 800732a:	4313      	orrs	r3, r2
 800732c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	69ba      	ldr	r2, [r7, #24]
 8007332:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	f003 0303 	and.w	r3, r3, #3
 800733c:	2b02      	cmp	r3, #2
 800733e:	d123      	bne.n	8007388 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	08da      	lsrs	r2, r3, #3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	3208      	adds	r2, #8
 8007348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800734c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	f003 0307 	and.w	r3, r3, #7
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	220f      	movs	r2, #15
 8007358:	fa02 f303 	lsl.w	r3, r2, r3
 800735c:	43db      	mvns	r3, r3
 800735e:	69ba      	ldr	r2, [r7, #24]
 8007360:	4013      	ands	r3, r2
 8007362:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	691a      	ldr	r2, [r3, #16]
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	f003 0307 	and.w	r3, r3, #7
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	fa02 f303 	lsl.w	r3, r2, r3
 8007374:	69ba      	ldr	r2, [r7, #24]
 8007376:	4313      	orrs	r3, r2
 8007378:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	08da      	lsrs	r2, r3, #3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	3208      	adds	r2, #8
 8007382:	69b9      	ldr	r1, [r7, #24]
 8007384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	005b      	lsls	r3, r3, #1
 8007392:	2203      	movs	r2, #3
 8007394:	fa02 f303 	lsl.w	r3, r2, r3
 8007398:	43db      	mvns	r3, r3
 800739a:	69ba      	ldr	r2, [r7, #24]
 800739c:	4013      	ands	r3, r2
 800739e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	f003 0203 	and.w	r2, r3, #3
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	005b      	lsls	r3, r3, #1
 80073ac:	fa02 f303 	lsl.w	r3, r2, r3
 80073b0:	69ba      	ldr	r2, [r7, #24]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	69ba      	ldr	r2, [r7, #24]
 80073ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f000 80a2 	beq.w	800750e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073ca:	2300      	movs	r3, #0
 80073cc:	60fb      	str	r3, [r7, #12]
 80073ce:	4b57      	ldr	r3, [pc, #348]	; (800752c <HAL_GPIO_Init+0x2e8>)
 80073d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073d2:	4a56      	ldr	r2, [pc, #344]	; (800752c <HAL_GPIO_Init+0x2e8>)
 80073d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073d8:	6453      	str	r3, [r2, #68]	; 0x44
 80073da:	4b54      	ldr	r3, [pc, #336]	; (800752c <HAL_GPIO_Init+0x2e8>)
 80073dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073e2:	60fb      	str	r3, [r7, #12]
 80073e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80073e6:	4a52      	ldr	r2, [pc, #328]	; (8007530 <HAL_GPIO_Init+0x2ec>)
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	089b      	lsrs	r3, r3, #2
 80073ec:	3302      	adds	r3, #2
 80073ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	f003 0303 	and.w	r3, r3, #3
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	220f      	movs	r2, #15
 80073fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007402:	43db      	mvns	r3, r3
 8007404:	69ba      	ldr	r2, [r7, #24]
 8007406:	4013      	ands	r3, r2
 8007408:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a49      	ldr	r2, [pc, #292]	; (8007534 <HAL_GPIO_Init+0x2f0>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d019      	beq.n	8007446 <HAL_GPIO_Init+0x202>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a48      	ldr	r2, [pc, #288]	; (8007538 <HAL_GPIO_Init+0x2f4>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d013      	beq.n	8007442 <HAL_GPIO_Init+0x1fe>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a47      	ldr	r2, [pc, #284]	; (800753c <HAL_GPIO_Init+0x2f8>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d00d      	beq.n	800743e <HAL_GPIO_Init+0x1fa>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a46      	ldr	r2, [pc, #280]	; (8007540 <HAL_GPIO_Init+0x2fc>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d007      	beq.n	800743a <HAL_GPIO_Init+0x1f6>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a45      	ldr	r2, [pc, #276]	; (8007544 <HAL_GPIO_Init+0x300>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d101      	bne.n	8007436 <HAL_GPIO_Init+0x1f2>
 8007432:	2304      	movs	r3, #4
 8007434:	e008      	b.n	8007448 <HAL_GPIO_Init+0x204>
 8007436:	2307      	movs	r3, #7
 8007438:	e006      	b.n	8007448 <HAL_GPIO_Init+0x204>
 800743a:	2303      	movs	r3, #3
 800743c:	e004      	b.n	8007448 <HAL_GPIO_Init+0x204>
 800743e:	2302      	movs	r3, #2
 8007440:	e002      	b.n	8007448 <HAL_GPIO_Init+0x204>
 8007442:	2301      	movs	r3, #1
 8007444:	e000      	b.n	8007448 <HAL_GPIO_Init+0x204>
 8007446:	2300      	movs	r3, #0
 8007448:	69fa      	ldr	r2, [r7, #28]
 800744a:	f002 0203 	and.w	r2, r2, #3
 800744e:	0092      	lsls	r2, r2, #2
 8007450:	4093      	lsls	r3, r2
 8007452:	69ba      	ldr	r2, [r7, #24]
 8007454:	4313      	orrs	r3, r2
 8007456:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007458:	4935      	ldr	r1, [pc, #212]	; (8007530 <HAL_GPIO_Init+0x2ec>)
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	089b      	lsrs	r3, r3, #2
 800745e:	3302      	adds	r3, #2
 8007460:	69ba      	ldr	r2, [r7, #24]
 8007462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007466:	4b38      	ldr	r3, [pc, #224]	; (8007548 <HAL_GPIO_Init+0x304>)
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	43db      	mvns	r3, r3
 8007470:	69ba      	ldr	r2, [r7, #24]
 8007472:	4013      	ands	r3, r2
 8007474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d003      	beq.n	800748a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007482:	69ba      	ldr	r2, [r7, #24]
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	4313      	orrs	r3, r2
 8007488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800748a:	4a2f      	ldr	r2, [pc, #188]	; (8007548 <HAL_GPIO_Init+0x304>)
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007490:	4b2d      	ldr	r3, [pc, #180]	; (8007548 <HAL_GPIO_Init+0x304>)
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	43db      	mvns	r3, r3
 800749a:	69ba      	ldr	r2, [r7, #24]
 800749c:	4013      	ands	r3, r2
 800749e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d003      	beq.n	80074b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80074ac:	69ba      	ldr	r2, [r7, #24]
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80074b4:	4a24      	ldr	r2, [pc, #144]	; (8007548 <HAL_GPIO_Init+0x304>)
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80074ba:	4b23      	ldr	r3, [pc, #140]	; (8007548 <HAL_GPIO_Init+0x304>)
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	43db      	mvns	r3, r3
 80074c4:	69ba      	ldr	r2, [r7, #24]
 80074c6:	4013      	ands	r3, r2
 80074c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d003      	beq.n	80074de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80074d6:	69ba      	ldr	r2, [r7, #24]
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	4313      	orrs	r3, r2
 80074dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80074de:	4a1a      	ldr	r2, [pc, #104]	; (8007548 <HAL_GPIO_Init+0x304>)
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80074e4:	4b18      	ldr	r3, [pc, #96]	; (8007548 <HAL_GPIO_Init+0x304>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	43db      	mvns	r3, r3
 80074ee:	69ba      	ldr	r2, [r7, #24]
 80074f0:	4013      	ands	r3, r2
 80074f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d003      	beq.n	8007508 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007500:	69ba      	ldr	r2, [r7, #24]
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	4313      	orrs	r3, r2
 8007506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007508:	4a0f      	ldr	r2, [pc, #60]	; (8007548 <HAL_GPIO_Init+0x304>)
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	3301      	adds	r3, #1
 8007512:	61fb      	str	r3, [r7, #28]
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	2b0f      	cmp	r3, #15
 8007518:	f67f aea2 	bls.w	8007260 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800751c:	bf00      	nop
 800751e:	bf00      	nop
 8007520:	3724      	adds	r7, #36	; 0x24
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	40023800 	.word	0x40023800
 8007530:	40013800 	.word	0x40013800
 8007534:	40020000 	.word	0x40020000
 8007538:	40020400 	.word	0x40020400
 800753c:	40020800 	.word	0x40020800
 8007540:	40020c00 	.word	0x40020c00
 8007544:	40021000 	.word	0x40021000
 8007548:	40013c00 	.word	0x40013c00

0800754c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	460b      	mov	r3, r1
 8007556:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	691a      	ldr	r2, [r3, #16]
 800755c:	887b      	ldrh	r3, [r7, #2]
 800755e:	4013      	ands	r3, r2
 8007560:	2b00      	cmp	r3, #0
 8007562:	d002      	beq.n	800756a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007564:	2301      	movs	r3, #1
 8007566:	73fb      	strb	r3, [r7, #15]
 8007568:	e001      	b.n	800756e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800756a:	2300      	movs	r3, #0
 800756c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800756e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	460b      	mov	r3, r1
 8007586:	807b      	strh	r3, [r7, #2]
 8007588:	4613      	mov	r3, r2
 800758a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800758c:	787b      	ldrb	r3, [r7, #1]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d003      	beq.n	800759a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007592:	887a      	ldrh	r2, [r7, #2]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007598:	e003      	b.n	80075a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800759a:	887b      	ldrh	r3, [r7, #2]
 800759c:	041a      	lsls	r2, r3, #16
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	619a      	str	r2, [r3, #24]
}
 80075a2:	bf00      	nop
 80075a4:	370c      	adds	r7, #12
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
	...

080075b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	4603      	mov	r3, r0
 80075b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80075ba:	4b08      	ldr	r3, [pc, #32]	; (80075dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80075bc:	695a      	ldr	r2, [r3, #20]
 80075be:	88fb      	ldrh	r3, [r7, #6]
 80075c0:	4013      	ands	r3, r2
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d006      	beq.n	80075d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80075c6:	4a05      	ldr	r2, [pc, #20]	; (80075dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80075c8:	88fb      	ldrh	r3, [r7, #6]
 80075ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80075cc:	88fb      	ldrh	r3, [r7, #6]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fc fee8 	bl	80043a4 <HAL_GPIO_EXTI_Callback>
  }
}
 80075d4:	bf00      	nop
 80075d6:	3708      	adds	r7, #8
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	40013c00 	.word	0x40013c00

080075e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e12b      	b.n	800784a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d106      	bne.n	800760c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7fc f898 	bl	800373c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2224      	movs	r2, #36	; 0x24
 8007610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f022 0201 	bic.w	r2, r2, #1
 8007622:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007632:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007642:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007644:	f002 fbb0 	bl	8009da8 <HAL_RCC_GetPCLK1Freq>
 8007648:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	4a81      	ldr	r2, [pc, #516]	; (8007854 <HAL_I2C_Init+0x274>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d807      	bhi.n	8007664 <HAL_I2C_Init+0x84>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	4a80      	ldr	r2, [pc, #512]	; (8007858 <HAL_I2C_Init+0x278>)
 8007658:	4293      	cmp	r3, r2
 800765a:	bf94      	ite	ls
 800765c:	2301      	movls	r3, #1
 800765e:	2300      	movhi	r3, #0
 8007660:	b2db      	uxtb	r3, r3
 8007662:	e006      	b.n	8007672 <HAL_I2C_Init+0x92>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	4a7d      	ldr	r2, [pc, #500]	; (800785c <HAL_I2C_Init+0x27c>)
 8007668:	4293      	cmp	r3, r2
 800766a:	bf94      	ite	ls
 800766c:	2301      	movls	r3, #1
 800766e:	2300      	movhi	r3, #0
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d001      	beq.n	800767a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e0e7      	b.n	800784a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	4a78      	ldr	r2, [pc, #480]	; (8007860 <HAL_I2C_Init+0x280>)
 800767e:	fba2 2303 	umull	r2, r3, r2, r3
 8007682:	0c9b      	lsrs	r3, r3, #18
 8007684:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	430a      	orrs	r2, r1
 8007698:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6a1b      	ldr	r3, [r3, #32]
 80076a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	4a6a      	ldr	r2, [pc, #424]	; (8007854 <HAL_I2C_Init+0x274>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d802      	bhi.n	80076b4 <HAL_I2C_Init+0xd4>
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	3301      	adds	r3, #1
 80076b2:	e009      	b.n	80076c8 <HAL_I2C_Init+0xe8>
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80076ba:	fb02 f303 	mul.w	r3, r2, r3
 80076be:	4a69      	ldr	r2, [pc, #420]	; (8007864 <HAL_I2C_Init+0x284>)
 80076c0:	fba2 2303 	umull	r2, r3, r2, r3
 80076c4:	099b      	lsrs	r3, r3, #6
 80076c6:	3301      	adds	r3, #1
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	6812      	ldr	r2, [r2, #0]
 80076cc:	430b      	orrs	r3, r1
 80076ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	69db      	ldr	r3, [r3, #28]
 80076d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80076da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	495c      	ldr	r1, [pc, #368]	; (8007854 <HAL_I2C_Init+0x274>)
 80076e4:	428b      	cmp	r3, r1
 80076e6:	d819      	bhi.n	800771c <HAL_I2C_Init+0x13c>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	1e59      	subs	r1, r3, #1
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	005b      	lsls	r3, r3, #1
 80076f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80076f6:	1c59      	adds	r1, r3, #1
 80076f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80076fc:	400b      	ands	r3, r1
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00a      	beq.n	8007718 <HAL_I2C_Init+0x138>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	1e59      	subs	r1, r3, #1
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	005b      	lsls	r3, r3, #1
 800770c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007710:	3301      	adds	r3, #1
 8007712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007716:	e051      	b.n	80077bc <HAL_I2C_Init+0x1dc>
 8007718:	2304      	movs	r3, #4
 800771a:	e04f      	b.n	80077bc <HAL_I2C_Init+0x1dc>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d111      	bne.n	8007748 <HAL_I2C_Init+0x168>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	1e58      	subs	r0, r3, #1
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6859      	ldr	r1, [r3, #4]
 800772c:	460b      	mov	r3, r1
 800772e:	005b      	lsls	r3, r3, #1
 8007730:	440b      	add	r3, r1
 8007732:	fbb0 f3f3 	udiv	r3, r0, r3
 8007736:	3301      	adds	r3, #1
 8007738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800773c:	2b00      	cmp	r3, #0
 800773e:	bf0c      	ite	eq
 8007740:	2301      	moveq	r3, #1
 8007742:	2300      	movne	r3, #0
 8007744:	b2db      	uxtb	r3, r3
 8007746:	e012      	b.n	800776e <HAL_I2C_Init+0x18e>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	1e58      	subs	r0, r3, #1
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6859      	ldr	r1, [r3, #4]
 8007750:	460b      	mov	r3, r1
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	440b      	add	r3, r1
 8007756:	0099      	lsls	r1, r3, #2
 8007758:	440b      	add	r3, r1
 800775a:	fbb0 f3f3 	udiv	r3, r0, r3
 800775e:	3301      	adds	r3, #1
 8007760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007764:	2b00      	cmp	r3, #0
 8007766:	bf0c      	ite	eq
 8007768:	2301      	moveq	r3, #1
 800776a:	2300      	movne	r3, #0
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b00      	cmp	r3, #0
 8007770:	d001      	beq.n	8007776 <HAL_I2C_Init+0x196>
 8007772:	2301      	movs	r3, #1
 8007774:	e022      	b.n	80077bc <HAL_I2C_Init+0x1dc>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d10e      	bne.n	800779c <HAL_I2C_Init+0x1bc>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	1e58      	subs	r0, r3, #1
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6859      	ldr	r1, [r3, #4]
 8007786:	460b      	mov	r3, r1
 8007788:	005b      	lsls	r3, r3, #1
 800778a:	440b      	add	r3, r1
 800778c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007790:	3301      	adds	r3, #1
 8007792:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800779a:	e00f      	b.n	80077bc <HAL_I2C_Init+0x1dc>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	1e58      	subs	r0, r3, #1
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6859      	ldr	r1, [r3, #4]
 80077a4:	460b      	mov	r3, r1
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	440b      	add	r3, r1
 80077aa:	0099      	lsls	r1, r3, #2
 80077ac:	440b      	add	r3, r1
 80077ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80077b2:	3301      	adds	r3, #1
 80077b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80077bc:	6879      	ldr	r1, [r7, #4]
 80077be:	6809      	ldr	r1, [r1, #0]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	69da      	ldr	r2, [r3, #28]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a1b      	ldr	r3, [r3, #32]
 80077d6:	431a      	orrs	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	430a      	orrs	r2, r1
 80077de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80077ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	6911      	ldr	r1, [r2, #16]
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	68d2      	ldr	r2, [r2, #12]
 80077f6:	4311      	orrs	r1, r2
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	6812      	ldr	r2, [r2, #0]
 80077fc:	430b      	orrs	r3, r1
 80077fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	695a      	ldr	r2, [r3, #20]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	431a      	orrs	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	430a      	orrs	r2, r1
 800781a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f042 0201 	orr.w	r2, r2, #1
 800782a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2220      	movs	r2, #32
 8007836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	000186a0 	.word	0x000186a0
 8007858:	001e847f 	.word	0x001e847f
 800785c:	003d08ff 	.word	0x003d08ff
 8007860:	431bde83 	.word	0x431bde83
 8007864:	10624dd3 	.word	0x10624dd3

08007868 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8007868:	b480      	push	{r7}
 800786a:	b087      	sub	sp, #28
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	607a      	str	r2, [r7, #4]
 8007872:	461a      	mov	r2, r3
 8007874:	460b      	mov	r3, r1
 8007876:	817b      	strh	r3, [r7, #10]
 8007878:	4613      	mov	r3, r2
 800787a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007886:	b2db      	uxtb	r3, r3
 8007888:	2b20      	cmp	r3, #32
 800788a:	f040 8085 	bne.w	8007998 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800788e:	4b46      	ldr	r3, [pc, #280]	; (80079a8 <HAL_I2C_Master_Transmit_IT+0x140>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	08db      	lsrs	r3, r3, #3
 8007894:	4a45      	ldr	r2, [pc, #276]	; (80079ac <HAL_I2C_Master_Transmit_IT+0x144>)
 8007896:	fba2 2303 	umull	r2, r3, r2, r3
 800789a:	0a1a      	lsrs	r2, r3, #8
 800789c:	4613      	mov	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	4413      	add	r3, r2
 80078a2:	009a      	lsls	r2, r3, #2
 80078a4:	4413      	add	r3, r2
 80078a6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	3b01      	subs	r3, #1
 80078ac:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d116      	bne.n	80078e2 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2220      	movs	r2, #32
 80078be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ce:	f043 0220 	orr.w	r2, r3, #32
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e05b      	b.n	800799a <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	699b      	ldr	r3, [r3, #24]
 80078e8:	f003 0302 	and.w	r3, r3, #2
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d0db      	beq.n	80078a8 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d101      	bne.n	80078fe <HAL_I2C_Master_Transmit_IT+0x96>
 80078fa:	2302      	movs	r3, #2
 80078fc:	e04d      	b.n	800799a <HAL_I2C_Master_Transmit_IT+0x132>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 0301 	and.w	r3, r3, #1
 8007910:	2b01      	cmp	r3, #1
 8007912:	d007      	beq.n	8007924 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f042 0201 	orr.w	r2, r2, #1
 8007922:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007932:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2221      	movs	r2, #33	; 0x21
 8007938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2210      	movs	r2, #16
 8007940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	893a      	ldrh	r2, [r7, #8]
 8007954:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800795a:	b29a      	uxth	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4a13      	ldr	r2, [pc, #76]	; (80079b0 <HAL_I2C_Master_Transmit_IT+0x148>)
 8007964:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8007966:	897a      	ldrh	r2, [r7, #10]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	685a      	ldr	r2, [r3, #4]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8007982:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007992:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007994:	2300      	movs	r3, #0
 8007996:	e000      	b.n	800799a <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8007998:	2302      	movs	r3, #2
  }
}
 800799a:	4618      	mov	r0, r3
 800799c:	371c      	adds	r7, #28
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	20000234 	.word	0x20000234
 80079ac:	14f8b589 	.word	0x14f8b589
 80079b0:	ffff0000 	.word	0xffff0000

080079b4 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b087      	sub	sp, #28
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	607a      	str	r2, [r7, #4]
 80079be:	461a      	mov	r2, r3
 80079c0:	460b      	mov	r3, r1
 80079c2:	817b      	strh	r3, [r7, #10]
 80079c4:	4613      	mov	r3, r2
 80079c6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80079c8:	2300      	movs	r3, #0
 80079ca:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	2b20      	cmp	r3, #32
 80079d6:	f040 808d 	bne.w	8007af4 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80079da:	4b4a      	ldr	r3, [pc, #296]	; (8007b04 <HAL_I2C_Master_Receive_IT+0x150>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	08db      	lsrs	r3, r3, #3
 80079e0:	4a49      	ldr	r2, [pc, #292]	; (8007b08 <HAL_I2C_Master_Receive_IT+0x154>)
 80079e2:	fba2 2303 	umull	r2, r3, r2, r3
 80079e6:	0a1a      	lsrs	r2, r3, #8
 80079e8:	4613      	mov	r3, r2
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	4413      	add	r3, r2
 80079ee:	009a      	lsls	r2, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	3b01      	subs	r3, #1
 80079f8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d116      	bne.n	8007a2e <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2220      	movs	r2, #32
 8007a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1a:	f043 0220 	orr.w	r2, r3, #32
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e063      	b.n	8007af6 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	699b      	ldr	r3, [r3, #24]
 8007a34:	f003 0302 	and.w	r3, r3, #2
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d0db      	beq.n	80079f4 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d101      	bne.n	8007a4a <HAL_I2C_Master_Receive_IT+0x96>
 8007a46:	2302      	movs	r3, #2
 8007a48:	e055      	b.n	8007af6 <HAL_I2C_Master_Receive_IT+0x142>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0301 	and.w	r3, r3, #1
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d007      	beq.n	8007a70 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f042 0201 	orr.w	r2, r2, #1
 8007a6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2222      	movs	r2, #34	; 0x22
 8007a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2210      	movs	r2, #16
 8007a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	893a      	ldrh	r2, [r7, #8]
 8007aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	4a17      	ldr	r2, [pc, #92]	; (8007b0c <HAL_I2C_Master_Receive_IT+0x158>)
 8007ab0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8007ab2:	897a      	ldrh	r2, [r7, #10]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685a      	ldr	r2, [r3, #4]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8007ace:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ade:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007aee:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007af0:	2300      	movs	r3, #0
 8007af2:	e000      	b.n	8007af6 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8007af4:	2302      	movs	r3, #2
  }
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	371c      	adds	r7, #28
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	20000234 	.word	0x20000234
 8007b08:	14f8b589 	.word	0x14f8b589
 8007b0c:	ffff0000 	.word	0xffff0000

08007b10 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b088      	sub	sp, #32
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b28:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b30:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b38:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007b3a:	7bfb      	ldrb	r3, [r7, #15]
 8007b3c:	2b10      	cmp	r3, #16
 8007b3e:	d003      	beq.n	8007b48 <HAL_I2C_EV_IRQHandler+0x38>
 8007b40:	7bfb      	ldrb	r3, [r7, #15]
 8007b42:	2b40      	cmp	r3, #64	; 0x40
 8007b44:	f040 80c1 	bne.w	8007cca <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	695b      	ldr	r3, [r3, #20]
 8007b56:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	f003 0301 	and.w	r3, r3, #1
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10d      	bne.n	8007b7e <HAL_I2C_EV_IRQHandler+0x6e>
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007b68:	d003      	beq.n	8007b72 <HAL_I2C_EV_IRQHandler+0x62>
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007b70:	d101      	bne.n	8007b76 <HAL_I2C_EV_IRQHandler+0x66>
 8007b72:	2301      	movs	r3, #1
 8007b74:	e000      	b.n	8007b78 <HAL_I2C_EV_IRQHandler+0x68>
 8007b76:	2300      	movs	r3, #0
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	f000 8132 	beq.w	8007de2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	f003 0301 	and.w	r3, r3, #1
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00c      	beq.n	8007ba2 <HAL_I2C_EV_IRQHandler+0x92>
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	0a5b      	lsrs	r3, r3, #9
 8007b8c:	f003 0301 	and.w	r3, r3, #1
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d006      	beq.n	8007ba2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f001 fc7b 	bl	8009490 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fd83 	bl	80086a6 <I2C_Master_SB>
 8007ba0:	e092      	b.n	8007cc8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	08db      	lsrs	r3, r3, #3
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d009      	beq.n	8007bc2 <HAL_I2C_EV_IRQHandler+0xb2>
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	0a5b      	lsrs	r3, r3, #9
 8007bb2:	f003 0301 	and.w	r3, r3, #1
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d003      	beq.n	8007bc2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fdf9 	bl	80087b2 <I2C_Master_ADD10>
 8007bc0:	e082      	b.n	8007cc8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	085b      	lsrs	r3, r3, #1
 8007bc6:	f003 0301 	and.w	r3, r3, #1
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d009      	beq.n	8007be2 <HAL_I2C_EV_IRQHandler+0xd2>
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	0a5b      	lsrs	r3, r3, #9
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d003      	beq.n	8007be2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fe13 	bl	8008806 <I2C_Master_ADDR>
 8007be0:	e072      	b.n	8007cc8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	089b      	lsrs	r3, r3, #2
 8007be6:	f003 0301 	and.w	r3, r3, #1
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d03b      	beq.n	8007c66 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bfc:	f000 80f3 	beq.w	8007de6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	09db      	lsrs	r3, r3, #7
 8007c04:	f003 0301 	and.w	r3, r3, #1
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00f      	beq.n	8007c2c <HAL_I2C_EV_IRQHandler+0x11c>
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	0a9b      	lsrs	r3, r3, #10
 8007c10:	f003 0301 	and.w	r3, r3, #1
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d009      	beq.n	8007c2c <HAL_I2C_EV_IRQHandler+0x11c>
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	089b      	lsrs	r3, r3, #2
 8007c1c:	f003 0301 	and.w	r3, r3, #1
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d103      	bne.n	8007c2c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f9f3 	bl	8008010 <I2C_MasterTransmit_TXE>
 8007c2a:	e04d      	b.n	8007cc8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	089b      	lsrs	r3, r3, #2
 8007c30:	f003 0301 	and.w	r3, r3, #1
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f000 80d6 	beq.w	8007de6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	0a5b      	lsrs	r3, r3, #9
 8007c3e:	f003 0301 	and.w	r3, r3, #1
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f000 80cf 	beq.w	8007de6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007c48:	7bbb      	ldrb	r3, [r7, #14]
 8007c4a:	2b21      	cmp	r3, #33	; 0x21
 8007c4c:	d103      	bne.n	8007c56 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fa7a 	bl	8008148 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c54:	e0c7      	b.n	8007de6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8007c56:	7bfb      	ldrb	r3, [r7, #15]
 8007c58:	2b40      	cmp	r3, #64	; 0x40
 8007c5a:	f040 80c4 	bne.w	8007de6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 fae8 	bl	8008234 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c64:	e0bf      	b.n	8007de6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c74:	f000 80b7 	beq.w	8007de6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	099b      	lsrs	r3, r3, #6
 8007c7c:	f003 0301 	and.w	r3, r3, #1
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d00f      	beq.n	8007ca4 <HAL_I2C_EV_IRQHandler+0x194>
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	0a9b      	lsrs	r3, r3, #10
 8007c88:	f003 0301 	and.w	r3, r3, #1
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d009      	beq.n	8007ca4 <HAL_I2C_EV_IRQHandler+0x194>
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	089b      	lsrs	r3, r3, #2
 8007c94:	f003 0301 	and.w	r3, r3, #1
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d103      	bne.n	8007ca4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 fb5d 	bl	800835c <I2C_MasterReceive_RXNE>
 8007ca2:	e011      	b.n	8007cc8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	089b      	lsrs	r3, r3, #2
 8007ca8:	f003 0301 	and.w	r3, r3, #1
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f000 809a 	beq.w	8007de6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	0a5b      	lsrs	r3, r3, #9
 8007cb6:	f003 0301 	and.w	r3, r3, #1
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f000 8093 	beq.w	8007de6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 fc06 	bl	80084d2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007cc6:	e08e      	b.n	8007de6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007cc8:	e08d      	b.n	8007de6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d004      	beq.n	8007cdc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	695b      	ldr	r3, [r3, #20]
 8007cd8:	61fb      	str	r3, [r7, #28]
 8007cda:	e007      	b.n	8007cec <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	695b      	ldr	r3, [r3, #20]
 8007cea:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	085b      	lsrs	r3, r3, #1
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d012      	beq.n	8007d1e <HAL_I2C_EV_IRQHandler+0x20e>
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	0a5b      	lsrs	r3, r3, #9
 8007cfc:	f003 0301 	and.w	r3, r3, #1
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00c      	beq.n	8007d1e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d003      	beq.n	8007d14 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007d14:	69b9      	ldr	r1, [r7, #24]
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 ffc4 	bl	8008ca4 <I2C_Slave_ADDR>
 8007d1c:	e066      	b.n	8007dec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	091b      	lsrs	r3, r3, #4
 8007d22:	f003 0301 	and.w	r3, r3, #1
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d009      	beq.n	8007d3e <HAL_I2C_EV_IRQHandler+0x22e>
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	0a5b      	lsrs	r3, r3, #9
 8007d2e:	f003 0301 	and.w	r3, r3, #1
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d003      	beq.n	8007d3e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fffe 	bl	8008d38 <I2C_Slave_STOPF>
 8007d3c:	e056      	b.n	8007dec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007d3e:	7bbb      	ldrb	r3, [r7, #14]
 8007d40:	2b21      	cmp	r3, #33	; 0x21
 8007d42:	d002      	beq.n	8007d4a <HAL_I2C_EV_IRQHandler+0x23a>
 8007d44:	7bbb      	ldrb	r3, [r7, #14]
 8007d46:	2b29      	cmp	r3, #41	; 0x29
 8007d48:	d125      	bne.n	8007d96 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	09db      	lsrs	r3, r3, #7
 8007d4e:	f003 0301 	and.w	r3, r3, #1
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00f      	beq.n	8007d76 <HAL_I2C_EV_IRQHandler+0x266>
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	0a9b      	lsrs	r3, r3, #10
 8007d5a:	f003 0301 	and.w	r3, r3, #1
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d009      	beq.n	8007d76 <HAL_I2C_EV_IRQHandler+0x266>
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	089b      	lsrs	r3, r3, #2
 8007d66:	f003 0301 	and.w	r3, r3, #1
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d103      	bne.n	8007d76 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 feda 	bl	8008b28 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007d74:	e039      	b.n	8007dea <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	089b      	lsrs	r3, r3, #2
 8007d7a:	f003 0301 	and.w	r3, r3, #1
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d033      	beq.n	8007dea <HAL_I2C_EV_IRQHandler+0x2da>
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	0a5b      	lsrs	r3, r3, #9
 8007d86:	f003 0301 	and.w	r3, r3, #1
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d02d      	beq.n	8007dea <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 ff07 	bl	8008ba2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007d94:	e029      	b.n	8007dea <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	099b      	lsrs	r3, r3, #6
 8007d9a:	f003 0301 	and.w	r3, r3, #1
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00f      	beq.n	8007dc2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	0a9b      	lsrs	r3, r3, #10
 8007da6:	f003 0301 	and.w	r3, r3, #1
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d009      	beq.n	8007dc2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	089b      	lsrs	r3, r3, #2
 8007db2:	f003 0301 	and.w	r3, r3, #1
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d103      	bne.n	8007dc2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 ff12 	bl	8008be4 <I2C_SlaveReceive_RXNE>
 8007dc0:	e014      	b.n	8007dec <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	089b      	lsrs	r3, r3, #2
 8007dc6:	f003 0301 	and.w	r3, r3, #1
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00e      	beq.n	8007dec <HAL_I2C_EV_IRQHandler+0x2dc>
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	0a5b      	lsrs	r3, r3, #9
 8007dd2:	f003 0301 	and.w	r3, r3, #1
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d008      	beq.n	8007dec <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 ff40 	bl	8008c60 <I2C_SlaveReceive_BTF>
 8007de0:	e004      	b.n	8007dec <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8007de2:	bf00      	nop
 8007de4:	e002      	b.n	8007dec <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007de6:	bf00      	nop
 8007de8:	e000      	b.n	8007dec <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007dea:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007dec:	3720      	adds	r7, #32
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b08a      	sub	sp, #40	; 0x28
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	695b      	ldr	r3, [r3, #20]
 8007e00:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e14:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007e16:	6a3b      	ldr	r3, [r7, #32]
 8007e18:	0a1b      	lsrs	r3, r3, #8
 8007e1a:	f003 0301 	and.w	r3, r3, #1
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00e      	beq.n	8007e40 <HAL_I2C_ER_IRQHandler+0x4e>
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	0a1b      	lsrs	r3, r3, #8
 8007e26:	f003 0301 	and.w	r3, r3, #1
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d008      	beq.n	8007e40 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e30:	f043 0301 	orr.w	r3, r3, #1
 8007e34:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007e3e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007e40:	6a3b      	ldr	r3, [r7, #32]
 8007e42:	0a5b      	lsrs	r3, r3, #9
 8007e44:	f003 0301 	and.w	r3, r3, #1
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00e      	beq.n	8007e6a <HAL_I2C_ER_IRQHandler+0x78>
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	0a1b      	lsrs	r3, r3, #8
 8007e50:	f003 0301 	and.w	r3, r3, #1
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d008      	beq.n	8007e6a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5a:	f043 0302 	orr.w	r3, r3, #2
 8007e5e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8007e68:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007e6a:	6a3b      	ldr	r3, [r7, #32]
 8007e6c:	0a9b      	lsrs	r3, r3, #10
 8007e6e:	f003 0301 	and.w	r3, r3, #1
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d03f      	beq.n	8007ef6 <HAL_I2C_ER_IRQHandler+0x104>
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	0a1b      	lsrs	r3, r3, #8
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d039      	beq.n	8007ef6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8007e82:	7efb      	ldrb	r3, [r7, #27]
 8007e84:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e94:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e9a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007e9c:	7ebb      	ldrb	r3, [r7, #26]
 8007e9e:	2b20      	cmp	r3, #32
 8007ea0:	d112      	bne.n	8007ec8 <HAL_I2C_ER_IRQHandler+0xd6>
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d10f      	bne.n	8007ec8 <HAL_I2C_ER_IRQHandler+0xd6>
 8007ea8:	7cfb      	ldrb	r3, [r7, #19]
 8007eaa:	2b21      	cmp	r3, #33	; 0x21
 8007eac:	d008      	beq.n	8007ec0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007eae:	7cfb      	ldrb	r3, [r7, #19]
 8007eb0:	2b29      	cmp	r3, #41	; 0x29
 8007eb2:	d005      	beq.n	8007ec0 <HAL_I2C_ER_IRQHandler+0xce>
 8007eb4:	7cfb      	ldrb	r3, [r7, #19]
 8007eb6:	2b28      	cmp	r3, #40	; 0x28
 8007eb8:	d106      	bne.n	8007ec8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2b21      	cmp	r3, #33	; 0x21
 8007ebe:	d103      	bne.n	8007ec8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f001 f869 	bl	8008f98 <I2C_Slave_AF>
 8007ec6:	e016      	b.n	8007ef6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007ed0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed4:	f043 0304 	orr.w	r3, r3, #4
 8007ed8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007eda:	7efb      	ldrb	r3, [r7, #27]
 8007edc:	2b10      	cmp	r3, #16
 8007ede:	d002      	beq.n	8007ee6 <HAL_I2C_ER_IRQHandler+0xf4>
 8007ee0:	7efb      	ldrb	r3, [r7, #27]
 8007ee2:	2b40      	cmp	r3, #64	; 0x40
 8007ee4:	d107      	bne.n	8007ef6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ef4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007ef6:	6a3b      	ldr	r3, [r7, #32]
 8007ef8:	0adb      	lsrs	r3, r3, #11
 8007efa:	f003 0301 	and.w	r3, r3, #1
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00e      	beq.n	8007f20 <HAL_I2C_ER_IRQHandler+0x12e>
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	0a1b      	lsrs	r3, r3, #8
 8007f06:	f003 0301 	and.w	r3, r3, #1
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d008      	beq.n	8007f20 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	f043 0308 	orr.w	r3, r3, #8
 8007f14:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8007f1e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d008      	beq.n	8007f38 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2c:	431a      	orrs	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f001 f8a0 	bl	8009078 <I2C_ITError>
  }
}
 8007f38:	bf00      	nop
 8007f3a:	3728      	adds	r7, #40	; 0x28
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007f48:	bf00      	nop
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	460b      	mov	r3, r1
 8007f9a:	70fb      	strb	r3, [r7, #3]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007fa0:	bf00      	nop
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007fb4:	bf00      	nop
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007fc8:	bf00      	nop
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007fdc:	bf00      	nop
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007ff0:	bf00      	nop
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008004:	bf00      	nop
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800801e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008026:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008032:	2b00      	cmp	r3, #0
 8008034:	d150      	bne.n	80080d8 <I2C_MasterTransmit_TXE+0xc8>
 8008036:	7bfb      	ldrb	r3, [r7, #15]
 8008038:	2b21      	cmp	r3, #33	; 0x21
 800803a:	d14d      	bne.n	80080d8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	2b08      	cmp	r3, #8
 8008040:	d01d      	beq.n	800807e <I2C_MasterTransmit_TXE+0x6e>
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	2b20      	cmp	r3, #32
 8008046:	d01a      	beq.n	800807e <I2C_MasterTransmit_TXE+0x6e>
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800804e:	d016      	beq.n	800807e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	685a      	ldr	r2, [r3, #4]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800805e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2211      	movs	r2, #17
 8008064:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2220      	movs	r2, #32
 8008072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f7ff ff62 	bl	8007f40 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800807c:	e060      	b.n	8008140 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	685a      	ldr	r2, [r3, #4]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800808c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800809c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2220      	movs	r2, #32
 80080a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	2b40      	cmp	r3, #64	; 0x40
 80080b6:	d107      	bne.n	80080c8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f7ff ff7d 	bl	8007fc0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80080c6:	e03b      	b.n	8008140 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f7ff ff35 	bl	8007f40 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80080d6:	e033      	b.n	8008140 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80080d8:	7bfb      	ldrb	r3, [r7, #15]
 80080da:	2b21      	cmp	r3, #33	; 0x21
 80080dc:	d005      	beq.n	80080ea <I2C_MasterTransmit_TXE+0xda>
 80080de:	7bbb      	ldrb	r3, [r7, #14]
 80080e0:	2b40      	cmp	r3, #64	; 0x40
 80080e2:	d12d      	bne.n	8008140 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80080e4:	7bfb      	ldrb	r3, [r7, #15]
 80080e6:	2b22      	cmp	r3, #34	; 0x22
 80080e8:	d12a      	bne.n	8008140 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d108      	bne.n	8008106 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	685a      	ldr	r2, [r3, #4]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008102:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008104:	e01c      	b.n	8008140 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b40      	cmp	r3, #64	; 0x40
 8008110:	d103      	bne.n	800811a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f88e 	bl	8008234 <I2C_MemoryTransmit_TXE_BTF>
}
 8008118:	e012      	b.n	8008140 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811e:	781a      	ldrb	r2, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812a:	1c5a      	adds	r2, r3, #1
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008134:	b29b      	uxth	r3, r3
 8008136:	3b01      	subs	r3, #1
 8008138:	b29a      	uxth	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800813e:	e7ff      	b.n	8008140 <I2C_MasterTransmit_TXE+0x130>
 8008140:	bf00      	nop
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008154:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b21      	cmp	r3, #33	; 0x21
 8008160:	d164      	bne.n	800822c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008166:	b29b      	uxth	r3, r3
 8008168:	2b00      	cmp	r3, #0
 800816a:	d012      	beq.n	8008192 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008170:	781a      	ldrb	r2, [r3, #0]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817c:	1c5a      	adds	r2, r3, #1
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008186:	b29b      	uxth	r3, r3
 8008188:	3b01      	subs	r3, #1
 800818a:	b29a      	uxth	r2, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8008190:	e04c      	b.n	800822c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2b08      	cmp	r3, #8
 8008196:	d01d      	beq.n	80081d4 <I2C_MasterTransmit_BTF+0x8c>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2b20      	cmp	r3, #32
 800819c:	d01a      	beq.n	80081d4 <I2C_MasterTransmit_BTF+0x8c>
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80081a4:	d016      	beq.n	80081d4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	685a      	ldr	r2, [r3, #4]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80081b4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2211      	movs	r2, #17
 80081ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2220      	movs	r2, #32
 80081c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f7ff feb7 	bl	8007f40 <HAL_I2C_MasterTxCpltCallback>
}
 80081d2:	e02b      	b.n	800822c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	685a      	ldr	r2, [r3, #4]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80081e2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081f2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2220      	movs	r2, #32
 80081fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008208:	b2db      	uxtb	r3, r3
 800820a:	2b40      	cmp	r3, #64	; 0x40
 800820c:	d107      	bne.n	800821e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7ff fed2 	bl	8007fc0 <HAL_I2C_MemTxCpltCallback>
}
 800821c:	e006      	b.n	800822c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7ff fe8a 	bl	8007f40 <HAL_I2C_MasterTxCpltCallback>
}
 800822c:	bf00      	nop
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008242:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008248:	2b00      	cmp	r3, #0
 800824a:	d11d      	bne.n	8008288 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008250:	2b01      	cmp	r3, #1
 8008252:	d10b      	bne.n	800826c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008258:	b2da      	uxtb	r2, r3
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008264:	1c9a      	adds	r2, r3, #2
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800826a:	e073      	b.n	8008354 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008270:	b29b      	uxth	r3, r3
 8008272:	121b      	asrs	r3, r3, #8
 8008274:	b2da      	uxtb	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008280:	1c5a      	adds	r2, r3, #1
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008286:	e065      	b.n	8008354 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800828c:	2b01      	cmp	r3, #1
 800828e:	d10b      	bne.n	80082a8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008294:	b2da      	uxtb	r2, r3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082a0:	1c5a      	adds	r2, r3, #1
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80082a6:	e055      	b.n	8008354 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d151      	bne.n	8008354 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80082b0:	7bfb      	ldrb	r3, [r7, #15]
 80082b2:	2b22      	cmp	r3, #34	; 0x22
 80082b4:	d10d      	bne.n	80082d2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082c4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ca:	1c5a      	adds	r2, r3, #1
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	651a      	str	r2, [r3, #80]	; 0x50
}
 80082d0:	e040      	b.n	8008354 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d015      	beq.n	8008308 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80082dc:	7bfb      	ldrb	r3, [r7, #15]
 80082de:	2b21      	cmp	r3, #33	; 0x21
 80082e0:	d112      	bne.n	8008308 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e6:	781a      	ldrb	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f2:	1c5a      	adds	r2, r3, #1
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	3b01      	subs	r3, #1
 8008300:	b29a      	uxth	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008306:	e025      	b.n	8008354 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800830c:	b29b      	uxth	r3, r3
 800830e:	2b00      	cmp	r3, #0
 8008310:	d120      	bne.n	8008354 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8008312:	7bfb      	ldrb	r3, [r7, #15]
 8008314:	2b21      	cmp	r3, #33	; 0x21
 8008316:	d11d      	bne.n	8008354 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	685a      	ldr	r2, [r3, #4]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008326:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008336:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2220      	movs	r2, #32
 8008342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f7ff fe36 	bl	8007fc0 <HAL_I2C_MemTxCpltCallback>
}
 8008354:	bf00      	nop
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800836a:	b2db      	uxtb	r3, r3
 800836c:	2b22      	cmp	r3, #34	; 0x22
 800836e:	f040 80ac 	bne.w	80084ca <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008376:	b29b      	uxth	r3, r3
 8008378:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2b03      	cmp	r3, #3
 800837e:	d921      	bls.n	80083c4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	691a      	ldr	r2, [r3, #16]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838a:	b2d2      	uxtb	r2, r2
 800838c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008392:	1c5a      	adds	r2, r3, #1
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800839c:	b29b      	uxth	r3, r3
 800839e:	3b01      	subs	r3, #1
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	2b03      	cmp	r3, #3
 80083ae:	f040 808c 	bne.w	80084ca <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	685a      	ldr	r2, [r3, #4]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083c0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80083c2:	e082      	b.n	80084ca <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d075      	beq.n	80084b8 <I2C_MasterReceive_RXNE+0x15c>
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d002      	beq.n	80083d8 <I2C_MasterReceive_RXNE+0x7c>
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d16f      	bne.n	80084b8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f001 f827 	bl	800942c <I2C_WaitOnSTOPRequestThroughIT>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d142      	bne.n	800846a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083f2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	685a      	ldr	r2, [r3, #4]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008402:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	691a      	ldr	r2, [r3, #16]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840e:	b2d2      	uxtb	r2, r2
 8008410:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008416:	1c5a      	adds	r2, r3, #1
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008420:	b29b      	uxth	r3, r3
 8008422:	3b01      	subs	r3, #1
 8008424:	b29a      	uxth	r2, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2220      	movs	r2, #32
 800842e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008438:	b2db      	uxtb	r3, r3
 800843a:	2b40      	cmp	r3, #64	; 0x40
 800843c:	d10a      	bne.n	8008454 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f7ff fdc1 	bl	8007fd4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008452:	e03a      	b.n	80084ca <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2212      	movs	r2, #18
 8008460:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f7ff fd76 	bl	8007f54 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008468:	e02f      	b.n	80084ca <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	685a      	ldr	r2, [r3, #4]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008478:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	691a      	ldr	r2, [r3, #16]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008484:	b2d2      	uxtb	r2, r2
 8008486:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848c:	1c5a      	adds	r2, r3, #1
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008496:	b29b      	uxth	r3, r3
 8008498:	3b01      	subs	r3, #1
 800849a:	b29a      	uxth	r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2220      	movs	r2, #32
 80084a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f7ff fd99 	bl	8007fe8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80084b6:	e008      	b.n	80084ca <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	685a      	ldr	r2, [r3, #4]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084c6:	605a      	str	r2, [r3, #4]
}
 80084c8:	e7ff      	b.n	80084ca <I2C_MasterReceive_RXNE+0x16e>
 80084ca:	bf00      	nop
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b084      	sub	sp, #16
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084de:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	2b04      	cmp	r3, #4
 80084e8:	d11b      	bne.n	8008522 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	685a      	ldr	r2, [r3, #4]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084f8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	691a      	ldr	r2, [r3, #16]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008504:	b2d2      	uxtb	r2, r2
 8008506:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850c:	1c5a      	adds	r2, r3, #1
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008516:	b29b      	uxth	r3, r3
 8008518:	3b01      	subs	r3, #1
 800851a:	b29a      	uxth	r2, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8008520:	e0bd      	b.n	800869e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008526:	b29b      	uxth	r3, r3
 8008528:	2b03      	cmp	r3, #3
 800852a:	d129      	bne.n	8008580 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	685a      	ldr	r2, [r3, #4]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800853a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2b04      	cmp	r3, #4
 8008540:	d00a      	beq.n	8008558 <I2C_MasterReceive_BTF+0x86>
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2b02      	cmp	r3, #2
 8008546:	d007      	beq.n	8008558 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008556:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	691a      	ldr	r2, [r3, #16]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008562:	b2d2      	uxtb	r2, r2
 8008564:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856a:	1c5a      	adds	r2, r3, #1
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008574:	b29b      	uxth	r3, r3
 8008576:	3b01      	subs	r3, #1
 8008578:	b29a      	uxth	r2, r3
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800857e:	e08e      	b.n	800869e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008584:	b29b      	uxth	r3, r3
 8008586:	2b02      	cmp	r3, #2
 8008588:	d176      	bne.n	8008678 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2b01      	cmp	r3, #1
 800858e:	d002      	beq.n	8008596 <I2C_MasterReceive_BTF+0xc4>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2b10      	cmp	r3, #16
 8008594:	d108      	bne.n	80085a8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085a4:	601a      	str	r2, [r3, #0]
 80085a6:	e019      	b.n	80085dc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2b04      	cmp	r3, #4
 80085ac:	d002      	beq.n	80085b4 <I2C_MasterReceive_BTF+0xe2>
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d108      	bne.n	80085c6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80085c2:	601a      	str	r2, [r3, #0]
 80085c4:	e00a      	b.n	80085dc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2b10      	cmp	r3, #16
 80085ca:	d007      	beq.n	80085dc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085da:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	691a      	ldr	r2, [r3, #16]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e6:	b2d2      	uxtb	r2, r2
 80085e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ee:	1c5a      	adds	r2, r3, #1
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	3b01      	subs	r3, #1
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	691a      	ldr	r2, [r3, #16]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860c:	b2d2      	uxtb	r2, r2
 800860e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008614:	1c5a      	adds	r2, r3, #1
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800861e:	b29b      	uxth	r3, r3
 8008620:	3b01      	subs	r3, #1
 8008622:	b29a      	uxth	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	685a      	ldr	r2, [r3, #4]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008636:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2220      	movs	r2, #32
 800863c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008646:	b2db      	uxtb	r3, r3
 8008648:	2b40      	cmp	r3, #64	; 0x40
 800864a:	d10a      	bne.n	8008662 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f7ff fcba 	bl	8007fd4 <HAL_I2C_MemRxCpltCallback>
}
 8008660:	e01d      	b.n	800869e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2212      	movs	r2, #18
 800866e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f7ff fc6f 	bl	8007f54 <HAL_I2C_MasterRxCpltCallback>
}
 8008676:	e012      	b.n	800869e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	691a      	ldr	r2, [r3, #16]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008682:	b2d2      	uxtb	r2, r2
 8008684:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868a:	1c5a      	adds	r2, r3, #1
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008694:	b29b      	uxth	r3, r3
 8008696:	3b01      	subs	r3, #1
 8008698:	b29a      	uxth	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800869e:	bf00      	nop
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80086a6:	b480      	push	{r7}
 80086a8:	b083      	sub	sp, #12
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	2b40      	cmp	r3, #64	; 0x40
 80086b8:	d117      	bne.n	80086ea <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d109      	bne.n	80086d6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	461a      	mov	r2, r3
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80086d2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80086d4:	e067      	b.n	80087a6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	f043 0301 	orr.w	r3, r3, #1
 80086e0:	b2da      	uxtb	r2, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	611a      	str	r2, [r3, #16]
}
 80086e8:	e05d      	b.n	80087a6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086f2:	d133      	bne.n	800875c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	2b21      	cmp	r3, #33	; 0x21
 80086fe:	d109      	bne.n	8008714 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008704:	b2db      	uxtb	r3, r3
 8008706:	461a      	mov	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008710:	611a      	str	r2, [r3, #16]
 8008712:	e008      	b.n	8008726 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008718:	b2db      	uxtb	r3, r3
 800871a:	f043 0301 	orr.w	r3, r3, #1
 800871e:	b2da      	uxtb	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800872a:	2b00      	cmp	r3, #0
 800872c:	d004      	beq.n	8008738 <I2C_Master_SB+0x92>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008734:	2b00      	cmp	r3, #0
 8008736:	d108      	bne.n	800874a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800873c:	2b00      	cmp	r3, #0
 800873e:	d032      	beq.n	80087a6 <I2C_Master_SB+0x100>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008746:	2b00      	cmp	r3, #0
 8008748:	d02d      	beq.n	80087a6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	685a      	ldr	r2, [r3, #4]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008758:	605a      	str	r2, [r3, #4]
}
 800875a:	e024      	b.n	80087a6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008760:	2b00      	cmp	r3, #0
 8008762:	d10e      	bne.n	8008782 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008768:	b29b      	uxth	r3, r3
 800876a:	11db      	asrs	r3, r3, #7
 800876c:	b2db      	uxtb	r3, r3
 800876e:	f003 0306 	and.w	r3, r3, #6
 8008772:	b2db      	uxtb	r3, r3
 8008774:	f063 030f 	orn	r3, r3, #15
 8008778:	b2da      	uxtb	r2, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	611a      	str	r2, [r3, #16]
}
 8008780:	e011      	b.n	80087a6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008786:	2b01      	cmp	r3, #1
 8008788:	d10d      	bne.n	80087a6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800878e:	b29b      	uxth	r3, r3
 8008790:	11db      	asrs	r3, r3, #7
 8008792:	b2db      	uxtb	r3, r3
 8008794:	f003 0306 	and.w	r3, r3, #6
 8008798:	b2db      	uxtb	r3, r3
 800879a:	f063 030e 	orn	r3, r3, #14
 800879e:	b2da      	uxtb	r2, r3
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	611a      	str	r2, [r3, #16]
}
 80087a6:	bf00      	nop
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr

080087b2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80087b2:	b480      	push	{r7}
 80087b4:	b083      	sub	sp, #12
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087be:	b2da      	uxtb	r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d004      	beq.n	80087d8 <I2C_Master_ADD10+0x26>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d108      	bne.n	80087ea <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00c      	beq.n	80087fa <I2C_Master_ADD10+0x48>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d007      	beq.n	80087fa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	685a      	ldr	r2, [r3, #4]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087f8:	605a      	str	r2, [r3, #4]
  }
}
 80087fa:	bf00      	nop
 80087fc:	370c      	adds	r7, #12
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8008806:	b480      	push	{r7}
 8008808:	b091      	sub	sp, #68	; 0x44
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008814:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008822:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800882a:	b2db      	uxtb	r3, r3
 800882c:	2b22      	cmp	r3, #34	; 0x22
 800882e:	f040 8169 	bne.w	8008b04 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008836:	2b00      	cmp	r3, #0
 8008838:	d10f      	bne.n	800885a <I2C_Master_ADDR+0x54>
 800883a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800883e:	2b40      	cmp	r3, #64	; 0x40
 8008840:	d10b      	bne.n	800885a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008842:	2300      	movs	r3, #0
 8008844:	633b      	str	r3, [r7, #48]	; 0x30
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	695b      	ldr	r3, [r3, #20]
 800884c:	633b      	str	r3, [r7, #48]	; 0x30
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	699b      	ldr	r3, [r3, #24]
 8008854:	633b      	str	r3, [r7, #48]	; 0x30
 8008856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008858:	e160      	b.n	8008b1c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800885e:	2b00      	cmp	r3, #0
 8008860:	d11d      	bne.n	800889e <I2C_Master_ADDR+0x98>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800886a:	d118      	bne.n	800889e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800886c:	2300      	movs	r3, #0
 800886e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	699b      	ldr	r3, [r3, #24]
 800887e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008880:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008890:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008896:	1c5a      	adds	r2, r3, #1
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	651a      	str	r2, [r3, #80]	; 0x50
 800889c:	e13e      	b.n	8008b1c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d113      	bne.n	80088d0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088a8:	2300      	movs	r3, #0
 80088aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	695b      	ldr	r3, [r3, #20]
 80088b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80088bc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088cc:	601a      	str	r2, [r3, #0]
 80088ce:	e115      	b.n	8008afc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	f040 808a 	bne.w	80089f0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80088dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80088e2:	d137      	bne.n	8008954 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088f2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008902:	d113      	bne.n	800892c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008912:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008914:	2300      	movs	r3, #0
 8008916:	627b      	str	r3, [r7, #36]	; 0x24
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	695b      	ldr	r3, [r3, #20]
 800891e:	627b      	str	r3, [r7, #36]	; 0x24
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	699b      	ldr	r3, [r3, #24]
 8008926:	627b      	str	r3, [r7, #36]	; 0x24
 8008928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892a:	e0e7      	b.n	8008afc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800892c:	2300      	movs	r3, #0
 800892e:	623b      	str	r3, [r7, #32]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	695b      	ldr	r3, [r3, #20]
 8008936:	623b      	str	r3, [r7, #32]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	623b      	str	r3, [r7, #32]
 8008940:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008950:	601a      	str	r2, [r3, #0]
 8008952:	e0d3      	b.n	8008afc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008956:	2b08      	cmp	r3, #8
 8008958:	d02e      	beq.n	80089b8 <I2C_Master_ADDR+0x1b2>
 800895a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895c:	2b20      	cmp	r3, #32
 800895e:	d02b      	beq.n	80089b8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008962:	2b12      	cmp	r3, #18
 8008964:	d102      	bne.n	800896c <I2C_Master_ADDR+0x166>
 8008966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008968:	2b01      	cmp	r3, #1
 800896a:	d125      	bne.n	80089b8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800896c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800896e:	2b04      	cmp	r3, #4
 8008970:	d00e      	beq.n	8008990 <I2C_Master_ADDR+0x18a>
 8008972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008974:	2b02      	cmp	r3, #2
 8008976:	d00b      	beq.n	8008990 <I2C_Master_ADDR+0x18a>
 8008978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800897a:	2b10      	cmp	r3, #16
 800897c:	d008      	beq.n	8008990 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800898c:	601a      	str	r2, [r3, #0]
 800898e:	e007      	b.n	80089a0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800899e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089a0:	2300      	movs	r3, #0
 80089a2:	61fb      	str	r3, [r7, #28]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	695b      	ldr	r3, [r3, #20]
 80089aa:	61fb      	str	r3, [r7, #28]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	699b      	ldr	r3, [r3, #24]
 80089b2:	61fb      	str	r3, [r7, #28]
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	e0a1      	b.n	8008afc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089c6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089c8:	2300      	movs	r3, #0
 80089ca:	61bb      	str	r3, [r7, #24]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	695b      	ldr	r3, [r3, #20]
 80089d2:	61bb      	str	r3, [r7, #24]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	699b      	ldr	r3, [r3, #24]
 80089da:	61bb      	str	r3, [r7, #24]
 80089dc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089ec:	601a      	str	r2, [r3, #0]
 80089ee:	e085      	b.n	8008afc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d14d      	bne.n	8008a96 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80089fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fc:	2b04      	cmp	r3, #4
 80089fe:	d016      	beq.n	8008a2e <I2C_Master_ADDR+0x228>
 8008a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a02:	2b02      	cmp	r3, #2
 8008a04:	d013      	beq.n	8008a2e <I2C_Master_ADDR+0x228>
 8008a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a08:	2b10      	cmp	r3, #16
 8008a0a:	d010      	beq.n	8008a2e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a1a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a2a:	601a      	str	r2, [r3, #0]
 8008a2c:	e007      	b.n	8008a3e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a3c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a4c:	d117      	bne.n	8008a7e <I2C_Master_ADDR+0x278>
 8008a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008a54:	d00b      	beq.n	8008a6e <I2C_Master_ADDR+0x268>
 8008a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d008      	beq.n	8008a6e <I2C_Master_ADDR+0x268>
 8008a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5e:	2b08      	cmp	r3, #8
 8008a60:	d005      	beq.n	8008a6e <I2C_Master_ADDR+0x268>
 8008a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a64:	2b10      	cmp	r3, #16
 8008a66:	d002      	beq.n	8008a6e <I2C_Master_ADDR+0x268>
 8008a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6a:	2b20      	cmp	r3, #32
 8008a6c:	d107      	bne.n	8008a7e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	685a      	ldr	r2, [r3, #4]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008a7c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a7e:	2300      	movs	r3, #0
 8008a80:	617b      	str	r3, [r7, #20]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	695b      	ldr	r3, [r3, #20]
 8008a88:	617b      	str	r3, [r7, #20]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	699b      	ldr	r3, [r3, #24]
 8008a90:	617b      	str	r3, [r7, #20]
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	e032      	b.n	8008afc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008aa4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ab0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ab4:	d117      	bne.n	8008ae6 <I2C_Master_ADDR+0x2e0>
 8008ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008abc:	d00b      	beq.n	8008ad6 <I2C_Master_ADDR+0x2d0>
 8008abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d008      	beq.n	8008ad6 <I2C_Master_ADDR+0x2d0>
 8008ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac6:	2b08      	cmp	r3, #8
 8008ac8:	d005      	beq.n	8008ad6 <I2C_Master_ADDR+0x2d0>
 8008aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008acc:	2b10      	cmp	r3, #16
 8008ace:	d002      	beq.n	8008ad6 <I2C_Master_ADDR+0x2d0>
 8008ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad2:	2b20      	cmp	r3, #32
 8008ad4:	d107      	bne.n	8008ae6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	685a      	ldr	r2, [r3, #4]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008ae4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	613b      	str	r3, [r7, #16]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	695b      	ldr	r3, [r3, #20]
 8008af0:	613b      	str	r3, [r7, #16]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	699b      	ldr	r3, [r3, #24]
 8008af8:	613b      	str	r3, [r7, #16]
 8008afa:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008b02:	e00b      	b.n	8008b1c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b04:	2300      	movs	r3, #0
 8008b06:	60fb      	str	r3, [r7, #12]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	695b      	ldr	r3, [r3, #20]
 8008b0e:	60fb      	str	r3, [r7, #12]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	699b      	ldr	r3, [r3, #24]
 8008b16:	60fb      	str	r3, [r7, #12]
 8008b18:	68fb      	ldr	r3, [r7, #12]
}
 8008b1a:	e7ff      	b.n	8008b1c <I2C_Master_ADDR+0x316>
 8008b1c:	bf00      	nop
 8008b1e:	3744      	adds	r7, #68	; 0x44
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b36:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d02b      	beq.n	8008b9a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b46:	781a      	ldrb	r2, [r3, #0]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b52:	1c5a      	adds	r2, r3, #1
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d114      	bne.n	8008b9a <I2C_SlaveTransmit_TXE+0x72>
 8008b70:	7bfb      	ldrb	r3, [r7, #15]
 8008b72:	2b29      	cmp	r3, #41	; 0x29
 8008b74:	d111      	bne.n	8008b9a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	685a      	ldr	r2, [r3, #4]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b84:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2221      	movs	r2, #33	; 0x21
 8008b8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2228      	movs	r2, #40	; 0x28
 8008b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f7ff f9e7 	bl	8007f68 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008b9a:	bf00      	nop
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008ba2:	b480      	push	{r7}
 8008ba4:	b083      	sub	sp, #12
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d011      	beq.n	8008bd8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb8:	781a      	ldrb	r2, [r3, #0]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc4:	1c5a      	adds	r2, r3, #1
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008bd8:	bf00      	nop
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bf2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d02c      	beq.n	8008c58 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	691a      	ldr	r2, [r3, #16]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c08:	b2d2      	uxtb	r2, r2
 8008c0a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c10:	1c5a      	adds	r2, r3, #1
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	3b01      	subs	r3, #1
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d114      	bne.n	8008c58 <I2C_SlaveReceive_RXNE+0x74>
 8008c2e:	7bfb      	ldrb	r3, [r7, #15]
 8008c30:	2b2a      	cmp	r3, #42	; 0x2a
 8008c32:	d111      	bne.n	8008c58 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	685a      	ldr	r2, [r3, #4]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c42:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2222      	movs	r2, #34	; 0x22
 8008c48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2228      	movs	r2, #40	; 0x28
 8008c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f7ff f992 	bl	8007f7c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008c58:	bf00      	nop
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d012      	beq.n	8008c98 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	691a      	ldr	r2, [r3, #16]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7c:	b2d2      	uxtb	r2, r2
 8008c7e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c84:	1c5a      	adds	r2, r3, #1
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	3b01      	subs	r3, #1
 8008c92:	b29a      	uxth	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008c98:	bf00      	nop
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008cbe:	2b28      	cmp	r3, #40	; 0x28
 8008cc0:	d127      	bne.n	8008d12 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	685a      	ldr	r2, [r3, #4]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cd0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	089b      	lsrs	r3, r3, #2
 8008cd6:	f003 0301 	and.w	r3, r3, #1
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d101      	bne.n	8008ce2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	09db      	lsrs	r3, r3, #7
 8008ce6:	f003 0301 	and.w	r3, r3, #1
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d103      	bne.n	8008cf6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	81bb      	strh	r3, [r7, #12]
 8008cf4:	e002      	b.n	8008cfc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	699b      	ldr	r3, [r3, #24]
 8008cfa:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008d04:	89ba      	ldrh	r2, [r7, #12]
 8008d06:	7bfb      	ldrb	r3, [r7, #15]
 8008d08:	4619      	mov	r1, r3
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7ff f940 	bl	8007f90 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008d10:	e00e      	b.n	8008d30 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d12:	2300      	movs	r3, #0
 8008d14:	60bb      	str	r3, [r7, #8]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	695b      	ldr	r3, [r3, #20]
 8008d1c:	60bb      	str	r3, [r7, #8]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	699b      	ldr	r3, [r3, #24]
 8008d24:	60bb      	str	r3, [r7, #8]
 8008d26:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8008d30:	bf00      	nop
 8008d32:	3710      	adds	r7, #16
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d46:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	685a      	ldr	r2, [r3, #4]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008d56:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008d58:	2300      	movs	r3, #0
 8008d5a:	60bb      	str	r3, [r7, #8]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	695b      	ldr	r3, [r3, #20]
 8008d62:	60bb      	str	r3, [r7, #8]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f042 0201 	orr.w	r2, r2, #1
 8008d72:	601a      	str	r2, [r3, #0]
 8008d74:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d84:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d94:	d172      	bne.n	8008e7c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008d96:	7bfb      	ldrb	r3, [r7, #15]
 8008d98:	2b22      	cmp	r3, #34	; 0x22
 8008d9a:	d002      	beq.n	8008da2 <I2C_Slave_STOPF+0x6a>
 8008d9c:	7bfb      	ldrb	r3, [r7, #15]
 8008d9e:	2b2a      	cmp	r3, #42	; 0x2a
 8008da0:	d135      	bne.n	8008e0e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	b29a      	uxth	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d005      	beq.n	8008dc6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dbe:	f043 0204 	orr.w	r2, r3, #4
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	685a      	ldr	r2, [r3, #4]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008dd4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7fe f938 	bl	8007050 <HAL_DMA_GetState>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d049      	beq.n	8008e7a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dea:	4a69      	ldr	r2, [pc, #420]	; (8008f90 <I2C_Slave_STOPF+0x258>)
 8008dec:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7fd ff80 	bl	8006cf8 <HAL_DMA_Abort_IT>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d03d      	beq.n	8008e7a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008e08:	4610      	mov	r0, r2
 8008e0a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008e0c:	e035      	b.n	8008e7a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	b29a      	uxth	r2, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d005      	beq.n	8008e32 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e2a:	f043 0204 	orr.w	r2, r3, #4
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	685a      	ldr	r2, [r3, #4]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e40:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7fe f902 	bl	8007050 <HAL_DMA_GetState>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d014      	beq.n	8008e7c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e56:	4a4e      	ldr	r2, [pc, #312]	; (8008f90 <I2C_Slave_STOPF+0x258>)
 8008e58:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7fd ff4a 	bl	8006cf8 <HAL_DMA_Abort_IT>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d008      	beq.n	8008e7c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008e74:	4610      	mov	r0, r2
 8008e76:	4798      	blx	r3
 8008e78:	e000      	b.n	8008e7c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008e7a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d03e      	beq.n	8008f04 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	695b      	ldr	r3, [r3, #20]
 8008e8c:	f003 0304 	and.w	r3, r3, #4
 8008e90:	2b04      	cmp	r3, #4
 8008e92:	d112      	bne.n	8008eba <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	691a      	ldr	r2, [r3, #16]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9e:	b2d2      	uxtb	r2, r2
 8008ea0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea6:	1c5a      	adds	r2, r3, #1
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	b29a      	uxth	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	695b      	ldr	r3, [r3, #20]
 8008ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ec4:	2b40      	cmp	r3, #64	; 0x40
 8008ec6:	d112      	bne.n	8008eee <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	691a      	ldr	r2, [r3, #16]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed2:	b2d2      	uxtb	r2, r2
 8008ed4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eda:	1c5a      	adds	r2, r3, #1
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	b29a      	uxth	r2, r3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d005      	beq.n	8008f04 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efc:	f043 0204 	orr.w	r2, r3, #4
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d003      	beq.n	8008f14 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 f8b3 	bl	8009078 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008f12:	e039      	b.n	8008f88 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
 8008f16:	2b2a      	cmp	r3, #42	; 0x2a
 8008f18:	d109      	bne.n	8008f2e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2228      	movs	r2, #40	; 0x28
 8008f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f7ff f827 	bl	8007f7c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	2b28      	cmp	r3, #40	; 0x28
 8008f38:	d111      	bne.n	8008f5e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a15      	ldr	r2, [pc, #84]	; (8008f94 <I2C_Slave_STOPF+0x25c>)
 8008f3e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2220      	movs	r2, #32
 8008f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7ff f828 	bl	8007fac <HAL_I2C_ListenCpltCallback>
}
 8008f5c:	e014      	b.n	8008f88 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f62:	2b22      	cmp	r3, #34	; 0x22
 8008f64:	d002      	beq.n	8008f6c <I2C_Slave_STOPF+0x234>
 8008f66:	7bfb      	ldrb	r3, [r7, #15]
 8008f68:	2b22      	cmp	r3, #34	; 0x22
 8008f6a:	d10d      	bne.n	8008f88 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2220      	movs	r2, #32
 8008f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f7fe fffa 	bl	8007f7c <HAL_I2C_SlaveRxCpltCallback>
}
 8008f88:	bf00      	nop
 8008f8a:	3710      	adds	r7, #16
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	080092dd 	.word	0x080092dd
 8008f94:	ffff0000 	.word	0xffff0000

08008f98 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fac:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	2b08      	cmp	r3, #8
 8008fb2:	d002      	beq.n	8008fba <I2C_Slave_AF+0x22>
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	2b20      	cmp	r3, #32
 8008fb8:	d129      	bne.n	800900e <I2C_Slave_AF+0x76>
 8008fba:	7bfb      	ldrb	r3, [r7, #15]
 8008fbc:	2b28      	cmp	r3, #40	; 0x28
 8008fbe:	d126      	bne.n	800900e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	4a2c      	ldr	r2, [pc, #176]	; (8009074 <I2C_Slave_AF+0xdc>)
 8008fc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	685a      	ldr	r2, [r3, #4]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008fd4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008fde:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fee:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2220      	movs	r2, #32
 8008ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f7fe ffd0 	bl	8007fac <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800900c:	e02e      	b.n	800906c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800900e:	7bfb      	ldrb	r3, [r7, #15]
 8009010:	2b21      	cmp	r3, #33	; 0x21
 8009012:	d126      	bne.n	8009062 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a17      	ldr	r2, [pc, #92]	; (8009074 <I2C_Slave_AF+0xdc>)
 8009018:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2221      	movs	r2, #33	; 0x21
 800901e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2220      	movs	r2, #32
 8009024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	685a      	ldr	r2, [r3, #4]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800903e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009048:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009058:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f7fe ff84 	bl	8007f68 <HAL_I2C_SlaveTxCpltCallback>
}
 8009060:	e004      	b.n	800906c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800906a:	615a      	str	r2, [r3, #20]
}
 800906c:	bf00      	nop
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	ffff0000 	.word	0xffff0000

08009078 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009086:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800908e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009090:	7bbb      	ldrb	r3, [r7, #14]
 8009092:	2b10      	cmp	r3, #16
 8009094:	d002      	beq.n	800909c <I2C_ITError+0x24>
 8009096:	7bbb      	ldrb	r3, [r7, #14]
 8009098:	2b40      	cmp	r3, #64	; 0x40
 800909a:	d10a      	bne.n	80090b2 <I2C_ITError+0x3a>
 800909c:	7bfb      	ldrb	r3, [r7, #15]
 800909e:	2b22      	cmp	r3, #34	; 0x22
 80090a0:	d107      	bne.n	80090b2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80090b0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80090b2:	7bfb      	ldrb	r3, [r7, #15]
 80090b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80090b8:	2b28      	cmp	r3, #40	; 0x28
 80090ba:	d107      	bne.n	80090cc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2228      	movs	r2, #40	; 0x28
 80090c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80090ca:	e015      	b.n	80090f8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090da:	d00a      	beq.n	80090f2 <I2C_ITError+0x7a>
 80090dc:	7bfb      	ldrb	r3, [r7, #15]
 80090de:	2b60      	cmp	r3, #96	; 0x60
 80090e0:	d007      	beq.n	80090f2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2220      	movs	r2, #32
 80090e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009106:	d162      	bne.n	80091ce <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	685a      	ldr	r2, [r3, #4]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009116:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800911c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009120:	b2db      	uxtb	r3, r3
 8009122:	2b01      	cmp	r3, #1
 8009124:	d020      	beq.n	8009168 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800912a:	4a6a      	ldr	r2, [pc, #424]	; (80092d4 <I2C_ITError+0x25c>)
 800912c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009132:	4618      	mov	r0, r3
 8009134:	f7fd fde0 	bl	8006cf8 <HAL_DMA_Abort_IT>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	f000 8089 	beq.w	8009252 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f022 0201 	bic.w	r2, r2, #1
 800914e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2220      	movs	r2, #32
 8009154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800915c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009162:	4610      	mov	r0, r2
 8009164:	4798      	blx	r3
 8009166:	e074      	b.n	8009252 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800916c:	4a59      	ldr	r2, [pc, #356]	; (80092d4 <I2C_ITError+0x25c>)
 800916e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009174:	4618      	mov	r0, r3
 8009176:	f7fd fdbf 	bl	8006cf8 <HAL_DMA_Abort_IT>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d068      	beq.n	8009252 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	695b      	ldr	r3, [r3, #20]
 8009186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800918a:	2b40      	cmp	r3, #64	; 0x40
 800918c:	d10b      	bne.n	80091a6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	691a      	ldr	r2, [r3, #16]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009198:	b2d2      	uxtb	r2, r2
 800919a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a0:	1c5a      	adds	r2, r3, #1
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f022 0201 	bic.w	r2, r2, #1
 80091b4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2220      	movs	r2, #32
 80091ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80091c8:	4610      	mov	r0, r2
 80091ca:	4798      	blx	r3
 80091cc:	e041      	b.n	8009252 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	2b60      	cmp	r3, #96	; 0x60
 80091d8:	d125      	bne.n	8009226 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2220      	movs	r2, #32
 80091de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	695b      	ldr	r3, [r3, #20]
 80091ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091f2:	2b40      	cmp	r3, #64	; 0x40
 80091f4:	d10b      	bne.n	800920e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	691a      	ldr	r2, [r3, #16]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009200:	b2d2      	uxtb	r2, r2
 8009202:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009208:	1c5a      	adds	r2, r3, #1
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f022 0201 	bic.w	r2, r2, #1
 800921c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f7fe feec 	bl	8007ffc <HAL_I2C_AbortCpltCallback>
 8009224:	e015      	b.n	8009252 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	695b      	ldr	r3, [r3, #20]
 800922c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009230:	2b40      	cmp	r3, #64	; 0x40
 8009232:	d10b      	bne.n	800924c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	691a      	ldr	r2, [r3, #16]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923e:	b2d2      	uxtb	r2, r2
 8009240:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009246:	1c5a      	adds	r2, r3, #1
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f7fe fecb 	bl	8007fe8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009256:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	f003 0301 	and.w	r3, r3, #1
 800925e:	2b00      	cmp	r3, #0
 8009260:	d10e      	bne.n	8009280 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009268:	2b00      	cmp	r3, #0
 800926a:	d109      	bne.n	8009280 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009272:	2b00      	cmp	r3, #0
 8009274:	d104      	bne.n	8009280 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800927c:	2b00      	cmp	r3, #0
 800927e:	d007      	beq.n	8009290 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	685a      	ldr	r2, [r3, #4]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800928e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009296:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800929c:	f003 0304 	and.w	r3, r3, #4
 80092a0:	2b04      	cmp	r3, #4
 80092a2:	d113      	bne.n	80092cc <I2C_ITError+0x254>
 80092a4:	7bfb      	ldrb	r3, [r7, #15]
 80092a6:	2b28      	cmp	r3, #40	; 0x28
 80092a8:	d110      	bne.n	80092cc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4a0a      	ldr	r2, [pc, #40]	; (80092d8 <I2C_ITError+0x260>)
 80092ae:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2220      	movs	r2, #32
 80092ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f7fe fe70 	bl	8007fac <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80092cc:	bf00      	nop
 80092ce:	3710      	adds	r7, #16
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	080092dd 	.word	0x080092dd
 80092d8:	ffff0000 	.word	0xffff0000

080092dc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b086      	sub	sp, #24
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80092e4:	2300      	movs	r3, #0
 80092e6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ec:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092f4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80092f6:	4b4b      	ldr	r3, [pc, #300]	; (8009424 <I2C_DMAAbort+0x148>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	08db      	lsrs	r3, r3, #3
 80092fc:	4a4a      	ldr	r2, [pc, #296]	; (8009428 <I2C_DMAAbort+0x14c>)
 80092fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009302:	0a1a      	lsrs	r2, r3, #8
 8009304:	4613      	mov	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	4413      	add	r3, r2
 800930a:	00da      	lsls	r2, r3, #3
 800930c:	1ad3      	subs	r3, r2, r3
 800930e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d106      	bne.n	8009324 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800931a:	f043 0220 	orr.w	r2, r3, #32
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8009322:	e00a      	b.n	800933a <I2C_DMAAbort+0x5e>
    }
    count--;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	3b01      	subs	r3, #1
 8009328:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009338:	d0ea      	beq.n	8009310 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800933e:	2b00      	cmp	r3, #0
 8009340:	d003      	beq.n	800934a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009346:	2200      	movs	r2, #0
 8009348:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800934e:	2b00      	cmp	r3, #0
 8009350:	d003      	beq.n	800935a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009356:	2200      	movs	r2, #0
 8009358:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009368:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	2200      	movs	r2, #0
 800936e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009374:	2b00      	cmp	r3, #0
 8009376:	d003      	beq.n	8009380 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800937c:	2200      	movs	r2, #0
 800937e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009384:	2b00      	cmp	r3, #0
 8009386:	d003      	beq.n	8009390 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938c:	2200      	movs	r2, #0
 800938e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f022 0201 	bic.w	r2, r2, #1
 800939e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	2b60      	cmp	r3, #96	; 0x60
 80093aa:	d10e      	bne.n	80093ca <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	2220      	movs	r2, #32
 80093b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	2200      	movs	r2, #0
 80093b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	2200      	movs	r2, #0
 80093c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80093c2:	6978      	ldr	r0, [r7, #20]
 80093c4:	f7fe fe1a 	bl	8007ffc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80093c8:	e027      	b.n	800941a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80093ca:	7cfb      	ldrb	r3, [r7, #19]
 80093cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80093d0:	2b28      	cmp	r3, #40	; 0x28
 80093d2:	d117      	bne.n	8009404 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f042 0201 	orr.w	r2, r2, #1
 80093e2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80093f2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	2200      	movs	r2, #0
 80093f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	2228      	movs	r2, #40	; 0x28
 80093fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009402:	e007      	b.n	8009414 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	2220      	movs	r2, #32
 8009408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	2200      	movs	r2, #0
 8009410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8009414:	6978      	ldr	r0, [r7, #20]
 8009416:	f7fe fde7 	bl	8007fe8 <HAL_I2C_ErrorCallback>
}
 800941a:	bf00      	nop
 800941c:	3718      	adds	r7, #24
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	20000234 	.word	0x20000234
 8009428:	14f8b589 	.word	0x14f8b589

0800942c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800942c:	b480      	push	{r7}
 800942e:	b085      	sub	sp, #20
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009434:	2300      	movs	r3, #0
 8009436:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8009438:	4b13      	ldr	r3, [pc, #76]	; (8009488 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	08db      	lsrs	r3, r3, #3
 800943e:	4a13      	ldr	r2, [pc, #76]	; (800948c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8009440:	fba2 2303 	umull	r2, r3, r2, r3
 8009444:	0a1a      	lsrs	r2, r3, #8
 8009446:	4613      	mov	r3, r2
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	4413      	add	r3, r2
 800944c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	3b01      	subs	r3, #1
 8009452:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d107      	bne.n	800946a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945e:	f043 0220 	orr.w	r2, r3, #32
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	e008      	b.n	800947c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009478:	d0e9      	beq.n	800944e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800947a:	2300      	movs	r3, #0
}
 800947c:	4618      	mov	r0, r3
 800947e:	3714      	adds	r7, #20
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr
 8009488:	20000234 	.word	0x20000234
 800948c:	14f8b589 	.word	0x14f8b589

08009490 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800949c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80094a0:	d103      	bne.n	80094aa <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2201      	movs	r2, #1
 80094a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80094a8:	e007      	b.n	80094ba <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ae:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80094b2:	d102      	bne.n	80094ba <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2208      	movs	r2, #8
 80094b8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80094ba:	bf00      	nop
 80094bc:	370c      	adds	r7, #12
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr
	...

080094c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b086      	sub	sp, #24
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d101      	bne.n	80094da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	e267      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f003 0301 	and.w	r3, r3, #1
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d075      	beq.n	80095d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80094e6:	4b88      	ldr	r3, [pc, #544]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	f003 030c 	and.w	r3, r3, #12
 80094ee:	2b04      	cmp	r3, #4
 80094f0:	d00c      	beq.n	800950c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80094f2:	4b85      	ldr	r3, [pc, #532]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80094fa:	2b08      	cmp	r3, #8
 80094fc:	d112      	bne.n	8009524 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80094fe:	4b82      	ldr	r3, [pc, #520]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800950a:	d10b      	bne.n	8009524 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800950c:	4b7e      	ldr	r3, [pc, #504]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009514:	2b00      	cmp	r3, #0
 8009516:	d05b      	beq.n	80095d0 <HAL_RCC_OscConfig+0x108>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d157      	bne.n	80095d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	e242      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800952c:	d106      	bne.n	800953c <HAL_RCC_OscConfig+0x74>
 800952e:	4b76      	ldr	r3, [pc, #472]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a75      	ldr	r2, [pc, #468]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 8009534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009538:	6013      	str	r3, [r2, #0]
 800953a:	e01d      	b.n	8009578 <HAL_RCC_OscConfig+0xb0>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009544:	d10c      	bne.n	8009560 <HAL_RCC_OscConfig+0x98>
 8009546:	4b70      	ldr	r3, [pc, #448]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a6f      	ldr	r2, [pc, #444]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 800954c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009550:	6013      	str	r3, [r2, #0]
 8009552:	4b6d      	ldr	r3, [pc, #436]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a6c      	ldr	r2, [pc, #432]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 8009558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800955c:	6013      	str	r3, [r2, #0]
 800955e:	e00b      	b.n	8009578 <HAL_RCC_OscConfig+0xb0>
 8009560:	4b69      	ldr	r3, [pc, #420]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a68      	ldr	r2, [pc, #416]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 8009566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800956a:	6013      	str	r3, [r2, #0]
 800956c:	4b66      	ldr	r3, [pc, #408]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a65      	ldr	r2, [pc, #404]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 8009572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d013      	beq.n	80095a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009580:	f7fc fd24 	bl	8005fcc <HAL_GetTick>
 8009584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009586:	e008      	b.n	800959a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009588:	f7fc fd20 	bl	8005fcc <HAL_GetTick>
 800958c:	4602      	mov	r2, r0
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	1ad3      	subs	r3, r2, r3
 8009592:	2b64      	cmp	r3, #100	; 0x64
 8009594:	d901      	bls.n	800959a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009596:	2303      	movs	r3, #3
 8009598:	e207      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800959a:	4b5b      	ldr	r3, [pc, #364]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d0f0      	beq.n	8009588 <HAL_RCC_OscConfig+0xc0>
 80095a6:	e014      	b.n	80095d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095a8:	f7fc fd10 	bl	8005fcc <HAL_GetTick>
 80095ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80095ae:	e008      	b.n	80095c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80095b0:	f7fc fd0c 	bl	8005fcc <HAL_GetTick>
 80095b4:	4602      	mov	r2, r0
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	1ad3      	subs	r3, r2, r3
 80095ba:	2b64      	cmp	r3, #100	; 0x64
 80095bc:	d901      	bls.n	80095c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80095be:	2303      	movs	r3, #3
 80095c0:	e1f3      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80095c2:	4b51      	ldr	r3, [pc, #324]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1f0      	bne.n	80095b0 <HAL_RCC_OscConfig+0xe8>
 80095ce:	e000      	b.n	80095d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80095d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 0302 	and.w	r3, r3, #2
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d063      	beq.n	80096a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80095de:	4b4a      	ldr	r3, [pc, #296]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	f003 030c 	and.w	r3, r3, #12
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00b      	beq.n	8009602 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80095ea:	4b47      	ldr	r3, [pc, #284]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80095f2:	2b08      	cmp	r3, #8
 80095f4:	d11c      	bne.n	8009630 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80095f6:	4b44      	ldr	r3, [pc, #272]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d116      	bne.n	8009630 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009602:	4b41      	ldr	r3, [pc, #260]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f003 0302 	and.w	r3, r3, #2
 800960a:	2b00      	cmp	r3, #0
 800960c:	d005      	beq.n	800961a <HAL_RCC_OscConfig+0x152>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	2b01      	cmp	r3, #1
 8009614:	d001      	beq.n	800961a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	e1c7      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800961a:	4b3b      	ldr	r3, [pc, #236]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	00db      	lsls	r3, r3, #3
 8009628:	4937      	ldr	r1, [pc, #220]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 800962a:	4313      	orrs	r3, r2
 800962c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800962e:	e03a      	b.n	80096a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d020      	beq.n	800967a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009638:	4b34      	ldr	r3, [pc, #208]	; (800970c <HAL_RCC_OscConfig+0x244>)
 800963a:	2201      	movs	r2, #1
 800963c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800963e:	f7fc fcc5 	bl	8005fcc <HAL_GetTick>
 8009642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009644:	e008      	b.n	8009658 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009646:	f7fc fcc1 	bl	8005fcc <HAL_GetTick>
 800964a:	4602      	mov	r2, r0
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	1ad3      	subs	r3, r2, r3
 8009650:	2b02      	cmp	r3, #2
 8009652:	d901      	bls.n	8009658 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009654:	2303      	movs	r3, #3
 8009656:	e1a8      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009658:	4b2b      	ldr	r3, [pc, #172]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f003 0302 	and.w	r3, r3, #2
 8009660:	2b00      	cmp	r3, #0
 8009662:	d0f0      	beq.n	8009646 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009664:	4b28      	ldr	r3, [pc, #160]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	691b      	ldr	r3, [r3, #16]
 8009670:	00db      	lsls	r3, r3, #3
 8009672:	4925      	ldr	r1, [pc, #148]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 8009674:	4313      	orrs	r3, r2
 8009676:	600b      	str	r3, [r1, #0]
 8009678:	e015      	b.n	80096a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800967a:	4b24      	ldr	r3, [pc, #144]	; (800970c <HAL_RCC_OscConfig+0x244>)
 800967c:	2200      	movs	r2, #0
 800967e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009680:	f7fc fca4 	bl	8005fcc <HAL_GetTick>
 8009684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009686:	e008      	b.n	800969a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009688:	f7fc fca0 	bl	8005fcc <HAL_GetTick>
 800968c:	4602      	mov	r2, r0
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	1ad3      	subs	r3, r2, r3
 8009692:	2b02      	cmp	r3, #2
 8009694:	d901      	bls.n	800969a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009696:	2303      	movs	r3, #3
 8009698:	e187      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800969a:	4b1b      	ldr	r3, [pc, #108]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f003 0302 	and.w	r3, r3, #2
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d1f0      	bne.n	8009688 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f003 0308 	and.w	r3, r3, #8
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d036      	beq.n	8009720 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	695b      	ldr	r3, [r3, #20]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d016      	beq.n	80096e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80096ba:	4b15      	ldr	r3, [pc, #84]	; (8009710 <HAL_RCC_OscConfig+0x248>)
 80096bc:	2201      	movs	r2, #1
 80096be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096c0:	f7fc fc84 	bl	8005fcc <HAL_GetTick>
 80096c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80096c6:	e008      	b.n	80096da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80096c8:	f7fc fc80 	bl	8005fcc <HAL_GetTick>
 80096cc:	4602      	mov	r2, r0
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	1ad3      	subs	r3, r2, r3
 80096d2:	2b02      	cmp	r3, #2
 80096d4:	d901      	bls.n	80096da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80096d6:	2303      	movs	r3, #3
 80096d8:	e167      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80096da:	4b0b      	ldr	r3, [pc, #44]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 80096dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096de:	f003 0302 	and.w	r3, r3, #2
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d0f0      	beq.n	80096c8 <HAL_RCC_OscConfig+0x200>
 80096e6:	e01b      	b.n	8009720 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80096e8:	4b09      	ldr	r3, [pc, #36]	; (8009710 <HAL_RCC_OscConfig+0x248>)
 80096ea:	2200      	movs	r2, #0
 80096ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80096ee:	f7fc fc6d 	bl	8005fcc <HAL_GetTick>
 80096f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80096f4:	e00e      	b.n	8009714 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80096f6:	f7fc fc69 	bl	8005fcc <HAL_GetTick>
 80096fa:	4602      	mov	r2, r0
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	1ad3      	subs	r3, r2, r3
 8009700:	2b02      	cmp	r3, #2
 8009702:	d907      	bls.n	8009714 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009704:	2303      	movs	r3, #3
 8009706:	e150      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
 8009708:	40023800 	.word	0x40023800
 800970c:	42470000 	.word	0x42470000
 8009710:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009714:	4b88      	ldr	r3, [pc, #544]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 8009716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009718:	f003 0302 	and.w	r3, r3, #2
 800971c:	2b00      	cmp	r3, #0
 800971e:	d1ea      	bne.n	80096f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f003 0304 	and.w	r3, r3, #4
 8009728:	2b00      	cmp	r3, #0
 800972a:	f000 8097 	beq.w	800985c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800972e:	2300      	movs	r3, #0
 8009730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009732:	4b81      	ldr	r3, [pc, #516]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 8009734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800973a:	2b00      	cmp	r3, #0
 800973c:	d10f      	bne.n	800975e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800973e:	2300      	movs	r3, #0
 8009740:	60bb      	str	r3, [r7, #8]
 8009742:	4b7d      	ldr	r3, [pc, #500]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 8009744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009746:	4a7c      	ldr	r2, [pc, #496]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 8009748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800974c:	6413      	str	r3, [r2, #64]	; 0x40
 800974e:	4b7a      	ldr	r3, [pc, #488]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 8009750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009756:	60bb      	str	r3, [r7, #8]
 8009758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800975a:	2301      	movs	r3, #1
 800975c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800975e:	4b77      	ldr	r3, [pc, #476]	; (800993c <HAL_RCC_OscConfig+0x474>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009766:	2b00      	cmp	r3, #0
 8009768:	d118      	bne.n	800979c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800976a:	4b74      	ldr	r3, [pc, #464]	; (800993c <HAL_RCC_OscConfig+0x474>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a73      	ldr	r2, [pc, #460]	; (800993c <HAL_RCC_OscConfig+0x474>)
 8009770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009776:	f7fc fc29 	bl	8005fcc <HAL_GetTick>
 800977a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800977c:	e008      	b.n	8009790 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800977e:	f7fc fc25 	bl	8005fcc <HAL_GetTick>
 8009782:	4602      	mov	r2, r0
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	1ad3      	subs	r3, r2, r3
 8009788:	2b02      	cmp	r3, #2
 800978a:	d901      	bls.n	8009790 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800978c:	2303      	movs	r3, #3
 800978e:	e10c      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009790:	4b6a      	ldr	r3, [pc, #424]	; (800993c <HAL_RCC_OscConfig+0x474>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009798:	2b00      	cmp	r3, #0
 800979a:	d0f0      	beq.n	800977e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d106      	bne.n	80097b2 <HAL_RCC_OscConfig+0x2ea>
 80097a4:	4b64      	ldr	r3, [pc, #400]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 80097a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097a8:	4a63      	ldr	r2, [pc, #396]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 80097aa:	f043 0301 	orr.w	r3, r3, #1
 80097ae:	6713      	str	r3, [r2, #112]	; 0x70
 80097b0:	e01c      	b.n	80097ec <HAL_RCC_OscConfig+0x324>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	2b05      	cmp	r3, #5
 80097b8:	d10c      	bne.n	80097d4 <HAL_RCC_OscConfig+0x30c>
 80097ba:	4b5f      	ldr	r3, [pc, #380]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 80097bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097be:	4a5e      	ldr	r2, [pc, #376]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 80097c0:	f043 0304 	orr.w	r3, r3, #4
 80097c4:	6713      	str	r3, [r2, #112]	; 0x70
 80097c6:	4b5c      	ldr	r3, [pc, #368]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 80097c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ca:	4a5b      	ldr	r2, [pc, #364]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 80097cc:	f043 0301 	orr.w	r3, r3, #1
 80097d0:	6713      	str	r3, [r2, #112]	; 0x70
 80097d2:	e00b      	b.n	80097ec <HAL_RCC_OscConfig+0x324>
 80097d4:	4b58      	ldr	r3, [pc, #352]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 80097d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097d8:	4a57      	ldr	r2, [pc, #348]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 80097da:	f023 0301 	bic.w	r3, r3, #1
 80097de:	6713      	str	r3, [r2, #112]	; 0x70
 80097e0:	4b55      	ldr	r3, [pc, #340]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 80097e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097e4:	4a54      	ldr	r2, [pc, #336]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 80097e6:	f023 0304 	bic.w	r3, r3, #4
 80097ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d015      	beq.n	8009820 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097f4:	f7fc fbea 	bl	8005fcc <HAL_GetTick>
 80097f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097fa:	e00a      	b.n	8009812 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80097fc:	f7fc fbe6 	bl	8005fcc <HAL_GetTick>
 8009800:	4602      	mov	r2, r0
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	1ad3      	subs	r3, r2, r3
 8009806:	f241 3288 	movw	r2, #5000	; 0x1388
 800980a:	4293      	cmp	r3, r2
 800980c:	d901      	bls.n	8009812 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800980e:	2303      	movs	r3, #3
 8009810:	e0cb      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009812:	4b49      	ldr	r3, [pc, #292]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 8009814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009816:	f003 0302 	and.w	r3, r3, #2
 800981a:	2b00      	cmp	r3, #0
 800981c:	d0ee      	beq.n	80097fc <HAL_RCC_OscConfig+0x334>
 800981e:	e014      	b.n	800984a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009820:	f7fc fbd4 	bl	8005fcc <HAL_GetTick>
 8009824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009826:	e00a      	b.n	800983e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009828:	f7fc fbd0 	bl	8005fcc <HAL_GetTick>
 800982c:	4602      	mov	r2, r0
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	1ad3      	subs	r3, r2, r3
 8009832:	f241 3288 	movw	r2, #5000	; 0x1388
 8009836:	4293      	cmp	r3, r2
 8009838:	d901      	bls.n	800983e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800983a:	2303      	movs	r3, #3
 800983c:	e0b5      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800983e:	4b3e      	ldr	r3, [pc, #248]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 8009840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009842:	f003 0302 	and.w	r3, r3, #2
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1ee      	bne.n	8009828 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800984a:	7dfb      	ldrb	r3, [r7, #23]
 800984c:	2b01      	cmp	r3, #1
 800984e:	d105      	bne.n	800985c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009850:	4b39      	ldr	r3, [pc, #228]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 8009852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009854:	4a38      	ldr	r2, [pc, #224]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 8009856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800985a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	699b      	ldr	r3, [r3, #24]
 8009860:	2b00      	cmp	r3, #0
 8009862:	f000 80a1 	beq.w	80099a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009866:	4b34      	ldr	r3, [pc, #208]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	f003 030c 	and.w	r3, r3, #12
 800986e:	2b08      	cmp	r3, #8
 8009870:	d05c      	beq.n	800992c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	699b      	ldr	r3, [r3, #24]
 8009876:	2b02      	cmp	r3, #2
 8009878:	d141      	bne.n	80098fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800987a:	4b31      	ldr	r3, [pc, #196]	; (8009940 <HAL_RCC_OscConfig+0x478>)
 800987c:	2200      	movs	r2, #0
 800987e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009880:	f7fc fba4 	bl	8005fcc <HAL_GetTick>
 8009884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009886:	e008      	b.n	800989a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009888:	f7fc fba0 	bl	8005fcc <HAL_GetTick>
 800988c:	4602      	mov	r2, r0
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	1ad3      	subs	r3, r2, r3
 8009892:	2b02      	cmp	r3, #2
 8009894:	d901      	bls.n	800989a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009896:	2303      	movs	r3, #3
 8009898:	e087      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800989a:	4b27      	ldr	r3, [pc, #156]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d1f0      	bne.n	8009888 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	69da      	ldr	r2, [r3, #28]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a1b      	ldr	r3, [r3, #32]
 80098ae:	431a      	orrs	r2, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b4:	019b      	lsls	r3, r3, #6
 80098b6:	431a      	orrs	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098bc:	085b      	lsrs	r3, r3, #1
 80098be:	3b01      	subs	r3, #1
 80098c0:	041b      	lsls	r3, r3, #16
 80098c2:	431a      	orrs	r2, r3
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c8:	061b      	lsls	r3, r3, #24
 80098ca:	491b      	ldr	r1, [pc, #108]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 80098cc:	4313      	orrs	r3, r2
 80098ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80098d0:	4b1b      	ldr	r3, [pc, #108]	; (8009940 <HAL_RCC_OscConfig+0x478>)
 80098d2:	2201      	movs	r2, #1
 80098d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098d6:	f7fc fb79 	bl	8005fcc <HAL_GetTick>
 80098da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80098dc:	e008      	b.n	80098f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80098de:	f7fc fb75 	bl	8005fcc <HAL_GetTick>
 80098e2:	4602      	mov	r2, r0
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	1ad3      	subs	r3, r2, r3
 80098e8:	2b02      	cmp	r3, #2
 80098ea:	d901      	bls.n	80098f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80098ec:	2303      	movs	r3, #3
 80098ee:	e05c      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80098f0:	4b11      	ldr	r3, [pc, #68]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d0f0      	beq.n	80098de <HAL_RCC_OscConfig+0x416>
 80098fc:	e054      	b.n	80099a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098fe:	4b10      	ldr	r3, [pc, #64]	; (8009940 <HAL_RCC_OscConfig+0x478>)
 8009900:	2200      	movs	r2, #0
 8009902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009904:	f7fc fb62 	bl	8005fcc <HAL_GetTick>
 8009908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800990a:	e008      	b.n	800991e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800990c:	f7fc fb5e 	bl	8005fcc <HAL_GetTick>
 8009910:	4602      	mov	r2, r0
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	1ad3      	subs	r3, r2, r3
 8009916:	2b02      	cmp	r3, #2
 8009918:	d901      	bls.n	800991e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800991a:	2303      	movs	r3, #3
 800991c:	e045      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800991e:	4b06      	ldr	r3, [pc, #24]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1f0      	bne.n	800990c <HAL_RCC_OscConfig+0x444>
 800992a:	e03d      	b.n	80099a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	699b      	ldr	r3, [r3, #24]
 8009930:	2b01      	cmp	r3, #1
 8009932:	d107      	bne.n	8009944 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009934:	2301      	movs	r3, #1
 8009936:	e038      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
 8009938:	40023800 	.word	0x40023800
 800993c:	40007000 	.word	0x40007000
 8009940:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009944:	4b1b      	ldr	r3, [pc, #108]	; (80099b4 <HAL_RCC_OscConfig+0x4ec>)
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	699b      	ldr	r3, [r3, #24]
 800994e:	2b01      	cmp	r3, #1
 8009950:	d028      	beq.n	80099a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800995c:	429a      	cmp	r2, r3
 800995e:	d121      	bne.n	80099a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800996a:	429a      	cmp	r2, r3
 800996c:	d11a      	bne.n	80099a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009974:	4013      	ands	r3, r2
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800997a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800997c:	4293      	cmp	r3, r2
 800997e:	d111      	bne.n	80099a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800998a:	085b      	lsrs	r3, r3, #1
 800998c:	3b01      	subs	r3, #1
 800998e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009990:	429a      	cmp	r2, r3
 8009992:	d107      	bne.n	80099a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800999e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d001      	beq.n	80099a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80099a4:	2301      	movs	r3, #1
 80099a6:	e000      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3718      	adds	r7, #24
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	40023800 	.word	0x40023800

080099b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d101      	bne.n	80099cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80099c8:	2301      	movs	r3, #1
 80099ca:	e0cc      	b.n	8009b66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80099cc:	4b68      	ldr	r3, [pc, #416]	; (8009b70 <HAL_RCC_ClockConfig+0x1b8>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f003 0307 	and.w	r3, r3, #7
 80099d4:	683a      	ldr	r2, [r7, #0]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d90c      	bls.n	80099f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099da:	4b65      	ldr	r3, [pc, #404]	; (8009b70 <HAL_RCC_ClockConfig+0x1b8>)
 80099dc:	683a      	ldr	r2, [r7, #0]
 80099de:	b2d2      	uxtb	r2, r2
 80099e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80099e2:	4b63      	ldr	r3, [pc, #396]	; (8009b70 <HAL_RCC_ClockConfig+0x1b8>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f003 0307 	and.w	r3, r3, #7
 80099ea:	683a      	ldr	r2, [r7, #0]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d001      	beq.n	80099f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	e0b8      	b.n	8009b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f003 0302 	and.w	r3, r3, #2
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d020      	beq.n	8009a42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f003 0304 	and.w	r3, r3, #4
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d005      	beq.n	8009a18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009a0c:	4b59      	ldr	r3, [pc, #356]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	4a58      	ldr	r2, [pc, #352]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009a12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009a16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f003 0308 	and.w	r3, r3, #8
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d005      	beq.n	8009a30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009a24:	4b53      	ldr	r3, [pc, #332]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	4a52      	ldr	r2, [pc, #328]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009a2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009a2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a30:	4b50      	ldr	r3, [pc, #320]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	494d      	ldr	r1, [pc, #308]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f003 0301 	and.w	r3, r3, #1
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d044      	beq.n	8009ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d107      	bne.n	8009a66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a56:	4b47      	ldr	r3, [pc, #284]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d119      	bne.n	8009a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	e07f      	b.n	8009b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d003      	beq.n	8009a76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009a72:	2b03      	cmp	r3, #3
 8009a74:	d107      	bne.n	8009a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a76:	4b3f      	ldr	r3, [pc, #252]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d109      	bne.n	8009a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	e06f      	b.n	8009b66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a86:	4b3b      	ldr	r3, [pc, #236]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f003 0302 	and.w	r3, r3, #2
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d101      	bne.n	8009a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	e067      	b.n	8009b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009a96:	4b37      	ldr	r3, [pc, #220]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	f023 0203 	bic.w	r2, r3, #3
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	4934      	ldr	r1, [pc, #208]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009aa8:	f7fc fa90 	bl	8005fcc <HAL_GetTick>
 8009aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009aae:	e00a      	b.n	8009ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ab0:	f7fc fa8c 	bl	8005fcc <HAL_GetTick>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	1ad3      	subs	r3, r2, r3
 8009aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d901      	bls.n	8009ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009ac2:	2303      	movs	r3, #3
 8009ac4:	e04f      	b.n	8009b66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ac6:	4b2b      	ldr	r3, [pc, #172]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	f003 020c 	and.w	r2, r3, #12
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d1eb      	bne.n	8009ab0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009ad8:	4b25      	ldr	r3, [pc, #148]	; (8009b70 <HAL_RCC_ClockConfig+0x1b8>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f003 0307 	and.w	r3, r3, #7
 8009ae0:	683a      	ldr	r2, [r7, #0]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d20c      	bcs.n	8009b00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ae6:	4b22      	ldr	r3, [pc, #136]	; (8009b70 <HAL_RCC_ClockConfig+0x1b8>)
 8009ae8:	683a      	ldr	r2, [r7, #0]
 8009aea:	b2d2      	uxtb	r2, r2
 8009aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009aee:	4b20      	ldr	r3, [pc, #128]	; (8009b70 <HAL_RCC_ClockConfig+0x1b8>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f003 0307 	and.w	r3, r3, #7
 8009af6:	683a      	ldr	r2, [r7, #0]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d001      	beq.n	8009b00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009afc:	2301      	movs	r3, #1
 8009afe:	e032      	b.n	8009b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f003 0304 	and.w	r3, r3, #4
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d008      	beq.n	8009b1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009b0c:	4b19      	ldr	r3, [pc, #100]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	4916      	ldr	r1, [pc, #88]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f003 0308 	and.w	r3, r3, #8
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d009      	beq.n	8009b3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009b2a:	4b12      	ldr	r3, [pc, #72]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	00db      	lsls	r3, r3, #3
 8009b38:	490e      	ldr	r1, [pc, #56]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009b3e:	f000 f821 	bl	8009b84 <HAL_RCC_GetSysClockFreq>
 8009b42:	4602      	mov	r2, r0
 8009b44:	4b0b      	ldr	r3, [pc, #44]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	091b      	lsrs	r3, r3, #4
 8009b4a:	f003 030f 	and.w	r3, r3, #15
 8009b4e:	490a      	ldr	r1, [pc, #40]	; (8009b78 <HAL_RCC_ClockConfig+0x1c0>)
 8009b50:	5ccb      	ldrb	r3, [r1, r3]
 8009b52:	fa22 f303 	lsr.w	r3, r2, r3
 8009b56:	4a09      	ldr	r2, [pc, #36]	; (8009b7c <HAL_RCC_ClockConfig+0x1c4>)
 8009b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009b5a:	4b09      	ldr	r3, [pc, #36]	; (8009b80 <HAL_RCC_ClockConfig+0x1c8>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7fc f9f0 	bl	8005f44 <HAL_InitTick>

  return HAL_OK;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3710      	adds	r7, #16
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	40023c00 	.word	0x40023c00
 8009b74:	40023800 	.word	0x40023800
 8009b78:	0800f434 	.word	0x0800f434
 8009b7c:	20000234 	.word	0x20000234
 8009b80:	20000238 	.word	0x20000238

08009b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b88:	b094      	sub	sp, #80	; 0x50
 8009b8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	647b      	str	r3, [r7, #68]	; 0x44
 8009b90:	2300      	movs	r3, #0
 8009b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b94:	2300      	movs	r3, #0
 8009b96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009b9c:	4b79      	ldr	r3, [pc, #484]	; (8009d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	f003 030c 	and.w	r3, r3, #12
 8009ba4:	2b08      	cmp	r3, #8
 8009ba6:	d00d      	beq.n	8009bc4 <HAL_RCC_GetSysClockFreq+0x40>
 8009ba8:	2b08      	cmp	r3, #8
 8009baa:	f200 80e1 	bhi.w	8009d70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d002      	beq.n	8009bb8 <HAL_RCC_GetSysClockFreq+0x34>
 8009bb2:	2b04      	cmp	r3, #4
 8009bb4:	d003      	beq.n	8009bbe <HAL_RCC_GetSysClockFreq+0x3a>
 8009bb6:	e0db      	b.n	8009d70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009bb8:	4b73      	ldr	r3, [pc, #460]	; (8009d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8009bba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009bbc:	e0db      	b.n	8009d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009bbe:	4b73      	ldr	r3, [pc, #460]	; (8009d8c <HAL_RCC_GetSysClockFreq+0x208>)
 8009bc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009bc2:	e0d8      	b.n	8009d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009bc4:	4b6f      	ldr	r3, [pc, #444]	; (8009d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009bcc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009bce:	4b6d      	ldr	r3, [pc, #436]	; (8009d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d063      	beq.n	8009ca2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009bda:	4b6a      	ldr	r3, [pc, #424]	; (8009d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	099b      	lsrs	r3, r3, #6
 8009be0:	2200      	movs	r2, #0
 8009be2:	63bb      	str	r3, [r7, #56]	; 0x38
 8009be4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bec:	633b      	str	r3, [r7, #48]	; 0x30
 8009bee:	2300      	movs	r3, #0
 8009bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8009bf2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009bf6:	4622      	mov	r2, r4
 8009bf8:	462b      	mov	r3, r5
 8009bfa:	f04f 0000 	mov.w	r0, #0
 8009bfe:	f04f 0100 	mov.w	r1, #0
 8009c02:	0159      	lsls	r1, r3, #5
 8009c04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009c08:	0150      	lsls	r0, r2, #5
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	4621      	mov	r1, r4
 8009c10:	1a51      	subs	r1, r2, r1
 8009c12:	6139      	str	r1, [r7, #16]
 8009c14:	4629      	mov	r1, r5
 8009c16:	eb63 0301 	sbc.w	r3, r3, r1
 8009c1a:	617b      	str	r3, [r7, #20]
 8009c1c:	f04f 0200 	mov.w	r2, #0
 8009c20:	f04f 0300 	mov.w	r3, #0
 8009c24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009c28:	4659      	mov	r1, fp
 8009c2a:	018b      	lsls	r3, r1, #6
 8009c2c:	4651      	mov	r1, sl
 8009c2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009c32:	4651      	mov	r1, sl
 8009c34:	018a      	lsls	r2, r1, #6
 8009c36:	4651      	mov	r1, sl
 8009c38:	ebb2 0801 	subs.w	r8, r2, r1
 8009c3c:	4659      	mov	r1, fp
 8009c3e:	eb63 0901 	sbc.w	r9, r3, r1
 8009c42:	f04f 0200 	mov.w	r2, #0
 8009c46:	f04f 0300 	mov.w	r3, #0
 8009c4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009c4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009c52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009c56:	4690      	mov	r8, r2
 8009c58:	4699      	mov	r9, r3
 8009c5a:	4623      	mov	r3, r4
 8009c5c:	eb18 0303 	adds.w	r3, r8, r3
 8009c60:	60bb      	str	r3, [r7, #8]
 8009c62:	462b      	mov	r3, r5
 8009c64:	eb49 0303 	adc.w	r3, r9, r3
 8009c68:	60fb      	str	r3, [r7, #12]
 8009c6a:	f04f 0200 	mov.w	r2, #0
 8009c6e:	f04f 0300 	mov.w	r3, #0
 8009c72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009c76:	4629      	mov	r1, r5
 8009c78:	024b      	lsls	r3, r1, #9
 8009c7a:	4621      	mov	r1, r4
 8009c7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009c80:	4621      	mov	r1, r4
 8009c82:	024a      	lsls	r2, r1, #9
 8009c84:	4610      	mov	r0, r2
 8009c86:	4619      	mov	r1, r3
 8009c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c94:	f7f6 ffa4 	bl	8000be0 <__aeabi_uldivmod>
 8009c98:	4602      	mov	r2, r0
 8009c9a:	460b      	mov	r3, r1
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ca0:	e058      	b.n	8009d54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009ca2:	4b38      	ldr	r3, [pc, #224]	; (8009d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	099b      	lsrs	r3, r3, #6
 8009ca8:	2200      	movs	r2, #0
 8009caa:	4618      	mov	r0, r3
 8009cac:	4611      	mov	r1, r2
 8009cae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009cb2:	623b      	str	r3, [r7, #32]
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8009cb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009cbc:	4642      	mov	r2, r8
 8009cbe:	464b      	mov	r3, r9
 8009cc0:	f04f 0000 	mov.w	r0, #0
 8009cc4:	f04f 0100 	mov.w	r1, #0
 8009cc8:	0159      	lsls	r1, r3, #5
 8009cca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009cce:	0150      	lsls	r0, r2, #5
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	4641      	mov	r1, r8
 8009cd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8009cda:	4649      	mov	r1, r9
 8009cdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8009ce0:	f04f 0200 	mov.w	r2, #0
 8009ce4:	f04f 0300 	mov.w	r3, #0
 8009ce8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009cec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009cf0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009cf4:	ebb2 040a 	subs.w	r4, r2, sl
 8009cf8:	eb63 050b 	sbc.w	r5, r3, fp
 8009cfc:	f04f 0200 	mov.w	r2, #0
 8009d00:	f04f 0300 	mov.w	r3, #0
 8009d04:	00eb      	lsls	r3, r5, #3
 8009d06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009d0a:	00e2      	lsls	r2, r4, #3
 8009d0c:	4614      	mov	r4, r2
 8009d0e:	461d      	mov	r5, r3
 8009d10:	4643      	mov	r3, r8
 8009d12:	18e3      	adds	r3, r4, r3
 8009d14:	603b      	str	r3, [r7, #0]
 8009d16:	464b      	mov	r3, r9
 8009d18:	eb45 0303 	adc.w	r3, r5, r3
 8009d1c:	607b      	str	r3, [r7, #4]
 8009d1e:	f04f 0200 	mov.w	r2, #0
 8009d22:	f04f 0300 	mov.w	r3, #0
 8009d26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009d2a:	4629      	mov	r1, r5
 8009d2c:	028b      	lsls	r3, r1, #10
 8009d2e:	4621      	mov	r1, r4
 8009d30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009d34:	4621      	mov	r1, r4
 8009d36:	028a      	lsls	r2, r1, #10
 8009d38:	4610      	mov	r0, r2
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d3e:	2200      	movs	r2, #0
 8009d40:	61bb      	str	r3, [r7, #24]
 8009d42:	61fa      	str	r2, [r7, #28]
 8009d44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009d48:	f7f6 ff4a 	bl	8000be0 <__aeabi_uldivmod>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	460b      	mov	r3, r1
 8009d50:	4613      	mov	r3, r2
 8009d52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009d54:	4b0b      	ldr	r3, [pc, #44]	; (8009d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	0c1b      	lsrs	r3, r3, #16
 8009d5a:	f003 0303 	and.w	r3, r3, #3
 8009d5e:	3301      	adds	r3, #1
 8009d60:	005b      	lsls	r3, r3, #1
 8009d62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009d64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009d6e:	e002      	b.n	8009d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009d70:	4b05      	ldr	r3, [pc, #20]	; (8009d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8009d72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3750      	adds	r7, #80	; 0x50
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d82:	bf00      	nop
 8009d84:	40023800 	.word	0x40023800
 8009d88:	00f42400 	.word	0x00f42400
 8009d8c:	007a1200 	.word	0x007a1200

08009d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d90:	b480      	push	{r7}
 8009d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009d94:	4b03      	ldr	r3, [pc, #12]	; (8009da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009d96:	681b      	ldr	r3, [r3, #0]
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr
 8009da2:	bf00      	nop
 8009da4:	20000234 	.word	0x20000234

08009da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009dac:	f7ff fff0 	bl	8009d90 <HAL_RCC_GetHCLKFreq>
 8009db0:	4602      	mov	r2, r0
 8009db2:	4b05      	ldr	r3, [pc, #20]	; (8009dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	0a9b      	lsrs	r3, r3, #10
 8009db8:	f003 0307 	and.w	r3, r3, #7
 8009dbc:	4903      	ldr	r1, [pc, #12]	; (8009dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8009dbe:	5ccb      	ldrb	r3, [r1, r3]
 8009dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	40023800 	.word	0x40023800
 8009dcc:	0800f444 	.word	0x0800f444

08009dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009dd4:	f7ff ffdc 	bl	8009d90 <HAL_RCC_GetHCLKFreq>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	4b05      	ldr	r3, [pc, #20]	; (8009df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	0b5b      	lsrs	r3, r3, #13
 8009de0:	f003 0307 	and.w	r3, r3, #7
 8009de4:	4903      	ldr	r1, [pc, #12]	; (8009df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009de6:	5ccb      	ldrb	r3, [r1, r3]
 8009de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	40023800 	.word	0x40023800
 8009df4:	0800f444 	.word	0x0800f444

08009df8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d101      	bne.n	8009e0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e06:	2301      	movs	r3, #1
 8009e08:	e04c      	b.n	8009ea4 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d111      	bne.n	8009e3a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f001 fbb2 	bl	800b588 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d102      	bne.n	8009e32 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	4a1f      	ldr	r2, [pc, #124]	; (8009eac <HAL_TIM_Base_Init+0xb4>)
 8009e30:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2202      	movs	r2, #2
 8009e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	3304      	adds	r3, #4
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	4610      	mov	r0, r2
 8009e4e:	f001 f8cf 	bl	800aff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2201      	movs	r2, #1
 8009e56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2201      	movs	r2, #1
 8009e66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2201      	movs	r2, #1
 8009e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2201      	movs	r2, #1
 8009e86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2201      	movs	r2, #1
 8009e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3708      	adds	r7, #8
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	08004db1 	.word	0x08004db1

08009eb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b085      	sub	sp, #20
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d001      	beq.n	8009ec8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	e044      	b.n	8009f52 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2202      	movs	r2, #2
 8009ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	68da      	ldr	r2, [r3, #12]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f042 0201 	orr.w	r2, r2, #1
 8009ede:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a1e      	ldr	r2, [pc, #120]	; (8009f60 <HAL_TIM_Base_Start_IT+0xb0>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d018      	beq.n	8009f1c <HAL_TIM_Base_Start_IT+0x6c>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ef2:	d013      	beq.n	8009f1c <HAL_TIM_Base_Start_IT+0x6c>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a1a      	ldr	r2, [pc, #104]	; (8009f64 <HAL_TIM_Base_Start_IT+0xb4>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d00e      	beq.n	8009f1c <HAL_TIM_Base_Start_IT+0x6c>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4a19      	ldr	r2, [pc, #100]	; (8009f68 <HAL_TIM_Base_Start_IT+0xb8>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d009      	beq.n	8009f1c <HAL_TIM_Base_Start_IT+0x6c>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a17      	ldr	r2, [pc, #92]	; (8009f6c <HAL_TIM_Base_Start_IT+0xbc>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d004      	beq.n	8009f1c <HAL_TIM_Base_Start_IT+0x6c>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a16      	ldr	r2, [pc, #88]	; (8009f70 <HAL_TIM_Base_Start_IT+0xc0>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d111      	bne.n	8009f40 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	f003 0307 	and.w	r3, r3, #7
 8009f26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2b06      	cmp	r3, #6
 8009f2c:	d010      	beq.n	8009f50 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f042 0201 	orr.w	r2, r2, #1
 8009f3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f3e:	e007      	b.n	8009f50 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f042 0201 	orr.w	r2, r2, #1
 8009f4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009f50:	2300      	movs	r3, #0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3714      	adds	r7, #20
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop
 8009f60:	40010000 	.word	0x40010000
 8009f64:	40000400 	.word	0x40000400
 8009f68:	40000800 	.word	0x40000800
 8009f6c:	40000c00 	.word	0x40000c00
 8009f70:	40014000 	.word	0x40014000

08009f74 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d101      	bne.n	8009f86 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	e04c      	b.n	800a020 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d111      	bne.n	8009fb6 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f001 faf4 	bl	800b588 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d102      	bne.n	8009fae <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	4a1f      	ldr	r2, [pc, #124]	; (800a028 <HAL_TIM_OC_Init+0xb4>)
 8009fac:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2202      	movs	r2, #2
 8009fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	3304      	adds	r3, #4
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	4610      	mov	r0, r2
 8009fca:	f001 f811 	bl	800aff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2201      	movs	r2, #1
 8009fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2201      	movs	r2, #1
 800a002:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2201      	movs	r2, #1
 800a00a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2201      	movs	r2, #1
 800a012:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2201      	movs	r2, #1
 800a01a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a01e:	2300      	movs	r3, #0
}
 800a020:	4618      	mov	r0, r3
 800a022:	3708      	adds	r7, #8
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	0800a02d 	.word	0x0800a02d

0800a02c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b083      	sub	sp, #12
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a034:	bf00      	nop
 800a036:	370c      	adds	r7, #12
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d101      	bne.n	800a052 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	e04c      	b.n	800a0ec <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d111      	bne.n	800a082 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2200      	movs	r2, #0
 800a062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f001 fa8e 	bl	800b588 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a070:	2b00      	cmp	r3, #0
 800a072:	d102      	bne.n	800a07a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	4a1f      	ldr	r2, [pc, #124]	; (800a0f4 <HAL_TIM_PWM_Init+0xb4>)
 800a078:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2202      	movs	r2, #2
 800a086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	3304      	adds	r3, #4
 800a092:	4619      	mov	r1, r3
 800a094:	4610      	mov	r0, r2
 800a096:	f000 ffab 	bl	800aff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2201      	movs	r2, #1
 800a09e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a0ea:	2300      	movs	r3, #0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3708      	adds	r7, #8
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}
 800a0f4:	0800a0f9 	.word	0x0800a0f9

0800a0f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a100:	bf00      	nop
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d109      	bne.n	800a130 <HAL_TIM_PWM_Start+0x24>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a122:	b2db      	uxtb	r3, r3
 800a124:	2b01      	cmp	r3, #1
 800a126:	bf14      	ite	ne
 800a128:	2301      	movne	r3, #1
 800a12a:	2300      	moveq	r3, #0
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	e022      	b.n	800a176 <HAL_TIM_PWM_Start+0x6a>
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	2b04      	cmp	r3, #4
 800a134:	d109      	bne.n	800a14a <HAL_TIM_PWM_Start+0x3e>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	2b01      	cmp	r3, #1
 800a140:	bf14      	ite	ne
 800a142:	2301      	movne	r3, #1
 800a144:	2300      	moveq	r3, #0
 800a146:	b2db      	uxtb	r3, r3
 800a148:	e015      	b.n	800a176 <HAL_TIM_PWM_Start+0x6a>
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	2b08      	cmp	r3, #8
 800a14e:	d109      	bne.n	800a164 <HAL_TIM_PWM_Start+0x58>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a156:	b2db      	uxtb	r3, r3
 800a158:	2b01      	cmp	r3, #1
 800a15a:	bf14      	ite	ne
 800a15c:	2301      	movne	r3, #1
 800a15e:	2300      	moveq	r3, #0
 800a160:	b2db      	uxtb	r3, r3
 800a162:	e008      	b.n	800a176 <HAL_TIM_PWM_Start+0x6a>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	bf14      	ite	ne
 800a170:	2301      	movne	r3, #1
 800a172:	2300      	moveq	r3, #0
 800a174:	b2db      	uxtb	r3, r3
 800a176:	2b00      	cmp	r3, #0
 800a178:	d001      	beq.n	800a17e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	e068      	b.n	800a250 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d104      	bne.n	800a18e <HAL_TIM_PWM_Start+0x82>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2202      	movs	r2, #2
 800a188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a18c:	e013      	b.n	800a1b6 <HAL_TIM_PWM_Start+0xaa>
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	2b04      	cmp	r3, #4
 800a192:	d104      	bne.n	800a19e <HAL_TIM_PWM_Start+0x92>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2202      	movs	r2, #2
 800a198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a19c:	e00b      	b.n	800a1b6 <HAL_TIM_PWM_Start+0xaa>
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	2b08      	cmp	r3, #8
 800a1a2:	d104      	bne.n	800a1ae <HAL_TIM_PWM_Start+0xa2>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2202      	movs	r2, #2
 800a1a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a1ac:	e003      	b.n	800a1b6 <HAL_TIM_PWM_Start+0xaa>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2202      	movs	r2, #2
 800a1b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	6839      	ldr	r1, [r7, #0]
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f001 f9bc 	bl	800b53c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a23      	ldr	r2, [pc, #140]	; (800a258 <HAL_TIM_PWM_Start+0x14c>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d107      	bne.n	800a1de <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a1dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a1d      	ldr	r2, [pc, #116]	; (800a258 <HAL_TIM_PWM_Start+0x14c>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d018      	beq.n	800a21a <HAL_TIM_PWM_Start+0x10e>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1f0:	d013      	beq.n	800a21a <HAL_TIM_PWM_Start+0x10e>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a19      	ldr	r2, [pc, #100]	; (800a25c <HAL_TIM_PWM_Start+0x150>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d00e      	beq.n	800a21a <HAL_TIM_PWM_Start+0x10e>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a17      	ldr	r2, [pc, #92]	; (800a260 <HAL_TIM_PWM_Start+0x154>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d009      	beq.n	800a21a <HAL_TIM_PWM_Start+0x10e>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a16      	ldr	r2, [pc, #88]	; (800a264 <HAL_TIM_PWM_Start+0x158>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d004      	beq.n	800a21a <HAL_TIM_PWM_Start+0x10e>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a14      	ldr	r2, [pc, #80]	; (800a268 <HAL_TIM_PWM_Start+0x15c>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d111      	bne.n	800a23e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	f003 0307 	and.w	r3, r3, #7
 800a224:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2b06      	cmp	r3, #6
 800a22a:	d010      	beq.n	800a24e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f042 0201 	orr.w	r2, r2, #1
 800a23a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a23c:	e007      	b.n	800a24e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f042 0201 	orr.w	r2, r2, #1
 800a24c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a24e:	2300      	movs	r3, #0
}
 800a250:	4618      	mov	r0, r3
 800a252:	3710      	adds	r7, #16
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}
 800a258:	40010000 	.word	0x40010000
 800a25c:	40000400 	.word	0x40000400
 800a260:	40000800 	.word	0x40000800
 800a264:	40000c00 	.word	0x40000c00
 800a268:	40014000 	.word	0x40014000

0800a26c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d101      	bne.n	800a280 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800a27c:	2301      	movs	r3, #1
 800a27e:	e04c      	b.n	800a31a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a286:	b2db      	uxtb	r3, r3
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d111      	bne.n	800a2b0 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f001 f977 	bl	800b588 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d102      	bne.n	800a2a8 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	4a1f      	ldr	r2, [pc, #124]	; (800a324 <HAL_TIM_OnePulse_Init+0xb8>)
 800a2a6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2202      	movs	r2, #2
 800a2b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	3304      	adds	r3, #4
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	4610      	mov	r0, r2
 800a2c4:	f000 fe94 	bl	800aff0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f022 0208 	bic.w	r2, r2, #8
 800a2d6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	6819      	ldr	r1, [r3, #0]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	683a      	ldr	r2, [r7, #0]
 800a2e4:	430a      	orrs	r2, r1
 800a2e6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a318:	2300      	movs	r3, #0
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3708      	adds	r7, #8
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	0800a329 	.word	0x0800a329

0800a328 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800a330:	bf00      	nop
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a34c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a354:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a35c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a364:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a366:	7bfb      	ldrb	r3, [r7, #15]
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d108      	bne.n	800a37e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a36c:	7bbb      	ldrb	r3, [r7, #14]
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d105      	bne.n	800a37e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a372:	7b7b      	ldrb	r3, [r7, #13]
 800a374:	2b01      	cmp	r3, #1
 800a376:	d102      	bne.n	800a37e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a378:	7b3b      	ldrb	r3, [r7, #12]
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d001      	beq.n	800a382 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	e03b      	b.n	800a3fa <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2202      	movs	r2, #2
 800a386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2202      	movs	r2, #2
 800a38e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2202      	movs	r2, #2
 800a396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2202      	movs	r2, #2
 800a39e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	68da      	ldr	r2, [r3, #12]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f042 0202 	orr.w	r2, r2, #2
 800a3b0:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	68da      	ldr	r2, [r3, #12]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f042 0204 	orr.w	r2, r2, #4
 800a3c0:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	2100      	movs	r1, #0
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f001 f8b6 	bl	800b53c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	2104      	movs	r1, #4
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f001 f8af 	bl	800b53c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4a08      	ldr	r2, [pc, #32]	; (800a404 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d107      	bne.n	800a3f8 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a3f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	40010000 	.word	0x40010000

0800a408 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b086      	sub	sp, #24
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d101      	bne.n	800a41c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a418:	2301      	movs	r3, #1
 800a41a:	e0a2      	b.n	800a562 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a422:	b2db      	uxtb	r3, r3
 800a424:	2b00      	cmp	r3, #0
 800a426:	d111      	bne.n	800a44c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2200      	movs	r2, #0
 800a42c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f001 f8a9 	bl	800b588 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d102      	bne.n	800a444 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4a4a      	ldr	r2, [pc, #296]	; (800a56c <HAL_TIM_Encoder_Init+0x164>)
 800a442:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2202      	movs	r2, #2
 800a450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	6812      	ldr	r2, [r2, #0]
 800a45e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a462:	f023 0307 	bic.w	r3, r3, #7
 800a466:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	3304      	adds	r3, #4
 800a470:	4619      	mov	r1, r3
 800a472:	4610      	mov	r0, r2
 800a474:	f000 fdbc 	bl	800aff0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	699b      	ldr	r3, [r3, #24]
 800a486:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	6a1b      	ldr	r3, [r3, #32]
 800a48e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	697a      	ldr	r2, [r7, #20]
 800a496:	4313      	orrs	r3, r2
 800a498:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4a0:	f023 0303 	bic.w	r3, r3, #3
 800a4a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	689a      	ldr	r2, [r3, #8]
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	699b      	ldr	r3, [r3, #24]
 800a4ae:	021b      	lsls	r3, r3, #8
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	693a      	ldr	r2, [r7, #16]
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a4be:	f023 030c 	bic.w	r3, r3, #12
 800a4c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a4ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a4ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	68da      	ldr	r2, [r3, #12]
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	69db      	ldr	r3, [r3, #28]
 800a4d8:	021b      	lsls	r3, r3, #8
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	693a      	ldr	r2, [r7, #16]
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	691b      	ldr	r3, [r3, #16]
 800a4e6:	011a      	lsls	r2, r3, #4
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	6a1b      	ldr	r3, [r3, #32]
 800a4ec:	031b      	lsls	r3, r3, #12
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	693a      	ldr	r2, [r7, #16]
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a4fc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a504:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	685a      	ldr	r2, [r3, #4]
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	695b      	ldr	r3, [r3, #20]
 800a50e:	011b      	lsls	r3, r3, #4
 800a510:	4313      	orrs	r3, r2
 800a512:	68fa      	ldr	r2, [r7, #12]
 800a514:	4313      	orrs	r3, r2
 800a516:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	697a      	ldr	r2, [r7, #20]
 800a51e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	693a      	ldr	r2, [r7, #16]
 800a526:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	68fa      	ldr	r2, [r7, #12]
 800a52e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2201      	movs	r2, #1
 800a534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2201      	movs	r2, #1
 800a53c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2201      	movs	r2, #1
 800a544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2201      	movs	r2, #1
 800a54c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2201      	movs	r2, #1
 800a55c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a560:	2300      	movs	r3, #0
}
 800a562:	4618      	mov	r0, r3
 800a564:	3718      	adds	r7, #24
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	08004d15 	.word	0x08004d15

0800a570 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a580:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a588:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a590:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a598:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d110      	bne.n	800a5c2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a5a0:	7bfb      	ldrb	r3, [r7, #15]
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d102      	bne.n	800a5ac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a5a6:	7b7b      	ldrb	r3, [r7, #13]
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d001      	beq.n	800a5b0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	e069      	b.n	800a684 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2202      	movs	r2, #2
 800a5b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2202      	movs	r2, #2
 800a5bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a5c0:	e031      	b.n	800a626 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	2b04      	cmp	r3, #4
 800a5c6:	d110      	bne.n	800a5ea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a5c8:	7bbb      	ldrb	r3, [r7, #14]
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d102      	bne.n	800a5d4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a5ce:	7b3b      	ldrb	r3, [r7, #12]
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d001      	beq.n	800a5d8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	e055      	b.n	800a684 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2202      	movs	r2, #2
 800a5dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2202      	movs	r2, #2
 800a5e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a5e8:	e01d      	b.n	800a626 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a5ea:	7bfb      	ldrb	r3, [r7, #15]
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d108      	bne.n	800a602 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a5f0:	7bbb      	ldrb	r3, [r7, #14]
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d105      	bne.n	800a602 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a5f6:	7b7b      	ldrb	r3, [r7, #13]
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	d102      	bne.n	800a602 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a5fc:	7b3b      	ldrb	r3, [r7, #12]
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d001      	beq.n	800a606 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a602:	2301      	movs	r3, #1
 800a604:	e03e      	b.n	800a684 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2202      	movs	r2, #2
 800a60a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2202      	movs	r2, #2
 800a612:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2202      	movs	r2, #2
 800a61a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2202      	movs	r2, #2
 800a622:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d003      	beq.n	800a634 <HAL_TIM_Encoder_Start+0xc4>
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	2b04      	cmp	r3, #4
 800a630:	d008      	beq.n	800a644 <HAL_TIM_Encoder_Start+0xd4>
 800a632:	e00f      	b.n	800a654 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	2201      	movs	r2, #1
 800a63a:	2100      	movs	r1, #0
 800a63c:	4618      	mov	r0, r3
 800a63e:	f000 ff7d 	bl	800b53c <TIM_CCxChannelCmd>
      break;
 800a642:	e016      	b.n	800a672 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2201      	movs	r2, #1
 800a64a:	2104      	movs	r1, #4
 800a64c:	4618      	mov	r0, r3
 800a64e:	f000 ff75 	bl	800b53c <TIM_CCxChannelCmd>
      break;
 800a652:	e00e      	b.n	800a672 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2201      	movs	r2, #1
 800a65a:	2100      	movs	r1, #0
 800a65c:	4618      	mov	r0, r3
 800a65e:	f000 ff6d 	bl	800b53c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2201      	movs	r2, #1
 800a668:	2104      	movs	r1, #4
 800a66a:	4618      	mov	r0, r3
 800a66c:	f000 ff66 	bl	800b53c <TIM_CCxChannelCmd>
      break;
 800a670:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f042 0201 	orr.w	r2, r2, #1
 800a680:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a682:	2300      	movs	r3, #0
}
 800a684:	4618      	mov	r0, r3
 800a686:	3710      	adds	r7, #16
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	691b      	ldr	r3, [r3, #16]
 800a69a:	f003 0302 	and.w	r3, r3, #2
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	d128      	bne.n	800a6f4 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	f003 0302 	and.w	r3, r3, #2
 800a6ac:	2b02      	cmp	r3, #2
 800a6ae:	d121      	bne.n	800a6f4 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f06f 0202 	mvn.w	r2, #2
 800a6b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2201      	movs	r2, #1
 800a6be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	699b      	ldr	r3, [r3, #24]
 800a6c6:	f003 0303 	and.w	r3, r3, #3
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d005      	beq.n	800a6da <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	4798      	blx	r3
 800a6d8:	e009      	b.n	800a6ee <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	691b      	ldr	r3, [r3, #16]
 800a6fa:	f003 0304 	and.w	r3, r3, #4
 800a6fe:	2b04      	cmp	r3, #4
 800a700:	d128      	bne.n	800a754 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	f003 0304 	and.w	r3, r3, #4
 800a70c:	2b04      	cmp	r3, #4
 800a70e:	d121      	bne.n	800a754 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f06f 0204 	mvn.w	r2, #4
 800a718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2202      	movs	r2, #2
 800a71e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	699b      	ldr	r3, [r3, #24]
 800a726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d005      	beq.n	800a73a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	4798      	blx	r3
 800a738:	e009      	b.n	800a74e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	691b      	ldr	r3, [r3, #16]
 800a75a:	f003 0308 	and.w	r3, r3, #8
 800a75e:	2b08      	cmp	r3, #8
 800a760:	d128      	bne.n	800a7b4 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	68db      	ldr	r3, [r3, #12]
 800a768:	f003 0308 	and.w	r3, r3, #8
 800a76c:	2b08      	cmp	r3, #8
 800a76e:	d121      	bne.n	800a7b4 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f06f 0208 	mvn.w	r2, #8
 800a778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2204      	movs	r2, #4
 800a77e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	69db      	ldr	r3, [r3, #28]
 800a786:	f003 0303 	and.w	r3, r3, #3
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d005      	beq.n	800a79a <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	4798      	blx	r3
 800a798:	e009      	b.n	800a7ae <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	691b      	ldr	r3, [r3, #16]
 800a7ba:	f003 0310 	and.w	r3, r3, #16
 800a7be:	2b10      	cmp	r3, #16
 800a7c0:	d128      	bne.n	800a814 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	f003 0310 	and.w	r3, r3, #16
 800a7cc:	2b10      	cmp	r3, #16
 800a7ce:	d121      	bne.n	800a814 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f06f 0210 	mvn.w	r2, #16
 800a7d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2208      	movs	r2, #8
 800a7de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	69db      	ldr	r3, [r3, #28]
 800a7e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d005      	beq.n	800a7fa <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	4798      	blx	r3
 800a7f8:	e009      	b.n	800a80e <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2200      	movs	r2, #0
 800a812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	691b      	ldr	r3, [r3, #16]
 800a81a:	f003 0301 	and.w	r3, r3, #1
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d110      	bne.n	800a844 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	68db      	ldr	r3, [r3, #12]
 800a828:	f003 0301 	and.w	r3, r3, #1
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d109      	bne.n	800a844 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f06f 0201 	mvn.w	r2, #1
 800a838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	691b      	ldr	r3, [r3, #16]
 800a84a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a84e:	2b80      	cmp	r3, #128	; 0x80
 800a850:	d110      	bne.n	800a874 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a85c:	2b80      	cmp	r3, #128	; 0x80
 800a85e:	d109      	bne.n	800a874 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	691b      	ldr	r3, [r3, #16]
 800a87a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a87e:	2b40      	cmp	r3, #64	; 0x40
 800a880:	d110      	bne.n	800a8a4 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a88c:	2b40      	cmp	r3, #64	; 0x40
 800a88e:	d109      	bne.n	800a8a4 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	691b      	ldr	r3, [r3, #16]
 800a8aa:	f003 0320 	and.w	r3, r3, #32
 800a8ae:	2b20      	cmp	r3, #32
 800a8b0:	d110      	bne.n	800a8d4 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	f003 0320 	and.w	r3, r3, #32
 800a8bc:	2b20      	cmp	r3, #32
 800a8be:	d109      	bne.n	800a8d4 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f06f 0220 	mvn.w	r2, #32
 800a8c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a8d4:	bf00      	nop
 800a8d6:	3708      	adds	r7, #8
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b086      	sub	sp, #24
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d101      	bne.n	800a8fa <HAL_TIM_OC_ConfigChannel+0x1e>
 800a8f6:	2302      	movs	r3, #2
 800a8f8:	e048      	b.n	800a98c <HAL_TIM_OC_ConfigChannel+0xb0>
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2b0c      	cmp	r3, #12
 800a906:	d839      	bhi.n	800a97c <HAL_TIM_OC_ConfigChannel+0xa0>
 800a908:	a201      	add	r2, pc, #4	; (adr r2, 800a910 <HAL_TIM_OC_ConfigChannel+0x34>)
 800a90a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a90e:	bf00      	nop
 800a910:	0800a945 	.word	0x0800a945
 800a914:	0800a97d 	.word	0x0800a97d
 800a918:	0800a97d 	.word	0x0800a97d
 800a91c:	0800a97d 	.word	0x0800a97d
 800a920:	0800a953 	.word	0x0800a953
 800a924:	0800a97d 	.word	0x0800a97d
 800a928:	0800a97d 	.word	0x0800a97d
 800a92c:	0800a97d 	.word	0x0800a97d
 800a930:	0800a961 	.word	0x0800a961
 800a934:	0800a97d 	.word	0x0800a97d
 800a938:	0800a97d 	.word	0x0800a97d
 800a93c:	0800a97d 	.word	0x0800a97d
 800a940:	0800a96f 	.word	0x0800a96f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	68b9      	ldr	r1, [r7, #8]
 800a94a:	4618      	mov	r0, r3
 800a94c:	f000 fbd0 	bl	800b0f0 <TIM_OC1_SetConfig>
      break;
 800a950:	e017      	b.n	800a982 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	68b9      	ldr	r1, [r7, #8]
 800a958:	4618      	mov	r0, r3
 800a95a:	f000 fc2f 	bl	800b1bc <TIM_OC2_SetConfig>
      break;
 800a95e:	e010      	b.n	800a982 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	68b9      	ldr	r1, [r7, #8]
 800a966:	4618      	mov	r0, r3
 800a968:	f000 fc94 	bl	800b294 <TIM_OC3_SetConfig>
      break;
 800a96c:	e009      	b.n	800a982 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	68b9      	ldr	r1, [r7, #8]
 800a974:	4618      	mov	r0, r3
 800a976:	f000 fcf7 	bl	800b368 <TIM_OC4_SetConfig>
      break;
 800a97a:	e002      	b.n	800a982 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800a97c:	2301      	movs	r3, #1
 800a97e:	75fb      	strb	r3, [r7, #23]
      break;
 800a980:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2200      	movs	r2, #0
 800a986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a98a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3718      	adds	r7, #24
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b086      	sub	sp, #24
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d101      	bne.n	800a9b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a9ae:	2302      	movs	r3, #2
 800a9b0:	e0ae      	b.n	800ab10 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2b0c      	cmp	r3, #12
 800a9be:	f200 809f 	bhi.w	800ab00 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a9c2:	a201      	add	r2, pc, #4	; (adr r2, 800a9c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9c8:	0800a9fd 	.word	0x0800a9fd
 800a9cc:	0800ab01 	.word	0x0800ab01
 800a9d0:	0800ab01 	.word	0x0800ab01
 800a9d4:	0800ab01 	.word	0x0800ab01
 800a9d8:	0800aa3d 	.word	0x0800aa3d
 800a9dc:	0800ab01 	.word	0x0800ab01
 800a9e0:	0800ab01 	.word	0x0800ab01
 800a9e4:	0800ab01 	.word	0x0800ab01
 800a9e8:	0800aa7f 	.word	0x0800aa7f
 800a9ec:	0800ab01 	.word	0x0800ab01
 800a9f0:	0800ab01 	.word	0x0800ab01
 800a9f4:	0800ab01 	.word	0x0800ab01
 800a9f8:	0800aabf 	.word	0x0800aabf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	68b9      	ldr	r1, [r7, #8]
 800aa02:	4618      	mov	r0, r3
 800aa04:	f000 fb74 	bl	800b0f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	699a      	ldr	r2, [r3, #24]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f042 0208 	orr.w	r2, r2, #8
 800aa16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	699a      	ldr	r2, [r3, #24]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f022 0204 	bic.w	r2, r2, #4
 800aa26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	6999      	ldr	r1, [r3, #24]
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	691a      	ldr	r2, [r3, #16]
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	430a      	orrs	r2, r1
 800aa38:	619a      	str	r2, [r3, #24]
      break;
 800aa3a:	e064      	b.n	800ab06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	68b9      	ldr	r1, [r7, #8]
 800aa42:	4618      	mov	r0, r3
 800aa44:	f000 fbba 	bl	800b1bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	699a      	ldr	r2, [r3, #24]
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	699a      	ldr	r2, [r3, #24]
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	6999      	ldr	r1, [r3, #24]
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	691b      	ldr	r3, [r3, #16]
 800aa72:	021a      	lsls	r2, r3, #8
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	430a      	orrs	r2, r1
 800aa7a:	619a      	str	r2, [r3, #24]
      break;
 800aa7c:	e043      	b.n	800ab06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	68b9      	ldr	r1, [r7, #8]
 800aa84:	4618      	mov	r0, r3
 800aa86:	f000 fc05 	bl	800b294 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	69da      	ldr	r2, [r3, #28]
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f042 0208 	orr.w	r2, r2, #8
 800aa98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	69da      	ldr	r2, [r3, #28]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f022 0204 	bic.w	r2, r2, #4
 800aaa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	69d9      	ldr	r1, [r3, #28]
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	691a      	ldr	r2, [r3, #16]
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	430a      	orrs	r2, r1
 800aaba:	61da      	str	r2, [r3, #28]
      break;
 800aabc:	e023      	b.n	800ab06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	68b9      	ldr	r1, [r7, #8]
 800aac4:	4618      	mov	r0, r3
 800aac6:	f000 fc4f 	bl	800b368 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	69da      	ldr	r2, [r3, #28]
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aad8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	69da      	ldr	r2, [r3, #28]
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aae8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	69d9      	ldr	r1, [r3, #28]
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	691b      	ldr	r3, [r3, #16]
 800aaf4:	021a      	lsls	r2, r3, #8
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	430a      	orrs	r2, r1
 800aafc:	61da      	str	r2, [r3, #28]
      break;
 800aafe:	e002      	b.n	800ab06 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ab00:	2301      	movs	r3, #1
 800ab02:	75fb      	strb	r3, [r7, #23]
      break;
 800ab04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ab0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3718      	adds	r7, #24
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab22:	2300      	movs	r3, #0
 800ab24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d101      	bne.n	800ab34 <HAL_TIM_ConfigClockSource+0x1c>
 800ab30:	2302      	movs	r3, #2
 800ab32:	e0b4      	b.n	800ac9e <HAL_TIM_ConfigClockSource+0x186>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2201      	movs	r2, #1
 800ab38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2202      	movs	r2, #2
 800ab40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	689b      	ldr	r3, [r3, #8]
 800ab4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ab52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	68ba      	ldr	r2, [r7, #8]
 800ab62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab6c:	d03e      	beq.n	800abec <HAL_TIM_ConfigClockSource+0xd4>
 800ab6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab72:	f200 8087 	bhi.w	800ac84 <HAL_TIM_ConfigClockSource+0x16c>
 800ab76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab7a:	f000 8086 	beq.w	800ac8a <HAL_TIM_ConfigClockSource+0x172>
 800ab7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab82:	d87f      	bhi.n	800ac84 <HAL_TIM_ConfigClockSource+0x16c>
 800ab84:	2b70      	cmp	r3, #112	; 0x70
 800ab86:	d01a      	beq.n	800abbe <HAL_TIM_ConfigClockSource+0xa6>
 800ab88:	2b70      	cmp	r3, #112	; 0x70
 800ab8a:	d87b      	bhi.n	800ac84 <HAL_TIM_ConfigClockSource+0x16c>
 800ab8c:	2b60      	cmp	r3, #96	; 0x60
 800ab8e:	d050      	beq.n	800ac32 <HAL_TIM_ConfigClockSource+0x11a>
 800ab90:	2b60      	cmp	r3, #96	; 0x60
 800ab92:	d877      	bhi.n	800ac84 <HAL_TIM_ConfigClockSource+0x16c>
 800ab94:	2b50      	cmp	r3, #80	; 0x50
 800ab96:	d03c      	beq.n	800ac12 <HAL_TIM_ConfigClockSource+0xfa>
 800ab98:	2b50      	cmp	r3, #80	; 0x50
 800ab9a:	d873      	bhi.n	800ac84 <HAL_TIM_ConfigClockSource+0x16c>
 800ab9c:	2b40      	cmp	r3, #64	; 0x40
 800ab9e:	d058      	beq.n	800ac52 <HAL_TIM_ConfigClockSource+0x13a>
 800aba0:	2b40      	cmp	r3, #64	; 0x40
 800aba2:	d86f      	bhi.n	800ac84 <HAL_TIM_ConfigClockSource+0x16c>
 800aba4:	2b30      	cmp	r3, #48	; 0x30
 800aba6:	d064      	beq.n	800ac72 <HAL_TIM_ConfigClockSource+0x15a>
 800aba8:	2b30      	cmp	r3, #48	; 0x30
 800abaa:	d86b      	bhi.n	800ac84 <HAL_TIM_ConfigClockSource+0x16c>
 800abac:	2b20      	cmp	r3, #32
 800abae:	d060      	beq.n	800ac72 <HAL_TIM_ConfigClockSource+0x15a>
 800abb0:	2b20      	cmp	r3, #32
 800abb2:	d867      	bhi.n	800ac84 <HAL_TIM_ConfigClockSource+0x16c>
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d05c      	beq.n	800ac72 <HAL_TIM_ConfigClockSource+0x15a>
 800abb8:	2b10      	cmp	r3, #16
 800abba:	d05a      	beq.n	800ac72 <HAL_TIM_ConfigClockSource+0x15a>
 800abbc:	e062      	b.n	800ac84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6818      	ldr	r0, [r3, #0]
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	6899      	ldr	r1, [r3, #8]
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	685a      	ldr	r2, [r3, #4]
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	68db      	ldr	r3, [r3, #12]
 800abce:	f000 fc95 	bl	800b4fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	689b      	ldr	r3, [r3, #8]
 800abd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800abe0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	68ba      	ldr	r2, [r7, #8]
 800abe8:	609a      	str	r2, [r3, #8]
      break;
 800abea:	e04f      	b.n	800ac8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6818      	ldr	r0, [r3, #0]
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	6899      	ldr	r1, [r3, #8]
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	685a      	ldr	r2, [r3, #4]
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	68db      	ldr	r3, [r3, #12]
 800abfc:	f000 fc7e 	bl	800b4fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	689a      	ldr	r2, [r3, #8]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ac0e:	609a      	str	r2, [r3, #8]
      break;
 800ac10:	e03c      	b.n	800ac8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6818      	ldr	r0, [r3, #0]
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	6859      	ldr	r1, [r3, #4]
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	461a      	mov	r2, r3
 800ac20:	f000 fbf2 	bl	800b408 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	2150      	movs	r1, #80	; 0x50
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f000 fc4b 	bl	800b4c6 <TIM_ITRx_SetConfig>
      break;
 800ac30:	e02c      	b.n	800ac8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6818      	ldr	r0, [r3, #0]
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	6859      	ldr	r1, [r3, #4]
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	68db      	ldr	r3, [r3, #12]
 800ac3e:	461a      	mov	r2, r3
 800ac40:	f000 fc11 	bl	800b466 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	2160      	movs	r1, #96	; 0x60
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f000 fc3b 	bl	800b4c6 <TIM_ITRx_SetConfig>
      break;
 800ac50:	e01c      	b.n	800ac8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6818      	ldr	r0, [r3, #0]
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	6859      	ldr	r1, [r3, #4]
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	68db      	ldr	r3, [r3, #12]
 800ac5e:	461a      	mov	r2, r3
 800ac60:	f000 fbd2 	bl	800b408 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	2140      	movs	r1, #64	; 0x40
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f000 fc2b 	bl	800b4c6 <TIM_ITRx_SetConfig>
      break;
 800ac70:	e00c      	b.n	800ac8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	4610      	mov	r0, r2
 800ac7e:	f000 fc22 	bl	800b4c6 <TIM_ITRx_SetConfig>
      break;
 800ac82:	e003      	b.n	800ac8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ac84:	2301      	movs	r3, #1
 800ac86:	73fb      	strb	r3, [r7, #15]
      break;
 800ac88:	e000      	b.n	800ac8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ac8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2201      	movs	r2, #1
 800ac90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2200      	movs	r2, #0
 800ac98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ac9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3710      	adds	r7, #16
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}

0800aca6 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800aca6:	b480      	push	{r7}
 800aca8:	b083      	sub	sp, #12
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800acae:	bf00      	nop
 800acb0:	370c      	adds	r7, #12
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr

0800acba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800acba:	b480      	push	{r7}
 800acbc:	b083      	sub	sp, #12
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800acc2:	bf00      	nop
 800acc4:	370c      	adds	r7, #12
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr

0800acce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800acce:	b480      	push	{r7}
 800acd0:	b083      	sub	sp, #12
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800acd6:	bf00      	nop
 800acd8:	370c      	adds	r7, #12
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr

0800ace2 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ace2:	b480      	push	{r7}
 800ace4:	b083      	sub	sp, #12
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800acea:	bf00      	nop
 800acec:	370c      	adds	r7, #12
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr

0800acf6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800acf6:	b480      	push	{r7}
 800acf8:	b083      	sub	sp, #12
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800acfe:	bf00      	nop
 800ad00:	370c      	adds	r7, #12
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr

0800ad0a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ad0a:	b480      	push	{r7}
 800ad0c:	b083      	sub	sp, #12
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800ad12:	bf00      	nop
 800ad14:	370c      	adds	r7, #12
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr

0800ad1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ad1e:	b480      	push	{r7}
 800ad20:	b083      	sub	sp, #12
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ad26:	bf00      	nop
 800ad28:	370c      	adds	r7, #12
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr

0800ad32 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ad32:	b480      	push	{r7}
 800ad34:	b083      	sub	sp, #12
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800ad3a:	bf00      	nop
 800ad3c:	370c      	adds	r7, #12
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr

0800ad46 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800ad46:	b480      	push	{r7}
 800ad48:	b083      	sub	sp, #12
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800ad4e:	bf00      	nop
 800ad50:	370c      	adds	r7, #12
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr
	...

0800ad5c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b087      	sub	sp, #28
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	460b      	mov	r3, r1
 800ad66:	607a      	str	r2, [r7, #4]
 800ad68:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d101      	bne.n	800ad78 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800ad74:	2301      	movs	r3, #1
 800ad76:	e135      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad7e:	2b01      	cmp	r3, #1
 800ad80:	d101      	bne.n	800ad86 <HAL_TIM_RegisterCallback+0x2a>
 800ad82:	2302      	movs	r3, #2
 800ad84:	e12e      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x288>
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2201      	movs	r2, #1
 800ad8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad94:	b2db      	uxtb	r3, r3
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	f040 80ba 	bne.w	800af10 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 800ad9c:	7afb      	ldrb	r3, [r7, #11]
 800ad9e:	2b1a      	cmp	r3, #26
 800ada0:	f200 80b3 	bhi.w	800af0a <HAL_TIM_RegisterCallback+0x1ae>
 800ada4:	a201      	add	r2, pc, #4	; (adr r2, 800adac <HAL_TIM_RegisterCallback+0x50>)
 800ada6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adaa:	bf00      	nop
 800adac:	0800ae19 	.word	0x0800ae19
 800adb0:	0800ae21 	.word	0x0800ae21
 800adb4:	0800ae29 	.word	0x0800ae29
 800adb8:	0800ae31 	.word	0x0800ae31
 800adbc:	0800ae39 	.word	0x0800ae39
 800adc0:	0800ae41 	.word	0x0800ae41
 800adc4:	0800ae49 	.word	0x0800ae49
 800adc8:	0800ae51 	.word	0x0800ae51
 800adcc:	0800ae59 	.word	0x0800ae59
 800add0:	0800ae61 	.word	0x0800ae61
 800add4:	0800ae69 	.word	0x0800ae69
 800add8:	0800ae71 	.word	0x0800ae71
 800addc:	0800ae79 	.word	0x0800ae79
 800ade0:	0800ae81 	.word	0x0800ae81
 800ade4:	0800ae89 	.word	0x0800ae89
 800ade8:	0800ae93 	.word	0x0800ae93
 800adec:	0800ae9d 	.word	0x0800ae9d
 800adf0:	0800aea7 	.word	0x0800aea7
 800adf4:	0800aeb1 	.word	0x0800aeb1
 800adf8:	0800aebb 	.word	0x0800aebb
 800adfc:	0800aec5 	.word	0x0800aec5
 800ae00:	0800aecf 	.word	0x0800aecf
 800ae04:	0800aed9 	.word	0x0800aed9
 800ae08:	0800aee3 	.word	0x0800aee3
 800ae0c:	0800aeed 	.word	0x0800aeed
 800ae10:	0800aef7 	.word	0x0800aef7
 800ae14:	0800af01 	.word	0x0800af01
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800ae1e:	e0dc      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800ae26:	e0d8      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800ae2e:	e0d4      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800ae36:	e0d0      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800ae3e:	e0cc      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800ae46:	e0c8      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	687a      	ldr	r2, [r7, #4]
 800ae4c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800ae4e:	e0c4      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800ae56:	e0c0      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800ae5e:	e0bc      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800ae66:	e0b8      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800ae6e:	e0b4      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800ae76:	e0b0      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800ae7e:	e0ac      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800ae86:	e0a8      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	687a      	ldr	r2, [r7, #4]
 800ae8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800ae90:	e0a3      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800ae9a:	e09e      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800aea4:	e099      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800aeae:	e094      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 800aeb8:	e08f      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800aec2:	e08a      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 800aecc:	e085      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800aed6:	e080      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 800aee0:	e07b      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 800aeea:	e076      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800aef4:	e071      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	687a      	ldr	r2, [r7, #4]
 800aefa:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800aefe:	e06c      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	687a      	ldr	r2, [r7, #4]
 800af04:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 800af08:	e067      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800af0a:	2301      	movs	r3, #1
 800af0c:	75fb      	strb	r3, [r7, #23]
        break;
 800af0e:	e064      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af16:	b2db      	uxtb	r3, r3
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d15c      	bne.n	800afd6 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 800af1c:	7afb      	ldrb	r3, [r7, #11]
 800af1e:	2b0d      	cmp	r3, #13
 800af20:	d856      	bhi.n	800afd0 <HAL_TIM_RegisterCallback+0x274>
 800af22:	a201      	add	r2, pc, #4	; (adr r2, 800af28 <HAL_TIM_RegisterCallback+0x1cc>)
 800af24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af28:	0800af61 	.word	0x0800af61
 800af2c:	0800af69 	.word	0x0800af69
 800af30:	0800af71 	.word	0x0800af71
 800af34:	0800af79 	.word	0x0800af79
 800af38:	0800af81 	.word	0x0800af81
 800af3c:	0800af89 	.word	0x0800af89
 800af40:	0800af91 	.word	0x0800af91
 800af44:	0800af99 	.word	0x0800af99
 800af48:	0800afa1 	.word	0x0800afa1
 800af4c:	0800afa9 	.word	0x0800afa9
 800af50:	0800afb1 	.word	0x0800afb1
 800af54:	0800afb9 	.word	0x0800afb9
 800af58:	0800afc1 	.word	0x0800afc1
 800af5c:	0800afc9 	.word	0x0800afc9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800af66:	e038      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	687a      	ldr	r2, [r7, #4]
 800af6c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800af6e:	e034      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800af76:	e030      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	687a      	ldr	r2, [r7, #4]
 800af7c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800af7e:	e02c      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800af86:	e028      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	687a      	ldr	r2, [r7, #4]
 800af8c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800af8e:	e024      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	687a      	ldr	r2, [r7, #4]
 800af94:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800af96:	e020      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800af9e:	e01c      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800afa6:	e018      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800afae:	e014      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	687a      	ldr	r2, [r7, #4]
 800afb4:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800afb6:	e010      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800afbe:	e00c      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	687a      	ldr	r2, [r7, #4]
 800afc4:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800afc6:	e008      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	687a      	ldr	r2, [r7, #4]
 800afcc:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800afce:	e004      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800afd0:	2301      	movs	r3, #1
 800afd2:	75fb      	strb	r3, [r7, #23]
        break;
 800afd4:	e001      	b.n	800afda <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800afd6:	2301      	movs	r3, #1
 800afd8:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2200      	movs	r2, #0
 800afde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800afe2:	7dfb      	ldrb	r3, [r7, #23]
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	371c      	adds	r7, #28
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr

0800aff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b085      	sub	sp, #20
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	4a34      	ldr	r2, [pc, #208]	; (800b0d4 <TIM_Base_SetConfig+0xe4>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d00f      	beq.n	800b028 <TIM_Base_SetConfig+0x38>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b00e:	d00b      	beq.n	800b028 <TIM_Base_SetConfig+0x38>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	4a31      	ldr	r2, [pc, #196]	; (800b0d8 <TIM_Base_SetConfig+0xe8>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d007      	beq.n	800b028 <TIM_Base_SetConfig+0x38>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	4a30      	ldr	r2, [pc, #192]	; (800b0dc <TIM_Base_SetConfig+0xec>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d003      	beq.n	800b028 <TIM_Base_SetConfig+0x38>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	4a2f      	ldr	r2, [pc, #188]	; (800b0e0 <TIM_Base_SetConfig+0xf0>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d108      	bne.n	800b03a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b02e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	68fa      	ldr	r2, [r7, #12]
 800b036:	4313      	orrs	r3, r2
 800b038:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	4a25      	ldr	r2, [pc, #148]	; (800b0d4 <TIM_Base_SetConfig+0xe4>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d01b      	beq.n	800b07a <TIM_Base_SetConfig+0x8a>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b048:	d017      	beq.n	800b07a <TIM_Base_SetConfig+0x8a>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	4a22      	ldr	r2, [pc, #136]	; (800b0d8 <TIM_Base_SetConfig+0xe8>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d013      	beq.n	800b07a <TIM_Base_SetConfig+0x8a>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	4a21      	ldr	r2, [pc, #132]	; (800b0dc <TIM_Base_SetConfig+0xec>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d00f      	beq.n	800b07a <TIM_Base_SetConfig+0x8a>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	4a20      	ldr	r2, [pc, #128]	; (800b0e0 <TIM_Base_SetConfig+0xf0>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d00b      	beq.n	800b07a <TIM_Base_SetConfig+0x8a>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	4a1f      	ldr	r2, [pc, #124]	; (800b0e4 <TIM_Base_SetConfig+0xf4>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d007      	beq.n	800b07a <TIM_Base_SetConfig+0x8a>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	4a1e      	ldr	r2, [pc, #120]	; (800b0e8 <TIM_Base_SetConfig+0xf8>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d003      	beq.n	800b07a <TIM_Base_SetConfig+0x8a>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	4a1d      	ldr	r2, [pc, #116]	; (800b0ec <TIM_Base_SetConfig+0xfc>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d108      	bne.n	800b08c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	68db      	ldr	r3, [r3, #12]
 800b086:	68fa      	ldr	r2, [r7, #12]
 800b088:	4313      	orrs	r3, r2
 800b08a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	695b      	ldr	r3, [r3, #20]
 800b096:	4313      	orrs	r3, r2
 800b098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	68fa      	ldr	r2, [r7, #12]
 800b09e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	689a      	ldr	r2, [r3, #8]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	681a      	ldr	r2, [r3, #0]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	4a08      	ldr	r2, [pc, #32]	; (800b0d4 <TIM_Base_SetConfig+0xe4>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d103      	bne.n	800b0c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	691a      	ldr	r2, [r3, #16]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	615a      	str	r2, [r3, #20]
}
 800b0c6:	bf00      	nop
 800b0c8:	3714      	adds	r7, #20
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr
 800b0d2:	bf00      	nop
 800b0d4:	40010000 	.word	0x40010000
 800b0d8:	40000400 	.word	0x40000400
 800b0dc:	40000800 	.word	0x40000800
 800b0e0:	40000c00 	.word	0x40000c00
 800b0e4:	40014000 	.word	0x40014000
 800b0e8:	40014400 	.word	0x40014400
 800b0ec:	40014800 	.word	0x40014800

0800b0f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b087      	sub	sp, #28
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6a1b      	ldr	r3, [r3, #32]
 800b0fe:	f023 0201 	bic.w	r2, r3, #1
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6a1b      	ldr	r3, [r3, #32]
 800b10a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	699b      	ldr	r3, [r3, #24]
 800b116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b11e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f023 0303 	bic.w	r3, r3, #3
 800b126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	68fa      	ldr	r2, [r7, #12]
 800b12e:	4313      	orrs	r3, r2
 800b130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	f023 0302 	bic.w	r3, r3, #2
 800b138:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	689b      	ldr	r3, [r3, #8]
 800b13e:	697a      	ldr	r2, [r7, #20]
 800b140:	4313      	orrs	r3, r2
 800b142:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	4a1c      	ldr	r2, [pc, #112]	; (800b1b8 <TIM_OC1_SetConfig+0xc8>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d10c      	bne.n	800b166 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	f023 0308 	bic.w	r3, r3, #8
 800b152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	68db      	ldr	r3, [r3, #12]
 800b158:	697a      	ldr	r2, [r7, #20]
 800b15a:	4313      	orrs	r3, r2
 800b15c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	f023 0304 	bic.w	r3, r3, #4
 800b164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	4a13      	ldr	r2, [pc, #76]	; (800b1b8 <TIM_OC1_SetConfig+0xc8>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d111      	bne.n	800b192 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b17c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	695b      	ldr	r3, [r3, #20]
 800b182:	693a      	ldr	r2, [r7, #16]
 800b184:	4313      	orrs	r3, r2
 800b186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	699b      	ldr	r3, [r3, #24]
 800b18c:	693a      	ldr	r2, [r7, #16]
 800b18e:	4313      	orrs	r3, r2
 800b190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	693a      	ldr	r2, [r7, #16]
 800b196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	68fa      	ldr	r2, [r7, #12]
 800b19c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	685a      	ldr	r2, [r3, #4]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	697a      	ldr	r2, [r7, #20]
 800b1aa:	621a      	str	r2, [r3, #32]
}
 800b1ac:	bf00      	nop
 800b1ae:	371c      	adds	r7, #28
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr
 800b1b8:	40010000 	.word	0x40010000

0800b1bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b087      	sub	sp, #28
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6a1b      	ldr	r3, [r3, #32]
 800b1ca:	f023 0210 	bic.w	r2, r3, #16
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6a1b      	ldr	r3, [r3, #32]
 800b1d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	699b      	ldr	r3, [r3, #24]
 800b1e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	021b      	lsls	r3, r3, #8
 800b1fa:	68fa      	ldr	r2, [r7, #12]
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	f023 0320 	bic.w	r3, r3, #32
 800b206:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	689b      	ldr	r3, [r3, #8]
 800b20c:	011b      	lsls	r3, r3, #4
 800b20e:	697a      	ldr	r2, [r7, #20]
 800b210:	4313      	orrs	r3, r2
 800b212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	4a1e      	ldr	r2, [pc, #120]	; (800b290 <TIM_OC2_SetConfig+0xd4>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d10d      	bne.n	800b238 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b222:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	011b      	lsls	r3, r3, #4
 800b22a:	697a      	ldr	r2, [r7, #20]
 800b22c:	4313      	orrs	r3, r2
 800b22e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b236:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	4a15      	ldr	r2, [pc, #84]	; (800b290 <TIM_OC2_SetConfig+0xd4>)
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d113      	bne.n	800b268 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b246:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b24e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	695b      	ldr	r3, [r3, #20]
 800b254:	009b      	lsls	r3, r3, #2
 800b256:	693a      	ldr	r2, [r7, #16]
 800b258:	4313      	orrs	r3, r2
 800b25a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	699b      	ldr	r3, [r3, #24]
 800b260:	009b      	lsls	r3, r3, #2
 800b262:	693a      	ldr	r2, [r7, #16]
 800b264:	4313      	orrs	r3, r2
 800b266:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	693a      	ldr	r2, [r7, #16]
 800b26c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	68fa      	ldr	r2, [r7, #12]
 800b272:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	685a      	ldr	r2, [r3, #4]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	697a      	ldr	r2, [r7, #20]
 800b280:	621a      	str	r2, [r3, #32]
}
 800b282:	bf00      	nop
 800b284:	371c      	adds	r7, #28
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr
 800b28e:	bf00      	nop
 800b290:	40010000 	.word	0x40010000

0800b294 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b294:	b480      	push	{r7}
 800b296:	b087      	sub	sp, #28
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6a1b      	ldr	r3, [r3, #32]
 800b2a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6a1b      	ldr	r3, [r3, #32]
 800b2ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	69db      	ldr	r3, [r3, #28]
 800b2ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f023 0303 	bic.w	r3, r3, #3
 800b2ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	68fa      	ldr	r2, [r7, #12]
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b2dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	689b      	ldr	r3, [r3, #8]
 800b2e2:	021b      	lsls	r3, r3, #8
 800b2e4:	697a      	ldr	r2, [r7, #20]
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	4a1d      	ldr	r2, [pc, #116]	; (800b364 <TIM_OC3_SetConfig+0xd0>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d10d      	bne.n	800b30e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b2f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	68db      	ldr	r3, [r3, #12]
 800b2fe:	021b      	lsls	r3, r3, #8
 800b300:	697a      	ldr	r2, [r7, #20]
 800b302:	4313      	orrs	r3, r2
 800b304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b30c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	4a14      	ldr	r2, [pc, #80]	; (800b364 <TIM_OC3_SetConfig+0xd0>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d113      	bne.n	800b33e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b31c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	695b      	ldr	r3, [r3, #20]
 800b32a:	011b      	lsls	r3, r3, #4
 800b32c:	693a      	ldr	r2, [r7, #16]
 800b32e:	4313      	orrs	r3, r2
 800b330:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	699b      	ldr	r3, [r3, #24]
 800b336:	011b      	lsls	r3, r3, #4
 800b338:	693a      	ldr	r2, [r7, #16]
 800b33a:	4313      	orrs	r3, r2
 800b33c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	693a      	ldr	r2, [r7, #16]
 800b342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	68fa      	ldr	r2, [r7, #12]
 800b348:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	685a      	ldr	r2, [r3, #4]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	697a      	ldr	r2, [r7, #20]
 800b356:	621a      	str	r2, [r3, #32]
}
 800b358:	bf00      	nop
 800b35a:	371c      	adds	r7, #28
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr
 800b364:	40010000 	.word	0x40010000

0800b368 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b368:	b480      	push	{r7}
 800b36a:	b087      	sub	sp, #28
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6a1b      	ldr	r3, [r3, #32]
 800b376:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6a1b      	ldr	r3, [r3, #32]
 800b382:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	685b      	ldr	r3, [r3, #4]
 800b388:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	69db      	ldr	r3, [r3, #28]
 800b38e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b39e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	021b      	lsls	r3, r3, #8
 800b3a6:	68fa      	ldr	r2, [r7, #12]
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b3b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	689b      	ldr	r3, [r3, #8]
 800b3b8:	031b      	lsls	r3, r3, #12
 800b3ba:	693a      	ldr	r2, [r7, #16]
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	4a10      	ldr	r2, [pc, #64]	; (800b404 <TIM_OC4_SetConfig+0x9c>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d109      	bne.n	800b3dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b3ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	695b      	ldr	r3, [r3, #20]
 800b3d4:	019b      	lsls	r3, r3, #6
 800b3d6:	697a      	ldr	r2, [r7, #20]
 800b3d8:	4313      	orrs	r3, r2
 800b3da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	697a      	ldr	r2, [r7, #20]
 800b3e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	68fa      	ldr	r2, [r7, #12]
 800b3e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	685a      	ldr	r2, [r3, #4]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	693a      	ldr	r2, [r7, #16]
 800b3f4:	621a      	str	r2, [r3, #32]
}
 800b3f6:	bf00      	nop
 800b3f8:	371c      	adds	r7, #28
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr
 800b402:	bf00      	nop
 800b404:	40010000 	.word	0x40010000

0800b408 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b408:	b480      	push	{r7}
 800b40a:	b087      	sub	sp, #28
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	6a1b      	ldr	r3, [r3, #32]
 800b418:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	6a1b      	ldr	r3, [r3, #32]
 800b41e:	f023 0201 	bic.w	r2, r3, #1
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	699b      	ldr	r3, [r3, #24]
 800b42a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	011b      	lsls	r3, r3, #4
 800b438:	693a      	ldr	r2, [r7, #16]
 800b43a:	4313      	orrs	r3, r2
 800b43c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	f023 030a 	bic.w	r3, r3, #10
 800b444:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b446:	697a      	ldr	r2, [r7, #20]
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	4313      	orrs	r3, r2
 800b44c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	693a      	ldr	r2, [r7, #16]
 800b452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	697a      	ldr	r2, [r7, #20]
 800b458:	621a      	str	r2, [r3, #32]
}
 800b45a:	bf00      	nop
 800b45c:	371c      	adds	r7, #28
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr

0800b466 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b466:	b480      	push	{r7}
 800b468:	b087      	sub	sp, #28
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	60f8      	str	r0, [r7, #12]
 800b46e:	60b9      	str	r1, [r7, #8]
 800b470:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	6a1b      	ldr	r3, [r3, #32]
 800b476:	f023 0210 	bic.w	r2, r3, #16
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	699b      	ldr	r3, [r3, #24]
 800b482:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	6a1b      	ldr	r3, [r3, #32]
 800b488:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b490:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	031b      	lsls	r3, r3, #12
 800b496:	697a      	ldr	r2, [r7, #20]
 800b498:	4313      	orrs	r3, r2
 800b49a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b4a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	011b      	lsls	r3, r3, #4
 800b4a8:	693a      	ldr	r2, [r7, #16]
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	697a      	ldr	r2, [r7, #20]
 800b4b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	693a      	ldr	r2, [r7, #16]
 800b4b8:	621a      	str	r2, [r3, #32]
}
 800b4ba:	bf00      	nop
 800b4bc:	371c      	adds	r7, #28
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr

0800b4c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b4c6:	b480      	push	{r7}
 800b4c8:	b085      	sub	sp, #20
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
 800b4ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	689b      	ldr	r3, [r3, #8]
 800b4d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b4de:	683a      	ldr	r2, [r7, #0]
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	f043 0307 	orr.w	r3, r3, #7
 800b4e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	68fa      	ldr	r2, [r7, #12]
 800b4ee:	609a      	str	r2, [r3, #8]
}
 800b4f0:	bf00      	nop
 800b4f2:	3714      	adds	r7, #20
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr

0800b4fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b087      	sub	sp, #28
 800b500:	af00      	add	r7, sp, #0
 800b502:	60f8      	str	r0, [r7, #12]
 800b504:	60b9      	str	r1, [r7, #8]
 800b506:	607a      	str	r2, [r7, #4]
 800b508:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	689b      	ldr	r3, [r3, #8]
 800b50e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b516:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	021a      	lsls	r2, r3, #8
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	431a      	orrs	r2, r3
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	4313      	orrs	r3, r2
 800b524:	697a      	ldr	r2, [r7, #20]
 800b526:	4313      	orrs	r3, r2
 800b528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	697a      	ldr	r2, [r7, #20]
 800b52e:	609a      	str	r2, [r3, #8]
}
 800b530:	bf00      	nop
 800b532:	371c      	adds	r7, #28
 800b534:	46bd      	mov	sp, r7
 800b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53a:	4770      	bx	lr

0800b53c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b087      	sub	sp, #28
 800b540:	af00      	add	r7, sp, #0
 800b542:	60f8      	str	r0, [r7, #12]
 800b544:	60b9      	str	r1, [r7, #8]
 800b546:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	f003 031f 	and.w	r3, r3, #31
 800b54e:	2201      	movs	r2, #1
 800b550:	fa02 f303 	lsl.w	r3, r2, r3
 800b554:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	6a1a      	ldr	r2, [r3, #32]
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	43db      	mvns	r3, r3
 800b55e:	401a      	ands	r2, r3
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	6a1a      	ldr	r2, [r3, #32]
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	f003 031f 	and.w	r3, r3, #31
 800b56e:	6879      	ldr	r1, [r7, #4]
 800b570:	fa01 f303 	lsl.w	r3, r1, r3
 800b574:	431a      	orrs	r2, r3
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	621a      	str	r2, [r3, #32]
}
 800b57a:	bf00      	nop
 800b57c:	371c      	adds	r7, #28
 800b57e:	46bd      	mov	sp, r7
 800b580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b584:	4770      	bx	lr
	...

0800b588 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800b588:	b480      	push	{r7}
 800b58a:	b083      	sub	sp, #12
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	4a1c      	ldr	r2, [pc, #112]	; (800b604 <TIM_ResetCallback+0x7c>)
 800b594:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	4a1b      	ldr	r2, [pc, #108]	; (800b608 <TIM_ResetCallback+0x80>)
 800b59c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	4a1a      	ldr	r2, [pc, #104]	; (800b60c <TIM_ResetCallback+0x84>)
 800b5a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	4a19      	ldr	r2, [pc, #100]	; (800b610 <TIM_ResetCallback+0x88>)
 800b5ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	4a18      	ldr	r2, [pc, #96]	; (800b614 <TIM_ResetCallback+0x8c>)
 800b5b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	4a17      	ldr	r2, [pc, #92]	; (800b618 <TIM_ResetCallback+0x90>)
 800b5bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	4a16      	ldr	r2, [pc, #88]	; (800b61c <TIM_ResetCallback+0x94>)
 800b5c4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	4a15      	ldr	r2, [pc, #84]	; (800b620 <TIM_ResetCallback+0x98>)
 800b5cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	4a14      	ldr	r2, [pc, #80]	; (800b624 <TIM_ResetCallback+0x9c>)
 800b5d4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	4a13      	ldr	r2, [pc, #76]	; (800b628 <TIM_ResetCallback+0xa0>)
 800b5dc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	4a12      	ldr	r2, [pc, #72]	; (800b62c <TIM_ResetCallback+0xa4>)
 800b5e4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	4a11      	ldr	r2, [pc, #68]	; (800b630 <TIM_ResetCallback+0xa8>)
 800b5ec:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	4a10      	ldr	r2, [pc, #64]	; (800b634 <TIM_ResetCallback+0xac>)
 800b5f4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800b5f8:	bf00      	nop
 800b5fa:	370c      	adds	r7, #12
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr
 800b604:	080044f5 	.word	0x080044f5
 800b608:	0800aca7 	.word	0x0800aca7
 800b60c:	0800ad1f 	.word	0x0800ad1f
 800b610:	0800ad33 	.word	0x0800ad33
 800b614:	0800accf 	.word	0x0800accf
 800b618:	0800ace3 	.word	0x0800ace3
 800b61c:	0800acbb 	.word	0x0800acbb
 800b620:	0800acf7 	.word	0x0800acf7
 800b624:	0800ad0b 	.word	0x0800ad0b
 800b628:	0800ad47 	.word	0x0800ad47
 800b62c:	0800b715 	.word	0x0800b715
 800b630:	0800b729 	.word	0x0800b729
 800b634:	0800b73d 	.word	0x0800b73d

0800b638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b638:	b480      	push	{r7}
 800b63a:	b085      	sub	sp, #20
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d101      	bne.n	800b650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b64c:	2302      	movs	r3, #2
 800b64e:	e050      	b.n	800b6f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2201      	movs	r2, #1
 800b654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2202      	movs	r2, #2
 800b65c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b676:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	68fa      	ldr	r2, [r7, #12]
 800b67e:	4313      	orrs	r3, r2
 800b680:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	68fa      	ldr	r2, [r7, #12]
 800b688:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4a1c      	ldr	r2, [pc, #112]	; (800b700 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d018      	beq.n	800b6c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b69c:	d013      	beq.n	800b6c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	4a18      	ldr	r2, [pc, #96]	; (800b704 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d00e      	beq.n	800b6c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4a16      	ldr	r2, [pc, #88]	; (800b708 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d009      	beq.n	800b6c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	4a15      	ldr	r2, [pc, #84]	; (800b70c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d004      	beq.n	800b6c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	4a13      	ldr	r2, [pc, #76]	; (800b710 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d10c      	bne.n	800b6e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b6cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	68ba      	ldr	r2, [r7, #8]
 800b6d4:	4313      	orrs	r3, r2
 800b6d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	68ba      	ldr	r2, [r7, #8]
 800b6de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b6f0:	2300      	movs	r3, #0
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3714      	adds	r7, #20
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr
 800b6fe:	bf00      	nop
 800b700:	40010000 	.word	0x40010000
 800b704:	40000400 	.word	0x40000400
 800b708:	40000800 	.word	0x40000800
 800b70c:	40000c00 	.word	0x40000c00
 800b710:	40014000 	.word	0x40014000

0800b714 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b714:	b480      	push	{r7}
 800b716:	b083      	sub	sp, #12
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b71c:	bf00      	nop
 800b71e:	370c      	adds	r7, #12
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr

0800b728 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800b730:	bf00      	nop
 800b732:	370c      	adds	r7, #12
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr

0800b73c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b744:	bf00      	nop
 800b746:	370c      	adds	r7, #12
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr

0800b750 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d101      	bne.n	800b762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b75e:	2301      	movs	r3, #1
 800b760:	e04a      	b.n	800b7f8 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b768:	b2db      	uxtb	r3, r3
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d111      	bne.n	800b792 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2200      	movs	r2, #0
 800b772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f000 fd2c 	bl	800c1d4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b780:	2b00      	cmp	r3, #0
 800b782:	d102      	bne.n	800b78a <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	4a1e      	ldr	r2, [pc, #120]	; (800b800 <HAL_UART_Init+0xb0>)
 800b788:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2224      	movs	r2, #36	; 0x24
 800b796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	68da      	ldr	r2, [r3, #12]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b7a8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f000 fff6 	bl	800c79c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	691a      	ldr	r2, [r3, #16]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b7be:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	695a      	ldr	r2, [r3, #20]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b7ce:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	68da      	ldr	r2, [r3, #12]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b7de:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2220      	movs	r2, #32
 800b7ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2220      	movs	r2, #32
 800b7f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b7f6:	2300      	movs	r3, #0
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3708      	adds	r7, #8
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}
 800b800:	08004f71 	.word	0x08004f71

0800b804 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800b804:	b480      	push	{r7}
 800b806:	b087      	sub	sp, #28
 800b808:	af00      	add	r7, sp, #0
 800b80a:	60f8      	str	r0, [r7, #12]
 800b80c:	460b      	mov	r3, r1
 800b80e:	607a      	str	r2, [r7, #4]
 800b810:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b812:	2300      	movs	r3, #0
 800b814:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d107      	bne.n	800b82c <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b820:	f043 0220 	orr.w	r2, r3, #32
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b828:	2301      	movs	r3, #1
 800b82a:	e08c      	b.n	800b946 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b832:	2b01      	cmp	r3, #1
 800b834:	d101      	bne.n	800b83a <HAL_UART_RegisterCallback+0x36>
 800b836:	2302      	movs	r3, #2
 800b838:	e085      	b.n	800b946 <HAL_UART_RegisterCallback+0x142>
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2201      	movs	r2, #1
 800b83e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b848:	b2db      	uxtb	r3, r3
 800b84a:	2b20      	cmp	r3, #32
 800b84c:	d151      	bne.n	800b8f2 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800b84e:	7afb      	ldrb	r3, [r7, #11]
 800b850:	2b0c      	cmp	r3, #12
 800b852:	d845      	bhi.n	800b8e0 <HAL_UART_RegisterCallback+0xdc>
 800b854:	a201      	add	r2, pc, #4	; (adr r2, 800b85c <HAL_UART_RegisterCallback+0x58>)
 800b856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b85a:	bf00      	nop
 800b85c:	0800b891 	.word	0x0800b891
 800b860:	0800b899 	.word	0x0800b899
 800b864:	0800b8a1 	.word	0x0800b8a1
 800b868:	0800b8a9 	.word	0x0800b8a9
 800b86c:	0800b8b1 	.word	0x0800b8b1
 800b870:	0800b8b9 	.word	0x0800b8b9
 800b874:	0800b8c1 	.word	0x0800b8c1
 800b878:	0800b8c9 	.word	0x0800b8c9
 800b87c:	0800b8e1 	.word	0x0800b8e1
 800b880:	0800b8e1 	.word	0x0800b8e1
 800b884:	0800b8e1 	.word	0x0800b8e1
 800b888:	0800b8d1 	.word	0x0800b8d1
 800b88c:	0800b8d9 	.word	0x0800b8d9
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	687a      	ldr	r2, [r7, #4]
 800b894:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800b896:	e051      	b.n	800b93c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	687a      	ldr	r2, [r7, #4]
 800b89c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800b89e:	e04d      	b.n	800b93c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800b8a6:	e049      	b.n	800b93c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800b8ae:	e045      	b.n	800b93c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	687a      	ldr	r2, [r7, #4]
 800b8b4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800b8b6:	e041      	b.n	800b93c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	687a      	ldr	r2, [r7, #4]
 800b8bc:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800b8be:	e03d      	b.n	800b93c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	687a      	ldr	r2, [r7, #4]
 800b8c4:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800b8c6:	e039      	b.n	800b93c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	687a      	ldr	r2, [r7, #4]
 800b8cc:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800b8ce:	e035      	b.n	800b93c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800b8d6:	e031      	b.n	800b93c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800b8de:	e02d      	b.n	800b93c <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8e4:	f043 0220 	orr.w	r2, r3, #32
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	75fb      	strb	r3, [r7, #23]
        break;
 800b8f0:	e024      	b.n	800b93c <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8f8:	b2db      	uxtb	r3, r3
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d116      	bne.n	800b92c <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800b8fe:	7afb      	ldrb	r3, [r7, #11]
 800b900:	2b0b      	cmp	r3, #11
 800b902:	d002      	beq.n	800b90a <HAL_UART_RegisterCallback+0x106>
 800b904:	2b0c      	cmp	r3, #12
 800b906:	d004      	beq.n	800b912 <HAL_UART_RegisterCallback+0x10e>
 800b908:	e007      	b.n	800b91a <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800b910:	e014      	b.n	800b93c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	687a      	ldr	r2, [r7, #4]
 800b916:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800b918:	e010      	b.n	800b93c <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b91e:	f043 0220 	orr.w	r2, r3, #32
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800b926:	2301      	movs	r3, #1
 800b928:	75fb      	strb	r3, [r7, #23]
        break;
 800b92a:	e007      	b.n	800b93c <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b930:	f043 0220 	orr.w	r2, r3, #32
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800b938:	2301      	movs	r3, #1
 800b93a:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2200      	movs	r2, #0
 800b940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b944:	7dfb      	ldrb	r3, [r7, #23]
}
 800b946:	4618      	mov	r0, r3
 800b948:	371c      	adds	r7, #28
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr
 800b952:	bf00      	nop

0800b954 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b084      	sub	sp, #16
 800b958:	af00      	add	r7, sp, #0
 800b95a:	60f8      	str	r0, [r7, #12]
 800b95c:	60b9      	str	r1, [r7, #8]
 800b95e:	4613      	mov	r3, r2
 800b960:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	2b20      	cmp	r3, #32
 800b96c:	d11d      	bne.n	800b9aa <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d002      	beq.n	800b97a <HAL_UART_Receive_IT+0x26>
 800b974:	88fb      	ldrh	r3, [r7, #6]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d101      	bne.n	800b97e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b97a:	2301      	movs	r3, #1
 800b97c:	e016      	b.n	800b9ac <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b984:	2b01      	cmp	r3, #1
 800b986:	d101      	bne.n	800b98c <HAL_UART_Receive_IT+0x38>
 800b988:	2302      	movs	r3, #2
 800b98a:	e00f      	b.n	800b9ac <HAL_UART_Receive_IT+0x58>
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	2201      	movs	r2, #1
 800b990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2200      	movs	r2, #0
 800b998:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b99a:	88fb      	ldrh	r3, [r7, #6]
 800b99c:	461a      	mov	r2, r3
 800b99e:	68b9      	ldr	r1, [r7, #8]
 800b9a0:	68f8      	ldr	r0, [r7, #12]
 800b9a2:	f000 fcf7 	bl	800c394 <UART_Start_Receive_IT>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	e000      	b.n	800b9ac <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b9aa:	2302      	movs	r3, #2
  }
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3710      	adds	r7, #16
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b08c      	sub	sp, #48	; 0x30
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	60b9      	str	r1, [r7, #8]
 800b9be:	4613      	mov	r3, r2
 800b9c0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	2b20      	cmp	r3, #32
 800b9cc:	d165      	bne.n	800ba9a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d002      	beq.n	800b9da <HAL_UART_Transmit_DMA+0x26>
 800b9d4:	88fb      	ldrh	r3, [r7, #6]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d101      	bne.n	800b9de <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	e05e      	b.n	800ba9c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d101      	bne.n	800b9ec <HAL_UART_Transmit_DMA+0x38>
 800b9e8:	2302      	movs	r3, #2
 800b9ea:	e057      	b.n	800ba9c <HAL_UART_Transmit_DMA+0xe8>
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800b9f4:	68ba      	ldr	r2, [r7, #8]
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	88fa      	ldrh	r2, [r7, #6]
 800b9fe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	88fa      	ldrh	r2, [r7, #6]
 800ba04:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2221      	movs	r2, #33	; 0x21
 800ba10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba18:	4a22      	ldr	r2, [pc, #136]	; (800baa4 <HAL_UART_Transmit_DMA+0xf0>)
 800ba1a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba20:	4a21      	ldr	r2, [pc, #132]	; (800baa8 <HAL_UART_Transmit_DMA+0xf4>)
 800ba22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba28:	4a20      	ldr	r2, [pc, #128]	; (800baac <HAL_UART_Transmit_DMA+0xf8>)
 800ba2a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba30:	2200      	movs	r2, #0
 800ba32:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800ba34:	f107 0308 	add.w	r3, r7, #8
 800ba38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ba3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba40:	6819      	ldr	r1, [r3, #0]
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	3304      	adds	r3, #4
 800ba48:	461a      	mov	r2, r3
 800ba4a:	88fb      	ldrh	r3, [r7, #6]
 800ba4c:	f7fb f88c 	bl	8006b68 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ba58:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	3314      	adds	r3, #20
 800ba68:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba6a:	69bb      	ldr	r3, [r7, #24]
 800ba6c:	e853 3f00 	ldrex	r3, [r3]
 800ba70:	617b      	str	r3, [r7, #20]
   return(result);
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba78:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	3314      	adds	r3, #20
 800ba80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba82:	627a      	str	r2, [r7, #36]	; 0x24
 800ba84:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba86:	6a39      	ldr	r1, [r7, #32]
 800ba88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba8a:	e841 2300 	strex	r3, r2, [r1]
 800ba8e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba90:	69fb      	ldr	r3, [r7, #28]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d1e5      	bne.n	800ba62 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800ba96:	2300      	movs	r3, #0
 800ba98:	e000      	b.n	800ba9c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800ba9a:	2302      	movs	r3, #2
  }
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3730      	adds	r7, #48	; 0x30
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}
 800baa4:	0800c245 	.word	0x0800c245
 800baa8:	0800c2e1 	.word	0x0800c2e1
 800baac:	0800c2ff 	.word	0x0800c2ff

0800bab0 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b09a      	sub	sp, #104	; 0x68
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	330c      	adds	r3, #12
 800babe:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bac2:	e853 3f00 	ldrex	r3, [r3]
 800bac6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800bac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800baca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bace:	667b      	str	r3, [r7, #100]	; 0x64
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	330c      	adds	r3, #12
 800bad6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bad8:	657a      	str	r2, [r7, #84]	; 0x54
 800bada:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800badc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bade:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bae0:	e841 2300 	strex	r3, r2, [r1]
 800bae4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d1e5      	bne.n	800bab8 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	3314      	adds	r3, #20
 800baf2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baf6:	e853 3f00 	ldrex	r3, [r3]
 800bafa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bafe:	f023 0301 	bic.w	r3, r3, #1
 800bb02:	663b      	str	r3, [r7, #96]	; 0x60
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	3314      	adds	r3, #20
 800bb0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bb0c:	643a      	str	r2, [r7, #64]	; 0x40
 800bb0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bb12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb14:	e841 2300 	strex	r3, r2, [r1]
 800bb18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bb1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d1e5      	bne.n	800baec <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	d119      	bne.n	800bb5c <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	330c      	adds	r3, #12
 800bb2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb30:	6a3b      	ldr	r3, [r7, #32]
 800bb32:	e853 3f00 	ldrex	r3, [r3]
 800bb36:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb38:	69fb      	ldr	r3, [r7, #28]
 800bb3a:	f023 0310 	bic.w	r3, r3, #16
 800bb3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	330c      	adds	r3, #12
 800bb46:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bb48:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bb4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb50:	e841 2300 	strex	r3, r2, [r1]
 800bb54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d1e5      	bne.n	800bb28 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	695b      	ldr	r3, [r3, #20]
 800bb62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb66:	2b40      	cmp	r3, #64	; 0x40
 800bb68:	d136      	bne.n	800bbd8 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	3314      	adds	r3, #20
 800bb70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	e853 3f00 	ldrex	r3, [r3]
 800bb78:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb80:	65bb      	str	r3, [r7, #88]	; 0x58
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	3314      	adds	r3, #20
 800bb88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb8a:	61ba      	str	r2, [r7, #24]
 800bb8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb8e:	6979      	ldr	r1, [r7, #20]
 800bb90:	69ba      	ldr	r2, [r7, #24]
 800bb92:	e841 2300 	strex	r3, r2, [r1]
 800bb96:	613b      	str	r3, [r7, #16]
   return(result);
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d1e5      	bne.n	800bb6a <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d018      	beq.n	800bbd8 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbaa:	2200      	movs	r2, #0
 800bbac:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7fb f830 	bl	8006c18 <HAL_DMA_Abort>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d00c      	beq.n	800bbd8 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7fb fa52 	bl	800706c <HAL_DMA_GetError>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b20      	cmp	r3, #32
 800bbcc:	d104      	bne.n	800bbd8 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2210      	movs	r2, #16
 800bbd2:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800bbd4:	2303      	movs	r3, #3
 800bbd6:	e00a      	b.n	800bbee <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2220      	movs	r2, #32
 800bbe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800bbec:	2300      	movs	r3, #0
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3768      	adds	r7, #104	; 0x68
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
	...

0800bbf8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b0ba      	sub	sp, #232	; 0xe8
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	695b      	ldr	r3, [r3, #20]
 800bc1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bc24:	2300      	movs	r3, #0
 800bc26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bc2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc2e:	f003 030f 	and.w	r3, r3, #15
 800bc32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800bc36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d10f      	bne.n	800bc5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bc3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc42:	f003 0320 	and.w	r3, r3, #32
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d009      	beq.n	800bc5e <HAL_UART_IRQHandler+0x66>
 800bc4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc4e:	f003 0320 	and.w	r3, r3, #32
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d003      	beq.n	800bc5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 fce3 	bl	800c622 <UART_Receive_IT>
      return;
 800bc5c:	e25b      	b.n	800c116 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bc5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	f000 80e1 	beq.w	800be2a <HAL_UART_IRQHandler+0x232>
 800bc68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc6c:	f003 0301 	and.w	r3, r3, #1
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d106      	bne.n	800bc82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bc74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc78:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	f000 80d4 	beq.w	800be2a <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bc82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc86:	f003 0301 	and.w	r3, r3, #1
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d00b      	beq.n	800bca6 <HAL_UART_IRQHandler+0xae>
 800bc8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d005      	beq.n	800bca6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc9e:	f043 0201 	orr.w	r2, r3, #1
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcaa:	f003 0304 	and.w	r3, r3, #4
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d00b      	beq.n	800bcca <HAL_UART_IRQHandler+0xd2>
 800bcb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcb6:	f003 0301 	and.w	r3, r3, #1
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d005      	beq.n	800bcca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcc2:	f043 0202 	orr.w	r2, r3, #2
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bcca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcce:	f003 0302 	and.w	r3, r3, #2
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d00b      	beq.n	800bcee <HAL_UART_IRQHandler+0xf6>
 800bcd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcda:	f003 0301 	and.w	r3, r3, #1
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d005      	beq.n	800bcee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce6:	f043 0204 	orr.w	r2, r3, #4
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bcee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcf2:	f003 0308 	and.w	r3, r3, #8
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d011      	beq.n	800bd1e <HAL_UART_IRQHandler+0x126>
 800bcfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcfe:	f003 0320 	and.w	r3, r3, #32
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d105      	bne.n	800bd12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bd06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd0a:	f003 0301 	and.w	r3, r3, #1
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d005      	beq.n	800bd1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd16:	f043 0208 	orr.w	r2, r3, #8
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	f000 81f2 	beq.w	800c10c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bd28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd2c:	f003 0320 	and.w	r3, r3, #32
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d008      	beq.n	800bd46 <HAL_UART_IRQHandler+0x14e>
 800bd34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd38:	f003 0320 	and.w	r3, r3, #32
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d002      	beq.n	800bd46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f000 fc6e 	bl	800c622 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	695b      	ldr	r3, [r3, #20]
 800bd4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd50:	2b40      	cmp	r3, #64	; 0x40
 800bd52:	bf0c      	ite	eq
 800bd54:	2301      	moveq	r3, #1
 800bd56:	2300      	movne	r3, #0
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd62:	f003 0308 	and.w	r3, r3, #8
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d103      	bne.n	800bd72 <HAL_UART_IRQHandler+0x17a>
 800bd6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d051      	beq.n	800be16 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f000 fb74 	bl	800c460 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	695b      	ldr	r3, [r3, #20]
 800bd7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd82:	2b40      	cmp	r3, #64	; 0x40
 800bd84:	d142      	bne.n	800be0c <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	3314      	adds	r3, #20
 800bd8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bd94:	e853 3f00 	ldrex	r3, [r3]
 800bd98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bd9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bda0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bda4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	3314      	adds	r3, #20
 800bdae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bdb2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bdb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bdbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bdc2:	e841 2300 	strex	r3, r2, [r1]
 800bdc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bdca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d1d9      	bne.n	800bd86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d013      	beq.n	800be02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdde:	4a7f      	ldr	r2, [pc, #508]	; (800bfdc <HAL_UART_IRQHandler+0x3e4>)
 800bde0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7fa ff86 	bl	8006cf8 <HAL_DMA_Abort_IT>
 800bdec:	4603      	mov	r3, r0
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d019      	beq.n	800be26 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdf8:	687a      	ldr	r2, [r7, #4]
 800bdfa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bdfc:	4610      	mov	r0, r2
 800bdfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be00:	e011      	b.n	800be26 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be0a:	e00c      	b.n	800be26 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be14:	e007      	b.n	800be26 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2200      	movs	r2, #0
 800be22:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800be24:	e172      	b.n	800c10c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be26:	bf00      	nop
    return;
 800be28:	e170      	b.n	800c10c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be2e:	2b01      	cmp	r3, #1
 800be30:	f040 814c 	bne.w	800c0cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800be34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be38:	f003 0310 	and.w	r3, r3, #16
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	f000 8145 	beq.w	800c0cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800be42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be46:	f003 0310 	and.w	r3, r3, #16
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	f000 813e 	beq.w	800c0cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800be50:	2300      	movs	r3, #0
 800be52:	60bb      	str	r3, [r7, #8]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	60bb      	str	r3, [r7, #8]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	685b      	ldr	r3, [r3, #4]
 800be62:	60bb      	str	r3, [r7, #8]
 800be64:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	695b      	ldr	r3, [r3, #20]
 800be6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be70:	2b40      	cmp	r3, #64	; 0x40
 800be72:	f040 80b5 	bne.w	800bfe0 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800be82:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800be86:	2b00      	cmp	r3, #0
 800be88:	f000 8142 	beq.w	800c110 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800be90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800be94:	429a      	cmp	r2, r3
 800be96:	f080 813b 	bcs.w	800c110 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bea0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bea6:	69db      	ldr	r3, [r3, #28]
 800bea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800beac:	f000 8088 	beq.w	800bfc0 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	330c      	adds	r3, #12
 800beb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bebe:	e853 3f00 	ldrex	r3, [r3]
 800bec2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bec6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800beca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bece:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	330c      	adds	r3, #12
 800bed8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bedc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bee0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bee4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bee8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800beec:	e841 2300 	strex	r3, r2, [r1]
 800bef0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bef4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d1d9      	bne.n	800beb0 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	3314      	adds	r3, #20
 800bf02:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf06:	e853 3f00 	ldrex	r3, [r3]
 800bf0a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bf0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf0e:	f023 0301 	bic.w	r3, r3, #1
 800bf12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	3314      	adds	r3, #20
 800bf1c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bf20:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bf24:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf26:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bf28:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bf2c:	e841 2300 	strex	r3, r2, [r1]
 800bf30:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bf32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d1e1      	bne.n	800befc <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	3314      	adds	r3, #20
 800bf3e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf42:	e853 3f00 	ldrex	r3, [r3]
 800bf46:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bf48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	3314      	adds	r3, #20
 800bf58:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bf5c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bf5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf60:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bf62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bf64:	e841 2300 	strex	r3, r2, [r1]
 800bf68:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bf6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d1e3      	bne.n	800bf38 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2220      	movs	r2, #32
 800bf74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	330c      	adds	r3, #12
 800bf84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf88:	e853 3f00 	ldrex	r3, [r3]
 800bf8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bf8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf90:	f023 0310 	bic.w	r3, r3, #16
 800bf94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	330c      	adds	r3, #12
 800bf9e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bfa2:	65ba      	str	r2, [r7, #88]	; 0x58
 800bfa4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfa6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bfa8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bfaa:	e841 2300 	strex	r3, r2, [r1]
 800bfae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bfb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d1e3      	bne.n	800bf7e <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f7fa fe2c 	bl	8006c18 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800bfc8:	687a      	ldr	r2, [r7, #4]
 800bfca:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800bfcc:	b292      	uxth	r2, r2
 800bfce:	1a8a      	subs	r2, r1, r2
 800bfd0:	b292      	uxth	r2, r2
 800bfd2:	4611      	mov	r1, r2
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bfd8:	e09a      	b.n	800c110 <HAL_UART_IRQHandler+0x518>
 800bfda:	bf00      	nop
 800bfdc:	0800c527 	.word	0x0800c527
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bfe8:	b29b      	uxth	r3, r3
 800bfea:	1ad3      	subs	r3, r2, r3
 800bfec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bff4:	b29b      	uxth	r3, r3
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	f000 808c 	beq.w	800c114 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bffc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c000:	2b00      	cmp	r3, #0
 800c002:	f000 8087 	beq.w	800c114 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	330c      	adds	r3, #12
 800c00c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c010:	e853 3f00 	ldrex	r3, [r3]
 800c014:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c018:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c01c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	330c      	adds	r3, #12
 800c026:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c02a:	647a      	str	r2, [r7, #68]	; 0x44
 800c02c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c02e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c030:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c032:	e841 2300 	strex	r3, r2, [r1]
 800c036:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d1e3      	bne.n	800c006 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	3314      	adds	r3, #20
 800c044:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c048:	e853 3f00 	ldrex	r3, [r3]
 800c04c:	623b      	str	r3, [r7, #32]
   return(result);
 800c04e:	6a3b      	ldr	r3, [r7, #32]
 800c050:	f023 0301 	bic.w	r3, r3, #1
 800c054:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	3314      	adds	r3, #20
 800c05e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c062:	633a      	str	r2, [r7, #48]	; 0x30
 800c064:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c066:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c06a:	e841 2300 	strex	r3, r2, [r1]
 800c06e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c072:	2b00      	cmp	r3, #0
 800c074:	d1e3      	bne.n	800c03e <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2220      	movs	r2, #32
 800c07a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2200      	movs	r2, #0
 800c082:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	330c      	adds	r3, #12
 800c08a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	e853 3f00 	ldrex	r3, [r3]
 800c092:	60fb      	str	r3, [r7, #12]
   return(result);
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f023 0310 	bic.w	r3, r3, #16
 800c09a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	330c      	adds	r3, #12
 800c0a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c0a8:	61fa      	str	r2, [r7, #28]
 800c0aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ac:	69b9      	ldr	r1, [r7, #24]
 800c0ae:	69fa      	ldr	r2, [r7, #28]
 800c0b0:	e841 2300 	strex	r3, r2, [r1]
 800c0b4:	617b      	str	r3, [r7, #20]
   return(result);
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d1e3      	bne.n	800c084 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c0c0:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800c0c4:	4611      	mov	r1, r2
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c0ca:	e023      	b.n	800c114 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c0cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d009      	beq.n	800c0ec <HAL_UART_IRQHandler+0x4f4>
 800c0d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d003      	beq.n	800c0ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f000 fa33 	bl	800c550 <UART_Transmit_IT>
    return;
 800c0ea:	e014      	b.n	800c116 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c0ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d00e      	beq.n	800c116 <HAL_UART_IRQHandler+0x51e>
 800c0f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c100:	2b00      	cmp	r3, #0
 800c102:	d008      	beq.n	800c116 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 fa73 	bl	800c5f0 <UART_EndTransmit_IT>
    return;
 800c10a:	e004      	b.n	800c116 <HAL_UART_IRQHandler+0x51e>
    return;
 800c10c:	bf00      	nop
 800c10e:	e002      	b.n	800c116 <HAL_UART_IRQHandler+0x51e>
      return;
 800c110:	bf00      	nop
 800c112:	e000      	b.n	800c116 <HAL_UART_IRQHandler+0x51e>
      return;
 800c114:	bf00      	nop
  }
}
 800c116:	37e8      	adds	r7, #232	; 0xe8
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b083      	sub	sp, #12
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c124:	bf00      	nop
 800c126:	370c      	adds	r7, #12
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr

0800c130 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800c138:	bf00      	nop
 800c13a:	370c      	adds	r7, #12
 800c13c:	46bd      	mov	sp, r7
 800c13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c142:	4770      	bx	lr

0800c144 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c144:	b480      	push	{r7}
 800c146:	b083      	sub	sp, #12
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c14c:	bf00      	nop
 800c14e:	370c      	adds	r7, #12
 800c150:	46bd      	mov	sp, r7
 800c152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c156:	4770      	bx	lr

0800c158 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c158:	b480      	push	{r7}
 800c15a:	b083      	sub	sp, #12
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c160:	bf00      	nop
 800c162:	370c      	adds	r7, #12
 800c164:	46bd      	mov	sp, r7
 800c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16a:	4770      	bx	lr

0800c16c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b083      	sub	sp, #12
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c174:	bf00      	nop
 800c176:	370c      	adds	r7, #12
 800c178:	46bd      	mov	sp, r7
 800c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17e:	4770      	bx	lr

0800c180 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800c180:	b480      	push	{r7}
 800c182:	b083      	sub	sp, #12
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800c188:	bf00      	nop
 800c18a:	370c      	adds	r7, #12
 800c18c:	46bd      	mov	sp, r7
 800c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c192:	4770      	bx	lr

0800c194 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800c194:	b480      	push	{r7}
 800c196:	b083      	sub	sp, #12
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800c19c:	bf00      	nop
 800c19e:	370c      	adds	r7, #12
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr

0800c1a8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b083      	sub	sp, #12
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800c1b0:	bf00      	nop
 800c1b2:	370c      	adds	r7, #12
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr

0800c1bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b083      	sub	sp, #12
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c1c8:	bf00      	nop
 800c1ca:	370c      	adds	r7, #12
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d2:	4770      	bx	lr

0800c1d4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b083      	sub	sp, #12
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	4a10      	ldr	r2, [pc, #64]	; (800c220 <UART_InitCallbacksToDefault+0x4c>)
 800c1e0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	4a0f      	ldr	r2, [pc, #60]	; (800c224 <UART_InitCallbacksToDefault+0x50>)
 800c1e6:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	4a0f      	ldr	r2, [pc, #60]	; (800c228 <UART_InitCallbacksToDefault+0x54>)
 800c1ec:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	4a0e      	ldr	r2, [pc, #56]	; (800c22c <UART_InitCallbacksToDefault+0x58>)
 800c1f2:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	4a0e      	ldr	r2, [pc, #56]	; (800c230 <UART_InitCallbacksToDefault+0x5c>)
 800c1f8:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	4a0d      	ldr	r2, [pc, #52]	; (800c234 <UART_InitCallbacksToDefault+0x60>)
 800c1fe:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	4a0d      	ldr	r2, [pc, #52]	; (800c238 <UART_InitCallbacksToDefault+0x64>)
 800c204:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	4a0c      	ldr	r2, [pc, #48]	; (800c23c <UART_InitCallbacksToDefault+0x68>)
 800c20a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	4a0c      	ldr	r2, [pc, #48]	; (800c240 <UART_InitCallbacksToDefault+0x6c>)
 800c210:	669a      	str	r2, [r3, #104]	; 0x68

}
 800c212:	bf00      	nop
 800c214:	370c      	adds	r7, #12
 800c216:	46bd      	mov	sp, r7
 800c218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21c:	4770      	bx	lr
 800c21e:	bf00      	nop
 800c220:	0800c131 	.word	0x0800c131
 800c224:	0800c11d 	.word	0x0800c11d
 800c228:	0800c159 	.word	0x0800c159
 800c22c:	0800c145 	.word	0x0800c145
 800c230:	0800c16d 	.word	0x0800c16d
 800c234:	0800c181 	.word	0x0800c181
 800c238:	0800c195 	.word	0x0800c195
 800c23c:	0800c1a9 	.word	0x0800c1a9
 800c240:	0800c1bd 	.word	0x0800c1bd

0800c244 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b090      	sub	sp, #64	; 0x40
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c250:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d137      	bne.n	800c2d0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800c260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c262:	2200      	movs	r2, #0
 800c264:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	3314      	adds	r3, #20
 800c26c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c270:	e853 3f00 	ldrex	r3, [r3]
 800c274:	623b      	str	r3, [r7, #32]
   return(result);
 800c276:	6a3b      	ldr	r3, [r7, #32]
 800c278:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c27c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c27e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	3314      	adds	r3, #20
 800c284:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c286:	633a      	str	r2, [r7, #48]	; 0x30
 800c288:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c28a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c28c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c28e:	e841 2300 	strex	r3, r2, [r1]
 800c292:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c296:	2b00      	cmp	r3, #0
 800c298:	d1e5      	bne.n	800c266 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c29a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	330c      	adds	r3, #12
 800c2a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	e853 3f00 	ldrex	r3, [r3]
 800c2a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2b0:	637b      	str	r3, [r7, #52]	; 0x34
 800c2b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	330c      	adds	r3, #12
 800c2b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2ba:	61fa      	str	r2, [r7, #28]
 800c2bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2be:	69b9      	ldr	r1, [r7, #24]
 800c2c0:	69fa      	ldr	r2, [r7, #28]
 800c2c2:	e841 2300 	strex	r3, r2, [r1]
 800c2c6:	617b      	str	r3, [r7, #20]
   return(result);
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d1e5      	bne.n	800c29a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c2ce:	e003      	b.n	800c2d8 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800c2d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c2d6:	4798      	blx	r3
}
 800c2d8:	bf00      	nop
 800c2da:	3740      	adds	r7, #64	; 0x40
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}

0800c2e0 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b084      	sub	sp, #16
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ec:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2f2:	68f8      	ldr	r0, [r7, #12]
 800c2f4:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c2f6:	bf00      	nop
 800c2f8:	3710      	adds	r7, #16
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}

0800c2fe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c2fe:	b580      	push	{r7, lr}
 800c300:	b084      	sub	sp, #16
 800c302:	af00      	add	r7, sp, #0
 800c304:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c306:	2300      	movs	r3, #0
 800c308:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c30e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	695b      	ldr	r3, [r3, #20]
 800c316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c31a:	2b80      	cmp	r3, #128	; 0x80
 800c31c:	bf0c      	ite	eq
 800c31e:	2301      	moveq	r3, #1
 800c320:	2300      	movne	r3, #0
 800c322:	b2db      	uxtb	r3, r3
 800c324:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c32c:	b2db      	uxtb	r3, r3
 800c32e:	2b21      	cmp	r3, #33	; 0x21
 800c330:	d108      	bne.n	800c344 <UART_DMAError+0x46>
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d005      	beq.n	800c344 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	2200      	movs	r2, #0
 800c33c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800c33e:	68b8      	ldr	r0, [r7, #8]
 800c340:	f000 f866 	bl	800c410 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	695b      	ldr	r3, [r3, #20]
 800c34a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c34e:	2b40      	cmp	r3, #64	; 0x40
 800c350:	bf0c      	ite	eq
 800c352:	2301      	moveq	r3, #1
 800c354:	2300      	movne	r3, #0
 800c356:	b2db      	uxtb	r3, r3
 800c358:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c360:	b2db      	uxtb	r3, r3
 800c362:	2b22      	cmp	r3, #34	; 0x22
 800c364:	d108      	bne.n	800c378 <UART_DMAError+0x7a>
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d005      	beq.n	800c378 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	2200      	movs	r2, #0
 800c370:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800c372:	68b8      	ldr	r0, [r7, #8]
 800c374:	f000 f874 	bl	800c460 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c37c:	f043 0210 	orr.w	r2, r3, #16
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c388:	68b8      	ldr	r0, [r7, #8]
 800c38a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c38c:	bf00      	nop
 800c38e:	3710      	adds	r7, #16
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c394:	b480      	push	{r7}
 800c396:	b085      	sub	sp, #20
 800c398:	af00      	add	r7, sp, #0
 800c39a:	60f8      	str	r0, [r7, #12]
 800c39c:	60b9      	str	r1, [r7, #8]
 800c39e:	4613      	mov	r3, r2
 800c3a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	68ba      	ldr	r2, [r7, #8]
 800c3a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	88fa      	ldrh	r2, [r7, #6]
 800c3ac:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	88fa      	ldrh	r2, [r7, #6]
 800c3b2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	2222      	movs	r2, #34	; 0x22
 800c3be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	691b      	ldr	r3, [r3, #16]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d007      	beq.n	800c3e2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	68da      	ldr	r2, [r3, #12]
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c3e0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	695a      	ldr	r2, [r3, #20]
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f042 0201 	orr.w	r2, r2, #1
 800c3f0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	68da      	ldr	r2, [r3, #12]
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f042 0220 	orr.w	r2, r2, #32
 800c400:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c402:	2300      	movs	r3, #0
}
 800c404:	4618      	mov	r0, r3
 800c406:	3714      	adds	r7, #20
 800c408:	46bd      	mov	sp, r7
 800c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40e:	4770      	bx	lr

0800c410 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c410:	b480      	push	{r7}
 800c412:	b089      	sub	sp, #36	; 0x24
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	330c      	adds	r3, #12
 800c41e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	e853 3f00 	ldrex	r3, [r3]
 800c426:	60bb      	str	r3, [r7, #8]
   return(result);
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c42e:	61fb      	str	r3, [r7, #28]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	330c      	adds	r3, #12
 800c436:	69fa      	ldr	r2, [r7, #28]
 800c438:	61ba      	str	r2, [r7, #24]
 800c43a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c43c:	6979      	ldr	r1, [r7, #20]
 800c43e:	69ba      	ldr	r2, [r7, #24]
 800c440:	e841 2300 	strex	r3, r2, [r1]
 800c444:	613b      	str	r3, [r7, #16]
   return(result);
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d1e5      	bne.n	800c418 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2220      	movs	r2, #32
 800c450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800c454:	bf00      	nop
 800c456:	3724      	adds	r7, #36	; 0x24
 800c458:	46bd      	mov	sp, r7
 800c45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45e:	4770      	bx	lr

0800c460 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c460:	b480      	push	{r7}
 800c462:	b095      	sub	sp, #84	; 0x54
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	330c      	adds	r3, #12
 800c46e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c472:	e853 3f00 	ldrex	r3, [r3]
 800c476:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c47a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c47e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	330c      	adds	r3, #12
 800c486:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c488:	643a      	str	r2, [r7, #64]	; 0x40
 800c48a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c48c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c48e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c490:	e841 2300 	strex	r3, r2, [r1]
 800c494:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d1e5      	bne.n	800c468 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	3314      	adds	r3, #20
 800c4a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4a4:	6a3b      	ldr	r3, [r7, #32]
 800c4a6:	e853 3f00 	ldrex	r3, [r3]
 800c4aa:	61fb      	str	r3, [r7, #28]
   return(result);
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	f023 0301 	bic.w	r3, r3, #1
 800c4b2:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	3314      	adds	r3, #20
 800c4ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c4bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c4be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c4c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4c4:	e841 2300 	strex	r3, r2, [r1]
 800c4c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d1e5      	bne.n	800c49c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	d119      	bne.n	800c50c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	330c      	adds	r3, #12
 800c4de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	e853 3f00 	ldrex	r3, [r3]
 800c4e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	f023 0310 	bic.w	r3, r3, #16
 800c4ee:	647b      	str	r3, [r7, #68]	; 0x44
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	330c      	adds	r3, #12
 800c4f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c4f8:	61ba      	str	r2, [r7, #24]
 800c4fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4fc:	6979      	ldr	r1, [r7, #20]
 800c4fe:	69ba      	ldr	r2, [r7, #24]
 800c500:	e841 2300 	strex	r3, r2, [r1]
 800c504:	613b      	str	r3, [r7, #16]
   return(result);
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d1e5      	bne.n	800c4d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2220      	movs	r2, #32
 800c510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2200      	movs	r2, #0
 800c518:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c51a:	bf00      	nop
 800c51c:	3754      	adds	r7, #84	; 0x54
 800c51e:	46bd      	mov	sp, r7
 800c520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c524:	4770      	bx	lr

0800c526 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c526:	b580      	push	{r7, lr}
 800c528:	b084      	sub	sp, #16
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c532:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2200      	movs	r2, #0
 800c538:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	2200      	movs	r2, #0
 800c53e:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c544:	68f8      	ldr	r0, [r7, #12]
 800c546:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c548:	bf00      	nop
 800c54a:	3710      	adds	r7, #16
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}

0800c550 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c550:	b480      	push	{r7}
 800c552:	b085      	sub	sp, #20
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c55e:	b2db      	uxtb	r3, r3
 800c560:	2b21      	cmp	r3, #33	; 0x21
 800c562:	d13e      	bne.n	800c5e2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	689b      	ldr	r3, [r3, #8]
 800c568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c56c:	d114      	bne.n	800c598 <UART_Transmit_IT+0x48>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	691b      	ldr	r3, [r3, #16]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d110      	bne.n	800c598 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6a1b      	ldr	r3, [r3, #32]
 800c57a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	881b      	ldrh	r3, [r3, #0]
 800c580:	461a      	mov	r2, r3
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c58a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6a1b      	ldr	r3, [r3, #32]
 800c590:	1c9a      	adds	r2, r3, #2
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	621a      	str	r2, [r3, #32]
 800c596:	e008      	b.n	800c5aa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6a1b      	ldr	r3, [r3, #32]
 800c59c:	1c59      	adds	r1, r3, #1
 800c59e:	687a      	ldr	r2, [r7, #4]
 800c5a0:	6211      	str	r1, [r2, #32]
 800c5a2:	781a      	ldrb	r2, [r3, #0]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c5ae:	b29b      	uxth	r3, r3
 800c5b0:	3b01      	subs	r3, #1
 800c5b2:	b29b      	uxth	r3, r3
 800c5b4:	687a      	ldr	r2, [r7, #4]
 800c5b6:	4619      	mov	r1, r3
 800c5b8:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d10f      	bne.n	800c5de <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	68da      	ldr	r2, [r3, #12]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c5cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	68da      	ldr	r2, [r3, #12]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c5dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	e000      	b.n	800c5e4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c5e2:	2302      	movs	r3, #2
  }
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3714      	adds	r7, #20
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ee:	4770      	bx	lr

0800c5f0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b082      	sub	sp, #8
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	68da      	ldr	r2, [r3, #12]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c606:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2220      	movs	r2, #32
 800c60c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c618:	2300      	movs	r3, #0
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3708      	adds	r7, #8
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}

0800c622 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c622:	b580      	push	{r7, lr}
 800c624:	b08c      	sub	sp, #48	; 0x30
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c630:	b2db      	uxtb	r3, r3
 800c632:	2b22      	cmp	r3, #34	; 0x22
 800c634:	f040 80ad 	bne.w	800c792 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	689b      	ldr	r3, [r3, #8]
 800c63c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c640:	d117      	bne.n	800c672 <UART_Receive_IT+0x50>
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	691b      	ldr	r3, [r3, #16]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d113      	bne.n	800c672 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c64a:	2300      	movs	r3, #0
 800c64c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c652:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	b29b      	uxth	r3, r3
 800c65c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c660:	b29a      	uxth	r2, r3
 800c662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c664:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c66a:	1c9a      	adds	r2, r3, #2
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	629a      	str	r2, [r3, #40]	; 0x28
 800c670:	e026      	b.n	800c6c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c676:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c678:	2300      	movs	r3, #0
 800c67a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	689b      	ldr	r3, [r3, #8]
 800c680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c684:	d007      	beq.n	800c696 <UART_Receive_IT+0x74>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	689b      	ldr	r3, [r3, #8]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d10a      	bne.n	800c6a4 <UART_Receive_IT+0x82>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	691b      	ldr	r3, [r3, #16]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d106      	bne.n	800c6a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	685b      	ldr	r3, [r3, #4]
 800c69c:	b2da      	uxtb	r2, r3
 800c69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a0:	701a      	strb	r2, [r3, #0]
 800c6a2:	e008      	b.n	800c6b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	b2db      	uxtb	r3, r3
 800c6ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6b0:	b2da      	uxtb	r2, r3
 800c6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6ba:	1c5a      	adds	r2, r3, #1
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	3b01      	subs	r3, #1
 800c6c8:	b29b      	uxth	r3, r3
 800c6ca:	687a      	ldr	r2, [r7, #4]
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d15c      	bne.n	800c78e <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	68da      	ldr	r2, [r3, #12]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f022 0220 	bic.w	r2, r2, #32
 800c6e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	68da      	ldr	r2, [r3, #12]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c6f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	695a      	ldr	r2, [r3, #20]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f022 0201 	bic.w	r2, r2, #1
 800c702:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2220      	movs	r2, #32
 800c708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c710:	2b01      	cmp	r3, #1
 800c712:	d136      	bne.n	800c782 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2200      	movs	r2, #0
 800c718:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	330c      	adds	r3, #12
 800c720:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	e853 3f00 	ldrex	r3, [r3]
 800c728:	613b      	str	r3, [r7, #16]
   return(result);
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	f023 0310 	bic.w	r3, r3, #16
 800c730:	627b      	str	r3, [r7, #36]	; 0x24
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	330c      	adds	r3, #12
 800c738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c73a:	623a      	str	r2, [r7, #32]
 800c73c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c73e:	69f9      	ldr	r1, [r7, #28]
 800c740:	6a3a      	ldr	r2, [r7, #32]
 800c742:	e841 2300 	strex	r3, r2, [r1]
 800c746:	61bb      	str	r3, [r7, #24]
   return(result);
 800c748:	69bb      	ldr	r3, [r7, #24]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d1e5      	bne.n	800c71a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f003 0310 	and.w	r3, r3, #16
 800c758:	2b10      	cmp	r3, #16
 800c75a:	d10a      	bne.n	800c772 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c75c:	2300      	movs	r3, #0
 800c75e:	60fb      	str	r3, [r7, #12]
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	60fb      	str	r3, [r7, #12]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	685b      	ldr	r3, [r3, #4]
 800c76e:	60fb      	str	r3, [r7, #12]
 800c770:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c776:	687a      	ldr	r2, [r7, #4]
 800c778:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800c77a:	4611      	mov	r1, r2
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	4798      	blx	r3
 800c780:	e003      	b.n	800c78a <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c78a:	2300      	movs	r3, #0
 800c78c:	e002      	b.n	800c794 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800c78e:	2300      	movs	r3, #0
 800c790:	e000      	b.n	800c794 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800c792:	2302      	movs	r3, #2
  }
}
 800c794:	4618      	mov	r0, r3
 800c796:	3730      	adds	r7, #48	; 0x30
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}

0800c79c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c79c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c7a0:	b0c0      	sub	sp, #256	; 0x100
 800c7a2:	af00      	add	r7, sp, #0
 800c7a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c7a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	691b      	ldr	r3, [r3, #16]
 800c7b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c7b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7b8:	68d9      	ldr	r1, [r3, #12]
 800c7ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7be:	681a      	ldr	r2, [r3, #0]
 800c7c0:	ea40 0301 	orr.w	r3, r0, r1
 800c7c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c7c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7ca:	689a      	ldr	r2, [r3, #8]
 800c7cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7d0:	691b      	ldr	r3, [r3, #16]
 800c7d2:	431a      	orrs	r2, r3
 800c7d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7d8:	695b      	ldr	r3, [r3, #20]
 800c7da:	431a      	orrs	r2, r3
 800c7dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7e0:	69db      	ldr	r3, [r3, #28]
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c7e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	68db      	ldr	r3, [r3, #12]
 800c7f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c7f4:	f021 010c 	bic.w	r1, r1, #12
 800c7f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7fc:	681a      	ldr	r2, [r3, #0]
 800c7fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c802:	430b      	orrs	r3, r1
 800c804:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	695b      	ldr	r3, [r3, #20]
 800c80e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c816:	6999      	ldr	r1, [r3, #24]
 800c818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c81c:	681a      	ldr	r2, [r3, #0]
 800c81e:	ea40 0301 	orr.w	r3, r0, r1
 800c822:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c828:	681a      	ldr	r2, [r3, #0]
 800c82a:	4b8f      	ldr	r3, [pc, #572]	; (800ca68 <UART_SetConfig+0x2cc>)
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d005      	beq.n	800c83c <UART_SetConfig+0xa0>
 800c830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c834:	681a      	ldr	r2, [r3, #0]
 800c836:	4b8d      	ldr	r3, [pc, #564]	; (800ca6c <UART_SetConfig+0x2d0>)
 800c838:	429a      	cmp	r2, r3
 800c83a:	d104      	bne.n	800c846 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c83c:	f7fd fac8 	bl	8009dd0 <HAL_RCC_GetPCLK2Freq>
 800c840:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c844:	e003      	b.n	800c84e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c846:	f7fd faaf 	bl	8009da8 <HAL_RCC_GetPCLK1Freq>
 800c84a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c84e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c852:	69db      	ldr	r3, [r3, #28]
 800c854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c858:	f040 810c 	bne.w	800ca74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c85c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c860:	2200      	movs	r2, #0
 800c862:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c866:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c86a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c86e:	4622      	mov	r2, r4
 800c870:	462b      	mov	r3, r5
 800c872:	1891      	adds	r1, r2, r2
 800c874:	65b9      	str	r1, [r7, #88]	; 0x58
 800c876:	415b      	adcs	r3, r3
 800c878:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c87a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c87e:	4621      	mov	r1, r4
 800c880:	eb12 0801 	adds.w	r8, r2, r1
 800c884:	4629      	mov	r1, r5
 800c886:	eb43 0901 	adc.w	r9, r3, r1
 800c88a:	f04f 0200 	mov.w	r2, #0
 800c88e:	f04f 0300 	mov.w	r3, #0
 800c892:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c896:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c89a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c89e:	4690      	mov	r8, r2
 800c8a0:	4699      	mov	r9, r3
 800c8a2:	4623      	mov	r3, r4
 800c8a4:	eb18 0303 	adds.w	r3, r8, r3
 800c8a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c8ac:	462b      	mov	r3, r5
 800c8ae:	eb49 0303 	adc.w	r3, r9, r3
 800c8b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c8b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c8c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c8c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c8ca:	460b      	mov	r3, r1
 800c8cc:	18db      	adds	r3, r3, r3
 800c8ce:	653b      	str	r3, [r7, #80]	; 0x50
 800c8d0:	4613      	mov	r3, r2
 800c8d2:	eb42 0303 	adc.w	r3, r2, r3
 800c8d6:	657b      	str	r3, [r7, #84]	; 0x54
 800c8d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c8dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c8e0:	f7f4 f97e 	bl	8000be0 <__aeabi_uldivmod>
 800c8e4:	4602      	mov	r2, r0
 800c8e6:	460b      	mov	r3, r1
 800c8e8:	4b61      	ldr	r3, [pc, #388]	; (800ca70 <UART_SetConfig+0x2d4>)
 800c8ea:	fba3 2302 	umull	r2, r3, r3, r2
 800c8ee:	095b      	lsrs	r3, r3, #5
 800c8f0:	011c      	lsls	r4, r3, #4
 800c8f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c8fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c900:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c904:	4642      	mov	r2, r8
 800c906:	464b      	mov	r3, r9
 800c908:	1891      	adds	r1, r2, r2
 800c90a:	64b9      	str	r1, [r7, #72]	; 0x48
 800c90c:	415b      	adcs	r3, r3
 800c90e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c910:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c914:	4641      	mov	r1, r8
 800c916:	eb12 0a01 	adds.w	sl, r2, r1
 800c91a:	4649      	mov	r1, r9
 800c91c:	eb43 0b01 	adc.w	fp, r3, r1
 800c920:	f04f 0200 	mov.w	r2, #0
 800c924:	f04f 0300 	mov.w	r3, #0
 800c928:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c92c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c930:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c934:	4692      	mov	sl, r2
 800c936:	469b      	mov	fp, r3
 800c938:	4643      	mov	r3, r8
 800c93a:	eb1a 0303 	adds.w	r3, sl, r3
 800c93e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c942:	464b      	mov	r3, r9
 800c944:	eb4b 0303 	adc.w	r3, fp, r3
 800c948:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c94c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c950:	685b      	ldr	r3, [r3, #4]
 800c952:	2200      	movs	r2, #0
 800c954:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c958:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c95c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c960:	460b      	mov	r3, r1
 800c962:	18db      	adds	r3, r3, r3
 800c964:	643b      	str	r3, [r7, #64]	; 0x40
 800c966:	4613      	mov	r3, r2
 800c968:	eb42 0303 	adc.w	r3, r2, r3
 800c96c:	647b      	str	r3, [r7, #68]	; 0x44
 800c96e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c972:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c976:	f7f4 f933 	bl	8000be0 <__aeabi_uldivmod>
 800c97a:	4602      	mov	r2, r0
 800c97c:	460b      	mov	r3, r1
 800c97e:	4611      	mov	r1, r2
 800c980:	4b3b      	ldr	r3, [pc, #236]	; (800ca70 <UART_SetConfig+0x2d4>)
 800c982:	fba3 2301 	umull	r2, r3, r3, r1
 800c986:	095b      	lsrs	r3, r3, #5
 800c988:	2264      	movs	r2, #100	; 0x64
 800c98a:	fb02 f303 	mul.w	r3, r2, r3
 800c98e:	1acb      	subs	r3, r1, r3
 800c990:	00db      	lsls	r3, r3, #3
 800c992:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c996:	4b36      	ldr	r3, [pc, #216]	; (800ca70 <UART_SetConfig+0x2d4>)
 800c998:	fba3 2302 	umull	r2, r3, r3, r2
 800c99c:	095b      	lsrs	r3, r3, #5
 800c99e:	005b      	lsls	r3, r3, #1
 800c9a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c9a4:	441c      	add	r4, r3
 800c9a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c9b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c9b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c9b8:	4642      	mov	r2, r8
 800c9ba:	464b      	mov	r3, r9
 800c9bc:	1891      	adds	r1, r2, r2
 800c9be:	63b9      	str	r1, [r7, #56]	; 0x38
 800c9c0:	415b      	adcs	r3, r3
 800c9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c9c8:	4641      	mov	r1, r8
 800c9ca:	1851      	adds	r1, r2, r1
 800c9cc:	6339      	str	r1, [r7, #48]	; 0x30
 800c9ce:	4649      	mov	r1, r9
 800c9d0:	414b      	adcs	r3, r1
 800c9d2:	637b      	str	r3, [r7, #52]	; 0x34
 800c9d4:	f04f 0200 	mov.w	r2, #0
 800c9d8:	f04f 0300 	mov.w	r3, #0
 800c9dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c9e0:	4659      	mov	r1, fp
 800c9e2:	00cb      	lsls	r3, r1, #3
 800c9e4:	4651      	mov	r1, sl
 800c9e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c9ea:	4651      	mov	r1, sl
 800c9ec:	00ca      	lsls	r2, r1, #3
 800c9ee:	4610      	mov	r0, r2
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	4642      	mov	r2, r8
 800c9f6:	189b      	adds	r3, r3, r2
 800c9f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c9fc:	464b      	mov	r3, r9
 800c9fe:	460a      	mov	r2, r1
 800ca00:	eb42 0303 	adc.w	r3, r2, r3
 800ca04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ca08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca0c:	685b      	ldr	r3, [r3, #4]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ca14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ca18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ca1c:	460b      	mov	r3, r1
 800ca1e:	18db      	adds	r3, r3, r3
 800ca20:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca22:	4613      	mov	r3, r2
 800ca24:	eb42 0303 	adc.w	r3, r2, r3
 800ca28:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ca2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ca32:	f7f4 f8d5 	bl	8000be0 <__aeabi_uldivmod>
 800ca36:	4602      	mov	r2, r0
 800ca38:	460b      	mov	r3, r1
 800ca3a:	4b0d      	ldr	r3, [pc, #52]	; (800ca70 <UART_SetConfig+0x2d4>)
 800ca3c:	fba3 1302 	umull	r1, r3, r3, r2
 800ca40:	095b      	lsrs	r3, r3, #5
 800ca42:	2164      	movs	r1, #100	; 0x64
 800ca44:	fb01 f303 	mul.w	r3, r1, r3
 800ca48:	1ad3      	subs	r3, r2, r3
 800ca4a:	00db      	lsls	r3, r3, #3
 800ca4c:	3332      	adds	r3, #50	; 0x32
 800ca4e:	4a08      	ldr	r2, [pc, #32]	; (800ca70 <UART_SetConfig+0x2d4>)
 800ca50:	fba2 2303 	umull	r2, r3, r2, r3
 800ca54:	095b      	lsrs	r3, r3, #5
 800ca56:	f003 0207 	and.w	r2, r3, #7
 800ca5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	4422      	add	r2, r4
 800ca62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ca64:	e105      	b.n	800cc72 <UART_SetConfig+0x4d6>
 800ca66:	bf00      	nop
 800ca68:	40011000 	.word	0x40011000
 800ca6c:	40011400 	.word	0x40011400
 800ca70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ca74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca78:	2200      	movs	r2, #0
 800ca7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ca7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ca82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ca86:	4642      	mov	r2, r8
 800ca88:	464b      	mov	r3, r9
 800ca8a:	1891      	adds	r1, r2, r2
 800ca8c:	6239      	str	r1, [r7, #32]
 800ca8e:	415b      	adcs	r3, r3
 800ca90:	627b      	str	r3, [r7, #36]	; 0x24
 800ca92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ca96:	4641      	mov	r1, r8
 800ca98:	1854      	adds	r4, r2, r1
 800ca9a:	4649      	mov	r1, r9
 800ca9c:	eb43 0501 	adc.w	r5, r3, r1
 800caa0:	f04f 0200 	mov.w	r2, #0
 800caa4:	f04f 0300 	mov.w	r3, #0
 800caa8:	00eb      	lsls	r3, r5, #3
 800caaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800caae:	00e2      	lsls	r2, r4, #3
 800cab0:	4614      	mov	r4, r2
 800cab2:	461d      	mov	r5, r3
 800cab4:	4643      	mov	r3, r8
 800cab6:	18e3      	adds	r3, r4, r3
 800cab8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cabc:	464b      	mov	r3, r9
 800cabe:	eb45 0303 	adc.w	r3, r5, r3
 800cac2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800caca:	685b      	ldr	r3, [r3, #4]
 800cacc:	2200      	movs	r2, #0
 800cace:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cad2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cad6:	f04f 0200 	mov.w	r2, #0
 800cada:	f04f 0300 	mov.w	r3, #0
 800cade:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800cae2:	4629      	mov	r1, r5
 800cae4:	008b      	lsls	r3, r1, #2
 800cae6:	4621      	mov	r1, r4
 800cae8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800caec:	4621      	mov	r1, r4
 800caee:	008a      	lsls	r2, r1, #2
 800caf0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800caf4:	f7f4 f874 	bl	8000be0 <__aeabi_uldivmod>
 800caf8:	4602      	mov	r2, r0
 800cafa:	460b      	mov	r3, r1
 800cafc:	4b60      	ldr	r3, [pc, #384]	; (800cc80 <UART_SetConfig+0x4e4>)
 800cafe:	fba3 2302 	umull	r2, r3, r3, r2
 800cb02:	095b      	lsrs	r3, r3, #5
 800cb04:	011c      	lsls	r4, r3, #4
 800cb06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cb10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cb14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800cb18:	4642      	mov	r2, r8
 800cb1a:	464b      	mov	r3, r9
 800cb1c:	1891      	adds	r1, r2, r2
 800cb1e:	61b9      	str	r1, [r7, #24]
 800cb20:	415b      	adcs	r3, r3
 800cb22:	61fb      	str	r3, [r7, #28]
 800cb24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cb28:	4641      	mov	r1, r8
 800cb2a:	1851      	adds	r1, r2, r1
 800cb2c:	6139      	str	r1, [r7, #16]
 800cb2e:	4649      	mov	r1, r9
 800cb30:	414b      	adcs	r3, r1
 800cb32:	617b      	str	r3, [r7, #20]
 800cb34:	f04f 0200 	mov.w	r2, #0
 800cb38:	f04f 0300 	mov.w	r3, #0
 800cb3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cb40:	4659      	mov	r1, fp
 800cb42:	00cb      	lsls	r3, r1, #3
 800cb44:	4651      	mov	r1, sl
 800cb46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cb4a:	4651      	mov	r1, sl
 800cb4c:	00ca      	lsls	r2, r1, #3
 800cb4e:	4610      	mov	r0, r2
 800cb50:	4619      	mov	r1, r3
 800cb52:	4603      	mov	r3, r0
 800cb54:	4642      	mov	r2, r8
 800cb56:	189b      	adds	r3, r3, r2
 800cb58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cb5c:	464b      	mov	r3, r9
 800cb5e:	460a      	mov	r2, r1
 800cb60:	eb42 0303 	adc.w	r3, r2, r3
 800cb64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cb68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	67bb      	str	r3, [r7, #120]	; 0x78
 800cb72:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cb74:	f04f 0200 	mov.w	r2, #0
 800cb78:	f04f 0300 	mov.w	r3, #0
 800cb7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cb80:	4649      	mov	r1, r9
 800cb82:	008b      	lsls	r3, r1, #2
 800cb84:	4641      	mov	r1, r8
 800cb86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cb8a:	4641      	mov	r1, r8
 800cb8c:	008a      	lsls	r2, r1, #2
 800cb8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cb92:	f7f4 f825 	bl	8000be0 <__aeabi_uldivmod>
 800cb96:	4602      	mov	r2, r0
 800cb98:	460b      	mov	r3, r1
 800cb9a:	4b39      	ldr	r3, [pc, #228]	; (800cc80 <UART_SetConfig+0x4e4>)
 800cb9c:	fba3 1302 	umull	r1, r3, r3, r2
 800cba0:	095b      	lsrs	r3, r3, #5
 800cba2:	2164      	movs	r1, #100	; 0x64
 800cba4:	fb01 f303 	mul.w	r3, r1, r3
 800cba8:	1ad3      	subs	r3, r2, r3
 800cbaa:	011b      	lsls	r3, r3, #4
 800cbac:	3332      	adds	r3, #50	; 0x32
 800cbae:	4a34      	ldr	r2, [pc, #208]	; (800cc80 <UART_SetConfig+0x4e4>)
 800cbb0:	fba2 2303 	umull	r2, r3, r2, r3
 800cbb4:	095b      	lsrs	r3, r3, #5
 800cbb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cbba:	441c      	add	r4, r3
 800cbbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	673b      	str	r3, [r7, #112]	; 0x70
 800cbc4:	677a      	str	r2, [r7, #116]	; 0x74
 800cbc6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800cbca:	4642      	mov	r2, r8
 800cbcc:	464b      	mov	r3, r9
 800cbce:	1891      	adds	r1, r2, r2
 800cbd0:	60b9      	str	r1, [r7, #8]
 800cbd2:	415b      	adcs	r3, r3
 800cbd4:	60fb      	str	r3, [r7, #12]
 800cbd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cbda:	4641      	mov	r1, r8
 800cbdc:	1851      	adds	r1, r2, r1
 800cbde:	6039      	str	r1, [r7, #0]
 800cbe0:	4649      	mov	r1, r9
 800cbe2:	414b      	adcs	r3, r1
 800cbe4:	607b      	str	r3, [r7, #4]
 800cbe6:	f04f 0200 	mov.w	r2, #0
 800cbea:	f04f 0300 	mov.w	r3, #0
 800cbee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cbf2:	4659      	mov	r1, fp
 800cbf4:	00cb      	lsls	r3, r1, #3
 800cbf6:	4651      	mov	r1, sl
 800cbf8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cbfc:	4651      	mov	r1, sl
 800cbfe:	00ca      	lsls	r2, r1, #3
 800cc00:	4610      	mov	r0, r2
 800cc02:	4619      	mov	r1, r3
 800cc04:	4603      	mov	r3, r0
 800cc06:	4642      	mov	r2, r8
 800cc08:	189b      	adds	r3, r3, r2
 800cc0a:	66bb      	str	r3, [r7, #104]	; 0x68
 800cc0c:	464b      	mov	r3, r9
 800cc0e:	460a      	mov	r2, r1
 800cc10:	eb42 0303 	adc.w	r3, r2, r3
 800cc14:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cc16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc1a:	685b      	ldr	r3, [r3, #4]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	663b      	str	r3, [r7, #96]	; 0x60
 800cc20:	667a      	str	r2, [r7, #100]	; 0x64
 800cc22:	f04f 0200 	mov.w	r2, #0
 800cc26:	f04f 0300 	mov.w	r3, #0
 800cc2a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800cc2e:	4649      	mov	r1, r9
 800cc30:	008b      	lsls	r3, r1, #2
 800cc32:	4641      	mov	r1, r8
 800cc34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cc38:	4641      	mov	r1, r8
 800cc3a:	008a      	lsls	r2, r1, #2
 800cc3c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cc40:	f7f3 ffce 	bl	8000be0 <__aeabi_uldivmod>
 800cc44:	4602      	mov	r2, r0
 800cc46:	460b      	mov	r3, r1
 800cc48:	4b0d      	ldr	r3, [pc, #52]	; (800cc80 <UART_SetConfig+0x4e4>)
 800cc4a:	fba3 1302 	umull	r1, r3, r3, r2
 800cc4e:	095b      	lsrs	r3, r3, #5
 800cc50:	2164      	movs	r1, #100	; 0x64
 800cc52:	fb01 f303 	mul.w	r3, r1, r3
 800cc56:	1ad3      	subs	r3, r2, r3
 800cc58:	011b      	lsls	r3, r3, #4
 800cc5a:	3332      	adds	r3, #50	; 0x32
 800cc5c:	4a08      	ldr	r2, [pc, #32]	; (800cc80 <UART_SetConfig+0x4e4>)
 800cc5e:	fba2 2303 	umull	r2, r3, r2, r3
 800cc62:	095b      	lsrs	r3, r3, #5
 800cc64:	f003 020f 	and.w	r2, r3, #15
 800cc68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	4422      	add	r2, r4
 800cc70:	609a      	str	r2, [r3, #8]
}
 800cc72:	bf00      	nop
 800cc74:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cc7e:	bf00      	nop
 800cc80:	51eb851f 	.word	0x51eb851f

0800cc84 <__errno>:
 800cc84:	4b01      	ldr	r3, [pc, #4]	; (800cc8c <__errno+0x8>)
 800cc86:	6818      	ldr	r0, [r3, #0]
 800cc88:	4770      	bx	lr
 800cc8a:	bf00      	nop
 800cc8c:	20000240 	.word	0x20000240

0800cc90 <__libc_init_array>:
 800cc90:	b570      	push	{r4, r5, r6, lr}
 800cc92:	4d0d      	ldr	r5, [pc, #52]	; (800ccc8 <__libc_init_array+0x38>)
 800cc94:	4c0d      	ldr	r4, [pc, #52]	; (800cccc <__libc_init_array+0x3c>)
 800cc96:	1b64      	subs	r4, r4, r5
 800cc98:	10a4      	asrs	r4, r4, #2
 800cc9a:	2600      	movs	r6, #0
 800cc9c:	42a6      	cmp	r6, r4
 800cc9e:	d109      	bne.n	800ccb4 <__libc_init_array+0x24>
 800cca0:	4d0b      	ldr	r5, [pc, #44]	; (800ccd0 <__libc_init_array+0x40>)
 800cca2:	4c0c      	ldr	r4, [pc, #48]	; (800ccd4 <__libc_init_array+0x44>)
 800cca4:	f002 fb78 	bl	800f398 <_init>
 800cca8:	1b64      	subs	r4, r4, r5
 800ccaa:	10a4      	asrs	r4, r4, #2
 800ccac:	2600      	movs	r6, #0
 800ccae:	42a6      	cmp	r6, r4
 800ccb0:	d105      	bne.n	800ccbe <__libc_init_array+0x2e>
 800ccb2:	bd70      	pop	{r4, r5, r6, pc}
 800ccb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccb8:	4798      	blx	r3
 800ccba:	3601      	adds	r6, #1
 800ccbc:	e7ee      	b.n	800cc9c <__libc_init_array+0xc>
 800ccbe:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccc2:	4798      	blx	r3
 800ccc4:	3601      	adds	r6, #1
 800ccc6:	e7f2      	b.n	800ccae <__libc_init_array+0x1e>
 800ccc8:	0800f6a8 	.word	0x0800f6a8
 800cccc:	0800f6a8 	.word	0x0800f6a8
 800ccd0:	0800f6a8 	.word	0x0800f6a8
 800ccd4:	0800f6ac 	.word	0x0800f6ac

0800ccd8 <memcpy>:
 800ccd8:	440a      	add	r2, r1
 800ccda:	4291      	cmp	r1, r2
 800ccdc:	f100 33ff 	add.w	r3, r0, #4294967295
 800cce0:	d100      	bne.n	800cce4 <memcpy+0xc>
 800cce2:	4770      	bx	lr
 800cce4:	b510      	push	{r4, lr}
 800cce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ccee:	4291      	cmp	r1, r2
 800ccf0:	d1f9      	bne.n	800cce6 <memcpy+0xe>
 800ccf2:	bd10      	pop	{r4, pc}

0800ccf4 <memset>:
 800ccf4:	4402      	add	r2, r0
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d100      	bne.n	800ccfe <memset+0xa>
 800ccfc:	4770      	bx	lr
 800ccfe:	f803 1b01 	strb.w	r1, [r3], #1
 800cd02:	e7f9      	b.n	800ccf8 <memset+0x4>
 800cd04:	0000      	movs	r0, r0
	...

0800cd08 <cos>:
 800cd08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd0a:	ec53 2b10 	vmov	r2, r3, d0
 800cd0e:	4826      	ldr	r0, [pc, #152]	; (800cda8 <cos+0xa0>)
 800cd10:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cd14:	4281      	cmp	r1, r0
 800cd16:	dc06      	bgt.n	800cd26 <cos+0x1e>
 800cd18:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800cda0 <cos+0x98>
 800cd1c:	b005      	add	sp, #20
 800cd1e:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd22:	f001 bc71 	b.w	800e608 <__kernel_cos>
 800cd26:	4821      	ldr	r0, [pc, #132]	; (800cdac <cos+0xa4>)
 800cd28:	4281      	cmp	r1, r0
 800cd2a:	dd09      	ble.n	800cd40 <cos+0x38>
 800cd2c:	ee10 0a10 	vmov	r0, s0
 800cd30:	4619      	mov	r1, r3
 800cd32:	f7f3 fa55 	bl	80001e0 <__aeabi_dsub>
 800cd36:	ec41 0b10 	vmov	d0, r0, r1
 800cd3a:	b005      	add	sp, #20
 800cd3c:	f85d fb04 	ldr.w	pc, [sp], #4
 800cd40:	4668      	mov	r0, sp
 800cd42:	f000 fed1 	bl	800dae8 <__ieee754_rem_pio2>
 800cd46:	f000 0003 	and.w	r0, r0, #3
 800cd4a:	2801      	cmp	r0, #1
 800cd4c:	d00b      	beq.n	800cd66 <cos+0x5e>
 800cd4e:	2802      	cmp	r0, #2
 800cd50:	d016      	beq.n	800cd80 <cos+0x78>
 800cd52:	b9e0      	cbnz	r0, 800cd8e <cos+0x86>
 800cd54:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd58:	ed9d 0b00 	vldr	d0, [sp]
 800cd5c:	f001 fc54 	bl	800e608 <__kernel_cos>
 800cd60:	ec51 0b10 	vmov	r0, r1, d0
 800cd64:	e7e7      	b.n	800cd36 <cos+0x2e>
 800cd66:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd6a:	ed9d 0b00 	vldr	d0, [sp]
 800cd6e:	f002 f863 	bl	800ee38 <__kernel_sin>
 800cd72:	ec53 2b10 	vmov	r2, r3, d0
 800cd76:	ee10 0a10 	vmov	r0, s0
 800cd7a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cd7e:	e7da      	b.n	800cd36 <cos+0x2e>
 800cd80:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd84:	ed9d 0b00 	vldr	d0, [sp]
 800cd88:	f001 fc3e 	bl	800e608 <__kernel_cos>
 800cd8c:	e7f1      	b.n	800cd72 <cos+0x6a>
 800cd8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd92:	ed9d 0b00 	vldr	d0, [sp]
 800cd96:	2001      	movs	r0, #1
 800cd98:	f002 f84e 	bl	800ee38 <__kernel_sin>
 800cd9c:	e7e0      	b.n	800cd60 <cos+0x58>
 800cd9e:	bf00      	nop
	...
 800cda8:	3fe921fb 	.word	0x3fe921fb
 800cdac:	7fefffff 	.word	0x7fefffff

0800cdb0 <sin>:
 800cdb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cdb2:	ec53 2b10 	vmov	r2, r3, d0
 800cdb6:	4828      	ldr	r0, [pc, #160]	; (800ce58 <sin+0xa8>)
 800cdb8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cdbc:	4281      	cmp	r1, r0
 800cdbe:	dc07      	bgt.n	800cdd0 <sin+0x20>
 800cdc0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800ce50 <sin+0xa0>
 800cdc4:	2000      	movs	r0, #0
 800cdc6:	b005      	add	sp, #20
 800cdc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdcc:	f002 b834 	b.w	800ee38 <__kernel_sin>
 800cdd0:	4822      	ldr	r0, [pc, #136]	; (800ce5c <sin+0xac>)
 800cdd2:	4281      	cmp	r1, r0
 800cdd4:	dd09      	ble.n	800cdea <sin+0x3a>
 800cdd6:	ee10 0a10 	vmov	r0, s0
 800cdda:	4619      	mov	r1, r3
 800cddc:	f7f3 fa00 	bl	80001e0 <__aeabi_dsub>
 800cde0:	ec41 0b10 	vmov	d0, r0, r1
 800cde4:	b005      	add	sp, #20
 800cde6:	f85d fb04 	ldr.w	pc, [sp], #4
 800cdea:	4668      	mov	r0, sp
 800cdec:	f000 fe7c 	bl	800dae8 <__ieee754_rem_pio2>
 800cdf0:	f000 0003 	and.w	r0, r0, #3
 800cdf4:	2801      	cmp	r0, #1
 800cdf6:	d00c      	beq.n	800ce12 <sin+0x62>
 800cdf8:	2802      	cmp	r0, #2
 800cdfa:	d011      	beq.n	800ce20 <sin+0x70>
 800cdfc:	b9f0      	cbnz	r0, 800ce3c <sin+0x8c>
 800cdfe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ce02:	ed9d 0b00 	vldr	d0, [sp]
 800ce06:	2001      	movs	r0, #1
 800ce08:	f002 f816 	bl	800ee38 <__kernel_sin>
 800ce0c:	ec51 0b10 	vmov	r0, r1, d0
 800ce10:	e7e6      	b.n	800cde0 <sin+0x30>
 800ce12:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ce16:	ed9d 0b00 	vldr	d0, [sp]
 800ce1a:	f001 fbf5 	bl	800e608 <__kernel_cos>
 800ce1e:	e7f5      	b.n	800ce0c <sin+0x5c>
 800ce20:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ce24:	ed9d 0b00 	vldr	d0, [sp]
 800ce28:	2001      	movs	r0, #1
 800ce2a:	f002 f805 	bl	800ee38 <__kernel_sin>
 800ce2e:	ec53 2b10 	vmov	r2, r3, d0
 800ce32:	ee10 0a10 	vmov	r0, s0
 800ce36:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ce3a:	e7d1      	b.n	800cde0 <sin+0x30>
 800ce3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ce40:	ed9d 0b00 	vldr	d0, [sp]
 800ce44:	f001 fbe0 	bl	800e608 <__kernel_cos>
 800ce48:	e7f1      	b.n	800ce2e <sin+0x7e>
 800ce4a:	bf00      	nop
 800ce4c:	f3af 8000 	nop.w
	...
 800ce58:	3fe921fb 	.word	0x3fe921fb
 800ce5c:	7fefffff 	.word	0x7fefffff

0800ce60 <pow>:
 800ce60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce62:	ed2d 8b02 	vpush	{d8}
 800ce66:	eeb0 8a40 	vmov.f32	s16, s0
 800ce6a:	eef0 8a60 	vmov.f32	s17, s1
 800ce6e:	ec55 4b11 	vmov	r4, r5, d1
 800ce72:	f000 f909 	bl	800d088 <__ieee754_pow>
 800ce76:	4622      	mov	r2, r4
 800ce78:	462b      	mov	r3, r5
 800ce7a:	4620      	mov	r0, r4
 800ce7c:	4629      	mov	r1, r5
 800ce7e:	ec57 6b10 	vmov	r6, r7, d0
 800ce82:	f7f3 fdff 	bl	8000a84 <__aeabi_dcmpun>
 800ce86:	2800      	cmp	r0, #0
 800ce88:	d13b      	bne.n	800cf02 <pow+0xa2>
 800ce8a:	ec51 0b18 	vmov	r0, r1, d8
 800ce8e:	2200      	movs	r2, #0
 800ce90:	2300      	movs	r3, #0
 800ce92:	f7f3 fdc5 	bl	8000a20 <__aeabi_dcmpeq>
 800ce96:	b1b8      	cbz	r0, 800cec8 <pow+0x68>
 800ce98:	2200      	movs	r2, #0
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	4620      	mov	r0, r4
 800ce9e:	4629      	mov	r1, r5
 800cea0:	f7f3 fdbe 	bl	8000a20 <__aeabi_dcmpeq>
 800cea4:	2800      	cmp	r0, #0
 800cea6:	d146      	bne.n	800cf36 <pow+0xd6>
 800cea8:	ec45 4b10 	vmov	d0, r4, r5
 800ceac:	f002 f8dd 	bl	800f06a <finite>
 800ceb0:	b338      	cbz	r0, 800cf02 <pow+0xa2>
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	4620      	mov	r0, r4
 800ceb8:	4629      	mov	r1, r5
 800ceba:	f7f3 fdbb 	bl	8000a34 <__aeabi_dcmplt>
 800cebe:	b300      	cbz	r0, 800cf02 <pow+0xa2>
 800cec0:	f7ff fee0 	bl	800cc84 <__errno>
 800cec4:	2322      	movs	r3, #34	; 0x22
 800cec6:	e01b      	b.n	800cf00 <pow+0xa0>
 800cec8:	ec47 6b10 	vmov	d0, r6, r7
 800cecc:	f002 f8cd 	bl	800f06a <finite>
 800ced0:	b9e0      	cbnz	r0, 800cf0c <pow+0xac>
 800ced2:	eeb0 0a48 	vmov.f32	s0, s16
 800ced6:	eef0 0a68 	vmov.f32	s1, s17
 800ceda:	f002 f8c6 	bl	800f06a <finite>
 800cede:	b1a8      	cbz	r0, 800cf0c <pow+0xac>
 800cee0:	ec45 4b10 	vmov	d0, r4, r5
 800cee4:	f002 f8c1 	bl	800f06a <finite>
 800cee8:	b180      	cbz	r0, 800cf0c <pow+0xac>
 800ceea:	4632      	mov	r2, r6
 800ceec:	463b      	mov	r3, r7
 800ceee:	4630      	mov	r0, r6
 800cef0:	4639      	mov	r1, r7
 800cef2:	f7f3 fdc7 	bl	8000a84 <__aeabi_dcmpun>
 800cef6:	2800      	cmp	r0, #0
 800cef8:	d0e2      	beq.n	800cec0 <pow+0x60>
 800cefa:	f7ff fec3 	bl	800cc84 <__errno>
 800cefe:	2321      	movs	r3, #33	; 0x21
 800cf00:	6003      	str	r3, [r0, #0]
 800cf02:	ecbd 8b02 	vpop	{d8}
 800cf06:	ec47 6b10 	vmov	d0, r6, r7
 800cf0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	2300      	movs	r3, #0
 800cf10:	4630      	mov	r0, r6
 800cf12:	4639      	mov	r1, r7
 800cf14:	f7f3 fd84 	bl	8000a20 <__aeabi_dcmpeq>
 800cf18:	2800      	cmp	r0, #0
 800cf1a:	d0f2      	beq.n	800cf02 <pow+0xa2>
 800cf1c:	eeb0 0a48 	vmov.f32	s0, s16
 800cf20:	eef0 0a68 	vmov.f32	s1, s17
 800cf24:	f002 f8a1 	bl	800f06a <finite>
 800cf28:	2800      	cmp	r0, #0
 800cf2a:	d0ea      	beq.n	800cf02 <pow+0xa2>
 800cf2c:	ec45 4b10 	vmov	d0, r4, r5
 800cf30:	f002 f89b 	bl	800f06a <finite>
 800cf34:	e7c3      	b.n	800cebe <pow+0x5e>
 800cf36:	4f01      	ldr	r7, [pc, #4]	; (800cf3c <pow+0xdc>)
 800cf38:	2600      	movs	r6, #0
 800cf3a:	e7e2      	b.n	800cf02 <pow+0xa2>
 800cf3c:	3ff00000 	.word	0x3ff00000

0800cf40 <sqrt>:
 800cf40:	b538      	push	{r3, r4, r5, lr}
 800cf42:	ed2d 8b02 	vpush	{d8}
 800cf46:	ec55 4b10 	vmov	r4, r5, d0
 800cf4a:	f000 ffd9 	bl	800df00 <__ieee754_sqrt>
 800cf4e:	4622      	mov	r2, r4
 800cf50:	462b      	mov	r3, r5
 800cf52:	4620      	mov	r0, r4
 800cf54:	4629      	mov	r1, r5
 800cf56:	eeb0 8a40 	vmov.f32	s16, s0
 800cf5a:	eef0 8a60 	vmov.f32	s17, s1
 800cf5e:	f7f3 fd91 	bl	8000a84 <__aeabi_dcmpun>
 800cf62:	b990      	cbnz	r0, 800cf8a <sqrt+0x4a>
 800cf64:	2200      	movs	r2, #0
 800cf66:	2300      	movs	r3, #0
 800cf68:	4620      	mov	r0, r4
 800cf6a:	4629      	mov	r1, r5
 800cf6c:	f7f3 fd62 	bl	8000a34 <__aeabi_dcmplt>
 800cf70:	b158      	cbz	r0, 800cf8a <sqrt+0x4a>
 800cf72:	f7ff fe87 	bl	800cc84 <__errno>
 800cf76:	2321      	movs	r3, #33	; 0x21
 800cf78:	6003      	str	r3, [r0, #0]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	4610      	mov	r0, r2
 800cf80:	4619      	mov	r1, r3
 800cf82:	f7f3 fc0f 	bl	80007a4 <__aeabi_ddiv>
 800cf86:	ec41 0b18 	vmov	d8, r0, r1
 800cf8a:	eeb0 0a48 	vmov.f32	s0, s16
 800cf8e:	eef0 0a68 	vmov.f32	s1, s17
 800cf92:	ecbd 8b02 	vpop	{d8}
 800cf96:	bd38      	pop	{r3, r4, r5, pc}

0800cf98 <powf>:
 800cf98:	b508      	push	{r3, lr}
 800cf9a:	ed2d 8b04 	vpush	{d8-d9}
 800cf9e:	eeb0 8a60 	vmov.f32	s16, s1
 800cfa2:	eeb0 9a40 	vmov.f32	s18, s0
 800cfa6:	f001 f85d 	bl	800e064 <__ieee754_powf>
 800cfaa:	eeb4 8a48 	vcmp.f32	s16, s16
 800cfae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfb2:	eef0 8a40 	vmov.f32	s17, s0
 800cfb6:	d63e      	bvs.n	800d036 <powf+0x9e>
 800cfb8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800cfbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfc0:	d112      	bne.n	800cfe8 <powf+0x50>
 800cfc2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800cfc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfca:	d039      	beq.n	800d040 <powf+0xa8>
 800cfcc:	eeb0 0a48 	vmov.f32	s0, s16
 800cfd0:	f002 f963 	bl	800f29a <finitef>
 800cfd4:	b378      	cbz	r0, 800d036 <powf+0x9e>
 800cfd6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800cfda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfde:	d52a      	bpl.n	800d036 <powf+0x9e>
 800cfe0:	f7ff fe50 	bl	800cc84 <__errno>
 800cfe4:	2322      	movs	r3, #34	; 0x22
 800cfe6:	e014      	b.n	800d012 <powf+0x7a>
 800cfe8:	f002 f957 	bl	800f29a <finitef>
 800cfec:	b998      	cbnz	r0, 800d016 <powf+0x7e>
 800cfee:	eeb0 0a49 	vmov.f32	s0, s18
 800cff2:	f002 f952 	bl	800f29a <finitef>
 800cff6:	b170      	cbz	r0, 800d016 <powf+0x7e>
 800cff8:	eeb0 0a48 	vmov.f32	s0, s16
 800cffc:	f002 f94d 	bl	800f29a <finitef>
 800d000:	b148      	cbz	r0, 800d016 <powf+0x7e>
 800d002:	eef4 8a68 	vcmp.f32	s17, s17
 800d006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d00a:	d7e9      	bvc.n	800cfe0 <powf+0x48>
 800d00c:	f7ff fe3a 	bl	800cc84 <__errno>
 800d010:	2321      	movs	r3, #33	; 0x21
 800d012:	6003      	str	r3, [r0, #0]
 800d014:	e00f      	b.n	800d036 <powf+0x9e>
 800d016:	eef5 8a40 	vcmp.f32	s17, #0.0
 800d01a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d01e:	d10a      	bne.n	800d036 <powf+0x9e>
 800d020:	eeb0 0a49 	vmov.f32	s0, s18
 800d024:	f002 f939 	bl	800f29a <finitef>
 800d028:	b128      	cbz	r0, 800d036 <powf+0x9e>
 800d02a:	eeb0 0a48 	vmov.f32	s0, s16
 800d02e:	f002 f934 	bl	800f29a <finitef>
 800d032:	2800      	cmp	r0, #0
 800d034:	d1d4      	bne.n	800cfe0 <powf+0x48>
 800d036:	eeb0 0a68 	vmov.f32	s0, s17
 800d03a:	ecbd 8b04 	vpop	{d8-d9}
 800d03e:	bd08      	pop	{r3, pc}
 800d040:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800d044:	e7f7      	b.n	800d036 <powf+0x9e>
	...

0800d048 <sqrtf>:
 800d048:	b508      	push	{r3, lr}
 800d04a:	ed2d 8b02 	vpush	{d8}
 800d04e:	eeb0 8a40 	vmov.f32	s16, s0
 800d052:	f001 fad5 	bl	800e600 <__ieee754_sqrtf>
 800d056:	eeb4 8a48 	vcmp.f32	s16, s16
 800d05a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d05e:	d60c      	bvs.n	800d07a <sqrtf+0x32>
 800d060:	eddf 8a07 	vldr	s17, [pc, #28]	; 800d080 <sqrtf+0x38>
 800d064:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d06c:	d505      	bpl.n	800d07a <sqrtf+0x32>
 800d06e:	f7ff fe09 	bl	800cc84 <__errno>
 800d072:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d076:	2321      	movs	r3, #33	; 0x21
 800d078:	6003      	str	r3, [r0, #0]
 800d07a:	ecbd 8b02 	vpop	{d8}
 800d07e:	bd08      	pop	{r3, pc}
	...

0800d088 <__ieee754_pow>:
 800d088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d08c:	ed2d 8b06 	vpush	{d8-d10}
 800d090:	b089      	sub	sp, #36	; 0x24
 800d092:	ed8d 1b00 	vstr	d1, [sp]
 800d096:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d09a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d09e:	ea58 0102 	orrs.w	r1, r8, r2
 800d0a2:	ec57 6b10 	vmov	r6, r7, d0
 800d0a6:	d115      	bne.n	800d0d4 <__ieee754_pow+0x4c>
 800d0a8:	19b3      	adds	r3, r6, r6
 800d0aa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800d0ae:	4152      	adcs	r2, r2
 800d0b0:	4299      	cmp	r1, r3
 800d0b2:	4b89      	ldr	r3, [pc, #548]	; (800d2d8 <__ieee754_pow+0x250>)
 800d0b4:	4193      	sbcs	r3, r2
 800d0b6:	f080 84d2 	bcs.w	800da5e <__ieee754_pow+0x9d6>
 800d0ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0be:	4630      	mov	r0, r6
 800d0c0:	4639      	mov	r1, r7
 800d0c2:	f7f3 f88f 	bl	80001e4 <__adddf3>
 800d0c6:	ec41 0b10 	vmov	d0, r0, r1
 800d0ca:	b009      	add	sp, #36	; 0x24
 800d0cc:	ecbd 8b06 	vpop	{d8-d10}
 800d0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0d4:	4b81      	ldr	r3, [pc, #516]	; (800d2dc <__ieee754_pow+0x254>)
 800d0d6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800d0da:	429c      	cmp	r4, r3
 800d0dc:	ee10 aa10 	vmov	sl, s0
 800d0e0:	463d      	mov	r5, r7
 800d0e2:	dc06      	bgt.n	800d0f2 <__ieee754_pow+0x6a>
 800d0e4:	d101      	bne.n	800d0ea <__ieee754_pow+0x62>
 800d0e6:	2e00      	cmp	r6, #0
 800d0e8:	d1e7      	bne.n	800d0ba <__ieee754_pow+0x32>
 800d0ea:	4598      	cmp	r8, r3
 800d0ec:	dc01      	bgt.n	800d0f2 <__ieee754_pow+0x6a>
 800d0ee:	d10f      	bne.n	800d110 <__ieee754_pow+0x88>
 800d0f0:	b172      	cbz	r2, 800d110 <__ieee754_pow+0x88>
 800d0f2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800d0f6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800d0fa:	ea55 050a 	orrs.w	r5, r5, sl
 800d0fe:	d1dc      	bne.n	800d0ba <__ieee754_pow+0x32>
 800d100:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d104:	18db      	adds	r3, r3, r3
 800d106:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800d10a:	4152      	adcs	r2, r2
 800d10c:	429d      	cmp	r5, r3
 800d10e:	e7d0      	b.n	800d0b2 <__ieee754_pow+0x2a>
 800d110:	2d00      	cmp	r5, #0
 800d112:	da3b      	bge.n	800d18c <__ieee754_pow+0x104>
 800d114:	4b72      	ldr	r3, [pc, #456]	; (800d2e0 <__ieee754_pow+0x258>)
 800d116:	4598      	cmp	r8, r3
 800d118:	dc51      	bgt.n	800d1be <__ieee754_pow+0x136>
 800d11a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d11e:	4598      	cmp	r8, r3
 800d120:	f340 84ac 	ble.w	800da7c <__ieee754_pow+0x9f4>
 800d124:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d128:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d12c:	2b14      	cmp	r3, #20
 800d12e:	dd0f      	ble.n	800d150 <__ieee754_pow+0xc8>
 800d130:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d134:	fa22 f103 	lsr.w	r1, r2, r3
 800d138:	fa01 f303 	lsl.w	r3, r1, r3
 800d13c:	4293      	cmp	r3, r2
 800d13e:	f040 849d 	bne.w	800da7c <__ieee754_pow+0x9f4>
 800d142:	f001 0101 	and.w	r1, r1, #1
 800d146:	f1c1 0302 	rsb	r3, r1, #2
 800d14a:	9304      	str	r3, [sp, #16]
 800d14c:	b182      	cbz	r2, 800d170 <__ieee754_pow+0xe8>
 800d14e:	e05f      	b.n	800d210 <__ieee754_pow+0x188>
 800d150:	2a00      	cmp	r2, #0
 800d152:	d15b      	bne.n	800d20c <__ieee754_pow+0x184>
 800d154:	f1c3 0314 	rsb	r3, r3, #20
 800d158:	fa48 f103 	asr.w	r1, r8, r3
 800d15c:	fa01 f303 	lsl.w	r3, r1, r3
 800d160:	4543      	cmp	r3, r8
 800d162:	f040 8488 	bne.w	800da76 <__ieee754_pow+0x9ee>
 800d166:	f001 0101 	and.w	r1, r1, #1
 800d16a:	f1c1 0302 	rsb	r3, r1, #2
 800d16e:	9304      	str	r3, [sp, #16]
 800d170:	4b5c      	ldr	r3, [pc, #368]	; (800d2e4 <__ieee754_pow+0x25c>)
 800d172:	4598      	cmp	r8, r3
 800d174:	d132      	bne.n	800d1dc <__ieee754_pow+0x154>
 800d176:	f1b9 0f00 	cmp.w	r9, #0
 800d17a:	f280 8478 	bge.w	800da6e <__ieee754_pow+0x9e6>
 800d17e:	4959      	ldr	r1, [pc, #356]	; (800d2e4 <__ieee754_pow+0x25c>)
 800d180:	4632      	mov	r2, r6
 800d182:	463b      	mov	r3, r7
 800d184:	2000      	movs	r0, #0
 800d186:	f7f3 fb0d 	bl	80007a4 <__aeabi_ddiv>
 800d18a:	e79c      	b.n	800d0c6 <__ieee754_pow+0x3e>
 800d18c:	2300      	movs	r3, #0
 800d18e:	9304      	str	r3, [sp, #16]
 800d190:	2a00      	cmp	r2, #0
 800d192:	d13d      	bne.n	800d210 <__ieee754_pow+0x188>
 800d194:	4b51      	ldr	r3, [pc, #324]	; (800d2dc <__ieee754_pow+0x254>)
 800d196:	4598      	cmp	r8, r3
 800d198:	d1ea      	bne.n	800d170 <__ieee754_pow+0xe8>
 800d19a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d19e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d1a2:	ea53 030a 	orrs.w	r3, r3, sl
 800d1a6:	f000 845a 	beq.w	800da5e <__ieee754_pow+0x9d6>
 800d1aa:	4b4f      	ldr	r3, [pc, #316]	; (800d2e8 <__ieee754_pow+0x260>)
 800d1ac:	429c      	cmp	r4, r3
 800d1ae:	dd08      	ble.n	800d1c2 <__ieee754_pow+0x13a>
 800d1b0:	f1b9 0f00 	cmp.w	r9, #0
 800d1b4:	f2c0 8457 	blt.w	800da66 <__ieee754_pow+0x9de>
 800d1b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d1bc:	e783      	b.n	800d0c6 <__ieee754_pow+0x3e>
 800d1be:	2302      	movs	r3, #2
 800d1c0:	e7e5      	b.n	800d18e <__ieee754_pow+0x106>
 800d1c2:	f1b9 0f00 	cmp.w	r9, #0
 800d1c6:	f04f 0000 	mov.w	r0, #0
 800d1ca:	f04f 0100 	mov.w	r1, #0
 800d1ce:	f6bf af7a 	bge.w	800d0c6 <__ieee754_pow+0x3e>
 800d1d2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d1d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d1da:	e774      	b.n	800d0c6 <__ieee754_pow+0x3e>
 800d1dc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d1e0:	d106      	bne.n	800d1f0 <__ieee754_pow+0x168>
 800d1e2:	4632      	mov	r2, r6
 800d1e4:	463b      	mov	r3, r7
 800d1e6:	4630      	mov	r0, r6
 800d1e8:	4639      	mov	r1, r7
 800d1ea:	f7f3 f9b1 	bl	8000550 <__aeabi_dmul>
 800d1ee:	e76a      	b.n	800d0c6 <__ieee754_pow+0x3e>
 800d1f0:	4b3e      	ldr	r3, [pc, #248]	; (800d2ec <__ieee754_pow+0x264>)
 800d1f2:	4599      	cmp	r9, r3
 800d1f4:	d10c      	bne.n	800d210 <__ieee754_pow+0x188>
 800d1f6:	2d00      	cmp	r5, #0
 800d1f8:	db0a      	blt.n	800d210 <__ieee754_pow+0x188>
 800d1fa:	ec47 6b10 	vmov	d0, r6, r7
 800d1fe:	b009      	add	sp, #36	; 0x24
 800d200:	ecbd 8b06 	vpop	{d8-d10}
 800d204:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d208:	f000 be7a 	b.w	800df00 <__ieee754_sqrt>
 800d20c:	2300      	movs	r3, #0
 800d20e:	9304      	str	r3, [sp, #16]
 800d210:	ec47 6b10 	vmov	d0, r6, r7
 800d214:	f001 ff20 	bl	800f058 <fabs>
 800d218:	ec51 0b10 	vmov	r0, r1, d0
 800d21c:	f1ba 0f00 	cmp.w	sl, #0
 800d220:	d129      	bne.n	800d276 <__ieee754_pow+0x1ee>
 800d222:	b124      	cbz	r4, 800d22e <__ieee754_pow+0x1a6>
 800d224:	4b2f      	ldr	r3, [pc, #188]	; (800d2e4 <__ieee754_pow+0x25c>)
 800d226:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d22a:	429a      	cmp	r2, r3
 800d22c:	d123      	bne.n	800d276 <__ieee754_pow+0x1ee>
 800d22e:	f1b9 0f00 	cmp.w	r9, #0
 800d232:	da05      	bge.n	800d240 <__ieee754_pow+0x1b8>
 800d234:	4602      	mov	r2, r0
 800d236:	460b      	mov	r3, r1
 800d238:	2000      	movs	r0, #0
 800d23a:	492a      	ldr	r1, [pc, #168]	; (800d2e4 <__ieee754_pow+0x25c>)
 800d23c:	f7f3 fab2 	bl	80007a4 <__aeabi_ddiv>
 800d240:	2d00      	cmp	r5, #0
 800d242:	f6bf af40 	bge.w	800d0c6 <__ieee754_pow+0x3e>
 800d246:	9b04      	ldr	r3, [sp, #16]
 800d248:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d24c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d250:	4323      	orrs	r3, r4
 800d252:	d108      	bne.n	800d266 <__ieee754_pow+0x1de>
 800d254:	4602      	mov	r2, r0
 800d256:	460b      	mov	r3, r1
 800d258:	4610      	mov	r0, r2
 800d25a:	4619      	mov	r1, r3
 800d25c:	f7f2 ffc0 	bl	80001e0 <__aeabi_dsub>
 800d260:	4602      	mov	r2, r0
 800d262:	460b      	mov	r3, r1
 800d264:	e78f      	b.n	800d186 <__ieee754_pow+0xfe>
 800d266:	9b04      	ldr	r3, [sp, #16]
 800d268:	2b01      	cmp	r3, #1
 800d26a:	f47f af2c 	bne.w	800d0c6 <__ieee754_pow+0x3e>
 800d26e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d272:	4619      	mov	r1, r3
 800d274:	e727      	b.n	800d0c6 <__ieee754_pow+0x3e>
 800d276:	0feb      	lsrs	r3, r5, #31
 800d278:	3b01      	subs	r3, #1
 800d27a:	9306      	str	r3, [sp, #24]
 800d27c:	9a06      	ldr	r2, [sp, #24]
 800d27e:	9b04      	ldr	r3, [sp, #16]
 800d280:	4313      	orrs	r3, r2
 800d282:	d102      	bne.n	800d28a <__ieee754_pow+0x202>
 800d284:	4632      	mov	r2, r6
 800d286:	463b      	mov	r3, r7
 800d288:	e7e6      	b.n	800d258 <__ieee754_pow+0x1d0>
 800d28a:	4b19      	ldr	r3, [pc, #100]	; (800d2f0 <__ieee754_pow+0x268>)
 800d28c:	4598      	cmp	r8, r3
 800d28e:	f340 80fb 	ble.w	800d488 <__ieee754_pow+0x400>
 800d292:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d296:	4598      	cmp	r8, r3
 800d298:	4b13      	ldr	r3, [pc, #76]	; (800d2e8 <__ieee754_pow+0x260>)
 800d29a:	dd0c      	ble.n	800d2b6 <__ieee754_pow+0x22e>
 800d29c:	429c      	cmp	r4, r3
 800d29e:	dc0f      	bgt.n	800d2c0 <__ieee754_pow+0x238>
 800d2a0:	f1b9 0f00 	cmp.w	r9, #0
 800d2a4:	da0f      	bge.n	800d2c6 <__ieee754_pow+0x23e>
 800d2a6:	2000      	movs	r0, #0
 800d2a8:	b009      	add	sp, #36	; 0x24
 800d2aa:	ecbd 8b06 	vpop	{d8-d10}
 800d2ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2b2:	f001 bea6 	b.w	800f002 <__math_oflow>
 800d2b6:	429c      	cmp	r4, r3
 800d2b8:	dbf2      	blt.n	800d2a0 <__ieee754_pow+0x218>
 800d2ba:	4b0a      	ldr	r3, [pc, #40]	; (800d2e4 <__ieee754_pow+0x25c>)
 800d2bc:	429c      	cmp	r4, r3
 800d2be:	dd19      	ble.n	800d2f4 <__ieee754_pow+0x26c>
 800d2c0:	f1b9 0f00 	cmp.w	r9, #0
 800d2c4:	dcef      	bgt.n	800d2a6 <__ieee754_pow+0x21e>
 800d2c6:	2000      	movs	r0, #0
 800d2c8:	b009      	add	sp, #36	; 0x24
 800d2ca:	ecbd 8b06 	vpop	{d8-d10}
 800d2ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2d2:	f001 be8d 	b.w	800eff0 <__math_uflow>
 800d2d6:	bf00      	nop
 800d2d8:	fff00000 	.word	0xfff00000
 800d2dc:	7ff00000 	.word	0x7ff00000
 800d2e0:	433fffff 	.word	0x433fffff
 800d2e4:	3ff00000 	.word	0x3ff00000
 800d2e8:	3fefffff 	.word	0x3fefffff
 800d2ec:	3fe00000 	.word	0x3fe00000
 800d2f0:	41e00000 	.word	0x41e00000
 800d2f4:	4b60      	ldr	r3, [pc, #384]	; (800d478 <__ieee754_pow+0x3f0>)
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	f7f2 ff72 	bl	80001e0 <__aeabi_dsub>
 800d2fc:	a354      	add	r3, pc, #336	; (adr r3, 800d450 <__ieee754_pow+0x3c8>)
 800d2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d302:	4604      	mov	r4, r0
 800d304:	460d      	mov	r5, r1
 800d306:	f7f3 f923 	bl	8000550 <__aeabi_dmul>
 800d30a:	a353      	add	r3, pc, #332	; (adr r3, 800d458 <__ieee754_pow+0x3d0>)
 800d30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d310:	4606      	mov	r6, r0
 800d312:	460f      	mov	r7, r1
 800d314:	4620      	mov	r0, r4
 800d316:	4629      	mov	r1, r5
 800d318:	f7f3 f91a 	bl	8000550 <__aeabi_dmul>
 800d31c:	4b57      	ldr	r3, [pc, #348]	; (800d47c <__ieee754_pow+0x3f4>)
 800d31e:	4682      	mov	sl, r0
 800d320:	468b      	mov	fp, r1
 800d322:	2200      	movs	r2, #0
 800d324:	4620      	mov	r0, r4
 800d326:	4629      	mov	r1, r5
 800d328:	f7f3 f912 	bl	8000550 <__aeabi_dmul>
 800d32c:	4602      	mov	r2, r0
 800d32e:	460b      	mov	r3, r1
 800d330:	a14b      	add	r1, pc, #300	; (adr r1, 800d460 <__ieee754_pow+0x3d8>)
 800d332:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d336:	f7f2 ff53 	bl	80001e0 <__aeabi_dsub>
 800d33a:	4622      	mov	r2, r4
 800d33c:	462b      	mov	r3, r5
 800d33e:	f7f3 f907 	bl	8000550 <__aeabi_dmul>
 800d342:	4602      	mov	r2, r0
 800d344:	460b      	mov	r3, r1
 800d346:	2000      	movs	r0, #0
 800d348:	494d      	ldr	r1, [pc, #308]	; (800d480 <__ieee754_pow+0x3f8>)
 800d34a:	f7f2 ff49 	bl	80001e0 <__aeabi_dsub>
 800d34e:	4622      	mov	r2, r4
 800d350:	4680      	mov	r8, r0
 800d352:	4689      	mov	r9, r1
 800d354:	462b      	mov	r3, r5
 800d356:	4620      	mov	r0, r4
 800d358:	4629      	mov	r1, r5
 800d35a:	f7f3 f8f9 	bl	8000550 <__aeabi_dmul>
 800d35e:	4602      	mov	r2, r0
 800d360:	460b      	mov	r3, r1
 800d362:	4640      	mov	r0, r8
 800d364:	4649      	mov	r1, r9
 800d366:	f7f3 f8f3 	bl	8000550 <__aeabi_dmul>
 800d36a:	a33f      	add	r3, pc, #252	; (adr r3, 800d468 <__ieee754_pow+0x3e0>)
 800d36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d370:	f7f3 f8ee 	bl	8000550 <__aeabi_dmul>
 800d374:	4602      	mov	r2, r0
 800d376:	460b      	mov	r3, r1
 800d378:	4650      	mov	r0, sl
 800d37a:	4659      	mov	r1, fp
 800d37c:	f7f2 ff30 	bl	80001e0 <__aeabi_dsub>
 800d380:	4602      	mov	r2, r0
 800d382:	460b      	mov	r3, r1
 800d384:	4680      	mov	r8, r0
 800d386:	4689      	mov	r9, r1
 800d388:	4630      	mov	r0, r6
 800d38a:	4639      	mov	r1, r7
 800d38c:	f7f2 ff2a 	bl	80001e4 <__adddf3>
 800d390:	2000      	movs	r0, #0
 800d392:	4632      	mov	r2, r6
 800d394:	463b      	mov	r3, r7
 800d396:	4604      	mov	r4, r0
 800d398:	460d      	mov	r5, r1
 800d39a:	f7f2 ff21 	bl	80001e0 <__aeabi_dsub>
 800d39e:	4602      	mov	r2, r0
 800d3a0:	460b      	mov	r3, r1
 800d3a2:	4640      	mov	r0, r8
 800d3a4:	4649      	mov	r1, r9
 800d3a6:	f7f2 ff1b 	bl	80001e0 <__aeabi_dsub>
 800d3aa:	9b04      	ldr	r3, [sp, #16]
 800d3ac:	9a06      	ldr	r2, [sp, #24]
 800d3ae:	3b01      	subs	r3, #1
 800d3b0:	4313      	orrs	r3, r2
 800d3b2:	4682      	mov	sl, r0
 800d3b4:	468b      	mov	fp, r1
 800d3b6:	f040 81e7 	bne.w	800d788 <__ieee754_pow+0x700>
 800d3ba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800d470 <__ieee754_pow+0x3e8>
 800d3be:	eeb0 8a47 	vmov.f32	s16, s14
 800d3c2:	eef0 8a67 	vmov.f32	s17, s15
 800d3c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d3ca:	2600      	movs	r6, #0
 800d3cc:	4632      	mov	r2, r6
 800d3ce:	463b      	mov	r3, r7
 800d3d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d3d4:	f7f2 ff04 	bl	80001e0 <__aeabi_dsub>
 800d3d8:	4622      	mov	r2, r4
 800d3da:	462b      	mov	r3, r5
 800d3dc:	f7f3 f8b8 	bl	8000550 <__aeabi_dmul>
 800d3e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d3e4:	4680      	mov	r8, r0
 800d3e6:	4689      	mov	r9, r1
 800d3e8:	4650      	mov	r0, sl
 800d3ea:	4659      	mov	r1, fp
 800d3ec:	f7f3 f8b0 	bl	8000550 <__aeabi_dmul>
 800d3f0:	4602      	mov	r2, r0
 800d3f2:	460b      	mov	r3, r1
 800d3f4:	4640      	mov	r0, r8
 800d3f6:	4649      	mov	r1, r9
 800d3f8:	f7f2 fef4 	bl	80001e4 <__adddf3>
 800d3fc:	4632      	mov	r2, r6
 800d3fe:	463b      	mov	r3, r7
 800d400:	4680      	mov	r8, r0
 800d402:	4689      	mov	r9, r1
 800d404:	4620      	mov	r0, r4
 800d406:	4629      	mov	r1, r5
 800d408:	f7f3 f8a2 	bl	8000550 <__aeabi_dmul>
 800d40c:	460b      	mov	r3, r1
 800d40e:	4604      	mov	r4, r0
 800d410:	460d      	mov	r5, r1
 800d412:	4602      	mov	r2, r0
 800d414:	4649      	mov	r1, r9
 800d416:	4640      	mov	r0, r8
 800d418:	f7f2 fee4 	bl	80001e4 <__adddf3>
 800d41c:	4b19      	ldr	r3, [pc, #100]	; (800d484 <__ieee754_pow+0x3fc>)
 800d41e:	4299      	cmp	r1, r3
 800d420:	ec45 4b19 	vmov	d9, r4, r5
 800d424:	4606      	mov	r6, r0
 800d426:	460f      	mov	r7, r1
 800d428:	468b      	mov	fp, r1
 800d42a:	f340 82f1 	ble.w	800da10 <__ieee754_pow+0x988>
 800d42e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d432:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d436:	4303      	orrs	r3, r0
 800d438:	f000 81e4 	beq.w	800d804 <__ieee754_pow+0x77c>
 800d43c:	ec51 0b18 	vmov	r0, r1, d8
 800d440:	2200      	movs	r2, #0
 800d442:	2300      	movs	r3, #0
 800d444:	f7f3 faf6 	bl	8000a34 <__aeabi_dcmplt>
 800d448:	3800      	subs	r0, #0
 800d44a:	bf18      	it	ne
 800d44c:	2001      	movne	r0, #1
 800d44e:	e72b      	b.n	800d2a8 <__ieee754_pow+0x220>
 800d450:	60000000 	.word	0x60000000
 800d454:	3ff71547 	.word	0x3ff71547
 800d458:	f85ddf44 	.word	0xf85ddf44
 800d45c:	3e54ae0b 	.word	0x3e54ae0b
 800d460:	55555555 	.word	0x55555555
 800d464:	3fd55555 	.word	0x3fd55555
 800d468:	652b82fe 	.word	0x652b82fe
 800d46c:	3ff71547 	.word	0x3ff71547
 800d470:	00000000 	.word	0x00000000
 800d474:	bff00000 	.word	0xbff00000
 800d478:	3ff00000 	.word	0x3ff00000
 800d47c:	3fd00000 	.word	0x3fd00000
 800d480:	3fe00000 	.word	0x3fe00000
 800d484:	408fffff 	.word	0x408fffff
 800d488:	4bd5      	ldr	r3, [pc, #852]	; (800d7e0 <__ieee754_pow+0x758>)
 800d48a:	402b      	ands	r3, r5
 800d48c:	2200      	movs	r2, #0
 800d48e:	b92b      	cbnz	r3, 800d49c <__ieee754_pow+0x414>
 800d490:	4bd4      	ldr	r3, [pc, #848]	; (800d7e4 <__ieee754_pow+0x75c>)
 800d492:	f7f3 f85d 	bl	8000550 <__aeabi_dmul>
 800d496:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d49a:	460c      	mov	r4, r1
 800d49c:	1523      	asrs	r3, r4, #20
 800d49e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d4a2:	4413      	add	r3, r2
 800d4a4:	9305      	str	r3, [sp, #20]
 800d4a6:	4bd0      	ldr	r3, [pc, #832]	; (800d7e8 <__ieee754_pow+0x760>)
 800d4a8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d4ac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d4b0:	429c      	cmp	r4, r3
 800d4b2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d4b6:	dd08      	ble.n	800d4ca <__ieee754_pow+0x442>
 800d4b8:	4bcc      	ldr	r3, [pc, #816]	; (800d7ec <__ieee754_pow+0x764>)
 800d4ba:	429c      	cmp	r4, r3
 800d4bc:	f340 8162 	ble.w	800d784 <__ieee754_pow+0x6fc>
 800d4c0:	9b05      	ldr	r3, [sp, #20]
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	9305      	str	r3, [sp, #20]
 800d4c6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d4ca:	2400      	movs	r4, #0
 800d4cc:	00e3      	lsls	r3, r4, #3
 800d4ce:	9307      	str	r3, [sp, #28]
 800d4d0:	4bc7      	ldr	r3, [pc, #796]	; (800d7f0 <__ieee754_pow+0x768>)
 800d4d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d4d6:	ed93 7b00 	vldr	d7, [r3]
 800d4da:	4629      	mov	r1, r5
 800d4dc:	ec53 2b17 	vmov	r2, r3, d7
 800d4e0:	eeb0 9a47 	vmov.f32	s18, s14
 800d4e4:	eef0 9a67 	vmov.f32	s19, s15
 800d4e8:	4682      	mov	sl, r0
 800d4ea:	f7f2 fe79 	bl	80001e0 <__aeabi_dsub>
 800d4ee:	4652      	mov	r2, sl
 800d4f0:	4606      	mov	r6, r0
 800d4f2:	460f      	mov	r7, r1
 800d4f4:	462b      	mov	r3, r5
 800d4f6:	ec51 0b19 	vmov	r0, r1, d9
 800d4fa:	f7f2 fe73 	bl	80001e4 <__adddf3>
 800d4fe:	4602      	mov	r2, r0
 800d500:	460b      	mov	r3, r1
 800d502:	2000      	movs	r0, #0
 800d504:	49bb      	ldr	r1, [pc, #748]	; (800d7f4 <__ieee754_pow+0x76c>)
 800d506:	f7f3 f94d 	bl	80007a4 <__aeabi_ddiv>
 800d50a:	ec41 0b1a 	vmov	d10, r0, r1
 800d50e:	4602      	mov	r2, r0
 800d510:	460b      	mov	r3, r1
 800d512:	4630      	mov	r0, r6
 800d514:	4639      	mov	r1, r7
 800d516:	f7f3 f81b 	bl	8000550 <__aeabi_dmul>
 800d51a:	2300      	movs	r3, #0
 800d51c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d520:	9302      	str	r3, [sp, #8]
 800d522:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d526:	46ab      	mov	fp, r5
 800d528:	106d      	asrs	r5, r5, #1
 800d52a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d52e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d532:	ec41 0b18 	vmov	d8, r0, r1
 800d536:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800d53a:	2200      	movs	r2, #0
 800d53c:	4640      	mov	r0, r8
 800d53e:	4649      	mov	r1, r9
 800d540:	4614      	mov	r4, r2
 800d542:	461d      	mov	r5, r3
 800d544:	f7f3 f804 	bl	8000550 <__aeabi_dmul>
 800d548:	4602      	mov	r2, r0
 800d54a:	460b      	mov	r3, r1
 800d54c:	4630      	mov	r0, r6
 800d54e:	4639      	mov	r1, r7
 800d550:	f7f2 fe46 	bl	80001e0 <__aeabi_dsub>
 800d554:	ec53 2b19 	vmov	r2, r3, d9
 800d558:	4606      	mov	r6, r0
 800d55a:	460f      	mov	r7, r1
 800d55c:	4620      	mov	r0, r4
 800d55e:	4629      	mov	r1, r5
 800d560:	f7f2 fe3e 	bl	80001e0 <__aeabi_dsub>
 800d564:	4602      	mov	r2, r0
 800d566:	460b      	mov	r3, r1
 800d568:	4650      	mov	r0, sl
 800d56a:	4659      	mov	r1, fp
 800d56c:	f7f2 fe38 	bl	80001e0 <__aeabi_dsub>
 800d570:	4642      	mov	r2, r8
 800d572:	464b      	mov	r3, r9
 800d574:	f7f2 ffec 	bl	8000550 <__aeabi_dmul>
 800d578:	4602      	mov	r2, r0
 800d57a:	460b      	mov	r3, r1
 800d57c:	4630      	mov	r0, r6
 800d57e:	4639      	mov	r1, r7
 800d580:	f7f2 fe2e 	bl	80001e0 <__aeabi_dsub>
 800d584:	ec53 2b1a 	vmov	r2, r3, d10
 800d588:	f7f2 ffe2 	bl	8000550 <__aeabi_dmul>
 800d58c:	ec53 2b18 	vmov	r2, r3, d8
 800d590:	ec41 0b19 	vmov	d9, r0, r1
 800d594:	ec51 0b18 	vmov	r0, r1, d8
 800d598:	f7f2 ffda 	bl	8000550 <__aeabi_dmul>
 800d59c:	a37c      	add	r3, pc, #496	; (adr r3, 800d790 <__ieee754_pow+0x708>)
 800d59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a2:	4604      	mov	r4, r0
 800d5a4:	460d      	mov	r5, r1
 800d5a6:	f7f2 ffd3 	bl	8000550 <__aeabi_dmul>
 800d5aa:	a37b      	add	r3, pc, #492	; (adr r3, 800d798 <__ieee754_pow+0x710>)
 800d5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b0:	f7f2 fe18 	bl	80001e4 <__adddf3>
 800d5b4:	4622      	mov	r2, r4
 800d5b6:	462b      	mov	r3, r5
 800d5b8:	f7f2 ffca 	bl	8000550 <__aeabi_dmul>
 800d5bc:	a378      	add	r3, pc, #480	; (adr r3, 800d7a0 <__ieee754_pow+0x718>)
 800d5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c2:	f7f2 fe0f 	bl	80001e4 <__adddf3>
 800d5c6:	4622      	mov	r2, r4
 800d5c8:	462b      	mov	r3, r5
 800d5ca:	f7f2 ffc1 	bl	8000550 <__aeabi_dmul>
 800d5ce:	a376      	add	r3, pc, #472	; (adr r3, 800d7a8 <__ieee754_pow+0x720>)
 800d5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d4:	f7f2 fe06 	bl	80001e4 <__adddf3>
 800d5d8:	4622      	mov	r2, r4
 800d5da:	462b      	mov	r3, r5
 800d5dc:	f7f2 ffb8 	bl	8000550 <__aeabi_dmul>
 800d5e0:	a373      	add	r3, pc, #460	; (adr r3, 800d7b0 <__ieee754_pow+0x728>)
 800d5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e6:	f7f2 fdfd 	bl	80001e4 <__adddf3>
 800d5ea:	4622      	mov	r2, r4
 800d5ec:	462b      	mov	r3, r5
 800d5ee:	f7f2 ffaf 	bl	8000550 <__aeabi_dmul>
 800d5f2:	a371      	add	r3, pc, #452	; (adr r3, 800d7b8 <__ieee754_pow+0x730>)
 800d5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f8:	f7f2 fdf4 	bl	80001e4 <__adddf3>
 800d5fc:	4622      	mov	r2, r4
 800d5fe:	4606      	mov	r6, r0
 800d600:	460f      	mov	r7, r1
 800d602:	462b      	mov	r3, r5
 800d604:	4620      	mov	r0, r4
 800d606:	4629      	mov	r1, r5
 800d608:	f7f2 ffa2 	bl	8000550 <__aeabi_dmul>
 800d60c:	4602      	mov	r2, r0
 800d60e:	460b      	mov	r3, r1
 800d610:	4630      	mov	r0, r6
 800d612:	4639      	mov	r1, r7
 800d614:	f7f2 ff9c 	bl	8000550 <__aeabi_dmul>
 800d618:	4642      	mov	r2, r8
 800d61a:	4604      	mov	r4, r0
 800d61c:	460d      	mov	r5, r1
 800d61e:	464b      	mov	r3, r9
 800d620:	ec51 0b18 	vmov	r0, r1, d8
 800d624:	f7f2 fdde 	bl	80001e4 <__adddf3>
 800d628:	ec53 2b19 	vmov	r2, r3, d9
 800d62c:	f7f2 ff90 	bl	8000550 <__aeabi_dmul>
 800d630:	4622      	mov	r2, r4
 800d632:	462b      	mov	r3, r5
 800d634:	f7f2 fdd6 	bl	80001e4 <__adddf3>
 800d638:	4642      	mov	r2, r8
 800d63a:	4682      	mov	sl, r0
 800d63c:	468b      	mov	fp, r1
 800d63e:	464b      	mov	r3, r9
 800d640:	4640      	mov	r0, r8
 800d642:	4649      	mov	r1, r9
 800d644:	f7f2 ff84 	bl	8000550 <__aeabi_dmul>
 800d648:	4b6b      	ldr	r3, [pc, #428]	; (800d7f8 <__ieee754_pow+0x770>)
 800d64a:	2200      	movs	r2, #0
 800d64c:	4606      	mov	r6, r0
 800d64e:	460f      	mov	r7, r1
 800d650:	f7f2 fdc8 	bl	80001e4 <__adddf3>
 800d654:	4652      	mov	r2, sl
 800d656:	465b      	mov	r3, fp
 800d658:	f7f2 fdc4 	bl	80001e4 <__adddf3>
 800d65c:	2000      	movs	r0, #0
 800d65e:	4604      	mov	r4, r0
 800d660:	460d      	mov	r5, r1
 800d662:	4602      	mov	r2, r0
 800d664:	460b      	mov	r3, r1
 800d666:	4640      	mov	r0, r8
 800d668:	4649      	mov	r1, r9
 800d66a:	f7f2 ff71 	bl	8000550 <__aeabi_dmul>
 800d66e:	4b62      	ldr	r3, [pc, #392]	; (800d7f8 <__ieee754_pow+0x770>)
 800d670:	4680      	mov	r8, r0
 800d672:	4689      	mov	r9, r1
 800d674:	2200      	movs	r2, #0
 800d676:	4620      	mov	r0, r4
 800d678:	4629      	mov	r1, r5
 800d67a:	f7f2 fdb1 	bl	80001e0 <__aeabi_dsub>
 800d67e:	4632      	mov	r2, r6
 800d680:	463b      	mov	r3, r7
 800d682:	f7f2 fdad 	bl	80001e0 <__aeabi_dsub>
 800d686:	4602      	mov	r2, r0
 800d688:	460b      	mov	r3, r1
 800d68a:	4650      	mov	r0, sl
 800d68c:	4659      	mov	r1, fp
 800d68e:	f7f2 fda7 	bl	80001e0 <__aeabi_dsub>
 800d692:	ec53 2b18 	vmov	r2, r3, d8
 800d696:	f7f2 ff5b 	bl	8000550 <__aeabi_dmul>
 800d69a:	4622      	mov	r2, r4
 800d69c:	4606      	mov	r6, r0
 800d69e:	460f      	mov	r7, r1
 800d6a0:	462b      	mov	r3, r5
 800d6a2:	ec51 0b19 	vmov	r0, r1, d9
 800d6a6:	f7f2 ff53 	bl	8000550 <__aeabi_dmul>
 800d6aa:	4602      	mov	r2, r0
 800d6ac:	460b      	mov	r3, r1
 800d6ae:	4630      	mov	r0, r6
 800d6b0:	4639      	mov	r1, r7
 800d6b2:	f7f2 fd97 	bl	80001e4 <__adddf3>
 800d6b6:	4606      	mov	r6, r0
 800d6b8:	460f      	mov	r7, r1
 800d6ba:	4602      	mov	r2, r0
 800d6bc:	460b      	mov	r3, r1
 800d6be:	4640      	mov	r0, r8
 800d6c0:	4649      	mov	r1, r9
 800d6c2:	f7f2 fd8f 	bl	80001e4 <__adddf3>
 800d6c6:	a33e      	add	r3, pc, #248	; (adr r3, 800d7c0 <__ieee754_pow+0x738>)
 800d6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6cc:	2000      	movs	r0, #0
 800d6ce:	4604      	mov	r4, r0
 800d6d0:	460d      	mov	r5, r1
 800d6d2:	f7f2 ff3d 	bl	8000550 <__aeabi_dmul>
 800d6d6:	4642      	mov	r2, r8
 800d6d8:	ec41 0b18 	vmov	d8, r0, r1
 800d6dc:	464b      	mov	r3, r9
 800d6de:	4620      	mov	r0, r4
 800d6e0:	4629      	mov	r1, r5
 800d6e2:	f7f2 fd7d 	bl	80001e0 <__aeabi_dsub>
 800d6e6:	4602      	mov	r2, r0
 800d6e8:	460b      	mov	r3, r1
 800d6ea:	4630      	mov	r0, r6
 800d6ec:	4639      	mov	r1, r7
 800d6ee:	f7f2 fd77 	bl	80001e0 <__aeabi_dsub>
 800d6f2:	a335      	add	r3, pc, #212	; (adr r3, 800d7c8 <__ieee754_pow+0x740>)
 800d6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f8:	f7f2 ff2a 	bl	8000550 <__aeabi_dmul>
 800d6fc:	a334      	add	r3, pc, #208	; (adr r3, 800d7d0 <__ieee754_pow+0x748>)
 800d6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d702:	4606      	mov	r6, r0
 800d704:	460f      	mov	r7, r1
 800d706:	4620      	mov	r0, r4
 800d708:	4629      	mov	r1, r5
 800d70a:	f7f2 ff21 	bl	8000550 <__aeabi_dmul>
 800d70e:	4602      	mov	r2, r0
 800d710:	460b      	mov	r3, r1
 800d712:	4630      	mov	r0, r6
 800d714:	4639      	mov	r1, r7
 800d716:	f7f2 fd65 	bl	80001e4 <__adddf3>
 800d71a:	9a07      	ldr	r2, [sp, #28]
 800d71c:	4b37      	ldr	r3, [pc, #220]	; (800d7fc <__ieee754_pow+0x774>)
 800d71e:	4413      	add	r3, r2
 800d720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d724:	f7f2 fd5e 	bl	80001e4 <__adddf3>
 800d728:	4682      	mov	sl, r0
 800d72a:	9805      	ldr	r0, [sp, #20]
 800d72c:	468b      	mov	fp, r1
 800d72e:	f7f2 fea5 	bl	800047c <__aeabi_i2d>
 800d732:	9a07      	ldr	r2, [sp, #28]
 800d734:	4b32      	ldr	r3, [pc, #200]	; (800d800 <__ieee754_pow+0x778>)
 800d736:	4413      	add	r3, r2
 800d738:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d73c:	4606      	mov	r6, r0
 800d73e:	460f      	mov	r7, r1
 800d740:	4652      	mov	r2, sl
 800d742:	465b      	mov	r3, fp
 800d744:	ec51 0b18 	vmov	r0, r1, d8
 800d748:	f7f2 fd4c 	bl	80001e4 <__adddf3>
 800d74c:	4642      	mov	r2, r8
 800d74e:	464b      	mov	r3, r9
 800d750:	f7f2 fd48 	bl	80001e4 <__adddf3>
 800d754:	4632      	mov	r2, r6
 800d756:	463b      	mov	r3, r7
 800d758:	f7f2 fd44 	bl	80001e4 <__adddf3>
 800d75c:	2000      	movs	r0, #0
 800d75e:	4632      	mov	r2, r6
 800d760:	463b      	mov	r3, r7
 800d762:	4604      	mov	r4, r0
 800d764:	460d      	mov	r5, r1
 800d766:	f7f2 fd3b 	bl	80001e0 <__aeabi_dsub>
 800d76a:	4642      	mov	r2, r8
 800d76c:	464b      	mov	r3, r9
 800d76e:	f7f2 fd37 	bl	80001e0 <__aeabi_dsub>
 800d772:	ec53 2b18 	vmov	r2, r3, d8
 800d776:	f7f2 fd33 	bl	80001e0 <__aeabi_dsub>
 800d77a:	4602      	mov	r2, r0
 800d77c:	460b      	mov	r3, r1
 800d77e:	4650      	mov	r0, sl
 800d780:	4659      	mov	r1, fp
 800d782:	e610      	b.n	800d3a6 <__ieee754_pow+0x31e>
 800d784:	2401      	movs	r4, #1
 800d786:	e6a1      	b.n	800d4cc <__ieee754_pow+0x444>
 800d788:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800d7d8 <__ieee754_pow+0x750>
 800d78c:	e617      	b.n	800d3be <__ieee754_pow+0x336>
 800d78e:	bf00      	nop
 800d790:	4a454eef 	.word	0x4a454eef
 800d794:	3fca7e28 	.word	0x3fca7e28
 800d798:	93c9db65 	.word	0x93c9db65
 800d79c:	3fcd864a 	.word	0x3fcd864a
 800d7a0:	a91d4101 	.word	0xa91d4101
 800d7a4:	3fd17460 	.word	0x3fd17460
 800d7a8:	518f264d 	.word	0x518f264d
 800d7ac:	3fd55555 	.word	0x3fd55555
 800d7b0:	db6fabff 	.word	0xdb6fabff
 800d7b4:	3fdb6db6 	.word	0x3fdb6db6
 800d7b8:	33333303 	.word	0x33333303
 800d7bc:	3fe33333 	.word	0x3fe33333
 800d7c0:	e0000000 	.word	0xe0000000
 800d7c4:	3feec709 	.word	0x3feec709
 800d7c8:	dc3a03fd 	.word	0xdc3a03fd
 800d7cc:	3feec709 	.word	0x3feec709
 800d7d0:	145b01f5 	.word	0x145b01f5
 800d7d4:	be3e2fe0 	.word	0xbe3e2fe0
 800d7d8:	00000000 	.word	0x00000000
 800d7dc:	3ff00000 	.word	0x3ff00000
 800d7e0:	7ff00000 	.word	0x7ff00000
 800d7e4:	43400000 	.word	0x43400000
 800d7e8:	0003988e 	.word	0x0003988e
 800d7ec:	000bb679 	.word	0x000bb679
 800d7f0:	0800f480 	.word	0x0800f480
 800d7f4:	3ff00000 	.word	0x3ff00000
 800d7f8:	40080000 	.word	0x40080000
 800d7fc:	0800f4a0 	.word	0x0800f4a0
 800d800:	0800f490 	.word	0x0800f490
 800d804:	a3b5      	add	r3, pc, #724	; (adr r3, 800dadc <__ieee754_pow+0xa54>)
 800d806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d80a:	4640      	mov	r0, r8
 800d80c:	4649      	mov	r1, r9
 800d80e:	f7f2 fce9 	bl	80001e4 <__adddf3>
 800d812:	4622      	mov	r2, r4
 800d814:	ec41 0b1a 	vmov	d10, r0, r1
 800d818:	462b      	mov	r3, r5
 800d81a:	4630      	mov	r0, r6
 800d81c:	4639      	mov	r1, r7
 800d81e:	f7f2 fcdf 	bl	80001e0 <__aeabi_dsub>
 800d822:	4602      	mov	r2, r0
 800d824:	460b      	mov	r3, r1
 800d826:	ec51 0b1a 	vmov	r0, r1, d10
 800d82a:	f7f3 f921 	bl	8000a70 <__aeabi_dcmpgt>
 800d82e:	2800      	cmp	r0, #0
 800d830:	f47f ae04 	bne.w	800d43c <__ieee754_pow+0x3b4>
 800d834:	4aa4      	ldr	r2, [pc, #656]	; (800dac8 <__ieee754_pow+0xa40>)
 800d836:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d83a:	4293      	cmp	r3, r2
 800d83c:	f340 8108 	ble.w	800da50 <__ieee754_pow+0x9c8>
 800d840:	151b      	asrs	r3, r3, #20
 800d842:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d846:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d84a:	fa4a f303 	asr.w	r3, sl, r3
 800d84e:	445b      	add	r3, fp
 800d850:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d854:	4e9d      	ldr	r6, [pc, #628]	; (800dacc <__ieee754_pow+0xa44>)
 800d856:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d85a:	4116      	asrs	r6, r2
 800d85c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800d860:	2000      	movs	r0, #0
 800d862:	ea23 0106 	bic.w	r1, r3, r6
 800d866:	f1c2 0214 	rsb	r2, r2, #20
 800d86a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d86e:	fa4a fa02 	asr.w	sl, sl, r2
 800d872:	f1bb 0f00 	cmp.w	fp, #0
 800d876:	4602      	mov	r2, r0
 800d878:	460b      	mov	r3, r1
 800d87a:	4620      	mov	r0, r4
 800d87c:	4629      	mov	r1, r5
 800d87e:	bfb8      	it	lt
 800d880:	f1ca 0a00 	rsblt	sl, sl, #0
 800d884:	f7f2 fcac 	bl	80001e0 <__aeabi_dsub>
 800d888:	ec41 0b19 	vmov	d9, r0, r1
 800d88c:	4642      	mov	r2, r8
 800d88e:	464b      	mov	r3, r9
 800d890:	ec51 0b19 	vmov	r0, r1, d9
 800d894:	f7f2 fca6 	bl	80001e4 <__adddf3>
 800d898:	a37b      	add	r3, pc, #492	; (adr r3, 800da88 <__ieee754_pow+0xa00>)
 800d89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d89e:	2000      	movs	r0, #0
 800d8a0:	4604      	mov	r4, r0
 800d8a2:	460d      	mov	r5, r1
 800d8a4:	f7f2 fe54 	bl	8000550 <__aeabi_dmul>
 800d8a8:	ec53 2b19 	vmov	r2, r3, d9
 800d8ac:	4606      	mov	r6, r0
 800d8ae:	460f      	mov	r7, r1
 800d8b0:	4620      	mov	r0, r4
 800d8b2:	4629      	mov	r1, r5
 800d8b4:	f7f2 fc94 	bl	80001e0 <__aeabi_dsub>
 800d8b8:	4602      	mov	r2, r0
 800d8ba:	460b      	mov	r3, r1
 800d8bc:	4640      	mov	r0, r8
 800d8be:	4649      	mov	r1, r9
 800d8c0:	f7f2 fc8e 	bl	80001e0 <__aeabi_dsub>
 800d8c4:	a372      	add	r3, pc, #456	; (adr r3, 800da90 <__ieee754_pow+0xa08>)
 800d8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ca:	f7f2 fe41 	bl	8000550 <__aeabi_dmul>
 800d8ce:	a372      	add	r3, pc, #456	; (adr r3, 800da98 <__ieee754_pow+0xa10>)
 800d8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d4:	4680      	mov	r8, r0
 800d8d6:	4689      	mov	r9, r1
 800d8d8:	4620      	mov	r0, r4
 800d8da:	4629      	mov	r1, r5
 800d8dc:	f7f2 fe38 	bl	8000550 <__aeabi_dmul>
 800d8e0:	4602      	mov	r2, r0
 800d8e2:	460b      	mov	r3, r1
 800d8e4:	4640      	mov	r0, r8
 800d8e6:	4649      	mov	r1, r9
 800d8e8:	f7f2 fc7c 	bl	80001e4 <__adddf3>
 800d8ec:	4604      	mov	r4, r0
 800d8ee:	460d      	mov	r5, r1
 800d8f0:	4602      	mov	r2, r0
 800d8f2:	460b      	mov	r3, r1
 800d8f4:	4630      	mov	r0, r6
 800d8f6:	4639      	mov	r1, r7
 800d8f8:	f7f2 fc74 	bl	80001e4 <__adddf3>
 800d8fc:	4632      	mov	r2, r6
 800d8fe:	463b      	mov	r3, r7
 800d900:	4680      	mov	r8, r0
 800d902:	4689      	mov	r9, r1
 800d904:	f7f2 fc6c 	bl	80001e0 <__aeabi_dsub>
 800d908:	4602      	mov	r2, r0
 800d90a:	460b      	mov	r3, r1
 800d90c:	4620      	mov	r0, r4
 800d90e:	4629      	mov	r1, r5
 800d910:	f7f2 fc66 	bl	80001e0 <__aeabi_dsub>
 800d914:	4642      	mov	r2, r8
 800d916:	4606      	mov	r6, r0
 800d918:	460f      	mov	r7, r1
 800d91a:	464b      	mov	r3, r9
 800d91c:	4640      	mov	r0, r8
 800d91e:	4649      	mov	r1, r9
 800d920:	f7f2 fe16 	bl	8000550 <__aeabi_dmul>
 800d924:	a35e      	add	r3, pc, #376	; (adr r3, 800daa0 <__ieee754_pow+0xa18>)
 800d926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d92a:	4604      	mov	r4, r0
 800d92c:	460d      	mov	r5, r1
 800d92e:	f7f2 fe0f 	bl	8000550 <__aeabi_dmul>
 800d932:	a35d      	add	r3, pc, #372	; (adr r3, 800daa8 <__ieee754_pow+0xa20>)
 800d934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d938:	f7f2 fc52 	bl	80001e0 <__aeabi_dsub>
 800d93c:	4622      	mov	r2, r4
 800d93e:	462b      	mov	r3, r5
 800d940:	f7f2 fe06 	bl	8000550 <__aeabi_dmul>
 800d944:	a35a      	add	r3, pc, #360	; (adr r3, 800dab0 <__ieee754_pow+0xa28>)
 800d946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d94a:	f7f2 fc4b 	bl	80001e4 <__adddf3>
 800d94e:	4622      	mov	r2, r4
 800d950:	462b      	mov	r3, r5
 800d952:	f7f2 fdfd 	bl	8000550 <__aeabi_dmul>
 800d956:	a358      	add	r3, pc, #352	; (adr r3, 800dab8 <__ieee754_pow+0xa30>)
 800d958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d95c:	f7f2 fc40 	bl	80001e0 <__aeabi_dsub>
 800d960:	4622      	mov	r2, r4
 800d962:	462b      	mov	r3, r5
 800d964:	f7f2 fdf4 	bl	8000550 <__aeabi_dmul>
 800d968:	a355      	add	r3, pc, #340	; (adr r3, 800dac0 <__ieee754_pow+0xa38>)
 800d96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d96e:	f7f2 fc39 	bl	80001e4 <__adddf3>
 800d972:	4622      	mov	r2, r4
 800d974:	462b      	mov	r3, r5
 800d976:	f7f2 fdeb 	bl	8000550 <__aeabi_dmul>
 800d97a:	4602      	mov	r2, r0
 800d97c:	460b      	mov	r3, r1
 800d97e:	4640      	mov	r0, r8
 800d980:	4649      	mov	r1, r9
 800d982:	f7f2 fc2d 	bl	80001e0 <__aeabi_dsub>
 800d986:	4604      	mov	r4, r0
 800d988:	460d      	mov	r5, r1
 800d98a:	4602      	mov	r2, r0
 800d98c:	460b      	mov	r3, r1
 800d98e:	4640      	mov	r0, r8
 800d990:	4649      	mov	r1, r9
 800d992:	f7f2 fddd 	bl	8000550 <__aeabi_dmul>
 800d996:	2200      	movs	r2, #0
 800d998:	ec41 0b19 	vmov	d9, r0, r1
 800d99c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d9a0:	4620      	mov	r0, r4
 800d9a2:	4629      	mov	r1, r5
 800d9a4:	f7f2 fc1c 	bl	80001e0 <__aeabi_dsub>
 800d9a8:	4602      	mov	r2, r0
 800d9aa:	460b      	mov	r3, r1
 800d9ac:	ec51 0b19 	vmov	r0, r1, d9
 800d9b0:	f7f2 fef8 	bl	80007a4 <__aeabi_ddiv>
 800d9b4:	4632      	mov	r2, r6
 800d9b6:	4604      	mov	r4, r0
 800d9b8:	460d      	mov	r5, r1
 800d9ba:	463b      	mov	r3, r7
 800d9bc:	4640      	mov	r0, r8
 800d9be:	4649      	mov	r1, r9
 800d9c0:	f7f2 fdc6 	bl	8000550 <__aeabi_dmul>
 800d9c4:	4632      	mov	r2, r6
 800d9c6:	463b      	mov	r3, r7
 800d9c8:	f7f2 fc0c 	bl	80001e4 <__adddf3>
 800d9cc:	4602      	mov	r2, r0
 800d9ce:	460b      	mov	r3, r1
 800d9d0:	4620      	mov	r0, r4
 800d9d2:	4629      	mov	r1, r5
 800d9d4:	f7f2 fc04 	bl	80001e0 <__aeabi_dsub>
 800d9d8:	4642      	mov	r2, r8
 800d9da:	464b      	mov	r3, r9
 800d9dc:	f7f2 fc00 	bl	80001e0 <__aeabi_dsub>
 800d9e0:	460b      	mov	r3, r1
 800d9e2:	4602      	mov	r2, r0
 800d9e4:	493a      	ldr	r1, [pc, #232]	; (800dad0 <__ieee754_pow+0xa48>)
 800d9e6:	2000      	movs	r0, #0
 800d9e8:	f7f2 fbfa 	bl	80001e0 <__aeabi_dsub>
 800d9ec:	ec41 0b10 	vmov	d0, r0, r1
 800d9f0:	ee10 3a90 	vmov	r3, s1
 800d9f4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d9f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d9fc:	da2b      	bge.n	800da56 <__ieee754_pow+0x9ce>
 800d9fe:	4650      	mov	r0, sl
 800da00:	f001 fbbe 	bl	800f180 <scalbn>
 800da04:	ec51 0b10 	vmov	r0, r1, d0
 800da08:	ec53 2b18 	vmov	r2, r3, d8
 800da0c:	f7ff bbed 	b.w	800d1ea <__ieee754_pow+0x162>
 800da10:	4b30      	ldr	r3, [pc, #192]	; (800dad4 <__ieee754_pow+0xa4c>)
 800da12:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800da16:	429e      	cmp	r6, r3
 800da18:	f77f af0c 	ble.w	800d834 <__ieee754_pow+0x7ac>
 800da1c:	4b2e      	ldr	r3, [pc, #184]	; (800dad8 <__ieee754_pow+0xa50>)
 800da1e:	440b      	add	r3, r1
 800da20:	4303      	orrs	r3, r0
 800da22:	d009      	beq.n	800da38 <__ieee754_pow+0x9b0>
 800da24:	ec51 0b18 	vmov	r0, r1, d8
 800da28:	2200      	movs	r2, #0
 800da2a:	2300      	movs	r3, #0
 800da2c:	f7f3 f802 	bl	8000a34 <__aeabi_dcmplt>
 800da30:	3800      	subs	r0, #0
 800da32:	bf18      	it	ne
 800da34:	2001      	movne	r0, #1
 800da36:	e447      	b.n	800d2c8 <__ieee754_pow+0x240>
 800da38:	4622      	mov	r2, r4
 800da3a:	462b      	mov	r3, r5
 800da3c:	f7f2 fbd0 	bl	80001e0 <__aeabi_dsub>
 800da40:	4642      	mov	r2, r8
 800da42:	464b      	mov	r3, r9
 800da44:	f7f3 f80a 	bl	8000a5c <__aeabi_dcmpge>
 800da48:	2800      	cmp	r0, #0
 800da4a:	f43f aef3 	beq.w	800d834 <__ieee754_pow+0x7ac>
 800da4e:	e7e9      	b.n	800da24 <__ieee754_pow+0x99c>
 800da50:	f04f 0a00 	mov.w	sl, #0
 800da54:	e71a      	b.n	800d88c <__ieee754_pow+0x804>
 800da56:	ec51 0b10 	vmov	r0, r1, d0
 800da5a:	4619      	mov	r1, r3
 800da5c:	e7d4      	b.n	800da08 <__ieee754_pow+0x980>
 800da5e:	491c      	ldr	r1, [pc, #112]	; (800dad0 <__ieee754_pow+0xa48>)
 800da60:	2000      	movs	r0, #0
 800da62:	f7ff bb30 	b.w	800d0c6 <__ieee754_pow+0x3e>
 800da66:	2000      	movs	r0, #0
 800da68:	2100      	movs	r1, #0
 800da6a:	f7ff bb2c 	b.w	800d0c6 <__ieee754_pow+0x3e>
 800da6e:	4630      	mov	r0, r6
 800da70:	4639      	mov	r1, r7
 800da72:	f7ff bb28 	b.w	800d0c6 <__ieee754_pow+0x3e>
 800da76:	9204      	str	r2, [sp, #16]
 800da78:	f7ff bb7a 	b.w	800d170 <__ieee754_pow+0xe8>
 800da7c:	2300      	movs	r3, #0
 800da7e:	f7ff bb64 	b.w	800d14a <__ieee754_pow+0xc2>
 800da82:	bf00      	nop
 800da84:	f3af 8000 	nop.w
 800da88:	00000000 	.word	0x00000000
 800da8c:	3fe62e43 	.word	0x3fe62e43
 800da90:	fefa39ef 	.word	0xfefa39ef
 800da94:	3fe62e42 	.word	0x3fe62e42
 800da98:	0ca86c39 	.word	0x0ca86c39
 800da9c:	be205c61 	.word	0xbe205c61
 800daa0:	72bea4d0 	.word	0x72bea4d0
 800daa4:	3e663769 	.word	0x3e663769
 800daa8:	c5d26bf1 	.word	0xc5d26bf1
 800daac:	3ebbbd41 	.word	0x3ebbbd41
 800dab0:	af25de2c 	.word	0xaf25de2c
 800dab4:	3f11566a 	.word	0x3f11566a
 800dab8:	16bebd93 	.word	0x16bebd93
 800dabc:	3f66c16c 	.word	0x3f66c16c
 800dac0:	5555553e 	.word	0x5555553e
 800dac4:	3fc55555 	.word	0x3fc55555
 800dac8:	3fe00000 	.word	0x3fe00000
 800dacc:	000fffff 	.word	0x000fffff
 800dad0:	3ff00000 	.word	0x3ff00000
 800dad4:	4090cbff 	.word	0x4090cbff
 800dad8:	3f6f3400 	.word	0x3f6f3400
 800dadc:	652b82fe 	.word	0x652b82fe
 800dae0:	3c971547 	.word	0x3c971547
 800dae4:	00000000 	.word	0x00000000

0800dae8 <__ieee754_rem_pio2>:
 800dae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daec:	ed2d 8b02 	vpush	{d8}
 800daf0:	ec55 4b10 	vmov	r4, r5, d0
 800daf4:	4bca      	ldr	r3, [pc, #808]	; (800de20 <__ieee754_rem_pio2+0x338>)
 800daf6:	b08b      	sub	sp, #44	; 0x2c
 800daf8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800dafc:	4598      	cmp	r8, r3
 800dafe:	4682      	mov	sl, r0
 800db00:	9502      	str	r5, [sp, #8]
 800db02:	dc08      	bgt.n	800db16 <__ieee754_rem_pio2+0x2e>
 800db04:	2200      	movs	r2, #0
 800db06:	2300      	movs	r3, #0
 800db08:	ed80 0b00 	vstr	d0, [r0]
 800db0c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800db10:	f04f 0b00 	mov.w	fp, #0
 800db14:	e028      	b.n	800db68 <__ieee754_rem_pio2+0x80>
 800db16:	4bc3      	ldr	r3, [pc, #780]	; (800de24 <__ieee754_rem_pio2+0x33c>)
 800db18:	4598      	cmp	r8, r3
 800db1a:	dc78      	bgt.n	800dc0e <__ieee754_rem_pio2+0x126>
 800db1c:	9b02      	ldr	r3, [sp, #8]
 800db1e:	4ec2      	ldr	r6, [pc, #776]	; (800de28 <__ieee754_rem_pio2+0x340>)
 800db20:	2b00      	cmp	r3, #0
 800db22:	ee10 0a10 	vmov	r0, s0
 800db26:	a3b0      	add	r3, pc, #704	; (adr r3, 800dde8 <__ieee754_rem_pio2+0x300>)
 800db28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db2c:	4629      	mov	r1, r5
 800db2e:	dd39      	ble.n	800dba4 <__ieee754_rem_pio2+0xbc>
 800db30:	f7f2 fb56 	bl	80001e0 <__aeabi_dsub>
 800db34:	45b0      	cmp	r8, r6
 800db36:	4604      	mov	r4, r0
 800db38:	460d      	mov	r5, r1
 800db3a:	d01b      	beq.n	800db74 <__ieee754_rem_pio2+0x8c>
 800db3c:	a3ac      	add	r3, pc, #688	; (adr r3, 800ddf0 <__ieee754_rem_pio2+0x308>)
 800db3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db42:	f7f2 fb4d 	bl	80001e0 <__aeabi_dsub>
 800db46:	4602      	mov	r2, r0
 800db48:	460b      	mov	r3, r1
 800db4a:	e9ca 2300 	strd	r2, r3, [sl]
 800db4e:	4620      	mov	r0, r4
 800db50:	4629      	mov	r1, r5
 800db52:	f7f2 fb45 	bl	80001e0 <__aeabi_dsub>
 800db56:	a3a6      	add	r3, pc, #664	; (adr r3, 800ddf0 <__ieee754_rem_pio2+0x308>)
 800db58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db5c:	f7f2 fb40 	bl	80001e0 <__aeabi_dsub>
 800db60:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800db64:	f04f 0b01 	mov.w	fp, #1
 800db68:	4658      	mov	r0, fp
 800db6a:	b00b      	add	sp, #44	; 0x2c
 800db6c:	ecbd 8b02 	vpop	{d8}
 800db70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db74:	a3a0      	add	r3, pc, #640	; (adr r3, 800ddf8 <__ieee754_rem_pio2+0x310>)
 800db76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db7a:	f7f2 fb31 	bl	80001e0 <__aeabi_dsub>
 800db7e:	a3a0      	add	r3, pc, #640	; (adr r3, 800de00 <__ieee754_rem_pio2+0x318>)
 800db80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db84:	4604      	mov	r4, r0
 800db86:	460d      	mov	r5, r1
 800db88:	f7f2 fb2a 	bl	80001e0 <__aeabi_dsub>
 800db8c:	4602      	mov	r2, r0
 800db8e:	460b      	mov	r3, r1
 800db90:	e9ca 2300 	strd	r2, r3, [sl]
 800db94:	4620      	mov	r0, r4
 800db96:	4629      	mov	r1, r5
 800db98:	f7f2 fb22 	bl	80001e0 <__aeabi_dsub>
 800db9c:	a398      	add	r3, pc, #608	; (adr r3, 800de00 <__ieee754_rem_pio2+0x318>)
 800db9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba2:	e7db      	b.n	800db5c <__ieee754_rem_pio2+0x74>
 800dba4:	f7f2 fb1e 	bl	80001e4 <__adddf3>
 800dba8:	45b0      	cmp	r8, r6
 800dbaa:	4604      	mov	r4, r0
 800dbac:	460d      	mov	r5, r1
 800dbae:	d016      	beq.n	800dbde <__ieee754_rem_pio2+0xf6>
 800dbb0:	a38f      	add	r3, pc, #572	; (adr r3, 800ddf0 <__ieee754_rem_pio2+0x308>)
 800dbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb6:	f7f2 fb15 	bl	80001e4 <__adddf3>
 800dbba:	4602      	mov	r2, r0
 800dbbc:	460b      	mov	r3, r1
 800dbbe:	e9ca 2300 	strd	r2, r3, [sl]
 800dbc2:	4620      	mov	r0, r4
 800dbc4:	4629      	mov	r1, r5
 800dbc6:	f7f2 fb0b 	bl	80001e0 <__aeabi_dsub>
 800dbca:	a389      	add	r3, pc, #548	; (adr r3, 800ddf0 <__ieee754_rem_pio2+0x308>)
 800dbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd0:	f7f2 fb08 	bl	80001e4 <__adddf3>
 800dbd4:	f04f 3bff 	mov.w	fp, #4294967295
 800dbd8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dbdc:	e7c4      	b.n	800db68 <__ieee754_rem_pio2+0x80>
 800dbde:	a386      	add	r3, pc, #536	; (adr r3, 800ddf8 <__ieee754_rem_pio2+0x310>)
 800dbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe4:	f7f2 fafe 	bl	80001e4 <__adddf3>
 800dbe8:	a385      	add	r3, pc, #532	; (adr r3, 800de00 <__ieee754_rem_pio2+0x318>)
 800dbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbee:	4604      	mov	r4, r0
 800dbf0:	460d      	mov	r5, r1
 800dbf2:	f7f2 faf7 	bl	80001e4 <__adddf3>
 800dbf6:	4602      	mov	r2, r0
 800dbf8:	460b      	mov	r3, r1
 800dbfa:	e9ca 2300 	strd	r2, r3, [sl]
 800dbfe:	4620      	mov	r0, r4
 800dc00:	4629      	mov	r1, r5
 800dc02:	f7f2 faed 	bl	80001e0 <__aeabi_dsub>
 800dc06:	a37e      	add	r3, pc, #504	; (adr r3, 800de00 <__ieee754_rem_pio2+0x318>)
 800dc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc0c:	e7e0      	b.n	800dbd0 <__ieee754_rem_pio2+0xe8>
 800dc0e:	4b87      	ldr	r3, [pc, #540]	; (800de2c <__ieee754_rem_pio2+0x344>)
 800dc10:	4598      	cmp	r8, r3
 800dc12:	f300 80d9 	bgt.w	800ddc8 <__ieee754_rem_pio2+0x2e0>
 800dc16:	f001 fa1f 	bl	800f058 <fabs>
 800dc1a:	ec55 4b10 	vmov	r4, r5, d0
 800dc1e:	ee10 0a10 	vmov	r0, s0
 800dc22:	a379      	add	r3, pc, #484	; (adr r3, 800de08 <__ieee754_rem_pio2+0x320>)
 800dc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc28:	4629      	mov	r1, r5
 800dc2a:	f7f2 fc91 	bl	8000550 <__aeabi_dmul>
 800dc2e:	4b80      	ldr	r3, [pc, #512]	; (800de30 <__ieee754_rem_pio2+0x348>)
 800dc30:	2200      	movs	r2, #0
 800dc32:	f7f2 fad7 	bl	80001e4 <__adddf3>
 800dc36:	f7f2 ff3b 	bl	8000ab0 <__aeabi_d2iz>
 800dc3a:	4683      	mov	fp, r0
 800dc3c:	f7f2 fc1e 	bl	800047c <__aeabi_i2d>
 800dc40:	4602      	mov	r2, r0
 800dc42:	460b      	mov	r3, r1
 800dc44:	ec43 2b18 	vmov	d8, r2, r3
 800dc48:	a367      	add	r3, pc, #412	; (adr r3, 800dde8 <__ieee754_rem_pio2+0x300>)
 800dc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc4e:	f7f2 fc7f 	bl	8000550 <__aeabi_dmul>
 800dc52:	4602      	mov	r2, r0
 800dc54:	460b      	mov	r3, r1
 800dc56:	4620      	mov	r0, r4
 800dc58:	4629      	mov	r1, r5
 800dc5a:	f7f2 fac1 	bl	80001e0 <__aeabi_dsub>
 800dc5e:	a364      	add	r3, pc, #400	; (adr r3, 800ddf0 <__ieee754_rem_pio2+0x308>)
 800dc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc64:	4606      	mov	r6, r0
 800dc66:	460f      	mov	r7, r1
 800dc68:	ec51 0b18 	vmov	r0, r1, d8
 800dc6c:	f7f2 fc70 	bl	8000550 <__aeabi_dmul>
 800dc70:	f1bb 0f1f 	cmp.w	fp, #31
 800dc74:	4604      	mov	r4, r0
 800dc76:	460d      	mov	r5, r1
 800dc78:	dc0d      	bgt.n	800dc96 <__ieee754_rem_pio2+0x1ae>
 800dc7a:	4b6e      	ldr	r3, [pc, #440]	; (800de34 <__ieee754_rem_pio2+0x34c>)
 800dc7c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800dc80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc84:	4543      	cmp	r3, r8
 800dc86:	d006      	beq.n	800dc96 <__ieee754_rem_pio2+0x1ae>
 800dc88:	4622      	mov	r2, r4
 800dc8a:	462b      	mov	r3, r5
 800dc8c:	4630      	mov	r0, r6
 800dc8e:	4639      	mov	r1, r7
 800dc90:	f7f2 faa6 	bl	80001e0 <__aeabi_dsub>
 800dc94:	e00f      	b.n	800dcb6 <__ieee754_rem_pio2+0x1ce>
 800dc96:	462b      	mov	r3, r5
 800dc98:	4622      	mov	r2, r4
 800dc9a:	4630      	mov	r0, r6
 800dc9c:	4639      	mov	r1, r7
 800dc9e:	f7f2 fa9f 	bl	80001e0 <__aeabi_dsub>
 800dca2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800dca6:	9303      	str	r3, [sp, #12]
 800dca8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dcac:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800dcb0:	f1b8 0f10 	cmp.w	r8, #16
 800dcb4:	dc02      	bgt.n	800dcbc <__ieee754_rem_pio2+0x1d4>
 800dcb6:	e9ca 0100 	strd	r0, r1, [sl]
 800dcba:	e039      	b.n	800dd30 <__ieee754_rem_pio2+0x248>
 800dcbc:	a34e      	add	r3, pc, #312	; (adr r3, 800ddf8 <__ieee754_rem_pio2+0x310>)
 800dcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc2:	ec51 0b18 	vmov	r0, r1, d8
 800dcc6:	f7f2 fc43 	bl	8000550 <__aeabi_dmul>
 800dcca:	4604      	mov	r4, r0
 800dccc:	460d      	mov	r5, r1
 800dcce:	4602      	mov	r2, r0
 800dcd0:	460b      	mov	r3, r1
 800dcd2:	4630      	mov	r0, r6
 800dcd4:	4639      	mov	r1, r7
 800dcd6:	f7f2 fa83 	bl	80001e0 <__aeabi_dsub>
 800dcda:	4602      	mov	r2, r0
 800dcdc:	460b      	mov	r3, r1
 800dcde:	4680      	mov	r8, r0
 800dce0:	4689      	mov	r9, r1
 800dce2:	4630      	mov	r0, r6
 800dce4:	4639      	mov	r1, r7
 800dce6:	f7f2 fa7b 	bl	80001e0 <__aeabi_dsub>
 800dcea:	4622      	mov	r2, r4
 800dcec:	462b      	mov	r3, r5
 800dcee:	f7f2 fa77 	bl	80001e0 <__aeabi_dsub>
 800dcf2:	a343      	add	r3, pc, #268	; (adr r3, 800de00 <__ieee754_rem_pio2+0x318>)
 800dcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf8:	4604      	mov	r4, r0
 800dcfa:	460d      	mov	r5, r1
 800dcfc:	ec51 0b18 	vmov	r0, r1, d8
 800dd00:	f7f2 fc26 	bl	8000550 <__aeabi_dmul>
 800dd04:	4622      	mov	r2, r4
 800dd06:	462b      	mov	r3, r5
 800dd08:	f7f2 fa6a 	bl	80001e0 <__aeabi_dsub>
 800dd0c:	4602      	mov	r2, r0
 800dd0e:	460b      	mov	r3, r1
 800dd10:	4604      	mov	r4, r0
 800dd12:	460d      	mov	r5, r1
 800dd14:	4640      	mov	r0, r8
 800dd16:	4649      	mov	r1, r9
 800dd18:	f7f2 fa62 	bl	80001e0 <__aeabi_dsub>
 800dd1c:	9a03      	ldr	r2, [sp, #12]
 800dd1e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dd22:	1ad3      	subs	r3, r2, r3
 800dd24:	2b31      	cmp	r3, #49	; 0x31
 800dd26:	dc24      	bgt.n	800dd72 <__ieee754_rem_pio2+0x28a>
 800dd28:	e9ca 0100 	strd	r0, r1, [sl]
 800dd2c:	4646      	mov	r6, r8
 800dd2e:	464f      	mov	r7, r9
 800dd30:	e9da 8900 	ldrd	r8, r9, [sl]
 800dd34:	4630      	mov	r0, r6
 800dd36:	4642      	mov	r2, r8
 800dd38:	464b      	mov	r3, r9
 800dd3a:	4639      	mov	r1, r7
 800dd3c:	f7f2 fa50 	bl	80001e0 <__aeabi_dsub>
 800dd40:	462b      	mov	r3, r5
 800dd42:	4622      	mov	r2, r4
 800dd44:	f7f2 fa4c 	bl	80001e0 <__aeabi_dsub>
 800dd48:	9b02      	ldr	r3, [sp, #8]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dd50:	f6bf af0a 	bge.w	800db68 <__ieee754_rem_pio2+0x80>
 800dd54:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dd58:	f8ca 3004 	str.w	r3, [sl, #4]
 800dd5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd60:	f8ca 8000 	str.w	r8, [sl]
 800dd64:	f8ca 0008 	str.w	r0, [sl, #8]
 800dd68:	f8ca 300c 	str.w	r3, [sl, #12]
 800dd6c:	f1cb 0b00 	rsb	fp, fp, #0
 800dd70:	e6fa      	b.n	800db68 <__ieee754_rem_pio2+0x80>
 800dd72:	a327      	add	r3, pc, #156	; (adr r3, 800de10 <__ieee754_rem_pio2+0x328>)
 800dd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd78:	ec51 0b18 	vmov	r0, r1, d8
 800dd7c:	f7f2 fbe8 	bl	8000550 <__aeabi_dmul>
 800dd80:	4604      	mov	r4, r0
 800dd82:	460d      	mov	r5, r1
 800dd84:	4602      	mov	r2, r0
 800dd86:	460b      	mov	r3, r1
 800dd88:	4640      	mov	r0, r8
 800dd8a:	4649      	mov	r1, r9
 800dd8c:	f7f2 fa28 	bl	80001e0 <__aeabi_dsub>
 800dd90:	4602      	mov	r2, r0
 800dd92:	460b      	mov	r3, r1
 800dd94:	4606      	mov	r6, r0
 800dd96:	460f      	mov	r7, r1
 800dd98:	4640      	mov	r0, r8
 800dd9a:	4649      	mov	r1, r9
 800dd9c:	f7f2 fa20 	bl	80001e0 <__aeabi_dsub>
 800dda0:	4622      	mov	r2, r4
 800dda2:	462b      	mov	r3, r5
 800dda4:	f7f2 fa1c 	bl	80001e0 <__aeabi_dsub>
 800dda8:	a31b      	add	r3, pc, #108	; (adr r3, 800de18 <__ieee754_rem_pio2+0x330>)
 800ddaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddae:	4604      	mov	r4, r0
 800ddb0:	460d      	mov	r5, r1
 800ddb2:	ec51 0b18 	vmov	r0, r1, d8
 800ddb6:	f7f2 fbcb 	bl	8000550 <__aeabi_dmul>
 800ddba:	4622      	mov	r2, r4
 800ddbc:	462b      	mov	r3, r5
 800ddbe:	f7f2 fa0f 	bl	80001e0 <__aeabi_dsub>
 800ddc2:	4604      	mov	r4, r0
 800ddc4:	460d      	mov	r5, r1
 800ddc6:	e75f      	b.n	800dc88 <__ieee754_rem_pio2+0x1a0>
 800ddc8:	4b1b      	ldr	r3, [pc, #108]	; (800de38 <__ieee754_rem_pio2+0x350>)
 800ddca:	4598      	cmp	r8, r3
 800ddcc:	dd36      	ble.n	800de3c <__ieee754_rem_pio2+0x354>
 800ddce:	ee10 2a10 	vmov	r2, s0
 800ddd2:	462b      	mov	r3, r5
 800ddd4:	4620      	mov	r0, r4
 800ddd6:	4629      	mov	r1, r5
 800ddd8:	f7f2 fa02 	bl	80001e0 <__aeabi_dsub>
 800dddc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dde0:	e9ca 0100 	strd	r0, r1, [sl]
 800dde4:	e694      	b.n	800db10 <__ieee754_rem_pio2+0x28>
 800dde6:	bf00      	nop
 800dde8:	54400000 	.word	0x54400000
 800ddec:	3ff921fb 	.word	0x3ff921fb
 800ddf0:	1a626331 	.word	0x1a626331
 800ddf4:	3dd0b461 	.word	0x3dd0b461
 800ddf8:	1a600000 	.word	0x1a600000
 800ddfc:	3dd0b461 	.word	0x3dd0b461
 800de00:	2e037073 	.word	0x2e037073
 800de04:	3ba3198a 	.word	0x3ba3198a
 800de08:	6dc9c883 	.word	0x6dc9c883
 800de0c:	3fe45f30 	.word	0x3fe45f30
 800de10:	2e000000 	.word	0x2e000000
 800de14:	3ba3198a 	.word	0x3ba3198a
 800de18:	252049c1 	.word	0x252049c1
 800de1c:	397b839a 	.word	0x397b839a
 800de20:	3fe921fb 	.word	0x3fe921fb
 800de24:	4002d97b 	.word	0x4002d97b
 800de28:	3ff921fb 	.word	0x3ff921fb
 800de2c:	413921fb 	.word	0x413921fb
 800de30:	3fe00000 	.word	0x3fe00000
 800de34:	0800f4b0 	.word	0x0800f4b0
 800de38:	7fefffff 	.word	0x7fefffff
 800de3c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800de40:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800de44:	ee10 0a10 	vmov	r0, s0
 800de48:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800de4c:	ee10 6a10 	vmov	r6, s0
 800de50:	460f      	mov	r7, r1
 800de52:	f7f2 fe2d 	bl	8000ab0 <__aeabi_d2iz>
 800de56:	f7f2 fb11 	bl	800047c <__aeabi_i2d>
 800de5a:	4602      	mov	r2, r0
 800de5c:	460b      	mov	r3, r1
 800de5e:	4630      	mov	r0, r6
 800de60:	4639      	mov	r1, r7
 800de62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800de66:	f7f2 f9bb 	bl	80001e0 <__aeabi_dsub>
 800de6a:	4b23      	ldr	r3, [pc, #140]	; (800def8 <__ieee754_rem_pio2+0x410>)
 800de6c:	2200      	movs	r2, #0
 800de6e:	f7f2 fb6f 	bl	8000550 <__aeabi_dmul>
 800de72:	460f      	mov	r7, r1
 800de74:	4606      	mov	r6, r0
 800de76:	f7f2 fe1b 	bl	8000ab0 <__aeabi_d2iz>
 800de7a:	f7f2 faff 	bl	800047c <__aeabi_i2d>
 800de7e:	4602      	mov	r2, r0
 800de80:	460b      	mov	r3, r1
 800de82:	4630      	mov	r0, r6
 800de84:	4639      	mov	r1, r7
 800de86:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800de8a:	f7f2 f9a9 	bl	80001e0 <__aeabi_dsub>
 800de8e:	4b1a      	ldr	r3, [pc, #104]	; (800def8 <__ieee754_rem_pio2+0x410>)
 800de90:	2200      	movs	r2, #0
 800de92:	f7f2 fb5d 	bl	8000550 <__aeabi_dmul>
 800de96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800de9a:	ad04      	add	r5, sp, #16
 800de9c:	f04f 0803 	mov.w	r8, #3
 800dea0:	46a9      	mov	r9, r5
 800dea2:	2600      	movs	r6, #0
 800dea4:	2700      	movs	r7, #0
 800dea6:	4632      	mov	r2, r6
 800dea8:	463b      	mov	r3, r7
 800deaa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800deae:	46c3      	mov	fp, r8
 800deb0:	3d08      	subs	r5, #8
 800deb2:	f108 38ff 	add.w	r8, r8, #4294967295
 800deb6:	f7f2 fdb3 	bl	8000a20 <__aeabi_dcmpeq>
 800deba:	2800      	cmp	r0, #0
 800debc:	d1f3      	bne.n	800dea6 <__ieee754_rem_pio2+0x3be>
 800debe:	4b0f      	ldr	r3, [pc, #60]	; (800defc <__ieee754_rem_pio2+0x414>)
 800dec0:	9301      	str	r3, [sp, #4]
 800dec2:	2302      	movs	r3, #2
 800dec4:	9300      	str	r3, [sp, #0]
 800dec6:	4622      	mov	r2, r4
 800dec8:	465b      	mov	r3, fp
 800deca:	4651      	mov	r1, sl
 800decc:	4648      	mov	r0, r9
 800dece:	f000 fc63 	bl	800e798 <__kernel_rem_pio2>
 800ded2:	9b02      	ldr	r3, [sp, #8]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	4683      	mov	fp, r0
 800ded8:	f6bf ae46 	bge.w	800db68 <__ieee754_rem_pio2+0x80>
 800dedc:	e9da 2100 	ldrd	r2, r1, [sl]
 800dee0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dee4:	e9ca 2300 	strd	r2, r3, [sl]
 800dee8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800deec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800def0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800def4:	e73a      	b.n	800dd6c <__ieee754_rem_pio2+0x284>
 800def6:	bf00      	nop
 800def8:	41700000 	.word	0x41700000
 800defc:	0800f530 	.word	0x0800f530

0800df00 <__ieee754_sqrt>:
 800df00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df04:	ec55 4b10 	vmov	r4, r5, d0
 800df08:	4e55      	ldr	r6, [pc, #340]	; (800e060 <__ieee754_sqrt+0x160>)
 800df0a:	43ae      	bics	r6, r5
 800df0c:	ee10 0a10 	vmov	r0, s0
 800df10:	ee10 3a10 	vmov	r3, s0
 800df14:	462a      	mov	r2, r5
 800df16:	4629      	mov	r1, r5
 800df18:	d110      	bne.n	800df3c <__ieee754_sqrt+0x3c>
 800df1a:	ee10 2a10 	vmov	r2, s0
 800df1e:	462b      	mov	r3, r5
 800df20:	f7f2 fb16 	bl	8000550 <__aeabi_dmul>
 800df24:	4602      	mov	r2, r0
 800df26:	460b      	mov	r3, r1
 800df28:	4620      	mov	r0, r4
 800df2a:	4629      	mov	r1, r5
 800df2c:	f7f2 f95a 	bl	80001e4 <__adddf3>
 800df30:	4604      	mov	r4, r0
 800df32:	460d      	mov	r5, r1
 800df34:	ec45 4b10 	vmov	d0, r4, r5
 800df38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df3c:	2d00      	cmp	r5, #0
 800df3e:	dc10      	bgt.n	800df62 <__ieee754_sqrt+0x62>
 800df40:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800df44:	4330      	orrs	r0, r6
 800df46:	d0f5      	beq.n	800df34 <__ieee754_sqrt+0x34>
 800df48:	b15d      	cbz	r5, 800df62 <__ieee754_sqrt+0x62>
 800df4a:	ee10 2a10 	vmov	r2, s0
 800df4e:	462b      	mov	r3, r5
 800df50:	ee10 0a10 	vmov	r0, s0
 800df54:	f7f2 f944 	bl	80001e0 <__aeabi_dsub>
 800df58:	4602      	mov	r2, r0
 800df5a:	460b      	mov	r3, r1
 800df5c:	f7f2 fc22 	bl	80007a4 <__aeabi_ddiv>
 800df60:	e7e6      	b.n	800df30 <__ieee754_sqrt+0x30>
 800df62:	1512      	asrs	r2, r2, #20
 800df64:	d074      	beq.n	800e050 <__ieee754_sqrt+0x150>
 800df66:	07d4      	lsls	r4, r2, #31
 800df68:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800df6c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800df70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800df74:	bf5e      	ittt	pl
 800df76:	0fda      	lsrpl	r2, r3, #31
 800df78:	005b      	lslpl	r3, r3, #1
 800df7a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800df7e:	2400      	movs	r4, #0
 800df80:	0fda      	lsrs	r2, r3, #31
 800df82:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800df86:	107f      	asrs	r7, r7, #1
 800df88:	005b      	lsls	r3, r3, #1
 800df8a:	2516      	movs	r5, #22
 800df8c:	4620      	mov	r0, r4
 800df8e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800df92:	1886      	adds	r6, r0, r2
 800df94:	428e      	cmp	r6, r1
 800df96:	bfde      	ittt	le
 800df98:	1b89      	suble	r1, r1, r6
 800df9a:	18b0      	addle	r0, r6, r2
 800df9c:	18a4      	addle	r4, r4, r2
 800df9e:	0049      	lsls	r1, r1, #1
 800dfa0:	3d01      	subs	r5, #1
 800dfa2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800dfa6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800dfaa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dfae:	d1f0      	bne.n	800df92 <__ieee754_sqrt+0x92>
 800dfb0:	462a      	mov	r2, r5
 800dfb2:	f04f 0e20 	mov.w	lr, #32
 800dfb6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800dfba:	4281      	cmp	r1, r0
 800dfbc:	eb06 0c05 	add.w	ip, r6, r5
 800dfc0:	dc02      	bgt.n	800dfc8 <__ieee754_sqrt+0xc8>
 800dfc2:	d113      	bne.n	800dfec <__ieee754_sqrt+0xec>
 800dfc4:	459c      	cmp	ip, r3
 800dfc6:	d811      	bhi.n	800dfec <__ieee754_sqrt+0xec>
 800dfc8:	f1bc 0f00 	cmp.w	ip, #0
 800dfcc:	eb0c 0506 	add.w	r5, ip, r6
 800dfd0:	da43      	bge.n	800e05a <__ieee754_sqrt+0x15a>
 800dfd2:	2d00      	cmp	r5, #0
 800dfd4:	db41      	blt.n	800e05a <__ieee754_sqrt+0x15a>
 800dfd6:	f100 0801 	add.w	r8, r0, #1
 800dfda:	1a09      	subs	r1, r1, r0
 800dfdc:	459c      	cmp	ip, r3
 800dfde:	bf88      	it	hi
 800dfe0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800dfe4:	eba3 030c 	sub.w	r3, r3, ip
 800dfe8:	4432      	add	r2, r6
 800dfea:	4640      	mov	r0, r8
 800dfec:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800dff0:	f1be 0e01 	subs.w	lr, lr, #1
 800dff4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800dff8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dffc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e000:	d1db      	bne.n	800dfba <__ieee754_sqrt+0xba>
 800e002:	430b      	orrs	r3, r1
 800e004:	d006      	beq.n	800e014 <__ieee754_sqrt+0x114>
 800e006:	1c50      	adds	r0, r2, #1
 800e008:	bf13      	iteet	ne
 800e00a:	3201      	addne	r2, #1
 800e00c:	3401      	addeq	r4, #1
 800e00e:	4672      	moveq	r2, lr
 800e010:	f022 0201 	bicne.w	r2, r2, #1
 800e014:	1063      	asrs	r3, r4, #1
 800e016:	0852      	lsrs	r2, r2, #1
 800e018:	07e1      	lsls	r1, r4, #31
 800e01a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e01e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e022:	bf48      	it	mi
 800e024:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e028:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e02c:	4614      	mov	r4, r2
 800e02e:	e781      	b.n	800df34 <__ieee754_sqrt+0x34>
 800e030:	0ad9      	lsrs	r1, r3, #11
 800e032:	3815      	subs	r0, #21
 800e034:	055b      	lsls	r3, r3, #21
 800e036:	2900      	cmp	r1, #0
 800e038:	d0fa      	beq.n	800e030 <__ieee754_sqrt+0x130>
 800e03a:	02cd      	lsls	r5, r1, #11
 800e03c:	d50a      	bpl.n	800e054 <__ieee754_sqrt+0x154>
 800e03e:	f1c2 0420 	rsb	r4, r2, #32
 800e042:	fa23 f404 	lsr.w	r4, r3, r4
 800e046:	1e55      	subs	r5, r2, #1
 800e048:	4093      	lsls	r3, r2
 800e04a:	4321      	orrs	r1, r4
 800e04c:	1b42      	subs	r2, r0, r5
 800e04e:	e78a      	b.n	800df66 <__ieee754_sqrt+0x66>
 800e050:	4610      	mov	r0, r2
 800e052:	e7f0      	b.n	800e036 <__ieee754_sqrt+0x136>
 800e054:	0049      	lsls	r1, r1, #1
 800e056:	3201      	adds	r2, #1
 800e058:	e7ef      	b.n	800e03a <__ieee754_sqrt+0x13a>
 800e05a:	4680      	mov	r8, r0
 800e05c:	e7bd      	b.n	800dfda <__ieee754_sqrt+0xda>
 800e05e:	bf00      	nop
 800e060:	7ff00000 	.word	0x7ff00000

0800e064 <__ieee754_powf>:
 800e064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e068:	ee10 4a90 	vmov	r4, s1
 800e06c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800e070:	ed2d 8b02 	vpush	{d8}
 800e074:	ee10 6a10 	vmov	r6, s0
 800e078:	eeb0 8a40 	vmov.f32	s16, s0
 800e07c:	eef0 8a60 	vmov.f32	s17, s1
 800e080:	d10c      	bne.n	800e09c <__ieee754_powf+0x38>
 800e082:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800e086:	0076      	lsls	r6, r6, #1
 800e088:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800e08c:	f240 8296 	bls.w	800e5bc <__ieee754_powf+0x558>
 800e090:	ee38 0a28 	vadd.f32	s0, s16, s17
 800e094:	ecbd 8b02 	vpop	{d8}
 800e098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e09c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800e0a0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800e0a4:	dcf4      	bgt.n	800e090 <__ieee754_powf+0x2c>
 800e0a6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800e0aa:	dd08      	ble.n	800e0be <__ieee754_powf+0x5a>
 800e0ac:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800e0b0:	d1ee      	bne.n	800e090 <__ieee754_powf+0x2c>
 800e0b2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800e0b6:	0064      	lsls	r4, r4, #1
 800e0b8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800e0bc:	e7e6      	b.n	800e08c <__ieee754_powf+0x28>
 800e0be:	2e00      	cmp	r6, #0
 800e0c0:	da20      	bge.n	800e104 <__ieee754_powf+0xa0>
 800e0c2:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800e0c6:	da2d      	bge.n	800e124 <__ieee754_powf+0xc0>
 800e0c8:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800e0cc:	f2c0 827f 	blt.w	800e5ce <__ieee754_powf+0x56a>
 800e0d0:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800e0d4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800e0d8:	fa48 f703 	asr.w	r7, r8, r3
 800e0dc:	fa07 f303 	lsl.w	r3, r7, r3
 800e0e0:	4543      	cmp	r3, r8
 800e0e2:	f040 8274 	bne.w	800e5ce <__ieee754_powf+0x56a>
 800e0e6:	f007 0701 	and.w	r7, r7, #1
 800e0ea:	f1c7 0702 	rsb	r7, r7, #2
 800e0ee:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800e0f2:	d11f      	bne.n	800e134 <__ieee754_powf+0xd0>
 800e0f4:	2c00      	cmp	r4, #0
 800e0f6:	f280 8267 	bge.w	800e5c8 <__ieee754_powf+0x564>
 800e0fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e0fe:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800e102:	e7c7      	b.n	800e094 <__ieee754_powf+0x30>
 800e104:	2700      	movs	r7, #0
 800e106:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800e10a:	d1f0      	bne.n	800e0ee <__ieee754_powf+0x8a>
 800e10c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800e110:	f000 8254 	beq.w	800e5bc <__ieee754_powf+0x558>
 800e114:	dd08      	ble.n	800e128 <__ieee754_powf+0xc4>
 800e116:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800e420 <__ieee754_powf+0x3bc>
 800e11a:	2c00      	cmp	r4, #0
 800e11c:	bfa8      	it	ge
 800e11e:	eeb0 0a68 	vmovge.f32	s0, s17
 800e122:	e7b7      	b.n	800e094 <__ieee754_powf+0x30>
 800e124:	2702      	movs	r7, #2
 800e126:	e7ee      	b.n	800e106 <__ieee754_powf+0xa2>
 800e128:	2c00      	cmp	r4, #0
 800e12a:	f280 824a 	bge.w	800e5c2 <__ieee754_powf+0x55e>
 800e12e:	eeb1 0a68 	vneg.f32	s0, s17
 800e132:	e7af      	b.n	800e094 <__ieee754_powf+0x30>
 800e134:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800e138:	d102      	bne.n	800e140 <__ieee754_powf+0xdc>
 800e13a:	ee28 0a08 	vmul.f32	s0, s16, s16
 800e13e:	e7a9      	b.n	800e094 <__ieee754_powf+0x30>
 800e140:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800e144:	eeb0 0a48 	vmov.f32	s0, s16
 800e148:	d107      	bne.n	800e15a <__ieee754_powf+0xf6>
 800e14a:	2e00      	cmp	r6, #0
 800e14c:	db05      	blt.n	800e15a <__ieee754_powf+0xf6>
 800e14e:	ecbd 8b02 	vpop	{d8}
 800e152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e156:	f000 ba53 	b.w	800e600 <__ieee754_sqrtf>
 800e15a:	f001 f897 	bl	800f28c <fabsf>
 800e15e:	b125      	cbz	r5, 800e16a <__ieee754_powf+0x106>
 800e160:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800e164:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800e168:	d116      	bne.n	800e198 <__ieee754_powf+0x134>
 800e16a:	2c00      	cmp	r4, #0
 800e16c:	bfbc      	itt	lt
 800e16e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800e172:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800e176:	2e00      	cmp	r6, #0
 800e178:	da8c      	bge.n	800e094 <__ieee754_powf+0x30>
 800e17a:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800e17e:	ea55 0307 	orrs.w	r3, r5, r7
 800e182:	d104      	bne.n	800e18e <__ieee754_powf+0x12a>
 800e184:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e188:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e18c:	e782      	b.n	800e094 <__ieee754_powf+0x30>
 800e18e:	2f01      	cmp	r7, #1
 800e190:	d180      	bne.n	800e094 <__ieee754_powf+0x30>
 800e192:	eeb1 0a40 	vneg.f32	s0, s0
 800e196:	e77d      	b.n	800e094 <__ieee754_powf+0x30>
 800e198:	0ff0      	lsrs	r0, r6, #31
 800e19a:	3801      	subs	r0, #1
 800e19c:	ea57 0300 	orrs.w	r3, r7, r0
 800e1a0:	d104      	bne.n	800e1ac <__ieee754_powf+0x148>
 800e1a2:	ee38 8a48 	vsub.f32	s16, s16, s16
 800e1a6:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800e1aa:	e773      	b.n	800e094 <__ieee754_powf+0x30>
 800e1ac:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800e1b0:	dd74      	ble.n	800e29c <__ieee754_powf+0x238>
 800e1b2:	4b9c      	ldr	r3, [pc, #624]	; (800e424 <__ieee754_powf+0x3c0>)
 800e1b4:	429d      	cmp	r5, r3
 800e1b6:	dc08      	bgt.n	800e1ca <__ieee754_powf+0x166>
 800e1b8:	2c00      	cmp	r4, #0
 800e1ba:	da0b      	bge.n	800e1d4 <__ieee754_powf+0x170>
 800e1bc:	2000      	movs	r0, #0
 800e1be:	ecbd 8b02 	vpop	{d8}
 800e1c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1c6:	f000 bf41 	b.w	800f04c <__math_oflowf>
 800e1ca:	4b97      	ldr	r3, [pc, #604]	; (800e428 <__ieee754_powf+0x3c4>)
 800e1cc:	429d      	cmp	r5, r3
 800e1ce:	dd08      	ble.n	800e1e2 <__ieee754_powf+0x17e>
 800e1d0:	2c00      	cmp	r4, #0
 800e1d2:	dcf3      	bgt.n	800e1bc <__ieee754_powf+0x158>
 800e1d4:	2000      	movs	r0, #0
 800e1d6:	ecbd 8b02 	vpop	{d8}
 800e1da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1de:	f000 bf2f 	b.w	800f040 <__math_uflowf>
 800e1e2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e1e6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e1ea:	eddf 6a90 	vldr	s13, [pc, #576]	; 800e42c <__ieee754_powf+0x3c8>
 800e1ee:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800e1f2:	eee0 6a67 	vfms.f32	s13, s0, s15
 800e1f6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e1fa:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800e1fe:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e202:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e206:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800e430 <__ieee754_powf+0x3cc>
 800e20a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800e20e:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800e434 <__ieee754_powf+0x3d0>
 800e212:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e216:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800e438 <__ieee754_powf+0x3d4>
 800e21a:	eef0 6a67 	vmov.f32	s13, s15
 800e21e:	eee0 6a07 	vfma.f32	s13, s0, s14
 800e222:	ee16 3a90 	vmov	r3, s13
 800e226:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e22a:	f023 030f 	bic.w	r3, r3, #15
 800e22e:	ee00 3a90 	vmov	s1, r3
 800e232:	eee0 0a47 	vfms.f32	s1, s0, s14
 800e236:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e23a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800e23e:	f024 040f 	bic.w	r4, r4, #15
 800e242:	ee07 4a10 	vmov	s14, r4
 800e246:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800e24a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800e24e:	ee07 3a90 	vmov	s15, r3
 800e252:	eee7 0a27 	vfma.f32	s1, s14, s15
 800e256:	3f01      	subs	r7, #1
 800e258:	ea57 0200 	orrs.w	r2, r7, r0
 800e25c:	ee07 4a10 	vmov	s14, r4
 800e260:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e264:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800e268:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800e26c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800e270:	ee17 4a10 	vmov	r4, s14
 800e274:	bf08      	it	eq
 800e276:	eeb0 8a40 	vmoveq.f32	s16, s0
 800e27a:	2c00      	cmp	r4, #0
 800e27c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e280:	f340 817e 	ble.w	800e580 <__ieee754_powf+0x51c>
 800e284:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800e288:	f340 80f8 	ble.w	800e47c <__ieee754_powf+0x418>
 800e28c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e294:	bf4c      	ite	mi
 800e296:	2001      	movmi	r0, #1
 800e298:	2000      	movpl	r0, #0
 800e29a:	e790      	b.n	800e1be <__ieee754_powf+0x15a>
 800e29c:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800e2a0:	bf01      	itttt	eq
 800e2a2:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800e43c <__ieee754_powf+0x3d8>
 800e2a6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800e2aa:	f06f 0217 	mvneq.w	r2, #23
 800e2ae:	ee17 5a90 	vmoveq	r5, s15
 800e2b2:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800e2b6:	bf18      	it	ne
 800e2b8:	2200      	movne	r2, #0
 800e2ba:	3b7f      	subs	r3, #127	; 0x7f
 800e2bc:	4413      	add	r3, r2
 800e2be:	4a60      	ldr	r2, [pc, #384]	; (800e440 <__ieee754_powf+0x3dc>)
 800e2c0:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800e2c4:	4295      	cmp	r5, r2
 800e2c6:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800e2ca:	dd06      	ble.n	800e2da <__ieee754_powf+0x276>
 800e2cc:	4a5d      	ldr	r2, [pc, #372]	; (800e444 <__ieee754_powf+0x3e0>)
 800e2ce:	4295      	cmp	r5, r2
 800e2d0:	f340 80a4 	ble.w	800e41c <__ieee754_powf+0x3b8>
 800e2d4:	3301      	adds	r3, #1
 800e2d6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800e2da:	2500      	movs	r5, #0
 800e2dc:	4a5a      	ldr	r2, [pc, #360]	; (800e448 <__ieee754_powf+0x3e4>)
 800e2de:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800e2e2:	ee07 1a90 	vmov	s15, r1
 800e2e6:	ed92 7a00 	vldr	s14, [r2]
 800e2ea:	4a58      	ldr	r2, [pc, #352]	; (800e44c <__ieee754_powf+0x3e8>)
 800e2ec:	ee37 6a27 	vadd.f32	s12, s14, s15
 800e2f0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800e2f4:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800e2f8:	1049      	asrs	r1, r1, #1
 800e2fa:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800e2fe:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800e302:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800e306:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800e30a:	ee06 1a10 	vmov	s12, r1
 800e30e:	ee65 4a26 	vmul.f32	s9, s10, s13
 800e312:	ee36 7a47 	vsub.f32	s14, s12, s14
 800e316:	ee14 6a90 	vmov	r6, s9
 800e31a:	4016      	ands	r6, r2
 800e31c:	ee05 6a90 	vmov	s11, r6
 800e320:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800e324:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e328:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800e450 <__ieee754_powf+0x3ec>
 800e32c:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800e330:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800e334:	ee25 6a26 	vmul.f32	s12, s10, s13
 800e338:	eddf 6a46 	vldr	s13, [pc, #280]	; 800e454 <__ieee754_powf+0x3f0>
 800e33c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800e340:	eddf 6a45 	vldr	s13, [pc, #276]	; 800e458 <__ieee754_powf+0x3f4>
 800e344:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e348:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800e42c <__ieee754_powf+0x3c8>
 800e34c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e350:	eddf 6a42 	vldr	s13, [pc, #264]	; 800e45c <__ieee754_powf+0x3f8>
 800e354:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e358:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800e460 <__ieee754_powf+0x3fc>
 800e35c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e360:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800e364:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800e368:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e36c:	eee5 6a07 	vfma.f32	s13, s10, s14
 800e370:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800e374:	eef0 7a45 	vmov.f32	s15, s10
 800e378:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800e37c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e380:	ee17 1a90 	vmov	r1, s15
 800e384:	4011      	ands	r1, r2
 800e386:	ee07 1a90 	vmov	s15, r1
 800e38a:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800e38e:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800e392:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800e396:	ee27 7a24 	vmul.f32	s14, s14, s9
 800e39a:	eea6 7a27 	vfma.f32	s14, s12, s15
 800e39e:	eeb0 6a47 	vmov.f32	s12, s14
 800e3a2:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800e3a6:	ee16 1a10 	vmov	r1, s12
 800e3aa:	4011      	ands	r1, r2
 800e3ac:	ee06 1a90 	vmov	s13, r1
 800e3b0:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800e3b4:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800e464 <__ieee754_powf+0x400>
 800e3b8:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800e468 <__ieee754_powf+0x404>
 800e3bc:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e3c0:	ee06 1a10 	vmov	s12, r1
 800e3c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e3c8:	eddf 7a28 	vldr	s15, [pc, #160]	; 800e46c <__ieee754_powf+0x408>
 800e3cc:	4928      	ldr	r1, [pc, #160]	; (800e470 <__ieee754_powf+0x40c>)
 800e3ce:	eea6 7a27 	vfma.f32	s14, s12, s15
 800e3d2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800e3d6:	edd1 7a00 	vldr	s15, [r1]
 800e3da:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e3de:	ee07 3a90 	vmov	s15, r3
 800e3e2:	4b24      	ldr	r3, [pc, #144]	; (800e474 <__ieee754_powf+0x410>)
 800e3e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e3e8:	eef0 7a47 	vmov.f32	s15, s14
 800e3ec:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e3f0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800e3f4:	edd5 0a00 	vldr	s1, [r5]
 800e3f8:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800e3fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e400:	ee17 3a90 	vmov	r3, s15
 800e404:	4013      	ands	r3, r2
 800e406:	ee07 3a90 	vmov	s15, r3
 800e40a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e40e:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800e412:	eee6 6a65 	vfms.f32	s13, s12, s11
 800e416:	ee77 7a66 	vsub.f32	s15, s14, s13
 800e41a:	e70e      	b.n	800e23a <__ieee754_powf+0x1d6>
 800e41c:	2501      	movs	r5, #1
 800e41e:	e75d      	b.n	800e2dc <__ieee754_powf+0x278>
 800e420:	00000000 	.word	0x00000000
 800e424:	3f7ffff3 	.word	0x3f7ffff3
 800e428:	3f800007 	.word	0x3f800007
 800e42c:	3eaaaaab 	.word	0x3eaaaaab
 800e430:	3fb8aa3b 	.word	0x3fb8aa3b
 800e434:	36eca570 	.word	0x36eca570
 800e438:	3fb8aa00 	.word	0x3fb8aa00
 800e43c:	4b800000 	.word	0x4b800000
 800e440:	001cc471 	.word	0x001cc471
 800e444:	005db3d6 	.word	0x005db3d6
 800e448:	0800f638 	.word	0x0800f638
 800e44c:	fffff000 	.word	0xfffff000
 800e450:	3e6c3255 	.word	0x3e6c3255
 800e454:	3e53f142 	.word	0x3e53f142
 800e458:	3e8ba305 	.word	0x3e8ba305
 800e45c:	3edb6db7 	.word	0x3edb6db7
 800e460:	3f19999a 	.word	0x3f19999a
 800e464:	3f76384f 	.word	0x3f76384f
 800e468:	3f763800 	.word	0x3f763800
 800e46c:	369dc3a0 	.word	0x369dc3a0
 800e470:	0800f648 	.word	0x0800f648
 800e474:	0800f640 	.word	0x0800f640
 800e478:	3338aa3c 	.word	0x3338aa3c
 800e47c:	f040 8095 	bne.w	800e5aa <__ieee754_powf+0x546>
 800e480:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800e478 <__ieee754_powf+0x414>
 800e484:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e488:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800e48c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800e490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e494:	f73f aefa 	bgt.w	800e28c <__ieee754_powf+0x228>
 800e498:	15db      	asrs	r3, r3, #23
 800e49a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800e49e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e4a2:	4103      	asrs	r3, r0
 800e4a4:	4423      	add	r3, r4
 800e4a6:	494b      	ldr	r1, [pc, #300]	; (800e5d4 <__ieee754_powf+0x570>)
 800e4a8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e4ac:	3a7f      	subs	r2, #127	; 0x7f
 800e4ae:	4111      	asrs	r1, r2
 800e4b0:	ea23 0101 	bic.w	r1, r3, r1
 800e4b4:	ee07 1a10 	vmov	s14, r1
 800e4b8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800e4bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800e4c0:	f1c2 0217 	rsb	r2, r2, #23
 800e4c4:	4110      	asrs	r0, r2
 800e4c6:	2c00      	cmp	r4, #0
 800e4c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e4cc:	bfb8      	it	lt
 800e4ce:	4240      	neglt	r0, r0
 800e4d0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800e4d4:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800e5d8 <__ieee754_powf+0x574>
 800e4d8:	eddf 6a40 	vldr	s13, [pc, #256]	; 800e5dc <__ieee754_powf+0x578>
 800e4dc:	ee17 3a10 	vmov	r3, s14
 800e4e0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e4e4:	f023 030f 	bic.w	r3, r3, #15
 800e4e8:	ee07 3a10 	vmov	s14, r3
 800e4ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e4f0:	ee27 0a00 	vmul.f32	s0, s14, s0
 800e4f4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800e4f8:	eddf 7a39 	vldr	s15, [pc, #228]	; 800e5e0 <__ieee754_powf+0x57c>
 800e4fc:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800e500:	eef0 7a40 	vmov.f32	s15, s0
 800e504:	eee7 7a26 	vfma.f32	s15, s14, s13
 800e508:	eeb0 6a67 	vmov.f32	s12, s15
 800e50c:	eea7 6a66 	vfms.f32	s12, s14, s13
 800e510:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800e514:	ee30 0a46 	vsub.f32	s0, s0, s12
 800e518:	eddf 6a32 	vldr	s13, [pc, #200]	; 800e5e4 <__ieee754_powf+0x580>
 800e51c:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800e5e8 <__ieee754_powf+0x584>
 800e520:	eee7 6a06 	vfma.f32	s13, s14, s12
 800e524:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800e5ec <__ieee754_powf+0x588>
 800e528:	eea6 6a87 	vfma.f32	s12, s13, s14
 800e52c:	eddf 6a30 	vldr	s13, [pc, #192]	; 800e5f0 <__ieee754_powf+0x58c>
 800e530:	eee6 6a07 	vfma.f32	s13, s12, s14
 800e534:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800e5f4 <__ieee754_powf+0x590>
 800e538:	eea6 6a87 	vfma.f32	s12, s13, s14
 800e53c:	eef0 6a67 	vmov.f32	s13, s15
 800e540:	eee6 6a47 	vfms.f32	s13, s12, s14
 800e544:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800e548:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800e54c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800e550:	eea7 0a80 	vfma.f32	s0, s15, s0
 800e554:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800e558:	ee37 0a40 	vsub.f32	s0, s14, s0
 800e55c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e560:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e564:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e568:	ee10 3a10 	vmov	r3, s0
 800e56c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800e570:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e574:	da1f      	bge.n	800e5b6 <__ieee754_powf+0x552>
 800e576:	f000 fe9d 	bl	800f2b4 <scalbnf>
 800e57a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800e57e:	e589      	b.n	800e094 <__ieee754_powf+0x30>
 800e580:	4a1d      	ldr	r2, [pc, #116]	; (800e5f8 <__ieee754_powf+0x594>)
 800e582:	4293      	cmp	r3, r2
 800e584:	dd07      	ble.n	800e596 <__ieee754_powf+0x532>
 800e586:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e58a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e58e:	bf4c      	ite	mi
 800e590:	2001      	movmi	r0, #1
 800e592:	2000      	movpl	r0, #0
 800e594:	e61f      	b.n	800e1d6 <__ieee754_powf+0x172>
 800e596:	d108      	bne.n	800e5aa <__ieee754_powf+0x546>
 800e598:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e59c:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800e5a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5a4:	f6ff af78 	blt.w	800e498 <__ieee754_powf+0x434>
 800e5a8:	e7ed      	b.n	800e586 <__ieee754_powf+0x522>
 800e5aa:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800e5ae:	f73f af73 	bgt.w	800e498 <__ieee754_powf+0x434>
 800e5b2:	2000      	movs	r0, #0
 800e5b4:	e78c      	b.n	800e4d0 <__ieee754_powf+0x46c>
 800e5b6:	ee00 3a10 	vmov	s0, r3
 800e5ba:	e7de      	b.n	800e57a <__ieee754_powf+0x516>
 800e5bc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e5c0:	e568      	b.n	800e094 <__ieee754_powf+0x30>
 800e5c2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800e5fc <__ieee754_powf+0x598>
 800e5c6:	e565      	b.n	800e094 <__ieee754_powf+0x30>
 800e5c8:	eeb0 0a48 	vmov.f32	s0, s16
 800e5cc:	e562      	b.n	800e094 <__ieee754_powf+0x30>
 800e5ce:	2700      	movs	r7, #0
 800e5d0:	e58d      	b.n	800e0ee <__ieee754_powf+0x8a>
 800e5d2:	bf00      	nop
 800e5d4:	007fffff 	.word	0x007fffff
 800e5d8:	35bfbe8c 	.word	0x35bfbe8c
 800e5dc:	3f317200 	.word	0x3f317200
 800e5e0:	3f317218 	.word	0x3f317218
 800e5e4:	b5ddea0e 	.word	0xb5ddea0e
 800e5e8:	3331bb4c 	.word	0x3331bb4c
 800e5ec:	388ab355 	.word	0x388ab355
 800e5f0:	bb360b61 	.word	0xbb360b61
 800e5f4:	3e2aaaab 	.word	0x3e2aaaab
 800e5f8:	43160000 	.word	0x43160000
 800e5fc:	00000000 	.word	0x00000000

0800e600 <__ieee754_sqrtf>:
 800e600:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e604:	4770      	bx	lr
	...

0800e608 <__kernel_cos>:
 800e608:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e60c:	ec57 6b10 	vmov	r6, r7, d0
 800e610:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e614:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e618:	ed8d 1b00 	vstr	d1, [sp]
 800e61c:	da07      	bge.n	800e62e <__kernel_cos+0x26>
 800e61e:	ee10 0a10 	vmov	r0, s0
 800e622:	4639      	mov	r1, r7
 800e624:	f7f2 fa44 	bl	8000ab0 <__aeabi_d2iz>
 800e628:	2800      	cmp	r0, #0
 800e62a:	f000 8088 	beq.w	800e73e <__kernel_cos+0x136>
 800e62e:	4632      	mov	r2, r6
 800e630:	463b      	mov	r3, r7
 800e632:	4630      	mov	r0, r6
 800e634:	4639      	mov	r1, r7
 800e636:	f7f1 ff8b 	bl	8000550 <__aeabi_dmul>
 800e63a:	4b51      	ldr	r3, [pc, #324]	; (800e780 <__kernel_cos+0x178>)
 800e63c:	2200      	movs	r2, #0
 800e63e:	4604      	mov	r4, r0
 800e640:	460d      	mov	r5, r1
 800e642:	f7f1 ff85 	bl	8000550 <__aeabi_dmul>
 800e646:	a340      	add	r3, pc, #256	; (adr r3, 800e748 <__kernel_cos+0x140>)
 800e648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e64c:	4682      	mov	sl, r0
 800e64e:	468b      	mov	fp, r1
 800e650:	4620      	mov	r0, r4
 800e652:	4629      	mov	r1, r5
 800e654:	f7f1 ff7c 	bl	8000550 <__aeabi_dmul>
 800e658:	a33d      	add	r3, pc, #244	; (adr r3, 800e750 <__kernel_cos+0x148>)
 800e65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e65e:	f7f1 fdc1 	bl	80001e4 <__adddf3>
 800e662:	4622      	mov	r2, r4
 800e664:	462b      	mov	r3, r5
 800e666:	f7f1 ff73 	bl	8000550 <__aeabi_dmul>
 800e66a:	a33b      	add	r3, pc, #236	; (adr r3, 800e758 <__kernel_cos+0x150>)
 800e66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e670:	f7f1 fdb6 	bl	80001e0 <__aeabi_dsub>
 800e674:	4622      	mov	r2, r4
 800e676:	462b      	mov	r3, r5
 800e678:	f7f1 ff6a 	bl	8000550 <__aeabi_dmul>
 800e67c:	a338      	add	r3, pc, #224	; (adr r3, 800e760 <__kernel_cos+0x158>)
 800e67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e682:	f7f1 fdaf 	bl	80001e4 <__adddf3>
 800e686:	4622      	mov	r2, r4
 800e688:	462b      	mov	r3, r5
 800e68a:	f7f1 ff61 	bl	8000550 <__aeabi_dmul>
 800e68e:	a336      	add	r3, pc, #216	; (adr r3, 800e768 <__kernel_cos+0x160>)
 800e690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e694:	f7f1 fda4 	bl	80001e0 <__aeabi_dsub>
 800e698:	4622      	mov	r2, r4
 800e69a:	462b      	mov	r3, r5
 800e69c:	f7f1 ff58 	bl	8000550 <__aeabi_dmul>
 800e6a0:	a333      	add	r3, pc, #204	; (adr r3, 800e770 <__kernel_cos+0x168>)
 800e6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a6:	f7f1 fd9d 	bl	80001e4 <__adddf3>
 800e6aa:	4622      	mov	r2, r4
 800e6ac:	462b      	mov	r3, r5
 800e6ae:	f7f1 ff4f 	bl	8000550 <__aeabi_dmul>
 800e6b2:	4622      	mov	r2, r4
 800e6b4:	462b      	mov	r3, r5
 800e6b6:	f7f1 ff4b 	bl	8000550 <__aeabi_dmul>
 800e6ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6be:	4604      	mov	r4, r0
 800e6c0:	460d      	mov	r5, r1
 800e6c2:	4630      	mov	r0, r6
 800e6c4:	4639      	mov	r1, r7
 800e6c6:	f7f1 ff43 	bl	8000550 <__aeabi_dmul>
 800e6ca:	460b      	mov	r3, r1
 800e6cc:	4602      	mov	r2, r0
 800e6ce:	4629      	mov	r1, r5
 800e6d0:	4620      	mov	r0, r4
 800e6d2:	f7f1 fd85 	bl	80001e0 <__aeabi_dsub>
 800e6d6:	4b2b      	ldr	r3, [pc, #172]	; (800e784 <__kernel_cos+0x17c>)
 800e6d8:	4598      	cmp	r8, r3
 800e6da:	4606      	mov	r6, r0
 800e6dc:	460f      	mov	r7, r1
 800e6de:	dc10      	bgt.n	800e702 <__kernel_cos+0xfa>
 800e6e0:	4602      	mov	r2, r0
 800e6e2:	460b      	mov	r3, r1
 800e6e4:	4650      	mov	r0, sl
 800e6e6:	4659      	mov	r1, fp
 800e6e8:	f7f1 fd7a 	bl	80001e0 <__aeabi_dsub>
 800e6ec:	460b      	mov	r3, r1
 800e6ee:	4926      	ldr	r1, [pc, #152]	; (800e788 <__kernel_cos+0x180>)
 800e6f0:	4602      	mov	r2, r0
 800e6f2:	2000      	movs	r0, #0
 800e6f4:	f7f1 fd74 	bl	80001e0 <__aeabi_dsub>
 800e6f8:	ec41 0b10 	vmov	d0, r0, r1
 800e6fc:	b003      	add	sp, #12
 800e6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e702:	4b22      	ldr	r3, [pc, #136]	; (800e78c <__kernel_cos+0x184>)
 800e704:	4920      	ldr	r1, [pc, #128]	; (800e788 <__kernel_cos+0x180>)
 800e706:	4598      	cmp	r8, r3
 800e708:	bfcc      	ite	gt
 800e70a:	4d21      	ldrgt	r5, [pc, #132]	; (800e790 <__kernel_cos+0x188>)
 800e70c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800e710:	2400      	movs	r4, #0
 800e712:	4622      	mov	r2, r4
 800e714:	462b      	mov	r3, r5
 800e716:	2000      	movs	r0, #0
 800e718:	f7f1 fd62 	bl	80001e0 <__aeabi_dsub>
 800e71c:	4622      	mov	r2, r4
 800e71e:	4680      	mov	r8, r0
 800e720:	4689      	mov	r9, r1
 800e722:	462b      	mov	r3, r5
 800e724:	4650      	mov	r0, sl
 800e726:	4659      	mov	r1, fp
 800e728:	f7f1 fd5a 	bl	80001e0 <__aeabi_dsub>
 800e72c:	4632      	mov	r2, r6
 800e72e:	463b      	mov	r3, r7
 800e730:	f7f1 fd56 	bl	80001e0 <__aeabi_dsub>
 800e734:	4602      	mov	r2, r0
 800e736:	460b      	mov	r3, r1
 800e738:	4640      	mov	r0, r8
 800e73a:	4649      	mov	r1, r9
 800e73c:	e7da      	b.n	800e6f4 <__kernel_cos+0xec>
 800e73e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e778 <__kernel_cos+0x170>
 800e742:	e7db      	b.n	800e6fc <__kernel_cos+0xf4>
 800e744:	f3af 8000 	nop.w
 800e748:	be8838d4 	.word	0xbe8838d4
 800e74c:	bda8fae9 	.word	0xbda8fae9
 800e750:	bdb4b1c4 	.word	0xbdb4b1c4
 800e754:	3e21ee9e 	.word	0x3e21ee9e
 800e758:	809c52ad 	.word	0x809c52ad
 800e75c:	3e927e4f 	.word	0x3e927e4f
 800e760:	19cb1590 	.word	0x19cb1590
 800e764:	3efa01a0 	.word	0x3efa01a0
 800e768:	16c15177 	.word	0x16c15177
 800e76c:	3f56c16c 	.word	0x3f56c16c
 800e770:	5555554c 	.word	0x5555554c
 800e774:	3fa55555 	.word	0x3fa55555
 800e778:	00000000 	.word	0x00000000
 800e77c:	3ff00000 	.word	0x3ff00000
 800e780:	3fe00000 	.word	0x3fe00000
 800e784:	3fd33332 	.word	0x3fd33332
 800e788:	3ff00000 	.word	0x3ff00000
 800e78c:	3fe90000 	.word	0x3fe90000
 800e790:	3fd20000 	.word	0x3fd20000
 800e794:	00000000 	.word	0x00000000

0800e798 <__kernel_rem_pio2>:
 800e798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e79c:	ed2d 8b02 	vpush	{d8}
 800e7a0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800e7a4:	f112 0f14 	cmn.w	r2, #20
 800e7a8:	9308      	str	r3, [sp, #32]
 800e7aa:	9101      	str	r1, [sp, #4]
 800e7ac:	4bc4      	ldr	r3, [pc, #784]	; (800eac0 <__kernel_rem_pio2+0x328>)
 800e7ae:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800e7b0:	900b      	str	r0, [sp, #44]	; 0x2c
 800e7b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e7b6:	9302      	str	r3, [sp, #8]
 800e7b8:	9b08      	ldr	r3, [sp, #32]
 800e7ba:	f103 33ff 	add.w	r3, r3, #4294967295
 800e7be:	bfa8      	it	ge
 800e7c0:	1ed4      	subge	r4, r2, #3
 800e7c2:	9306      	str	r3, [sp, #24]
 800e7c4:	bfb2      	itee	lt
 800e7c6:	2400      	movlt	r4, #0
 800e7c8:	2318      	movge	r3, #24
 800e7ca:	fb94 f4f3 	sdivge	r4, r4, r3
 800e7ce:	f06f 0317 	mvn.w	r3, #23
 800e7d2:	fb04 3303 	mla	r3, r4, r3, r3
 800e7d6:	eb03 0a02 	add.w	sl, r3, r2
 800e7da:	9b02      	ldr	r3, [sp, #8]
 800e7dc:	9a06      	ldr	r2, [sp, #24]
 800e7de:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800eab0 <__kernel_rem_pio2+0x318>
 800e7e2:	eb03 0802 	add.w	r8, r3, r2
 800e7e6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e7e8:	1aa7      	subs	r7, r4, r2
 800e7ea:	ae22      	add	r6, sp, #136	; 0x88
 800e7ec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e7f0:	2500      	movs	r5, #0
 800e7f2:	4545      	cmp	r5, r8
 800e7f4:	dd13      	ble.n	800e81e <__kernel_rem_pio2+0x86>
 800e7f6:	9b08      	ldr	r3, [sp, #32]
 800e7f8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800eab0 <__kernel_rem_pio2+0x318>
 800e7fc:	aa22      	add	r2, sp, #136	; 0x88
 800e7fe:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e802:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800e806:	f04f 0800 	mov.w	r8, #0
 800e80a:	9b02      	ldr	r3, [sp, #8]
 800e80c:	4598      	cmp	r8, r3
 800e80e:	dc2f      	bgt.n	800e870 <__kernel_rem_pio2+0xd8>
 800e810:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e814:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800e818:	462f      	mov	r7, r5
 800e81a:	2600      	movs	r6, #0
 800e81c:	e01b      	b.n	800e856 <__kernel_rem_pio2+0xbe>
 800e81e:	42ef      	cmn	r7, r5
 800e820:	d407      	bmi.n	800e832 <__kernel_rem_pio2+0x9a>
 800e822:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e826:	f7f1 fe29 	bl	800047c <__aeabi_i2d>
 800e82a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e82e:	3501      	adds	r5, #1
 800e830:	e7df      	b.n	800e7f2 <__kernel_rem_pio2+0x5a>
 800e832:	ec51 0b18 	vmov	r0, r1, d8
 800e836:	e7f8      	b.n	800e82a <__kernel_rem_pio2+0x92>
 800e838:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e83c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e840:	f7f1 fe86 	bl	8000550 <__aeabi_dmul>
 800e844:	4602      	mov	r2, r0
 800e846:	460b      	mov	r3, r1
 800e848:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e84c:	f7f1 fcca 	bl	80001e4 <__adddf3>
 800e850:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e854:	3601      	adds	r6, #1
 800e856:	9b06      	ldr	r3, [sp, #24]
 800e858:	429e      	cmp	r6, r3
 800e85a:	f1a7 0708 	sub.w	r7, r7, #8
 800e85e:	ddeb      	ble.n	800e838 <__kernel_rem_pio2+0xa0>
 800e860:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e864:	f108 0801 	add.w	r8, r8, #1
 800e868:	ecab 7b02 	vstmia	fp!, {d7}
 800e86c:	3508      	adds	r5, #8
 800e86e:	e7cc      	b.n	800e80a <__kernel_rem_pio2+0x72>
 800e870:	9b02      	ldr	r3, [sp, #8]
 800e872:	aa0e      	add	r2, sp, #56	; 0x38
 800e874:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e878:	930d      	str	r3, [sp, #52]	; 0x34
 800e87a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e87c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e880:	9c02      	ldr	r4, [sp, #8]
 800e882:	930c      	str	r3, [sp, #48]	; 0x30
 800e884:	00e3      	lsls	r3, r4, #3
 800e886:	930a      	str	r3, [sp, #40]	; 0x28
 800e888:	ab9a      	add	r3, sp, #616	; 0x268
 800e88a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e88e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e892:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800e896:	ab72      	add	r3, sp, #456	; 0x1c8
 800e898:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e89c:	46c3      	mov	fp, r8
 800e89e:	46a1      	mov	r9, r4
 800e8a0:	f1b9 0f00 	cmp.w	r9, #0
 800e8a4:	f1a5 0508 	sub.w	r5, r5, #8
 800e8a8:	dc77      	bgt.n	800e99a <__kernel_rem_pio2+0x202>
 800e8aa:	ec47 6b10 	vmov	d0, r6, r7
 800e8ae:	4650      	mov	r0, sl
 800e8b0:	f000 fc66 	bl	800f180 <scalbn>
 800e8b4:	ec57 6b10 	vmov	r6, r7, d0
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e8be:	ee10 0a10 	vmov	r0, s0
 800e8c2:	4639      	mov	r1, r7
 800e8c4:	f7f1 fe44 	bl	8000550 <__aeabi_dmul>
 800e8c8:	ec41 0b10 	vmov	d0, r0, r1
 800e8cc:	f000 fbd8 	bl	800f080 <floor>
 800e8d0:	4b7c      	ldr	r3, [pc, #496]	; (800eac4 <__kernel_rem_pio2+0x32c>)
 800e8d2:	ec51 0b10 	vmov	r0, r1, d0
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	f7f1 fe3a 	bl	8000550 <__aeabi_dmul>
 800e8dc:	4602      	mov	r2, r0
 800e8de:	460b      	mov	r3, r1
 800e8e0:	4630      	mov	r0, r6
 800e8e2:	4639      	mov	r1, r7
 800e8e4:	f7f1 fc7c 	bl	80001e0 <__aeabi_dsub>
 800e8e8:	460f      	mov	r7, r1
 800e8ea:	4606      	mov	r6, r0
 800e8ec:	f7f2 f8e0 	bl	8000ab0 <__aeabi_d2iz>
 800e8f0:	9004      	str	r0, [sp, #16]
 800e8f2:	f7f1 fdc3 	bl	800047c <__aeabi_i2d>
 800e8f6:	4602      	mov	r2, r0
 800e8f8:	460b      	mov	r3, r1
 800e8fa:	4630      	mov	r0, r6
 800e8fc:	4639      	mov	r1, r7
 800e8fe:	f7f1 fc6f 	bl	80001e0 <__aeabi_dsub>
 800e902:	f1ba 0f00 	cmp.w	sl, #0
 800e906:	4606      	mov	r6, r0
 800e908:	460f      	mov	r7, r1
 800e90a:	dd6d      	ble.n	800e9e8 <__kernel_rem_pio2+0x250>
 800e90c:	1e62      	subs	r2, r4, #1
 800e90e:	ab0e      	add	r3, sp, #56	; 0x38
 800e910:	9d04      	ldr	r5, [sp, #16]
 800e912:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e916:	f1ca 0118 	rsb	r1, sl, #24
 800e91a:	fa40 f301 	asr.w	r3, r0, r1
 800e91e:	441d      	add	r5, r3
 800e920:	408b      	lsls	r3, r1
 800e922:	1ac0      	subs	r0, r0, r3
 800e924:	ab0e      	add	r3, sp, #56	; 0x38
 800e926:	9504      	str	r5, [sp, #16]
 800e928:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e92c:	f1ca 0317 	rsb	r3, sl, #23
 800e930:	fa40 fb03 	asr.w	fp, r0, r3
 800e934:	f1bb 0f00 	cmp.w	fp, #0
 800e938:	dd65      	ble.n	800ea06 <__kernel_rem_pio2+0x26e>
 800e93a:	9b04      	ldr	r3, [sp, #16]
 800e93c:	2200      	movs	r2, #0
 800e93e:	3301      	adds	r3, #1
 800e940:	9304      	str	r3, [sp, #16]
 800e942:	4615      	mov	r5, r2
 800e944:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e948:	4294      	cmp	r4, r2
 800e94a:	f300 809c 	bgt.w	800ea86 <__kernel_rem_pio2+0x2ee>
 800e94e:	f1ba 0f00 	cmp.w	sl, #0
 800e952:	dd07      	ble.n	800e964 <__kernel_rem_pio2+0x1cc>
 800e954:	f1ba 0f01 	cmp.w	sl, #1
 800e958:	f000 80c0 	beq.w	800eadc <__kernel_rem_pio2+0x344>
 800e95c:	f1ba 0f02 	cmp.w	sl, #2
 800e960:	f000 80c6 	beq.w	800eaf0 <__kernel_rem_pio2+0x358>
 800e964:	f1bb 0f02 	cmp.w	fp, #2
 800e968:	d14d      	bne.n	800ea06 <__kernel_rem_pio2+0x26e>
 800e96a:	4632      	mov	r2, r6
 800e96c:	463b      	mov	r3, r7
 800e96e:	4956      	ldr	r1, [pc, #344]	; (800eac8 <__kernel_rem_pio2+0x330>)
 800e970:	2000      	movs	r0, #0
 800e972:	f7f1 fc35 	bl	80001e0 <__aeabi_dsub>
 800e976:	4606      	mov	r6, r0
 800e978:	460f      	mov	r7, r1
 800e97a:	2d00      	cmp	r5, #0
 800e97c:	d043      	beq.n	800ea06 <__kernel_rem_pio2+0x26e>
 800e97e:	4650      	mov	r0, sl
 800e980:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800eab8 <__kernel_rem_pio2+0x320>
 800e984:	f000 fbfc 	bl	800f180 <scalbn>
 800e988:	4630      	mov	r0, r6
 800e98a:	4639      	mov	r1, r7
 800e98c:	ec53 2b10 	vmov	r2, r3, d0
 800e990:	f7f1 fc26 	bl	80001e0 <__aeabi_dsub>
 800e994:	4606      	mov	r6, r0
 800e996:	460f      	mov	r7, r1
 800e998:	e035      	b.n	800ea06 <__kernel_rem_pio2+0x26e>
 800e99a:	4b4c      	ldr	r3, [pc, #304]	; (800eacc <__kernel_rem_pio2+0x334>)
 800e99c:	2200      	movs	r2, #0
 800e99e:	4630      	mov	r0, r6
 800e9a0:	4639      	mov	r1, r7
 800e9a2:	f7f1 fdd5 	bl	8000550 <__aeabi_dmul>
 800e9a6:	f7f2 f883 	bl	8000ab0 <__aeabi_d2iz>
 800e9aa:	f7f1 fd67 	bl	800047c <__aeabi_i2d>
 800e9ae:	4602      	mov	r2, r0
 800e9b0:	460b      	mov	r3, r1
 800e9b2:	ec43 2b18 	vmov	d8, r2, r3
 800e9b6:	4b46      	ldr	r3, [pc, #280]	; (800ead0 <__kernel_rem_pio2+0x338>)
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	f7f1 fdc9 	bl	8000550 <__aeabi_dmul>
 800e9be:	4602      	mov	r2, r0
 800e9c0:	460b      	mov	r3, r1
 800e9c2:	4630      	mov	r0, r6
 800e9c4:	4639      	mov	r1, r7
 800e9c6:	f7f1 fc0b 	bl	80001e0 <__aeabi_dsub>
 800e9ca:	f7f2 f871 	bl	8000ab0 <__aeabi_d2iz>
 800e9ce:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e9d2:	f84b 0b04 	str.w	r0, [fp], #4
 800e9d6:	ec51 0b18 	vmov	r0, r1, d8
 800e9da:	f7f1 fc03 	bl	80001e4 <__adddf3>
 800e9de:	f109 39ff 	add.w	r9, r9, #4294967295
 800e9e2:	4606      	mov	r6, r0
 800e9e4:	460f      	mov	r7, r1
 800e9e6:	e75b      	b.n	800e8a0 <__kernel_rem_pio2+0x108>
 800e9e8:	d106      	bne.n	800e9f8 <__kernel_rem_pio2+0x260>
 800e9ea:	1e63      	subs	r3, r4, #1
 800e9ec:	aa0e      	add	r2, sp, #56	; 0x38
 800e9ee:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e9f2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800e9f6:	e79d      	b.n	800e934 <__kernel_rem_pio2+0x19c>
 800e9f8:	4b36      	ldr	r3, [pc, #216]	; (800ead4 <__kernel_rem_pio2+0x33c>)
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	f7f2 f82e 	bl	8000a5c <__aeabi_dcmpge>
 800ea00:	2800      	cmp	r0, #0
 800ea02:	d13d      	bne.n	800ea80 <__kernel_rem_pio2+0x2e8>
 800ea04:	4683      	mov	fp, r0
 800ea06:	2200      	movs	r2, #0
 800ea08:	2300      	movs	r3, #0
 800ea0a:	4630      	mov	r0, r6
 800ea0c:	4639      	mov	r1, r7
 800ea0e:	f7f2 f807 	bl	8000a20 <__aeabi_dcmpeq>
 800ea12:	2800      	cmp	r0, #0
 800ea14:	f000 80c0 	beq.w	800eb98 <__kernel_rem_pio2+0x400>
 800ea18:	1e65      	subs	r5, r4, #1
 800ea1a:	462b      	mov	r3, r5
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	9902      	ldr	r1, [sp, #8]
 800ea20:	428b      	cmp	r3, r1
 800ea22:	da6c      	bge.n	800eafe <__kernel_rem_pio2+0x366>
 800ea24:	2a00      	cmp	r2, #0
 800ea26:	f000 8089 	beq.w	800eb3c <__kernel_rem_pio2+0x3a4>
 800ea2a:	ab0e      	add	r3, sp, #56	; 0x38
 800ea2c:	f1aa 0a18 	sub.w	sl, sl, #24
 800ea30:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	f000 80ad 	beq.w	800eb94 <__kernel_rem_pio2+0x3fc>
 800ea3a:	4650      	mov	r0, sl
 800ea3c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800eab8 <__kernel_rem_pio2+0x320>
 800ea40:	f000 fb9e 	bl	800f180 <scalbn>
 800ea44:	ab9a      	add	r3, sp, #616	; 0x268
 800ea46:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ea4a:	ec57 6b10 	vmov	r6, r7, d0
 800ea4e:	00ec      	lsls	r4, r5, #3
 800ea50:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800ea54:	46aa      	mov	sl, r5
 800ea56:	f1ba 0f00 	cmp.w	sl, #0
 800ea5a:	f280 80d6 	bge.w	800ec0a <__kernel_rem_pio2+0x472>
 800ea5e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800eab0 <__kernel_rem_pio2+0x318>
 800ea62:	462e      	mov	r6, r5
 800ea64:	2e00      	cmp	r6, #0
 800ea66:	f2c0 8104 	blt.w	800ec72 <__kernel_rem_pio2+0x4da>
 800ea6a:	ab72      	add	r3, sp, #456	; 0x1c8
 800ea6c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ea70:	f8df a064 	ldr.w	sl, [pc, #100]	; 800ead8 <__kernel_rem_pio2+0x340>
 800ea74:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800ea78:	f04f 0800 	mov.w	r8, #0
 800ea7c:	1baf      	subs	r7, r5, r6
 800ea7e:	e0ea      	b.n	800ec56 <__kernel_rem_pio2+0x4be>
 800ea80:	f04f 0b02 	mov.w	fp, #2
 800ea84:	e759      	b.n	800e93a <__kernel_rem_pio2+0x1a2>
 800ea86:	f8d8 3000 	ldr.w	r3, [r8]
 800ea8a:	b955      	cbnz	r5, 800eaa2 <__kernel_rem_pio2+0x30a>
 800ea8c:	b123      	cbz	r3, 800ea98 <__kernel_rem_pio2+0x300>
 800ea8e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ea92:	f8c8 3000 	str.w	r3, [r8]
 800ea96:	2301      	movs	r3, #1
 800ea98:	3201      	adds	r2, #1
 800ea9a:	f108 0804 	add.w	r8, r8, #4
 800ea9e:	461d      	mov	r5, r3
 800eaa0:	e752      	b.n	800e948 <__kernel_rem_pio2+0x1b0>
 800eaa2:	1acb      	subs	r3, r1, r3
 800eaa4:	f8c8 3000 	str.w	r3, [r8]
 800eaa8:	462b      	mov	r3, r5
 800eaaa:	e7f5      	b.n	800ea98 <__kernel_rem_pio2+0x300>
 800eaac:	f3af 8000 	nop.w
	...
 800eabc:	3ff00000 	.word	0x3ff00000
 800eac0:	0800f690 	.word	0x0800f690
 800eac4:	40200000 	.word	0x40200000
 800eac8:	3ff00000 	.word	0x3ff00000
 800eacc:	3e700000 	.word	0x3e700000
 800ead0:	41700000 	.word	0x41700000
 800ead4:	3fe00000 	.word	0x3fe00000
 800ead8:	0800f650 	.word	0x0800f650
 800eadc:	1e62      	subs	r2, r4, #1
 800eade:	ab0e      	add	r3, sp, #56	; 0x38
 800eae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eae4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800eae8:	a90e      	add	r1, sp, #56	; 0x38
 800eaea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800eaee:	e739      	b.n	800e964 <__kernel_rem_pio2+0x1cc>
 800eaf0:	1e62      	subs	r2, r4, #1
 800eaf2:	ab0e      	add	r3, sp, #56	; 0x38
 800eaf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eaf8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800eafc:	e7f4      	b.n	800eae8 <__kernel_rem_pio2+0x350>
 800eafe:	a90e      	add	r1, sp, #56	; 0x38
 800eb00:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800eb04:	3b01      	subs	r3, #1
 800eb06:	430a      	orrs	r2, r1
 800eb08:	e789      	b.n	800ea1e <__kernel_rem_pio2+0x286>
 800eb0a:	3301      	adds	r3, #1
 800eb0c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800eb10:	2900      	cmp	r1, #0
 800eb12:	d0fa      	beq.n	800eb0a <__kernel_rem_pio2+0x372>
 800eb14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb16:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800eb1a:	446a      	add	r2, sp
 800eb1c:	3a98      	subs	r2, #152	; 0x98
 800eb1e:	920a      	str	r2, [sp, #40]	; 0x28
 800eb20:	9a08      	ldr	r2, [sp, #32]
 800eb22:	18e3      	adds	r3, r4, r3
 800eb24:	18a5      	adds	r5, r4, r2
 800eb26:	aa22      	add	r2, sp, #136	; 0x88
 800eb28:	f104 0801 	add.w	r8, r4, #1
 800eb2c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800eb30:	9304      	str	r3, [sp, #16]
 800eb32:	9b04      	ldr	r3, [sp, #16]
 800eb34:	4543      	cmp	r3, r8
 800eb36:	da04      	bge.n	800eb42 <__kernel_rem_pio2+0x3aa>
 800eb38:	461c      	mov	r4, r3
 800eb3a:	e6a3      	b.n	800e884 <__kernel_rem_pio2+0xec>
 800eb3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800eb3e:	2301      	movs	r3, #1
 800eb40:	e7e4      	b.n	800eb0c <__kernel_rem_pio2+0x374>
 800eb42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb44:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800eb48:	f7f1 fc98 	bl	800047c <__aeabi_i2d>
 800eb4c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800eb50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb52:	46ab      	mov	fp, r5
 800eb54:	461c      	mov	r4, r3
 800eb56:	f04f 0900 	mov.w	r9, #0
 800eb5a:	2600      	movs	r6, #0
 800eb5c:	2700      	movs	r7, #0
 800eb5e:	9b06      	ldr	r3, [sp, #24]
 800eb60:	4599      	cmp	r9, r3
 800eb62:	dd06      	ble.n	800eb72 <__kernel_rem_pio2+0x3da>
 800eb64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb66:	e8e3 6702 	strd	r6, r7, [r3], #8
 800eb6a:	f108 0801 	add.w	r8, r8, #1
 800eb6e:	930a      	str	r3, [sp, #40]	; 0x28
 800eb70:	e7df      	b.n	800eb32 <__kernel_rem_pio2+0x39a>
 800eb72:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800eb76:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800eb7a:	f7f1 fce9 	bl	8000550 <__aeabi_dmul>
 800eb7e:	4602      	mov	r2, r0
 800eb80:	460b      	mov	r3, r1
 800eb82:	4630      	mov	r0, r6
 800eb84:	4639      	mov	r1, r7
 800eb86:	f7f1 fb2d 	bl	80001e4 <__adddf3>
 800eb8a:	f109 0901 	add.w	r9, r9, #1
 800eb8e:	4606      	mov	r6, r0
 800eb90:	460f      	mov	r7, r1
 800eb92:	e7e4      	b.n	800eb5e <__kernel_rem_pio2+0x3c6>
 800eb94:	3d01      	subs	r5, #1
 800eb96:	e748      	b.n	800ea2a <__kernel_rem_pio2+0x292>
 800eb98:	ec47 6b10 	vmov	d0, r6, r7
 800eb9c:	f1ca 0000 	rsb	r0, sl, #0
 800eba0:	f000 faee 	bl	800f180 <scalbn>
 800eba4:	ec57 6b10 	vmov	r6, r7, d0
 800eba8:	4ba0      	ldr	r3, [pc, #640]	; (800ee2c <__kernel_rem_pio2+0x694>)
 800ebaa:	ee10 0a10 	vmov	r0, s0
 800ebae:	2200      	movs	r2, #0
 800ebb0:	4639      	mov	r1, r7
 800ebb2:	f7f1 ff53 	bl	8000a5c <__aeabi_dcmpge>
 800ebb6:	b1f8      	cbz	r0, 800ebf8 <__kernel_rem_pio2+0x460>
 800ebb8:	4b9d      	ldr	r3, [pc, #628]	; (800ee30 <__kernel_rem_pio2+0x698>)
 800ebba:	2200      	movs	r2, #0
 800ebbc:	4630      	mov	r0, r6
 800ebbe:	4639      	mov	r1, r7
 800ebc0:	f7f1 fcc6 	bl	8000550 <__aeabi_dmul>
 800ebc4:	f7f1 ff74 	bl	8000ab0 <__aeabi_d2iz>
 800ebc8:	4680      	mov	r8, r0
 800ebca:	f7f1 fc57 	bl	800047c <__aeabi_i2d>
 800ebce:	4b97      	ldr	r3, [pc, #604]	; (800ee2c <__kernel_rem_pio2+0x694>)
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	f7f1 fcbd 	bl	8000550 <__aeabi_dmul>
 800ebd6:	460b      	mov	r3, r1
 800ebd8:	4602      	mov	r2, r0
 800ebda:	4639      	mov	r1, r7
 800ebdc:	4630      	mov	r0, r6
 800ebde:	f7f1 faff 	bl	80001e0 <__aeabi_dsub>
 800ebe2:	f7f1 ff65 	bl	8000ab0 <__aeabi_d2iz>
 800ebe6:	1c65      	adds	r5, r4, #1
 800ebe8:	ab0e      	add	r3, sp, #56	; 0x38
 800ebea:	f10a 0a18 	add.w	sl, sl, #24
 800ebee:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ebf2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ebf6:	e720      	b.n	800ea3a <__kernel_rem_pio2+0x2a2>
 800ebf8:	4630      	mov	r0, r6
 800ebfa:	4639      	mov	r1, r7
 800ebfc:	f7f1 ff58 	bl	8000ab0 <__aeabi_d2iz>
 800ec00:	ab0e      	add	r3, sp, #56	; 0x38
 800ec02:	4625      	mov	r5, r4
 800ec04:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ec08:	e717      	b.n	800ea3a <__kernel_rem_pio2+0x2a2>
 800ec0a:	ab0e      	add	r3, sp, #56	; 0x38
 800ec0c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800ec10:	f7f1 fc34 	bl	800047c <__aeabi_i2d>
 800ec14:	4632      	mov	r2, r6
 800ec16:	463b      	mov	r3, r7
 800ec18:	f7f1 fc9a 	bl	8000550 <__aeabi_dmul>
 800ec1c:	4b84      	ldr	r3, [pc, #528]	; (800ee30 <__kernel_rem_pio2+0x698>)
 800ec1e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800ec22:	2200      	movs	r2, #0
 800ec24:	4630      	mov	r0, r6
 800ec26:	4639      	mov	r1, r7
 800ec28:	f7f1 fc92 	bl	8000550 <__aeabi_dmul>
 800ec2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ec30:	4606      	mov	r6, r0
 800ec32:	460f      	mov	r7, r1
 800ec34:	e70f      	b.n	800ea56 <__kernel_rem_pio2+0x2be>
 800ec36:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ec3a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800ec3e:	f7f1 fc87 	bl	8000550 <__aeabi_dmul>
 800ec42:	4602      	mov	r2, r0
 800ec44:	460b      	mov	r3, r1
 800ec46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec4a:	f7f1 facb 	bl	80001e4 <__adddf3>
 800ec4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ec52:	f108 0801 	add.w	r8, r8, #1
 800ec56:	9b02      	ldr	r3, [sp, #8]
 800ec58:	4598      	cmp	r8, r3
 800ec5a:	dc01      	bgt.n	800ec60 <__kernel_rem_pio2+0x4c8>
 800ec5c:	45b8      	cmp	r8, r7
 800ec5e:	ddea      	ble.n	800ec36 <__kernel_rem_pio2+0x49e>
 800ec60:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ec64:	ab4a      	add	r3, sp, #296	; 0x128
 800ec66:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ec6a:	ed87 7b00 	vstr	d7, [r7]
 800ec6e:	3e01      	subs	r6, #1
 800ec70:	e6f8      	b.n	800ea64 <__kernel_rem_pio2+0x2cc>
 800ec72:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ec74:	2b02      	cmp	r3, #2
 800ec76:	dc0b      	bgt.n	800ec90 <__kernel_rem_pio2+0x4f8>
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	dc35      	bgt.n	800ece8 <__kernel_rem_pio2+0x550>
 800ec7c:	d059      	beq.n	800ed32 <__kernel_rem_pio2+0x59a>
 800ec7e:	9b04      	ldr	r3, [sp, #16]
 800ec80:	f003 0007 	and.w	r0, r3, #7
 800ec84:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800ec88:	ecbd 8b02 	vpop	{d8}
 800ec8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec90:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ec92:	2b03      	cmp	r3, #3
 800ec94:	d1f3      	bne.n	800ec7e <__kernel_rem_pio2+0x4e6>
 800ec96:	ab4a      	add	r3, sp, #296	; 0x128
 800ec98:	4423      	add	r3, r4
 800ec9a:	9306      	str	r3, [sp, #24]
 800ec9c:	461c      	mov	r4, r3
 800ec9e:	469a      	mov	sl, r3
 800eca0:	9502      	str	r5, [sp, #8]
 800eca2:	9b02      	ldr	r3, [sp, #8]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	f1aa 0a08 	sub.w	sl, sl, #8
 800ecaa:	dc6b      	bgt.n	800ed84 <__kernel_rem_pio2+0x5ec>
 800ecac:	46aa      	mov	sl, r5
 800ecae:	f1ba 0f01 	cmp.w	sl, #1
 800ecb2:	f1a4 0408 	sub.w	r4, r4, #8
 800ecb6:	f300 8085 	bgt.w	800edc4 <__kernel_rem_pio2+0x62c>
 800ecba:	9c06      	ldr	r4, [sp, #24]
 800ecbc:	2000      	movs	r0, #0
 800ecbe:	3408      	adds	r4, #8
 800ecc0:	2100      	movs	r1, #0
 800ecc2:	2d01      	cmp	r5, #1
 800ecc4:	f300 809d 	bgt.w	800ee02 <__kernel_rem_pio2+0x66a>
 800ecc8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800eccc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800ecd0:	f1bb 0f00 	cmp.w	fp, #0
 800ecd4:	f040 809b 	bne.w	800ee0e <__kernel_rem_pio2+0x676>
 800ecd8:	9b01      	ldr	r3, [sp, #4]
 800ecda:	e9c3 5600 	strd	r5, r6, [r3]
 800ecde:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800ece2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ece6:	e7ca      	b.n	800ec7e <__kernel_rem_pio2+0x4e6>
 800ece8:	3408      	adds	r4, #8
 800ecea:	ab4a      	add	r3, sp, #296	; 0x128
 800ecec:	441c      	add	r4, r3
 800ecee:	462e      	mov	r6, r5
 800ecf0:	2000      	movs	r0, #0
 800ecf2:	2100      	movs	r1, #0
 800ecf4:	2e00      	cmp	r6, #0
 800ecf6:	da36      	bge.n	800ed66 <__kernel_rem_pio2+0x5ce>
 800ecf8:	f1bb 0f00 	cmp.w	fp, #0
 800ecfc:	d039      	beq.n	800ed72 <__kernel_rem_pio2+0x5da>
 800ecfe:	4602      	mov	r2, r0
 800ed00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed04:	9c01      	ldr	r4, [sp, #4]
 800ed06:	e9c4 2300 	strd	r2, r3, [r4]
 800ed0a:	4602      	mov	r2, r0
 800ed0c:	460b      	mov	r3, r1
 800ed0e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800ed12:	f7f1 fa65 	bl	80001e0 <__aeabi_dsub>
 800ed16:	ae4c      	add	r6, sp, #304	; 0x130
 800ed18:	2401      	movs	r4, #1
 800ed1a:	42a5      	cmp	r5, r4
 800ed1c:	da2c      	bge.n	800ed78 <__kernel_rem_pio2+0x5e0>
 800ed1e:	f1bb 0f00 	cmp.w	fp, #0
 800ed22:	d002      	beq.n	800ed2a <__kernel_rem_pio2+0x592>
 800ed24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed28:	4619      	mov	r1, r3
 800ed2a:	9b01      	ldr	r3, [sp, #4]
 800ed2c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ed30:	e7a5      	b.n	800ec7e <__kernel_rem_pio2+0x4e6>
 800ed32:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800ed36:	eb0d 0403 	add.w	r4, sp, r3
 800ed3a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ed3e:	2000      	movs	r0, #0
 800ed40:	2100      	movs	r1, #0
 800ed42:	2d00      	cmp	r5, #0
 800ed44:	da09      	bge.n	800ed5a <__kernel_rem_pio2+0x5c2>
 800ed46:	f1bb 0f00 	cmp.w	fp, #0
 800ed4a:	d002      	beq.n	800ed52 <__kernel_rem_pio2+0x5ba>
 800ed4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed50:	4619      	mov	r1, r3
 800ed52:	9b01      	ldr	r3, [sp, #4]
 800ed54:	e9c3 0100 	strd	r0, r1, [r3]
 800ed58:	e791      	b.n	800ec7e <__kernel_rem_pio2+0x4e6>
 800ed5a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ed5e:	f7f1 fa41 	bl	80001e4 <__adddf3>
 800ed62:	3d01      	subs	r5, #1
 800ed64:	e7ed      	b.n	800ed42 <__kernel_rem_pio2+0x5aa>
 800ed66:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ed6a:	f7f1 fa3b 	bl	80001e4 <__adddf3>
 800ed6e:	3e01      	subs	r6, #1
 800ed70:	e7c0      	b.n	800ecf4 <__kernel_rem_pio2+0x55c>
 800ed72:	4602      	mov	r2, r0
 800ed74:	460b      	mov	r3, r1
 800ed76:	e7c5      	b.n	800ed04 <__kernel_rem_pio2+0x56c>
 800ed78:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ed7c:	f7f1 fa32 	bl	80001e4 <__adddf3>
 800ed80:	3401      	adds	r4, #1
 800ed82:	e7ca      	b.n	800ed1a <__kernel_rem_pio2+0x582>
 800ed84:	e9da 8900 	ldrd	r8, r9, [sl]
 800ed88:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ed8c:	9b02      	ldr	r3, [sp, #8]
 800ed8e:	3b01      	subs	r3, #1
 800ed90:	9302      	str	r3, [sp, #8]
 800ed92:	4632      	mov	r2, r6
 800ed94:	463b      	mov	r3, r7
 800ed96:	4640      	mov	r0, r8
 800ed98:	4649      	mov	r1, r9
 800ed9a:	f7f1 fa23 	bl	80001e4 <__adddf3>
 800ed9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800eda2:	4602      	mov	r2, r0
 800eda4:	460b      	mov	r3, r1
 800eda6:	4640      	mov	r0, r8
 800eda8:	4649      	mov	r1, r9
 800edaa:	f7f1 fa19 	bl	80001e0 <__aeabi_dsub>
 800edae:	4632      	mov	r2, r6
 800edb0:	463b      	mov	r3, r7
 800edb2:	f7f1 fa17 	bl	80001e4 <__adddf3>
 800edb6:	ed9d 7b08 	vldr	d7, [sp, #32]
 800edba:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800edbe:	ed8a 7b00 	vstr	d7, [sl]
 800edc2:	e76e      	b.n	800eca2 <__kernel_rem_pio2+0x50a>
 800edc4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800edc8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800edcc:	4640      	mov	r0, r8
 800edce:	4632      	mov	r2, r6
 800edd0:	463b      	mov	r3, r7
 800edd2:	4649      	mov	r1, r9
 800edd4:	f7f1 fa06 	bl	80001e4 <__adddf3>
 800edd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eddc:	4602      	mov	r2, r0
 800edde:	460b      	mov	r3, r1
 800ede0:	4640      	mov	r0, r8
 800ede2:	4649      	mov	r1, r9
 800ede4:	f7f1 f9fc 	bl	80001e0 <__aeabi_dsub>
 800ede8:	4632      	mov	r2, r6
 800edea:	463b      	mov	r3, r7
 800edec:	f7f1 f9fa 	bl	80001e4 <__adddf3>
 800edf0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800edf4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800edf8:	ed84 7b00 	vstr	d7, [r4]
 800edfc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ee00:	e755      	b.n	800ecae <__kernel_rem_pio2+0x516>
 800ee02:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ee06:	f7f1 f9ed 	bl	80001e4 <__adddf3>
 800ee0a:	3d01      	subs	r5, #1
 800ee0c:	e759      	b.n	800ecc2 <__kernel_rem_pio2+0x52a>
 800ee0e:	9b01      	ldr	r3, [sp, #4]
 800ee10:	9a01      	ldr	r2, [sp, #4]
 800ee12:	601d      	str	r5, [r3, #0]
 800ee14:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800ee18:	605c      	str	r4, [r3, #4]
 800ee1a:	609f      	str	r7, [r3, #8]
 800ee1c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ee20:	60d3      	str	r3, [r2, #12]
 800ee22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee26:	6110      	str	r0, [r2, #16]
 800ee28:	6153      	str	r3, [r2, #20]
 800ee2a:	e728      	b.n	800ec7e <__kernel_rem_pio2+0x4e6>
 800ee2c:	41700000 	.word	0x41700000
 800ee30:	3e700000 	.word	0x3e700000
 800ee34:	00000000 	.word	0x00000000

0800ee38 <__kernel_sin>:
 800ee38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee3c:	ed2d 8b04 	vpush	{d8-d9}
 800ee40:	eeb0 8a41 	vmov.f32	s16, s2
 800ee44:	eef0 8a61 	vmov.f32	s17, s3
 800ee48:	ec55 4b10 	vmov	r4, r5, d0
 800ee4c:	b083      	sub	sp, #12
 800ee4e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ee52:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ee56:	9001      	str	r0, [sp, #4]
 800ee58:	da06      	bge.n	800ee68 <__kernel_sin+0x30>
 800ee5a:	ee10 0a10 	vmov	r0, s0
 800ee5e:	4629      	mov	r1, r5
 800ee60:	f7f1 fe26 	bl	8000ab0 <__aeabi_d2iz>
 800ee64:	2800      	cmp	r0, #0
 800ee66:	d051      	beq.n	800ef0c <__kernel_sin+0xd4>
 800ee68:	4622      	mov	r2, r4
 800ee6a:	462b      	mov	r3, r5
 800ee6c:	4620      	mov	r0, r4
 800ee6e:	4629      	mov	r1, r5
 800ee70:	f7f1 fb6e 	bl	8000550 <__aeabi_dmul>
 800ee74:	4682      	mov	sl, r0
 800ee76:	468b      	mov	fp, r1
 800ee78:	4602      	mov	r2, r0
 800ee7a:	460b      	mov	r3, r1
 800ee7c:	4620      	mov	r0, r4
 800ee7e:	4629      	mov	r1, r5
 800ee80:	f7f1 fb66 	bl	8000550 <__aeabi_dmul>
 800ee84:	a341      	add	r3, pc, #260	; (adr r3, 800ef8c <__kernel_sin+0x154>)
 800ee86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee8a:	4680      	mov	r8, r0
 800ee8c:	4689      	mov	r9, r1
 800ee8e:	4650      	mov	r0, sl
 800ee90:	4659      	mov	r1, fp
 800ee92:	f7f1 fb5d 	bl	8000550 <__aeabi_dmul>
 800ee96:	a33f      	add	r3, pc, #252	; (adr r3, 800ef94 <__kernel_sin+0x15c>)
 800ee98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee9c:	f7f1 f9a0 	bl	80001e0 <__aeabi_dsub>
 800eea0:	4652      	mov	r2, sl
 800eea2:	465b      	mov	r3, fp
 800eea4:	f7f1 fb54 	bl	8000550 <__aeabi_dmul>
 800eea8:	a33c      	add	r3, pc, #240	; (adr r3, 800ef9c <__kernel_sin+0x164>)
 800eeaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeae:	f7f1 f999 	bl	80001e4 <__adddf3>
 800eeb2:	4652      	mov	r2, sl
 800eeb4:	465b      	mov	r3, fp
 800eeb6:	f7f1 fb4b 	bl	8000550 <__aeabi_dmul>
 800eeba:	a33a      	add	r3, pc, #232	; (adr r3, 800efa4 <__kernel_sin+0x16c>)
 800eebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eec0:	f7f1 f98e 	bl	80001e0 <__aeabi_dsub>
 800eec4:	4652      	mov	r2, sl
 800eec6:	465b      	mov	r3, fp
 800eec8:	f7f1 fb42 	bl	8000550 <__aeabi_dmul>
 800eecc:	a337      	add	r3, pc, #220	; (adr r3, 800efac <__kernel_sin+0x174>)
 800eece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed2:	f7f1 f987 	bl	80001e4 <__adddf3>
 800eed6:	9b01      	ldr	r3, [sp, #4]
 800eed8:	4606      	mov	r6, r0
 800eeda:	460f      	mov	r7, r1
 800eedc:	b9eb      	cbnz	r3, 800ef1a <__kernel_sin+0xe2>
 800eede:	4602      	mov	r2, r0
 800eee0:	460b      	mov	r3, r1
 800eee2:	4650      	mov	r0, sl
 800eee4:	4659      	mov	r1, fp
 800eee6:	f7f1 fb33 	bl	8000550 <__aeabi_dmul>
 800eeea:	a325      	add	r3, pc, #148	; (adr r3, 800ef80 <__kernel_sin+0x148>)
 800eeec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef0:	f7f1 f976 	bl	80001e0 <__aeabi_dsub>
 800eef4:	4642      	mov	r2, r8
 800eef6:	464b      	mov	r3, r9
 800eef8:	f7f1 fb2a 	bl	8000550 <__aeabi_dmul>
 800eefc:	4602      	mov	r2, r0
 800eefe:	460b      	mov	r3, r1
 800ef00:	4620      	mov	r0, r4
 800ef02:	4629      	mov	r1, r5
 800ef04:	f7f1 f96e 	bl	80001e4 <__adddf3>
 800ef08:	4604      	mov	r4, r0
 800ef0a:	460d      	mov	r5, r1
 800ef0c:	ec45 4b10 	vmov	d0, r4, r5
 800ef10:	b003      	add	sp, #12
 800ef12:	ecbd 8b04 	vpop	{d8-d9}
 800ef16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef1a:	4b1b      	ldr	r3, [pc, #108]	; (800ef88 <__kernel_sin+0x150>)
 800ef1c:	ec51 0b18 	vmov	r0, r1, d8
 800ef20:	2200      	movs	r2, #0
 800ef22:	f7f1 fb15 	bl	8000550 <__aeabi_dmul>
 800ef26:	4632      	mov	r2, r6
 800ef28:	ec41 0b19 	vmov	d9, r0, r1
 800ef2c:	463b      	mov	r3, r7
 800ef2e:	4640      	mov	r0, r8
 800ef30:	4649      	mov	r1, r9
 800ef32:	f7f1 fb0d 	bl	8000550 <__aeabi_dmul>
 800ef36:	4602      	mov	r2, r0
 800ef38:	460b      	mov	r3, r1
 800ef3a:	ec51 0b19 	vmov	r0, r1, d9
 800ef3e:	f7f1 f94f 	bl	80001e0 <__aeabi_dsub>
 800ef42:	4652      	mov	r2, sl
 800ef44:	465b      	mov	r3, fp
 800ef46:	f7f1 fb03 	bl	8000550 <__aeabi_dmul>
 800ef4a:	ec53 2b18 	vmov	r2, r3, d8
 800ef4e:	f7f1 f947 	bl	80001e0 <__aeabi_dsub>
 800ef52:	a30b      	add	r3, pc, #44	; (adr r3, 800ef80 <__kernel_sin+0x148>)
 800ef54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef58:	4606      	mov	r6, r0
 800ef5a:	460f      	mov	r7, r1
 800ef5c:	4640      	mov	r0, r8
 800ef5e:	4649      	mov	r1, r9
 800ef60:	f7f1 faf6 	bl	8000550 <__aeabi_dmul>
 800ef64:	4602      	mov	r2, r0
 800ef66:	460b      	mov	r3, r1
 800ef68:	4630      	mov	r0, r6
 800ef6a:	4639      	mov	r1, r7
 800ef6c:	f7f1 f93a 	bl	80001e4 <__adddf3>
 800ef70:	4602      	mov	r2, r0
 800ef72:	460b      	mov	r3, r1
 800ef74:	4620      	mov	r0, r4
 800ef76:	4629      	mov	r1, r5
 800ef78:	f7f1 f932 	bl	80001e0 <__aeabi_dsub>
 800ef7c:	e7c4      	b.n	800ef08 <__kernel_sin+0xd0>
 800ef7e:	bf00      	nop
 800ef80:	55555549 	.word	0x55555549
 800ef84:	3fc55555 	.word	0x3fc55555
 800ef88:	3fe00000 	.word	0x3fe00000
 800ef8c:	5acfd57c 	.word	0x5acfd57c
 800ef90:	3de5d93a 	.word	0x3de5d93a
 800ef94:	8a2b9ceb 	.word	0x8a2b9ceb
 800ef98:	3e5ae5e6 	.word	0x3e5ae5e6
 800ef9c:	57b1fe7d 	.word	0x57b1fe7d
 800efa0:	3ec71de3 	.word	0x3ec71de3
 800efa4:	19c161d5 	.word	0x19c161d5
 800efa8:	3f2a01a0 	.word	0x3f2a01a0
 800efac:	1110f8a6 	.word	0x1110f8a6
 800efb0:	3f811111 	.word	0x3f811111

0800efb4 <with_errno>:
 800efb4:	b570      	push	{r4, r5, r6, lr}
 800efb6:	4604      	mov	r4, r0
 800efb8:	460d      	mov	r5, r1
 800efba:	4616      	mov	r6, r2
 800efbc:	f7fd fe62 	bl	800cc84 <__errno>
 800efc0:	4629      	mov	r1, r5
 800efc2:	6006      	str	r6, [r0, #0]
 800efc4:	4620      	mov	r0, r4
 800efc6:	bd70      	pop	{r4, r5, r6, pc}

0800efc8 <xflow>:
 800efc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800efca:	4614      	mov	r4, r2
 800efcc:	461d      	mov	r5, r3
 800efce:	b108      	cbz	r0, 800efd4 <xflow+0xc>
 800efd0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800efd4:	e9cd 2300 	strd	r2, r3, [sp]
 800efd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800efdc:	4620      	mov	r0, r4
 800efde:	4629      	mov	r1, r5
 800efe0:	f7f1 fab6 	bl	8000550 <__aeabi_dmul>
 800efe4:	2222      	movs	r2, #34	; 0x22
 800efe6:	b003      	add	sp, #12
 800efe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800efec:	f7ff bfe2 	b.w	800efb4 <with_errno>

0800eff0 <__math_uflow>:
 800eff0:	b508      	push	{r3, lr}
 800eff2:	2200      	movs	r2, #0
 800eff4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800eff8:	f7ff ffe6 	bl	800efc8 <xflow>
 800effc:	ec41 0b10 	vmov	d0, r0, r1
 800f000:	bd08      	pop	{r3, pc}

0800f002 <__math_oflow>:
 800f002:	b508      	push	{r3, lr}
 800f004:	2200      	movs	r2, #0
 800f006:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f00a:	f7ff ffdd 	bl	800efc8 <xflow>
 800f00e:	ec41 0b10 	vmov	d0, r0, r1
 800f012:	bd08      	pop	{r3, pc}

0800f014 <with_errnof>:
 800f014:	b513      	push	{r0, r1, r4, lr}
 800f016:	4604      	mov	r4, r0
 800f018:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f01c:	f7fd fe32 	bl	800cc84 <__errno>
 800f020:	ed9d 0a01 	vldr	s0, [sp, #4]
 800f024:	6004      	str	r4, [r0, #0]
 800f026:	b002      	add	sp, #8
 800f028:	bd10      	pop	{r4, pc}

0800f02a <xflowf>:
 800f02a:	b130      	cbz	r0, 800f03a <xflowf+0x10>
 800f02c:	eef1 7a40 	vneg.f32	s15, s0
 800f030:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f034:	2022      	movs	r0, #34	; 0x22
 800f036:	f7ff bfed 	b.w	800f014 <with_errnof>
 800f03a:	eef0 7a40 	vmov.f32	s15, s0
 800f03e:	e7f7      	b.n	800f030 <xflowf+0x6>

0800f040 <__math_uflowf>:
 800f040:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f048 <__math_uflowf+0x8>
 800f044:	f7ff bff1 	b.w	800f02a <xflowf>
 800f048:	10000000 	.word	0x10000000

0800f04c <__math_oflowf>:
 800f04c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f054 <__math_oflowf+0x8>
 800f050:	f7ff bfeb 	b.w	800f02a <xflowf>
 800f054:	70000000 	.word	0x70000000

0800f058 <fabs>:
 800f058:	ec51 0b10 	vmov	r0, r1, d0
 800f05c:	ee10 2a10 	vmov	r2, s0
 800f060:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f064:	ec43 2b10 	vmov	d0, r2, r3
 800f068:	4770      	bx	lr

0800f06a <finite>:
 800f06a:	b082      	sub	sp, #8
 800f06c:	ed8d 0b00 	vstr	d0, [sp]
 800f070:	9801      	ldr	r0, [sp, #4]
 800f072:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f076:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f07a:	0fc0      	lsrs	r0, r0, #31
 800f07c:	b002      	add	sp, #8
 800f07e:	4770      	bx	lr

0800f080 <floor>:
 800f080:	ec51 0b10 	vmov	r0, r1, d0
 800f084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f088:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f08c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f090:	2e13      	cmp	r6, #19
 800f092:	ee10 5a10 	vmov	r5, s0
 800f096:	ee10 8a10 	vmov	r8, s0
 800f09a:	460c      	mov	r4, r1
 800f09c:	dc32      	bgt.n	800f104 <floor+0x84>
 800f09e:	2e00      	cmp	r6, #0
 800f0a0:	da14      	bge.n	800f0cc <floor+0x4c>
 800f0a2:	a333      	add	r3, pc, #204	; (adr r3, 800f170 <floor+0xf0>)
 800f0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a8:	f7f1 f89c 	bl	80001e4 <__adddf3>
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	f7f1 fcde 	bl	8000a70 <__aeabi_dcmpgt>
 800f0b4:	b138      	cbz	r0, 800f0c6 <floor+0x46>
 800f0b6:	2c00      	cmp	r4, #0
 800f0b8:	da57      	bge.n	800f16a <floor+0xea>
 800f0ba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f0be:	431d      	orrs	r5, r3
 800f0c0:	d001      	beq.n	800f0c6 <floor+0x46>
 800f0c2:	4c2d      	ldr	r4, [pc, #180]	; (800f178 <floor+0xf8>)
 800f0c4:	2500      	movs	r5, #0
 800f0c6:	4621      	mov	r1, r4
 800f0c8:	4628      	mov	r0, r5
 800f0ca:	e025      	b.n	800f118 <floor+0x98>
 800f0cc:	4f2b      	ldr	r7, [pc, #172]	; (800f17c <floor+0xfc>)
 800f0ce:	4137      	asrs	r7, r6
 800f0d0:	ea01 0307 	and.w	r3, r1, r7
 800f0d4:	4303      	orrs	r3, r0
 800f0d6:	d01f      	beq.n	800f118 <floor+0x98>
 800f0d8:	a325      	add	r3, pc, #148	; (adr r3, 800f170 <floor+0xf0>)
 800f0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0de:	f7f1 f881 	bl	80001e4 <__adddf3>
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	f7f1 fcc3 	bl	8000a70 <__aeabi_dcmpgt>
 800f0ea:	2800      	cmp	r0, #0
 800f0ec:	d0eb      	beq.n	800f0c6 <floor+0x46>
 800f0ee:	2c00      	cmp	r4, #0
 800f0f0:	bfbe      	ittt	lt
 800f0f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f0f6:	fa43 f606 	asrlt.w	r6, r3, r6
 800f0fa:	19a4      	addlt	r4, r4, r6
 800f0fc:	ea24 0407 	bic.w	r4, r4, r7
 800f100:	2500      	movs	r5, #0
 800f102:	e7e0      	b.n	800f0c6 <floor+0x46>
 800f104:	2e33      	cmp	r6, #51	; 0x33
 800f106:	dd0b      	ble.n	800f120 <floor+0xa0>
 800f108:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f10c:	d104      	bne.n	800f118 <floor+0x98>
 800f10e:	ee10 2a10 	vmov	r2, s0
 800f112:	460b      	mov	r3, r1
 800f114:	f7f1 f866 	bl	80001e4 <__adddf3>
 800f118:	ec41 0b10 	vmov	d0, r0, r1
 800f11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f120:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f124:	f04f 33ff 	mov.w	r3, #4294967295
 800f128:	fa23 f707 	lsr.w	r7, r3, r7
 800f12c:	4207      	tst	r7, r0
 800f12e:	d0f3      	beq.n	800f118 <floor+0x98>
 800f130:	a30f      	add	r3, pc, #60	; (adr r3, 800f170 <floor+0xf0>)
 800f132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f136:	f7f1 f855 	bl	80001e4 <__adddf3>
 800f13a:	2200      	movs	r2, #0
 800f13c:	2300      	movs	r3, #0
 800f13e:	f7f1 fc97 	bl	8000a70 <__aeabi_dcmpgt>
 800f142:	2800      	cmp	r0, #0
 800f144:	d0bf      	beq.n	800f0c6 <floor+0x46>
 800f146:	2c00      	cmp	r4, #0
 800f148:	da02      	bge.n	800f150 <floor+0xd0>
 800f14a:	2e14      	cmp	r6, #20
 800f14c:	d103      	bne.n	800f156 <floor+0xd6>
 800f14e:	3401      	adds	r4, #1
 800f150:	ea25 0507 	bic.w	r5, r5, r7
 800f154:	e7b7      	b.n	800f0c6 <floor+0x46>
 800f156:	2301      	movs	r3, #1
 800f158:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f15c:	fa03 f606 	lsl.w	r6, r3, r6
 800f160:	4435      	add	r5, r6
 800f162:	4545      	cmp	r5, r8
 800f164:	bf38      	it	cc
 800f166:	18e4      	addcc	r4, r4, r3
 800f168:	e7f2      	b.n	800f150 <floor+0xd0>
 800f16a:	2500      	movs	r5, #0
 800f16c:	462c      	mov	r4, r5
 800f16e:	e7aa      	b.n	800f0c6 <floor+0x46>
 800f170:	8800759c 	.word	0x8800759c
 800f174:	7e37e43c 	.word	0x7e37e43c
 800f178:	bff00000 	.word	0xbff00000
 800f17c:	000fffff 	.word	0x000fffff

0800f180 <scalbn>:
 800f180:	b570      	push	{r4, r5, r6, lr}
 800f182:	ec55 4b10 	vmov	r4, r5, d0
 800f186:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f18a:	4606      	mov	r6, r0
 800f18c:	462b      	mov	r3, r5
 800f18e:	b99a      	cbnz	r2, 800f1b8 <scalbn+0x38>
 800f190:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f194:	4323      	orrs	r3, r4
 800f196:	d036      	beq.n	800f206 <scalbn+0x86>
 800f198:	4b39      	ldr	r3, [pc, #228]	; (800f280 <scalbn+0x100>)
 800f19a:	4629      	mov	r1, r5
 800f19c:	ee10 0a10 	vmov	r0, s0
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	f7f1 f9d5 	bl	8000550 <__aeabi_dmul>
 800f1a6:	4b37      	ldr	r3, [pc, #220]	; (800f284 <scalbn+0x104>)
 800f1a8:	429e      	cmp	r6, r3
 800f1aa:	4604      	mov	r4, r0
 800f1ac:	460d      	mov	r5, r1
 800f1ae:	da10      	bge.n	800f1d2 <scalbn+0x52>
 800f1b0:	a32b      	add	r3, pc, #172	; (adr r3, 800f260 <scalbn+0xe0>)
 800f1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b6:	e03a      	b.n	800f22e <scalbn+0xae>
 800f1b8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f1bc:	428a      	cmp	r2, r1
 800f1be:	d10c      	bne.n	800f1da <scalbn+0x5a>
 800f1c0:	ee10 2a10 	vmov	r2, s0
 800f1c4:	4620      	mov	r0, r4
 800f1c6:	4629      	mov	r1, r5
 800f1c8:	f7f1 f80c 	bl	80001e4 <__adddf3>
 800f1cc:	4604      	mov	r4, r0
 800f1ce:	460d      	mov	r5, r1
 800f1d0:	e019      	b.n	800f206 <scalbn+0x86>
 800f1d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f1d6:	460b      	mov	r3, r1
 800f1d8:	3a36      	subs	r2, #54	; 0x36
 800f1da:	4432      	add	r2, r6
 800f1dc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f1e0:	428a      	cmp	r2, r1
 800f1e2:	dd08      	ble.n	800f1f6 <scalbn+0x76>
 800f1e4:	2d00      	cmp	r5, #0
 800f1e6:	a120      	add	r1, pc, #128	; (adr r1, 800f268 <scalbn+0xe8>)
 800f1e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1ec:	da1c      	bge.n	800f228 <scalbn+0xa8>
 800f1ee:	a120      	add	r1, pc, #128	; (adr r1, 800f270 <scalbn+0xf0>)
 800f1f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1f4:	e018      	b.n	800f228 <scalbn+0xa8>
 800f1f6:	2a00      	cmp	r2, #0
 800f1f8:	dd08      	ble.n	800f20c <scalbn+0x8c>
 800f1fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f1fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f202:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f206:	ec45 4b10 	vmov	d0, r4, r5
 800f20a:	bd70      	pop	{r4, r5, r6, pc}
 800f20c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f210:	da19      	bge.n	800f246 <scalbn+0xc6>
 800f212:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f216:	429e      	cmp	r6, r3
 800f218:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f21c:	dd0a      	ble.n	800f234 <scalbn+0xb4>
 800f21e:	a112      	add	r1, pc, #72	; (adr r1, 800f268 <scalbn+0xe8>)
 800f220:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d1e2      	bne.n	800f1ee <scalbn+0x6e>
 800f228:	a30f      	add	r3, pc, #60	; (adr r3, 800f268 <scalbn+0xe8>)
 800f22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f22e:	f7f1 f98f 	bl	8000550 <__aeabi_dmul>
 800f232:	e7cb      	b.n	800f1cc <scalbn+0x4c>
 800f234:	a10a      	add	r1, pc, #40	; (adr r1, 800f260 <scalbn+0xe0>)
 800f236:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d0b8      	beq.n	800f1b0 <scalbn+0x30>
 800f23e:	a10e      	add	r1, pc, #56	; (adr r1, 800f278 <scalbn+0xf8>)
 800f240:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f244:	e7b4      	b.n	800f1b0 <scalbn+0x30>
 800f246:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f24a:	3236      	adds	r2, #54	; 0x36
 800f24c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f250:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f254:	4620      	mov	r0, r4
 800f256:	4b0c      	ldr	r3, [pc, #48]	; (800f288 <scalbn+0x108>)
 800f258:	2200      	movs	r2, #0
 800f25a:	e7e8      	b.n	800f22e <scalbn+0xae>
 800f25c:	f3af 8000 	nop.w
 800f260:	c2f8f359 	.word	0xc2f8f359
 800f264:	01a56e1f 	.word	0x01a56e1f
 800f268:	8800759c 	.word	0x8800759c
 800f26c:	7e37e43c 	.word	0x7e37e43c
 800f270:	8800759c 	.word	0x8800759c
 800f274:	fe37e43c 	.word	0xfe37e43c
 800f278:	c2f8f359 	.word	0xc2f8f359
 800f27c:	81a56e1f 	.word	0x81a56e1f
 800f280:	43500000 	.word	0x43500000
 800f284:	ffff3cb0 	.word	0xffff3cb0
 800f288:	3c900000 	.word	0x3c900000

0800f28c <fabsf>:
 800f28c:	ee10 3a10 	vmov	r3, s0
 800f290:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f294:	ee00 3a10 	vmov	s0, r3
 800f298:	4770      	bx	lr

0800f29a <finitef>:
 800f29a:	b082      	sub	sp, #8
 800f29c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f2a0:	9801      	ldr	r0, [sp, #4]
 800f2a2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f2a6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800f2aa:	bfac      	ite	ge
 800f2ac:	2000      	movge	r0, #0
 800f2ae:	2001      	movlt	r0, #1
 800f2b0:	b002      	add	sp, #8
 800f2b2:	4770      	bx	lr

0800f2b4 <scalbnf>:
 800f2b4:	ee10 3a10 	vmov	r3, s0
 800f2b8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800f2bc:	d025      	beq.n	800f30a <scalbnf+0x56>
 800f2be:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f2c2:	d302      	bcc.n	800f2ca <scalbnf+0x16>
 800f2c4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f2c8:	4770      	bx	lr
 800f2ca:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800f2ce:	d122      	bne.n	800f316 <scalbnf+0x62>
 800f2d0:	4b2a      	ldr	r3, [pc, #168]	; (800f37c <scalbnf+0xc8>)
 800f2d2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800f380 <scalbnf+0xcc>
 800f2d6:	4298      	cmp	r0, r3
 800f2d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f2dc:	db16      	blt.n	800f30c <scalbnf+0x58>
 800f2de:	ee10 3a10 	vmov	r3, s0
 800f2e2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f2e6:	3a19      	subs	r2, #25
 800f2e8:	4402      	add	r2, r0
 800f2ea:	2afe      	cmp	r2, #254	; 0xfe
 800f2ec:	dd15      	ble.n	800f31a <scalbnf+0x66>
 800f2ee:	ee10 3a10 	vmov	r3, s0
 800f2f2:	eddf 7a24 	vldr	s15, [pc, #144]	; 800f384 <scalbnf+0xd0>
 800f2f6:	eddf 6a24 	vldr	s13, [pc, #144]	; 800f388 <scalbnf+0xd4>
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	eeb0 7a67 	vmov.f32	s14, s15
 800f300:	bfb8      	it	lt
 800f302:	eef0 7a66 	vmovlt.f32	s15, s13
 800f306:	ee27 0a27 	vmul.f32	s0, s14, s15
 800f30a:	4770      	bx	lr
 800f30c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800f38c <scalbnf+0xd8>
 800f310:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f314:	4770      	bx	lr
 800f316:	0dd2      	lsrs	r2, r2, #23
 800f318:	e7e6      	b.n	800f2e8 <scalbnf+0x34>
 800f31a:	2a00      	cmp	r2, #0
 800f31c:	dd06      	ble.n	800f32c <scalbnf+0x78>
 800f31e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f322:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800f326:	ee00 3a10 	vmov	s0, r3
 800f32a:	4770      	bx	lr
 800f32c:	f112 0f16 	cmn.w	r2, #22
 800f330:	da1a      	bge.n	800f368 <scalbnf+0xb4>
 800f332:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f336:	4298      	cmp	r0, r3
 800f338:	ee10 3a10 	vmov	r3, s0
 800f33c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f340:	dd0a      	ble.n	800f358 <scalbnf+0xa4>
 800f342:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800f384 <scalbnf+0xd0>
 800f346:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800f388 <scalbnf+0xd4>
 800f34a:	eef0 7a40 	vmov.f32	s15, s0
 800f34e:	2b00      	cmp	r3, #0
 800f350:	bf18      	it	ne
 800f352:	eeb0 0a47 	vmovne.f32	s0, s14
 800f356:	e7db      	b.n	800f310 <scalbnf+0x5c>
 800f358:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800f38c <scalbnf+0xd8>
 800f35c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800f390 <scalbnf+0xdc>
 800f360:	eef0 7a40 	vmov.f32	s15, s0
 800f364:	2b00      	cmp	r3, #0
 800f366:	e7f3      	b.n	800f350 <scalbnf+0x9c>
 800f368:	3219      	adds	r2, #25
 800f36a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f36e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800f372:	eddf 7a08 	vldr	s15, [pc, #32]	; 800f394 <scalbnf+0xe0>
 800f376:	ee07 3a10 	vmov	s14, r3
 800f37a:	e7c4      	b.n	800f306 <scalbnf+0x52>
 800f37c:	ffff3cb0 	.word	0xffff3cb0
 800f380:	4c000000 	.word	0x4c000000
 800f384:	7149f2ca 	.word	0x7149f2ca
 800f388:	f149f2ca 	.word	0xf149f2ca
 800f38c:	0da24260 	.word	0x0da24260
 800f390:	8da24260 	.word	0x8da24260
 800f394:	33000000 	.word	0x33000000

0800f398 <_init>:
 800f398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f39a:	bf00      	nop
 800f39c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f39e:	bc08      	pop	{r3}
 800f3a0:	469e      	mov	lr, r3
 800f3a2:	4770      	bx	lr

0800f3a4 <_fini>:
 800f3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3a6:	bf00      	nop
 800f3a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3aa:	bc08      	pop	{r3}
 800f3ac:	469e      	mov	lr, r3
 800f3ae:	4770      	bx	lr
