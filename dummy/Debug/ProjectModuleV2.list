
ProjectModuleV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7d8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000910  0800a970  0800a970  0001a970  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b280  0800b280  00020280  2**0
                  CONTENTS
  4 .ARM          00000008  0800b280  0800b280  0001b280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b288  0800b288  00020280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b288  0800b288  0001b288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b28c  0800b28c  0001b28c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000280  20000000  0800b290  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ecc  20000280  0800b510  00020280  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000114c  0800b510  0002114c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d90  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cf7  00000000  00000000  0003a040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  0003dd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b0  00000000  00000000  0003eff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005af1  00000000  00000000  000400a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f84f  00000000  00000000  00045b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094e63  00000000  00000000  000653e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fa243  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005100  00000000  00000000  000fa294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000280 	.word	0x20000280
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a958 	.word	0x0800a958

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000284 	.word	0x20000284
 80001d4:	0800a958 	.word	0x0800a958

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b974 	b.w	8000ea0 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	468e      	mov	lr, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d14d      	bne.n	8000c7a <__udivmoddi4+0xaa>
 8000bde:	428a      	cmp	r2, r1
 8000be0:	4694      	mov	ip, r2
 8000be2:	d969      	bls.n	8000cb8 <__udivmoddi4+0xe8>
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	b152      	cbz	r2, 8000c00 <__udivmoddi4+0x30>
 8000bea:	fa01 f302 	lsl.w	r3, r1, r2
 8000bee:	f1c2 0120 	rsb	r1, r2, #32
 8000bf2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bf6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bfe:	4094      	lsls	r4, r2
 8000c00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c04:	0c21      	lsrs	r1, r4, #16
 8000c06:	fbbe f6f8 	udiv	r6, lr, r8
 8000c0a:	fa1f f78c 	uxth.w	r7, ip
 8000c0e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c12:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c16:	fb06 f107 	mul.w	r1, r6, r7
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x64>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c26:	f080 811f 	bcs.w	8000e68 <__udivmoddi4+0x298>
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	f240 811c 	bls.w	8000e68 <__udivmoddi4+0x298>
 8000c30:	3e02      	subs	r6, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1a5b      	subs	r3, r3, r1
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c44:	fb00 f707 	mul.w	r7, r0, r7
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x92>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c54:	f080 810a 	bcs.w	8000e6c <__udivmoddi4+0x29c>
 8000c58:	42a7      	cmp	r7, r4
 8000c5a:	f240 8107 	bls.w	8000e6c <__udivmoddi4+0x29c>
 8000c5e:	4464      	add	r4, ip
 8000c60:	3802      	subs	r0, #2
 8000c62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c66:	1be4      	subs	r4, r4, r7
 8000c68:	2600      	movs	r6, #0
 8000c6a:	b11d      	cbz	r5, 8000c74 <__udivmoddi4+0xa4>
 8000c6c:	40d4      	lsrs	r4, r2
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e9c5 4300 	strd	r4, r3, [r5]
 8000c74:	4631      	mov	r1, r6
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d909      	bls.n	8000c92 <__udivmoddi4+0xc2>
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	f000 80ef 	beq.w	8000e62 <__udivmoddi4+0x292>
 8000c84:	2600      	movs	r6, #0
 8000c86:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	fab3 f683 	clz	r6, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d14a      	bne.n	8000d30 <__udivmoddi4+0x160>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xd4>
 8000c9e:	4282      	cmp	r2, r0
 8000ca0:	f200 80f9 	bhi.w	8000e96 <__udivmoddi4+0x2c6>
 8000ca4:	1a84      	subs	r4, r0, r2
 8000ca6:	eb61 0303 	sbc.w	r3, r1, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	469e      	mov	lr, r3
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	d0e0      	beq.n	8000c74 <__udivmoddi4+0xa4>
 8000cb2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cb6:	e7dd      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000cb8:	b902      	cbnz	r2, 8000cbc <__udivmoddi4+0xec>
 8000cba:	deff      	udf	#255	; 0xff
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	2a00      	cmp	r2, #0
 8000cc2:	f040 8092 	bne.w	8000dea <__udivmoddi4+0x21a>
 8000cc6:	eba1 010c 	sub.w	r1, r1, ip
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2601      	movs	r6, #1
 8000cd4:	0c20      	lsrs	r0, r4, #16
 8000cd6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cda:	fb07 1113 	mls	r1, r7, r3, r1
 8000cde:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ce2:	fb0e f003 	mul.w	r0, lr, r3
 8000ce6:	4288      	cmp	r0, r1
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x12c>
 8000cea:	eb1c 0101 	adds.w	r1, ip, r1
 8000cee:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x12a>
 8000cf4:	4288      	cmp	r0, r1
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2c0>
 8000cfa:	4643      	mov	r3, r8
 8000cfc:	1a09      	subs	r1, r1, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d04:	fb07 1110 	mls	r1, r7, r0, r1
 8000d08:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x156>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x154>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d24:	4608      	mov	r0, r1
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d2e:	e79c      	b.n	8000c6a <__udivmoddi4+0x9a>
 8000d30:	f1c6 0720 	rsb	r7, r6, #32
 8000d34:	40b3      	lsls	r3, r6
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d42:	fa01 f306 	lsl.w	r3, r1, r6
 8000d46:	431c      	orrs	r4, r3
 8000d48:	40f9      	lsrs	r1, r7
 8000d4a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d52:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d56:	0c20      	lsrs	r0, r4, #16
 8000d58:	fa1f fe8c 	uxth.w	lr, ip
 8000d5c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d60:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d64:	fb08 f00e 	mul.w	r0, r8, lr
 8000d68:	4288      	cmp	r0, r1
 8000d6a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b8>
 8000d70:	eb1c 0101 	adds.w	r1, ip, r1
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2bc>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2bc>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4461      	add	r1, ip
 8000d88:	1a09      	subs	r1, r1, r0
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d90:	fb09 1110 	mls	r1, r9, r0, r1
 8000d94:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d9c:	458e      	cmp	lr, r1
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1e2>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2b4>
 8000daa:	458e      	cmp	lr, r1
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2b4>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4461      	add	r1, ip
 8000db2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dba:	eba1 010e 	sub.w	r1, r1, lr
 8000dbe:	42a1      	cmp	r1, r4
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46a6      	mov	lr, r4
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x2a4>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x2a0>
 8000dc8:	b15d      	cbz	r5, 8000de2 <__udivmoddi4+0x212>
 8000dca:	ebb3 0208 	subs.w	r2, r3, r8
 8000dce:	eb61 010e 	sbc.w	r1, r1, lr
 8000dd2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dd6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dda:	40f1      	lsrs	r1, r6
 8000ddc:	431f      	orrs	r7, r3
 8000dde:	e9c5 7100 	strd	r7, r1, [r5]
 8000de2:	2600      	movs	r6, #0
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	f1c2 0320 	rsb	r3, r2, #32
 8000dee:	40d8      	lsrs	r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa21 f303 	lsr.w	r3, r1, r3
 8000df8:	4091      	lsls	r1, r2
 8000dfa:	4301      	orrs	r1, r0
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e08:	fb07 3610 	mls	r6, r7, r0, r3
 8000e0c:	0c0b      	lsrs	r3, r1, #16
 8000e0e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e12:	fb00 f60e 	mul.w	r6, r0, lr
 8000e16:	429e      	cmp	r6, r3
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x260>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b8>
 8000e28:	429e      	cmp	r6, r3
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b8>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1b9b      	subs	r3, r3, r6
 8000e32:	b289      	uxth	r1, r1
 8000e34:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e38:	fb07 3316 	mls	r3, r7, r6, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb06 f30e 	mul.w	r3, r6, lr
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x28a>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2b0>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2b0>
 8000e56:	3e02      	subs	r6, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	1ac9      	subs	r1, r1, r3
 8000e5c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0x104>
 8000e62:	462e      	mov	r6, r5
 8000e64:	4628      	mov	r0, r5
 8000e66:	e705      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000e68:	4606      	mov	r6, r0
 8000e6a:	e6e3      	b.n	8000c34 <__udivmoddi4+0x64>
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	e6f8      	b.n	8000c62 <__udivmoddi4+0x92>
 8000e70:	454b      	cmp	r3, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e80:	4646      	mov	r6, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x28a>
 8000e84:	4620      	mov	r0, r4
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1e2>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x260>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b8>
 8000e90:	3b02      	subs	r3, #2
 8000e92:	4461      	add	r1, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x12c>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e709      	b.n	8000cae <__udivmoddi4+0xde>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x156>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <InitKalmanStruct>:
extern arm_matrix_instance_f32 mat_P, mat_P_minus, mat_Q;
extern arm_matrix_instance_f32 mat_C, mat_R, mat_S, mat_K;
extern arm_matrix_instance_f32 mat_temp3x3A,mat_temp3x3B, mat_temp3x1,mat_temp1x3, mat_temp1x1;

void InitKalmanStruct(Kalman* KF,float32_t q,float32_t r)
{
 8000ea4:	b5b0      	push	{r4, r5, r7, lr}
 8000ea6:	b0a0      	sub	sp, #128	; 0x80
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	ed87 0a02 	vstr	s0, [r7, #8]
 8000eb0:	edc7 0a01 	vstr	s1, [r7, #4]
	KF->R = r;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	655a      	str	r2, [r3, #84]	; 0x54
	KF->var_Q = q;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	68ba      	ldr	r2, [r7, #8]
 8000ebe:	659a      	str	r2, [r3, #88]	; 0x58
	KF->D = 0;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f04f 0200 	mov.w	r2, #0
 8000ec6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	float32_t a[9] = {
 8000eca:	4b8d      	ldr	r3, [pc, #564]	; (8001100 <InitKalmanStruct+0x25c>)
 8000ecc:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000ed0:	461d      	mov	r5, r3
 8000ed2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ed6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eda:	682b      	ldr	r3, [r5, #0]
 8000edc:	6023      	str	r3, [r4, #0]
			1.0, 0.001/2.5, 0.0000005/(2.5*2.5),
			0  , 1.0      , 0.001/2.5,
			0  , 0        , 1.0
	};
	float iden[9] = {
 8000ede:	4b89      	ldr	r3, [pc, #548]	; (8001104 <InitKalmanStruct+0x260>)
 8000ee0:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000ee4:	461d      	mov	r5, r3
 8000ee6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eee:	682b      	ldr	r3, [r5, #0]
 8000ef0:	6023      	str	r3, [r4, #0]
			1.0, 0  , 0,
			0  , 1.0, 0,
			0  , 0  , 1.0
	};
	int i;
	for(i=0;i<9;i++)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000ef6:	e023      	b.n	8000f40 <InitKalmanStruct+0x9c>
	{
		KF->A[i] = a[i];
 8000ef8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	3380      	adds	r3, #128	; 0x80
 8000efe:	443b      	add	r3, r7
 8000f00:	3b28      	subs	r3, #40	; 0x28
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	68f9      	ldr	r1, [r7, #12]
 8000f06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f08:	3318      	adds	r3, #24
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	601a      	str	r2, [r3, #0]
		KF->I[i] = iden[i];
 8000f10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	3380      	adds	r3, #128	; 0x80
 8000f16:	443b      	add	r3, r7
 8000f18:	3b4c      	subs	r3, #76	; 0x4c
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	68f9      	ldr	r1, [r7, #12]
 8000f1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f20:	332e      	adds	r3, #46	; 0x2e
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	440b      	add	r3, r1
 8000f26:	601a      	str	r2, [r3, #0]
		KF->P[i] = 0;
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	3304      	adds	r3, #4
 8000f34:	f04f 0200 	mov.w	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
	for(i=0;i<9;i++)
 8000f3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000f40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f42:	2b08      	cmp	r3, #8
 8000f44:	ddd8      	ble.n	8000ef8 <InitKalmanStruct+0x54>
	}
	float32_t b[3] = {
 8000f46:	f04f 0300 	mov.w	r3, #0
 8000f4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f4c:	f04f 0300 	mov.w	r3, #0
 8000f50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f52:	f04f 0300 	mov.w	r3, #0
 8000f56:	633b      	str	r3, [r7, #48]	; 0x30
			0, 0, 0
	};
	float32_t c[3] = {
 8000f58:	f04f 0300 	mov.w	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
 8000f5e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000f62:	623b      	str	r3, [r7, #32]
 8000f64:	f04f 0300 	mov.w	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
			0, 1, 0
	};
	float32_t g[3] = {
 8000f6a:	4a67      	ldr	r2, [pc, #412]	; (8001108 <InitKalmanStruct+0x264>)
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0.001 * 0.001 * 0.001 / (6*2.5*2.5*2.5),
			0.0000005/(2.5*2.5),
			0.001/2.5
	};

	for(i=0;i<3;i++)
 8000f76:	2300      	movs	r3, #0
 8000f78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000f7a:	e02e      	b.n	8000fda <InitKalmanStruct+0x136>
	{
		KF->B[i] = b[i];
 8000f7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	3380      	adds	r3, #128	; 0x80
 8000f82:	443b      	add	r3, r7
 8000f84:	3b58      	subs	r3, #88	; 0x58
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	68f9      	ldr	r1, [r7, #12]
 8000f8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f8c:	3320      	adds	r3, #32
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	440b      	add	r3, r1
 8000f92:	3304      	adds	r3, #4
 8000f94:	601a      	str	r2, [r3, #0]
		KF->C[i] = c[i];
 8000f96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	3380      	adds	r3, #128	; 0x80
 8000f9c:	443b      	add	r3, r7
 8000f9e:	3b64      	subs	r3, #100	; 0x64
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	68f9      	ldr	r1, [r7, #12]
 8000fa4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fa6:	3324      	adds	r3, #36	; 0x24
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	440b      	add	r3, r1
 8000fac:	601a      	str	r2, [r3, #0]
		KF->G[i] = g[i];
 8000fae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	3380      	adds	r3, #128	; 0x80
 8000fb4:	443b      	add	r3, r7
 8000fb6:	3b70      	subs	r3, #112	; 0x70
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	68f9      	ldr	r1, [r7, #12]
 8000fbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fbe:	3328      	adds	r3, #40	; 0x28
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	601a      	str	r2, [r3, #0]
		KF->x_hat[i] = 0;
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
	for(i=0;i<3;i++)
 8000fd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000fda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	ddcd      	ble.n	8000f7c <InitKalmanStruct+0xd8>
	}

	  arm_mat_init_f32(&mat_A, 3, 3,KF->A);//3x3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	3360      	adds	r3, #96	; 0x60
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	2103      	movs	r1, #3
 8000fe8:	4848      	ldr	r0, [pc, #288]	; (800110c <InitKalmanStruct+0x268>)
 8000fea:	f003 f818 	bl	800401e <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_x_hat, 3, 1, KF->x_hat);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2103      	movs	r1, #3
 8000ff4:	4846      	ldr	r0, [pc, #280]	; (8001110 <InitKalmanStruct+0x26c>)
 8000ff6:	f003 f812 	bl	800401e <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_x_hat_minus, 3, 1, KF->x_hat_minus);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	33dc      	adds	r3, #220	; 0xdc
 8000ffe:	2201      	movs	r2, #1
 8001000:	2103      	movs	r1, #3
 8001002:	4844      	ldr	r0, [pc, #272]	; (8001114 <InitKalmanStruct+0x270>)
 8001004:	f003 f80b 	bl	800401e <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_B, 3, 1, KF->B);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	3384      	adds	r3, #132	; 0x84
 800100c:	2201      	movs	r2, #1
 800100e:	2103      	movs	r1, #3
 8001010:	4841      	ldr	r0, [pc, #260]	; (8001118 <InitKalmanStruct+0x274>)
 8001012:	f003 f804 	bl	800401e <arm_mat_init_f32>
	  //arm_mat_init_f32(&mat_u, 1, 1, NULL);  // Set the input control vector if needed
	  arm_mat_init_f32(&mat_P, 3, 3, KF->P);//3x3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	330c      	adds	r3, #12
 800101a:	2203      	movs	r2, #3
 800101c:	2103      	movs	r1, #3
 800101e:	483f      	ldr	r0, [pc, #252]	; (800111c <InitKalmanStruct+0x278>)
 8001020:	f002 fffd 	bl	800401e <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_P_minus, 3, 3, KF->P_minus);//3x3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	33e8      	adds	r3, #232	; 0xe8
 8001028:	2203      	movs	r2, #3
 800102a:	2103      	movs	r1, #3
 800102c:	483c      	ldr	r0, [pc, #240]	; (8001120 <InitKalmanStruct+0x27c>)
 800102e:	f002 fff6 	bl	800401e <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_Q, 3, 3,KF->Q);//3x3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	3330      	adds	r3, #48	; 0x30
 8001036:	2203      	movs	r2, #3
 8001038:	2103      	movs	r1, #3
 800103a:	483a      	ldr	r0, [pc, #232]	; (8001124 <InitKalmanStruct+0x280>)
 800103c:	f002 ffef 	bl	800401e <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_C, 1, 3, KF->C);//1x3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3390      	adds	r3, #144	; 0x90
 8001044:	2203      	movs	r2, #3
 8001046:	2101      	movs	r1, #1
 8001048:	4837      	ldr	r0, [pc, #220]	; (8001128 <InitKalmanStruct+0x284>)
 800104a:	f002 ffe8 	bl	800401e <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_R, 1, 1, &KF->R);//1x1
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	3354      	adds	r3, #84	; 0x54
 8001052:	2201      	movs	r2, #1
 8001054:	2101      	movs	r1, #1
 8001056:	4835      	ldr	r0, [pc, #212]	; (800112c <InitKalmanStruct+0x288>)
 8001058:	f002 ffe1 	bl	800401e <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_S, 1, 1, KF->S);//1x1
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001062:	2201      	movs	r2, #1
 8001064:	2101      	movs	r1, #1
 8001066:	4832      	ldr	r0, [pc, #200]	; (8001130 <InitKalmanStruct+0x28c>)
 8001068:	f002 ffd9 	bl	800401e <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_K, 3, 1, KF->K);//3x1
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001072:	2201      	movs	r2, #1
 8001074:	2103      	movs	r1, #3
 8001076:	482f      	ldr	r0, [pc, #188]	; (8001134 <InitKalmanStruct+0x290>)
 8001078:	f002 ffd1 	bl	800401e <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x3A, 3, 3, KF->temp3x3A);//3x3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8001082:	2203      	movs	r2, #3
 8001084:	2103      	movs	r1, #3
 8001086:	482c      	ldr	r0, [pc, #176]	; (8001138 <InitKalmanStruct+0x294>)
 8001088:	f002 ffc9 	bl	800401e <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x3B, 3, 3, KF->temp3x3B);//3x3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001092:	2203      	movs	r2, #3
 8001094:	2103      	movs	r1, #3
 8001096:	4829      	ldr	r0, [pc, #164]	; (800113c <InitKalmanStruct+0x298>)
 8001098:	f002 ffc1 	bl	800401e <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x1, 3, 1, KF->temp3x1);//3x1
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80010a2:	2201      	movs	r2, #1
 80010a4:	2103      	movs	r1, #3
 80010a6:	4826      	ldr	r0, [pc, #152]	; (8001140 <InitKalmanStruct+0x29c>)
 80010a8:	f002 ffb9 	bl	800401e <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp1x3, 1, 3, KF->temp1x3);//1x3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 80010b2:	2203      	movs	r2, #3
 80010b4:	2101      	movs	r1, #1
 80010b6:	4823      	ldr	r0, [pc, #140]	; (8001144 <InitKalmanStruct+0x2a0>)
 80010b8:	f002 ffb1 	bl	800401e <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp1x1, 1, 1, &KF->temp1x1);//1x1
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80010c2:	2201      	movs	r2, #1
 80010c4:	2101      	movs	r1, #1
 80010c6:	4820      	ldr	r0, [pc, #128]	; (8001148 <InitKalmanStruct+0x2a4>)
 80010c8:	f002 ffa9 	bl	800401e <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_G, 3, 1, KF->G);//3x1
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	33a0      	adds	r3, #160	; 0xa0
 80010d0:	2201      	movs	r2, #1
 80010d2:	2103      	movs	r1, #3
 80010d4:	481d      	ldr	r0, [pc, #116]	; (800114c <InitKalmanStruct+0x2a8>)
 80010d6:	f002 ffa2 	bl	800401e <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_GT, 1, 3, KF->GT);//1x3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	33ac      	adds	r3, #172	; 0xac
 80010de:	2203      	movs	r2, #3
 80010e0:	2101      	movs	r1, #1
 80010e2:	481b      	ldr	r0, [pc, #108]	; (8001150 <InitKalmanStruct+0x2ac>)
 80010e4:	f002 ff9b 	bl	800401e <arm_mat_init_f32>
	  arm_mat_init_f32(&eye, 3, 3, KF->I);//1x3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	33b8      	adds	r3, #184	; 0xb8
 80010ec:	2203      	movs	r2, #3
 80010ee:	2103      	movs	r1, #3
 80010f0:	4818      	ldr	r0, [pc, #96]	; (8001154 <InitKalmanStruct+0x2b0>)
 80010f2:	f002 ff94 	bl	800401e <arm_mat_init_f32>

}
 80010f6:	bf00      	nop
 80010f8:	3780      	adds	r7, #128	; 0x80
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bdb0      	pop	{r4, r5, r7, pc}
 80010fe:	bf00      	nop
 8001100:	0800a970 	.word	0x0800a970
 8001104:	0800a994 	.word	0x0800a994
 8001108:	0800a9b8 	.word	0x0800a9b8
 800110c:	20000550 	.word	0x20000550
 8001110:	20000558 	.word	0x20000558
 8001114:	20000560 	.word	0x20000560
 8001118:	20000568 	.word	0x20000568
 800111c:	20000578 	.word	0x20000578
 8001120:	20000580 	.word	0x20000580
 8001124:	20000588 	.word	0x20000588
 8001128:	200005a0 	.word	0x200005a0
 800112c:	200005a8 	.word	0x200005a8
 8001130:	200005b0 	.word	0x200005b0
 8001134:	200005b8 	.word	0x200005b8
 8001138:	200005c0 	.word	0x200005c0
 800113c:	200005c8 	.word	0x200005c8
 8001140:	200005d0 	.word	0x200005d0
 8001144:	200005d8 	.word	0x200005d8
 8001148:	200005e0 	.word	0x200005e0
 800114c:	20000598 	.word	0x20000598
 8001150:	20000590 	.word	0x20000590
 8001154:	20000570 	.word	0x20000570

08001158 <kalman_filter>:

void kalman_filter()
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
    //Process model: x_hat_minus = mat_A*x_hat
    arm_mat_mult_f32(&mat_A, &mat_x_hat, &mat_x_hat_minus);			//A*X
 800115c:	4a39      	ldr	r2, [pc, #228]	; (8001244 <kalman_filter+0xec>)
 800115e:	493a      	ldr	r1, [pc, #232]	; (8001248 <kalman_filter+0xf0>)
 8001160:	483a      	ldr	r0, [pc, #232]	; (800124c <kalman_filter+0xf4>)
 8001162:	f003 faeb 	bl	800473c <arm_mat_mult_f32>
    // If an input control vector is used:
    // arm_mat_mult_f32(&mat_B, &mat_u, &mat_temp3x3A);
    // arm_mat_add_f32(&mat_x_hat_minus, &mat_temp3x3A, &mat_x_hat_minus);

    // Predict covariance matrix: P_minus = A * P * A^T + Q
    arm_mat_trans_f32(&mat_A, &mat_temp3x3A);					    //AT
 8001166:	493a      	ldr	r1, [pc, #232]	; (8001250 <kalman_filter+0xf8>)
 8001168:	4838      	ldr	r0, [pc, #224]	; (800124c <kalman_filter+0xf4>)
 800116a:	f003 fbd2 	bl	8004912 <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_A, &mat_P, &mat_temp3x3B);			    //A*P
 800116e:	4a39      	ldr	r2, [pc, #228]	; (8001254 <kalman_filter+0xfc>)
 8001170:	4939      	ldr	r1, [pc, #228]	; (8001258 <kalman_filter+0x100>)
 8001172:	4836      	ldr	r0, [pc, #216]	; (800124c <kalman_filter+0xf4>)
 8001174:	f003 fae2 	bl	800473c <arm_mat_mult_f32>
    arm_mat_mult_f32(&mat_temp3x3B, &mat_temp3x3A, &mat_P_minus);	//A*P*AT
 8001178:	4a38      	ldr	r2, [pc, #224]	; (800125c <kalman_filter+0x104>)
 800117a:	4935      	ldr	r1, [pc, #212]	; (8001250 <kalman_filter+0xf8>)
 800117c:	4835      	ldr	r0, [pc, #212]	; (8001254 <kalman_filter+0xfc>)
 800117e:	f003 fadd 	bl	800473c <arm_mat_mult_f32>
    arm_mat_trans_f32(&mat_G, &mat_GT);								//GT
 8001182:	4937      	ldr	r1, [pc, #220]	; (8001260 <kalman_filter+0x108>)
 8001184:	4837      	ldr	r0, [pc, #220]	; (8001264 <kalman_filter+0x10c>)
 8001186:	f003 fbc4 	bl	8004912 <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_G, &mat_GT, &mat_Q);						//G*GT
 800118a:	4a37      	ldr	r2, [pc, #220]	; (8001268 <kalman_filter+0x110>)
 800118c:	4934      	ldr	r1, [pc, #208]	; (8001260 <kalman_filter+0x108>)
 800118e:	4835      	ldr	r0, [pc, #212]	; (8001264 <kalman_filter+0x10c>)
 8001190:	f003 fad4 	bl	800473c <arm_mat_mult_f32>
    arm_mat_scale_f32(&mat_Q,KF.var_Q, &mat_Q);						//G*GT*var_q
 8001194:	4b35      	ldr	r3, [pc, #212]	; (800126c <kalman_filter+0x114>)
 8001196:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800119a:	4933      	ldr	r1, [pc, #204]	; (8001268 <kalman_filter+0x110>)
 800119c:	eeb0 0a67 	vmov.f32	s0, s15
 80011a0:	4831      	ldr	r0, [pc, #196]	; (8001268 <kalman_filter+0x110>)
 80011a2:	f003 fb45 	bl	8004830 <arm_mat_scale_f32>
    arm_mat_add_f32(&mat_P_minus, &mat_Q, &mat_P_minus);			//A * P * A^T + Q
 80011a6:	4a2d      	ldr	r2, [pc, #180]	; (800125c <kalman_filter+0x104>)
 80011a8:	492f      	ldr	r1, [pc, #188]	; (8001268 <kalman_filter+0x110>)
 80011aa:	482c      	ldr	r0, [pc, #176]	; (800125c <kalman_filter+0x104>)
 80011ac:	f002 fefc 	bl	8003fa8 <arm_mat_add_f32>

    // Calculate innovation covariance: S = C * P_minus * C^T + R
    arm_mat_mult_f32(&mat_C, &mat_P_minus, &mat_temp1x3);			//C*P
 80011b0:	4a2f      	ldr	r2, [pc, #188]	; (8001270 <kalman_filter+0x118>)
 80011b2:	492a      	ldr	r1, [pc, #168]	; (800125c <kalman_filter+0x104>)
 80011b4:	482f      	ldr	r0, [pc, #188]	; (8001274 <kalman_filter+0x11c>)
 80011b6:	f003 fac1 	bl	800473c <arm_mat_mult_f32>
    arm_mat_trans_f32(&mat_C, &mat_temp3x1);						//CT
 80011ba:	492f      	ldr	r1, [pc, #188]	; (8001278 <kalman_filter+0x120>)
 80011bc:	482d      	ldr	r0, [pc, #180]	; (8001274 <kalman_filter+0x11c>)
 80011be:	f003 fba8 	bl	8004912 <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_temp1x3, &mat_temp3x1, &mat_temp1x1);		//C*P*C^T
 80011c2:	4a2e      	ldr	r2, [pc, #184]	; (800127c <kalman_filter+0x124>)
 80011c4:	492c      	ldr	r1, [pc, #176]	; (8001278 <kalman_filter+0x120>)
 80011c6:	482a      	ldr	r0, [pc, #168]	; (8001270 <kalman_filter+0x118>)
 80011c8:	f003 fab8 	bl	800473c <arm_mat_mult_f32>
    arm_mat_add_f32(&mat_temp1x1, &mat_R, &mat_S);					//C*P*C^T + R
 80011cc:	4a2c      	ldr	r2, [pc, #176]	; (8001280 <kalman_filter+0x128>)
 80011ce:	492d      	ldr	r1, [pc, #180]	; (8001284 <kalman_filter+0x12c>)
 80011d0:	482a      	ldr	r0, [pc, #168]	; (800127c <kalman_filter+0x124>)
 80011d2:	f002 fee9 	bl	8003fa8 <arm_mat_add_f32>

    //==> Calculate Kalman gain: K = P_minus * C^T * S^(-1)
    arm_mat_inverse_f32(&mat_S, &mat_temp1x1);						//inv(S)
 80011d6:	4929      	ldr	r1, [pc, #164]	; (800127c <kalman_filter+0x124>)
 80011d8:	4829      	ldr	r0, [pc, #164]	; (8001280 <kalman_filter+0x128>)
 80011da:	f002 ff38 	bl	800404e <arm_mat_inverse_f32>
    arm_mat_mult_f32(&mat_P_minus, &mat_temp3x1, &mat_temp3x3A);	//P*CT
 80011de:	4a1c      	ldr	r2, [pc, #112]	; (8001250 <kalman_filter+0xf8>)
 80011e0:	4925      	ldr	r1, [pc, #148]	; (8001278 <kalman_filter+0x120>)
 80011e2:	481e      	ldr	r0, [pc, #120]	; (800125c <kalman_filter+0x104>)
 80011e4:	f003 faaa 	bl	800473c <arm_mat_mult_f32>
    arm_mat_mult_f32(&mat_temp3x3A, &mat_temp1x1, &mat_K);			//P*CT*inv(S)
 80011e8:	4a27      	ldr	r2, [pc, #156]	; (8001288 <kalman_filter+0x130>)
 80011ea:	4924      	ldr	r1, [pc, #144]	; (800127c <kalman_filter+0x124>)
 80011ec:	4818      	ldr	r0, [pc, #96]	; (8001250 <kalman_filter+0xf8>)
 80011ee:	f003 faa5 	bl	800473c <arm_mat_mult_f32>

    //==> Update state estimate: x_hat = x_hat_minus + K * (z - C * x_hat_minus)
    arm_mat_mult_f32(&mat_C, &mat_x_hat_minus, &mat_temp1x1);		//C*X
 80011f2:	4a22      	ldr	r2, [pc, #136]	; (800127c <kalman_filter+0x124>)
 80011f4:	4913      	ldr	r1, [pc, #76]	; (8001244 <kalman_filter+0xec>)
 80011f6:	481f      	ldr	r0, [pc, #124]	; (8001274 <kalman_filter+0x11c>)
 80011f8:	f003 faa0 	bl	800473c <arm_mat_mult_f32>
    //float32_t innovation = z - temp1x1;								//Z-C*X
    arm_mat_scale_f32(&mat_K, KF.z - KF.temp1x1, &mat_temp3x1);			//K*(Z-C*X)
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <kalman_filter+0x114>)
 80011fe:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8001202:	4b1a      	ldr	r3, [pc, #104]	; (800126c <kalman_filter+0x114>)
 8001204:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
 8001208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120c:	491a      	ldr	r1, [pc, #104]	; (8001278 <kalman_filter+0x120>)
 800120e:	eeb0 0a67 	vmov.f32	s0, s15
 8001212:	481d      	ldr	r0, [pc, #116]	; (8001288 <kalman_filter+0x130>)
 8001214:	f003 fb0c 	bl	8004830 <arm_mat_scale_f32>
    arm_mat_add_f32(&mat_x_hat_minus, &mat_temp3x1, &mat_x_hat);	//X - K*(Z-C*X) ========> X estimate
 8001218:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <kalman_filter+0xf0>)
 800121a:	4917      	ldr	r1, [pc, #92]	; (8001278 <kalman_filter+0x120>)
 800121c:	4809      	ldr	r0, [pc, #36]	; (8001244 <kalman_filter+0xec>)
 800121e:	f002 fec3 	bl	8003fa8 <arm_mat_add_f32>

    // Update covariance matrix: P = (I - K * C) * P_minus
    arm_mat_mult_f32(&mat_K, &mat_C, &mat_temp3x3B);				//K*C
 8001222:	4a0c      	ldr	r2, [pc, #48]	; (8001254 <kalman_filter+0xfc>)
 8001224:	4913      	ldr	r1, [pc, #76]	; (8001274 <kalman_filter+0x11c>)
 8001226:	4818      	ldr	r0, [pc, #96]	; (8001288 <kalman_filter+0x130>)
 8001228:	f003 fa88 	bl	800473c <arm_mat_mult_f32>
    arm_mat_sub_f32(&eye, &mat_P_minus, &mat_temp3x3A);				//I - K*C
 800122c:	4a08      	ldr	r2, [pc, #32]	; (8001250 <kalman_filter+0xf8>)
 800122e:	490b      	ldr	r1, [pc, #44]	; (800125c <kalman_filter+0x104>)
 8001230:	4816      	ldr	r0, [pc, #88]	; (800128c <kalman_filter+0x134>)
 8001232:	f003 fb33 	bl	800489c <arm_mat_sub_f32>
    arm_mat_mult_f32(&mat_temp3x3A, &mat_P_minus, &mat_P);			//(I - K*C)*P ===========> P estimate
 8001236:	4a08      	ldr	r2, [pc, #32]	; (8001258 <kalman_filter+0x100>)
 8001238:	4908      	ldr	r1, [pc, #32]	; (800125c <kalman_filter+0x104>)
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <kalman_filter+0xf8>)
 800123c:	f003 fa7e 	bl	800473c <arm_mat_mult_f32>
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000560 	.word	0x20000560
 8001248:	20000558 	.word	0x20000558
 800124c:	20000550 	.word	0x20000550
 8001250:	200005c0 	.word	0x200005c0
 8001254:	200005c8 	.word	0x200005c8
 8001258:	20000578 	.word	0x20000578
 800125c:	20000580 	.word	0x20000580
 8001260:	20000590 	.word	0x20000590
 8001264:	20000598 	.word	0x20000598
 8001268:	20000588 	.word	0x20000588
 800126c:	200003d0 	.word	0x200003d0
 8001270:	200005d8 	.word	0x200005d8
 8001274:	200005a0 	.word	0x200005a0
 8001278:	200005d0 	.word	0x200005d0
 800127c:	200005e0 	.word	0x200005e0
 8001280:	200005b0 	.word	0x200005b0
 8001284:	200005a8 	.word	0x200005a8
 8001288:	200005b8 	.word	0x200005b8
 800128c:	20000570 	.word	0x20000570

08001290 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <modbus_1t5_Timeout+0x1c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2201      	movs	r2, #1
 800129e:	751a      	strb	r2, [r3, #20]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	2000029c 	.word	0x2000029c

080012b0 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80012b8:	4b04      	ldr	r3, [pc, #16]	; (80012cc <modbus_3t5_Timeout+0x1c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2201      	movs	r2, #1
 80012be:	755a      	strb	r2, [r3, #21]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	2000029c 	.word	0x2000029c

080012d0 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <modbus_UART_Recived+0x60>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2201      	movs	r2, #1
 80012e0:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <modbus_UART_Recived+0x60>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 80012ea:	1c59      	adds	r1, r3, #1
 80012ec:	b289      	uxth	r1, r1
 80012ee:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 80012f2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80012f6:	d210      	bcs.n	800131a <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80012f8:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <modbus_UART_Recived+0x60>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	68d8      	ldr	r0, [r3, #12]
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <modbus_UART_Recived+0x60>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <modbus_UART_Recived+0x60>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800130a:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800130e:	4413      	add	r3, r2
 8001310:	3302      	adds	r3, #2
 8001312:	2201      	movs	r2, #1
 8001314:	4619      	mov	r1, r3
 8001316:	f006 fe0f 	bl	8007f38 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 800131a:	4b05      	ldr	r3, [pc, #20]	; (8001330 <modbus_UART_Recived+0x60>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2200      	movs	r2, #0
 8001324:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	2000029c 	.word	0x2000029c

08001334 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800133e:	4a24      	ldr	r2, [pc, #144]	; (80013d0 <Modbus_init+0x9c>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8001344:	4b22      	ldr	r3, [pc, #136]	; (80013d0 <Modbus_init+0x9c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 800134c:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <Modbus_init+0x9c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	4a20      	ldr	r2, [pc, #128]	; (80013d4 <Modbus_init+0xa0>)
 8001354:	2114      	movs	r1, #20
 8001356:	4618      	mov	r0, r3
 8001358:	f005 fff2 	bl	8007340 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <Modbus_init+0x9c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	4a1d      	ldr	r2, [pc, #116]	; (80013d8 <Modbus_init+0xa4>)
 8001364:	210e      	movs	r1, #14
 8001366:	4618      	mov	r0, r3
 8001368:	f005 ffea 	bl	8007340 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 800136c:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <Modbus_init+0x9c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	4a1a      	ldr	r2, [pc, #104]	; (80013dc <Modbus_init+0xa8>)
 8001374:	2103      	movs	r1, #3
 8001376:	4618      	mov	r0, r3
 8001378:	f006 fd36 	bl	8007de8 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800137c:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <Modbus_init+0x9c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	68d8      	ldr	r0, [r3, #12]
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <Modbus_init+0x9c>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <Modbus_init+0x9c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800138e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001392:	4413      	add	r3, r2
 8001394:	3302      	adds	r3, #2
 8001396:	2201      	movs	r2, #1
 8001398:	4619      	mov	r1, r3
 800139a:	f006 fdcd 	bl	8007f38 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <Modbus_init+0x9c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d10c      	bne.n	80013c8 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <Modbus_init+0x9c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f005 f86d 	bl	8006494 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80013ba:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <Modbus_init+0x9c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f005 faac 	bl	8006920 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	2000029c 	.word	0x2000029c
 80013d4:	08001291 	.word	0x08001291
 80013d8:	080012b1 	.word	0x080012b1
 80013dc:	080012d1 	.word	0x080012d1

080013e0 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 80013ec:	23ff      	movs	r3, #255	; 0xff
 80013ee:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 80013f0:	23ff      	movs	r3, #255	; 0xff
 80013f2:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 80013f4:	e013      	b.n	800141e <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	1c5a      	adds	r2, r3, #1
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	781a      	ldrb	r2, [r3, #0]
 80013fe:	7bbb      	ldrb	r3, [r7, #14]
 8001400:	4053      	eors	r3, r2
 8001402:	b2db      	uxtb	r3, r3
 8001404:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001406:	4a0f      	ldr	r2, [pc, #60]	; (8001444 <CRC16+0x64>)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	4413      	add	r3, r2
 800140c:	781a      	ldrb	r2, [r3, #0]
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	4053      	eors	r3, r2
 8001412:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001414:	4a0c      	ldr	r2, [pc, #48]	; (8001448 <CRC16+0x68>)
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	4413      	add	r3, r2
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800141e:	883b      	ldrh	r3, [r7, #0]
 8001420:	1e5a      	subs	r2, r3, #1
 8001422:	803a      	strh	r2, [r7, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1e6      	bne.n	80013f6 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	021b      	lsls	r3, r3, #8
 800142c:	b21a      	sxth	r2, r3
 800142e:	7bbb      	ldrb	r3, [r7, #14]
 8001430:	b21b      	sxth	r3, r3
 8001432:	4313      	orrs	r3, r2
 8001434:	b21b      	sxth	r3, r3
 8001436:	b29b      	uxth	r3, r3
}
 8001438:	4618      	mov	r0, r3
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	20000100 	.word	0x20000100
 8001448:	20000000 	.word	0x20000000

0800144c <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8001452:	4b81      	ldr	r3, [pc, #516]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	7e1b      	ldrb	r3, [r3, #24]
 8001458:	3b01      	subs	r3, #1
 800145a:	2b03      	cmp	r3, #3
 800145c:	d80a      	bhi.n	8001474 <Modbus_Protocal_Worker+0x28>
 800145e:	a201      	add	r2, pc, #4	; (adr r2, 8001464 <Modbus_Protocal_Worker+0x18>)
 8001460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001464:	0800147f 	.word	0x0800147f
 8001468:	0800161f 	.word	0x0800161f
 800146c:	0800150b 	.word	0x0800150b
 8001470:	08001531 	.word	0x08001531
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001474:	4b78      	ldr	r3, [pc, #480]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2201      	movs	r2, #1
 800147a:	761a      	strb	r2, [r3, #24]
		break;
 800147c:	e0e8      	b.n	8001650 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800147e:	4b76      	ldr	r3, [pc, #472]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001486:	2b00      	cmp	r3, #0
 8001488:	d002      	beq.n	8001490 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 800148a:	f000 f9dd 	bl	8001848 <Modbus_Emission>
 800148e:	e01c      	b.n	80014ca <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8001490:	4b71      	ldr	r3, [pc, #452]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	7d9b      	ldrb	r3, [r3, #22]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d017      	beq.n	80014ca <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 800149a:	4b6f      	ldr	r3, [pc, #444]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2200      	movs	r2, #0
 80014a0:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80014a2:	4b6d      	ldr	r3, [pc, #436]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2200      	movs	r2, #0
 80014a8:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 80014aa:	4b6b      	ldr	r3, [pc, #428]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b68      	ldr	r3, [pc, #416]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f042 0201 	orr.w	r2, r2, #1
 80014c0:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80014c2:	4b65      	ldr	r3, [pc, #404]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2203      	movs	r2, #3
 80014c8:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80014ca:	4b63      	ldr	r3, [pc, #396]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b20      	cmp	r3, #32
 80014d8:	f040 80b3 	bne.w	8001642 <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80014dc:	4b5e      	ldr	r3, [pc, #376]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80014e6:	4b5c      	ldr	r3, [pc, #368]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68d8      	ldr	r0, [r3, #12]
 80014ec:	4b5a      	ldr	r3, [pc, #360]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b59      	ldr	r3, [pc, #356]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80014f8:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80014fc:	4413      	add	r3, r2
 80014fe:	3302      	adds	r3, #2
 8001500:	2201      	movs	r2, #1
 8001502:	4619      	mov	r1, r3
 8001504:	f006 fd18 	bl	8007f38 <HAL_UART_Receive_IT>
		}
		break;
 8001508:	e09b      	b.n	8001642 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800150a:	4b53      	ldr	r3, [pc, #332]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	7d1b      	ldrb	r3, [r3, #20]
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 8098 	beq.w	8001646 <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8001516:	4b50      	ldr	r3, [pc, #320]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2200      	movs	r2, #0
 800151c:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800151e:	4b4e      	ldr	r3, [pc, #312]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	22fe      	movs	r2, #254	; 0xfe
 8001524:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001526:	4b4c      	ldr	r3, [pc, #304]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2204      	movs	r2, #4
 800152c:	761a      	strb	r2, [r3, #24]
		}
		break;
 800152e:	e08a      	b.n	8001646 <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8001530:	4b49      	ldr	r3, [pc, #292]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	7d9b      	ldrb	r3, [r3, #22]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d009      	beq.n	800154e <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 800153a:	4b47      	ldr	r3, [pc, #284]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d103      	bne.n	800154e <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001546:	4b44      	ldr	r3, [pc, #272]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	22ff      	movs	r2, #255	; 0xff
 800154c:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800154e:	4b42      	ldr	r3, [pc, #264]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001556:	f113 0f02 	cmn.w	r3, #2
 800155a:	d150      	bne.n	80015fe <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 800155c:	4b3e      	ldr	r3, [pc, #248]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2200      	movs	r2, #0
 8001562:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001564:	4b3c      	ldr	r3, [pc, #240]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f203 2272 	addw	r2, r3, #626	; 0x272
 800156c:	4b3a      	ldr	r3, [pc, #232]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001574:	3b02      	subs	r3, #2
 8001576:	4619      	mov	r1, r3
 8001578:	4610      	mov	r0, r2
 800157a:	f7ff ff31 	bl	80013e0 <CRC16>
 800157e:	4603      	mov	r3, r0
 8001580:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001582:	793a      	ldrb	r2, [r7, #4]
 8001584:	4b34      	ldr	r3, [pc, #208]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 8001586:	6819      	ldr	r1, [r3, #0]
 8001588:	4b33      	ldr	r3, [pc, #204]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001590:	3b02      	subs	r3, #2
 8001592:	440b      	add	r3, r1
 8001594:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001598:	429a      	cmp	r2, r3
 800159a:	d10c      	bne.n	80015b6 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 800159c:	797a      	ldrb	r2, [r7, #5]
 800159e:	4b2e      	ldr	r3, [pc, #184]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80015a0:	6819      	ldr	r1, [r3, #0]
 80015a2:	4b2d      	ldr	r3, [pc, #180]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80015aa:	3b01      	subs	r3, #1
 80015ac:	440b      	add	r3, r1
 80015ae:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d004      	beq.n	80015c0 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80015b6:	4b28      	ldr	r3, [pc, #160]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	22ff      	movs	r2, #255	; 0xff
 80015bc:	75da      	strb	r2, [r3, #23]
				break;
 80015be:	e047      	b.n	8001650 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80015c0:	4b25      	ldr	r3, [pc, #148]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 80015c8:	4b23      	ldr	r3, [pc, #140]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d113      	bne.n	80015fa <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80015d2:	4b21      	ldr	r3, [pc, #132]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80015da:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 80015e2:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80015e4:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80015ec:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80015ee:	461a      	mov	r2, r3
 80015f0:	f007 fe64 	bl	80092bc <memcpy>

			//execute command
			Modbus_frame_response();
 80015f4:	f000 f910 	bl	8001818 <Modbus_frame_response>
 80015f8:	e001      	b.n	80015fe <Modbus_Protocal_Worker+0x1b2>
				break;
 80015fa:	bf00      	nop
					}
		break;


	}
}
 80015fc:	e028      	b.n	8001650 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 80015fe:	4b16      	ldr	r3, [pc, #88]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	7d5b      	ldrb	r3, [r3, #21]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d020      	beq.n	800164a <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2201      	movs	r2, #1
 800160e:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	4618      	mov	r0, r3
 8001618:	f006 fd3c 	bl	8008094 <HAL_UART_AbortReceive>
		break;
 800161c:	e015      	b.n	800164a <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800161e:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b20      	cmp	r3, #32
 800162c:	d10f      	bne.n	800164e <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 800162e:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <Modbus_Protocal_Worker+0x20c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2201      	movs	r2, #1
 800163e:	761a      	strb	r2, [r3, #24]
		break;
 8001640:	e005      	b.n	800164e <Modbus_Protocal_Worker+0x202>
		break;
 8001642:	bf00      	nop
 8001644:	e004      	b.n	8001650 <Modbus_Protocal_Worker+0x204>
		break;
 8001646:	bf00      	nop
 8001648:	e002      	b.n	8001650 <Modbus_Protocal_Worker+0x204>
		break;
 800164a:	bf00      	nop
 800164c:	e000      	b.n	8001650 <Modbus_Protocal_Worker+0x204>
		break;
 800164e:	bf00      	nop
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	2000029c 	.word	0x2000029c

0800165c <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001662:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <modbusWrite1Register+0x80>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	7e9b      	ldrb	r3, [r3, #26]
 8001668:	b29b      	uxth	r3, r3
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	b29a      	uxth	r2, r3
 800166e:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <modbusWrite1Register+0x80>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	7edb      	ldrb	r3, [r3, #27]
 8001674:	b29b      	uxth	r3, r3
 8001676:	4413      	add	r3, r2
 8001678:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800167a:	88fa      	ldrh	r2, [r7, #6]
 800167c:	4b17      	ldr	r3, [pc, #92]	; (80016dc <modbusWrite1Register+0x80>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	429a      	cmp	r2, r3
 8001684:	d903      	bls.n	800168e <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001686:	2002      	movs	r0, #2
 8001688:	f000 f8a4 	bl	80017d4 <ModbusErrorReply>
			 return;
 800168c:	e023      	b.n	80016d6 <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800168e:	4b13      	ldr	r3, [pc, #76]	; (80016dc <modbusWrite1Register+0x80>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	4b12      	ldr	r3, [pc, #72]	; (80016dc <modbusWrite1Register+0x80>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6859      	ldr	r1, [r3, #4]
 8001698:	88fb      	ldrh	r3, [r7, #6]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	440b      	add	r3, r1
 800169e:	7f12      	ldrb	r2, [r2, #28]
 80016a0:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <modbusWrite1Register+0x80>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <modbusWrite1Register+0x80>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6859      	ldr	r1, [r3, #4]
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	440b      	add	r3, r1
 80016b2:	7f52      	ldrb	r2, [r2, #29]
 80016b4:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <modbusWrite1Register+0x80>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 80016be:	4b07      	ldr	r3, [pc, #28]	; (80016dc <modbusWrite1Register+0x80>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 80016c4:	2208      	movs	r2, #8
 80016c6:	4619      	mov	r1, r3
 80016c8:	f007 fdf8 	bl	80092bc <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <modbusWrite1Register+0x80>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2205      	movs	r2, #5
 80016d2:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	2000029c 	.word	0x2000029c

080016e0 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80016e0:	b590      	push	{r4, r7, lr}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80016e6:	4b3a      	ldr	r3, [pc, #232]	; (80017d0 <modbusRead1Register+0xf0>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	7f1b      	ldrb	r3, [r3, #28]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	4b37      	ldr	r3, [pc, #220]	; (80017d0 <modbusRead1Register+0xf0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	7f5b      	ldrb	r3, [r3, #29]
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	4413      	add	r3, r2
 80016fc:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 80016fe:	4b34      	ldr	r3, [pc, #208]	; (80017d0 <modbusRead1Register+0xf0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	7e9b      	ldrb	r3, [r3, #26]
 8001704:	b29b      	uxth	r3, r3
 8001706:	021b      	lsls	r3, r3, #8
 8001708:	b29a      	uxth	r2, r3
 800170a:	4b31      	ldr	r3, [pc, #196]	; (80017d0 <modbusRead1Register+0xf0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	7edb      	ldrb	r3, [r3, #27]
 8001710:	b29b      	uxth	r3, r3
 8001712:	4413      	add	r3, r2
 8001714:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d002      	beq.n	8001722 <modbusRead1Register+0x42>
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	2b7d      	cmp	r3, #125	; 0x7d
 8001720:	d903      	bls.n	800172a <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001722:	2003      	movs	r0, #3
 8001724:	f000 f856 	bl	80017d4 <ModbusErrorReply>
		 return;
 8001728:	e04e      	b.n	80017c8 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800172a:	88ba      	ldrh	r2, [r7, #4]
 800172c:	4b28      	ldr	r3, [pc, #160]	; (80017d0 <modbusRead1Register+0xf0>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	429a      	cmp	r2, r3
 8001734:	d808      	bhi.n	8001748 <modbusRead1Register+0x68>
 8001736:	88ba      	ldrh	r2, [r7, #4]
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	4413      	add	r3, r2
 800173c:	461a      	mov	r2, r3
 800173e:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <modbusRead1Register+0xf0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	429a      	cmp	r2, r3
 8001746:	d903      	bls.n	8001750 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001748:	2002      	movs	r0, #2
 800174a:	f000 f843 	bl	80017d4 <ModbusErrorReply>
		 return;
 800174e:	e03b      	b.n	80017c8 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001750:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <modbusRead1Register+0xf0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2203      	movs	r2, #3
 8001756:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	b2da      	uxtb	r2, r3
 800175e:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <modbusRead1Register+0xf0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	0052      	lsls	r2, r2, #1
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 800176a:	2400      	movs	r4, #0
 800176c:	e020      	b.n	80017b0 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 800176e:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <modbusRead1Register+0xf0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	88bb      	ldrh	r3, [r7, #4]
 8001776:	4423      	add	r3, r4
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	18d1      	adds	r1, r2, r3
 800177c:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <modbusRead1Register+0xf0>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	1c63      	adds	r3, r4, #1
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	7849      	ldrb	r1, [r1, #1]
 8001786:	4413      	add	r3, r2
 8001788:	460a      	mov	r2, r1
 800178a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <modbusRead1Register+0xf0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	88bb      	ldrh	r3, [r7, #4]
 8001796:	4423      	add	r3, r4
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	18d1      	adds	r1, r2, r3
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <modbusRead1Register+0xf0>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	0063      	lsls	r3, r4, #1
 80017a2:	3303      	adds	r3, #3
 80017a4:	7809      	ldrb	r1, [r1, #0]
 80017a6:	4413      	add	r3, r2
 80017a8:	460a      	mov	r2, r1
 80017aa:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 80017ae:	3401      	adds	r4, #1
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	429c      	cmp	r4, r3
 80017b4:	dbdb      	blt.n	800176e <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80017b6:	88fb      	ldrh	r3, [r7, #6]
 80017b8:	3301      	adds	r3, #1
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <modbusRead1Register+0xf0>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	0052      	lsls	r2, r2, #1
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd90      	pop	{r4, r7, pc}
 80017ce:	bf00      	nop
 80017d0:	2000029c 	.word	0x2000029c

080017d4 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80017de:	4b0d      	ldr	r3, [pc, #52]	; (8001814 <ModbusErrorReply+0x40>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	7e5a      	ldrb	r2, [r3, #25]
 80017e4:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <ModbusErrorReply+0x40>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <ModbusErrorReply+0x40>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	79fa      	ldrb	r2, [r7, #7]
 80017f8:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <ModbusErrorReply+0x40>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2202      	movs	r2, #2
 8001802:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	2000029c 	.word	0x2000029c

08001818 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 800181c:	4b09      	ldr	r3, [pc, #36]	; (8001844 <Modbus_frame_response+0x2c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	7e5b      	ldrb	r3, [r3, #25]
 8001822:	2b03      	cmp	r3, #3
 8001824:	d004      	beq.n	8001830 <Modbus_frame_response+0x18>
 8001826:	2b06      	cmp	r3, #6
 8001828:	d105      	bne.n	8001836 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800182a:	f7ff ff17 	bl	800165c <modbusWrite1Register>
		break;
 800182e:	e006      	b.n	800183e <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001830:	f7ff ff56 	bl	80016e0 <modbusRead1Register>
		break;
 8001834:	e003      	b.n	800183e <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001836:	2001      	movs	r0, #1
 8001838:	f7ff ffcc 	bl	80017d4 <ModbusErrorReply>
		break;
 800183c:	bf00      	nop

	}
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	2000029c 	.word	0x2000029c

08001848 <Modbus_Emission>:

void Modbus_Emission()
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800184e:	4b3d      	ldr	r3, [pc, #244]	; (8001944 <Modbus_Emission+0xfc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b20      	cmp	r3, #32
 800185c:	d15e      	bne.n	800191c <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 800185e:	4b39      	ldr	r3, [pc, #228]	; (8001944 <Modbus_Emission+0xfc>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4b38      	ldr	r3, [pc, #224]	; (8001944 <Modbus_Emission+0xfc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	7812      	ldrb	r2, [r2, #0]
 8001868:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 800186c:	4b35      	ldr	r3, [pc, #212]	; (8001944 <Modbus_Emission+0xfc>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8001874:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001876:	4b33      	ldr	r3, [pc, #204]	; (8001944 <Modbus_Emission+0xfc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 800187e:	4b31      	ldr	r3, [pc, #196]	; (8001944 <Modbus_Emission+0xfc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 8001886:	461a      	mov	r2, r3
 8001888:	f007 fd18 	bl	80092bc <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 800188c:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <Modbus_Emission+0xfc>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001894:	b29a      	uxth	r2, r3
 8001896:	4b2b      	ldr	r3, [pc, #172]	; (8001944 <Modbus_Emission+0xfc>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	3203      	adds	r2, #3
 800189c:	b292      	uxth	r2, r2
 800189e:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80018a2:	4b28      	ldr	r3, [pc, #160]	; (8001944 <Modbus_Emission+0xfc>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80018aa:	4b26      	ldr	r3, [pc, #152]	; (8001944 <Modbus_Emission+0xfc>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80018b2:	3b02      	subs	r3, #2
 80018b4:	4619      	mov	r1, r3
 80018b6:	4610      	mov	r0, r2
 80018b8:	f7ff fd92 	bl	80013e0 <CRC16>
 80018bc:	4603      	mov	r3, r0
 80018be:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80018c0:	4b20      	ldr	r3, [pc, #128]	; (8001944 <Modbus_Emission+0xfc>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4b1f      	ldr	r3, [pc, #124]	; (8001944 <Modbus_Emission+0xfc>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80018cc:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80018ce:	7939      	ldrb	r1, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	460a      	mov	r2, r1
 80018d4:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80018d8:	4b1a      	ldr	r3, [pc, #104]	; (8001944 <Modbus_Emission+0xfc>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <Modbus_Emission+0xfc>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80018e4:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80018e6:	7979      	ldrb	r1, [r7, #5]
 80018e8:	4413      	add	r3, r2
 80018ea:	460a      	mov	r2, r1
 80018ec:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80018f0:	4b14      	ldr	r3, [pc, #80]	; (8001944 <Modbus_Emission+0xfc>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b20      	cmp	r3, #32
 80018fe:	d10d      	bne.n	800191c <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001900:	4b10      	ldr	r3, [pc, #64]	; (8001944 <Modbus_Emission+0xfc>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <Modbus_Emission+0xfc>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800190e:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <Modbus_Emission+0xfc>)
 8001910:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001912:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001916:	461a      	mov	r2, r3
 8001918:	f006 fb3e 	bl	8007f98 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 800191c:	4b09      	ldr	r3, [pc, #36]	; (8001944 <Modbus_Emission+0xfc>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2200      	movs	r2, #0
 8001922:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <Modbus_Emission+0xfc>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2200      	movs	r2, #0
 800192a:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <Modbus_Emission+0xfc>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2200      	movs	r2, #0
 8001932:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <Modbus_Emission+0xfc>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2202      	movs	r2, #2
 800193a:	761a      	strb	r2, [r3, #24]
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	2000029c 	.word	0x2000029c

08001948 <PIDSetup>:
 */

#include "PIDController.h"

void PIDSetup(PID* temp,float32_t Kp, float32_t Ki, float32_t Kd, float32_t tolerance)
{
 8001948:	b480      	push	{r7}
 800194a:	b087      	sub	sp, #28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6178      	str	r0, [r7, #20]
 8001950:	ed87 0a04 	vstr	s0, [r7, #16]
 8001954:	edc7 0a03 	vstr	s1, [r7, #12]
 8001958:	ed87 1a02 	vstr	s2, [r7, #8]
 800195c:	edc7 1a01 	vstr	s3, [r7, #4]
	temp->Kp = Kp;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	601a      	str	r2, [r3, #0]
	temp->Ki = Ki;
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	605a      	str	r2, [r3, #4]
	temp->Kd = Kd;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	609a      	str	r2, [r3, #8]
	temp->tolerance = tolerance;
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	629a      	str	r2, [r3, #40]	; 0x28
	temp->U = 0;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
	temp->Delta_U = 0;
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	2200      	movs	r2, #0
 8001982:	611a      	str	r2, [r3, #16]
	temp->U_minus = 0;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2200      	movs	r2, #0
 8001988:	615a      	str	r2, [r3, #20]
	temp->Error = 0;
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]
	temp->Error_minus = 0;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	2200      	movs	r2, #0
 8001994:	61da      	str	r2, [r3, #28]
	temp->Error_minus2 = 0;
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	2200      	movs	r2, #0
 800199a:	621a      	str	r2, [r3, #32]
}
 800199c:	bf00      	nop
 800199e:	371c      	adds	r7, #28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <PIDRun>:

void PIDRun(PID* temp, float32_t Feedback, float32_t Ref)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80019b4:	edc7 0a01 	vstr	s1, [r7, #4]
	temp->Error = Ref - Feedback;
 80019b8:	ed97 7a01 	vldr	s14, [r7, #4]
 80019bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80019c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019c8:	ee17 2a90 	vmov	r2, s15
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	619a      	str	r2, [r3, #24]
	if(temp->Error > 0)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	dd04      	ble.n	80019e2 <PIDRun+0x3a>
	{
		temp->MotorDir = 0;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80019e0:	e007      	b.n	80019f2 <PIDRun+0x4a>
	}
	else if (temp->Error < 0)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	da03      	bge.n	80019f2 <PIDRun+0x4a>
	{
		temp->MotorDir = 1;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
	//U Update
	temp->Delta_U = (temp->Kp + temp->Ki + temp->Kd) * temp->Error
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	ed93 7a00 	vldr	s14, [r3]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80019fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	ee07 3a90 	vmov	s15, r3
 8001a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a18:	ee27 7a27 	vmul.f32	s14, s14, s15
			  - (temp->Kp + 2*temp->Kd) * temp->Error_minus
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	edd3 6a00 	vldr	s13, [r3]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a28:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a2c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	ee07 3a90 	vmov	s15, r3
 8001a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a40:	ee37 7a67 	vsub.f32	s14, s14, s15
			  + temp->Kd * temp->Error_minus2;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	ee07 3a90 	vmov	s15, r3
 8001a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
	temp->Delta_U = (temp->Kp + temp->Ki + temp->Kd) * temp->Error
 8001a5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a62:	ee17 2a90 	vmov	r2, s15
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	611a      	str	r2, [r3, #16]
	temp->U = temp->Delta_U + temp->U_minus;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	691a      	ldr	r2, [r3, #16]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	441a      	add	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	60da      	str	r2, [r3, #12]
	temp->U_minus = temp->U;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	68da      	ldr	r2, [r3, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	615a      	str	r2, [r3, #20]
	//Error Update
	temp->Error_minus2 = temp->Error_minus;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	69da      	ldr	r2, [r3, #28]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	621a      	str	r2, [r3, #32]
	temp->Error_minus = temp->Error;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	699a      	ldr	r2, [r3, #24]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	61da      	str	r2, [r3, #28]
}
 8001a90:	bf00      	nop
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <CascadeLoop>:

void CascadeLoop(PID* Pos, PID* Velo, float32_t PosFeedback, float32_t VeloFeedback, QuinticTraj* TrajReference, float32_t tolerance)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	; 0x28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	61f8      	str	r0, [r7, #28]
 8001aa4:	61b9      	str	r1, [r7, #24]
 8001aa6:	ed87 0a05 	vstr	s0, [r7, #20]
 8001aaa:	edc7 0a04 	vstr	s1, [r7, #16]
 8001aae:	60fa      	str	r2, [r7, #12]
 8001ab0:	ed87 1a02 	vstr	s2, [r7, #8]
	if((fabs(TrajReference->current_pos - PosFeedback) <= 1 ) && (TrajReference->time >= TrajReference->TotalTime))
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	ee07 3a90 	vmov	s15, r3
 8001abc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ac0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ac4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ac8:	eef0 7ae7 	vabs.f32	s15, s15
 8001acc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad8:	d825      	bhi.n	8001b26 <CascadeLoop+0x8a>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001ae6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aee:	db1a      	blt.n	8001b26 <CascadeLoop+0x8a>
	{
		Pos->IsSetPoint = 1;
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		Velo->U = 0;
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
		Pos->ESS = TrajReference->current_pos - PosFeedback;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	ee07 3a90 	vmov	s15, r3
 8001b06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b16:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b1a:	793b      	ldrb	r3, [r7, #4]
 8001b1c:	b25a      	sxtb	r2, r3
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8001b24:	e022      	b.n	8001b6c <CascadeLoop+0xd0>
	}
	else
	{
		Pos->IsSetPoint = 0;
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		PIDRun(Pos, PosFeedback, TrajReference->current_pos);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	ee07 3a90 	vmov	s15, r3
 8001b36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b3a:	eef0 0a67 	vmov.f32	s1, s15
 8001b3e:	ed97 0a05 	vldr	s0, [r7, #20]
 8001b42:	69f8      	ldr	r0, [r7, #28]
 8001b44:	f7ff ff30 	bl	80019a8 <PIDRun>
		float32_t veloRef = Pos->U + TrajReference->current_velo;
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	4413      	add	r3, r2
 8001b52:	ee07 3a90 	vmov	s15, r3
 8001b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b5a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		PIDRun(Velo, VeloFeedback, veloRef);
 8001b5e:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8001b62:	ed97 0a04 	vldr	s0, [r7, #16]
 8001b66:	69b8      	ldr	r0, [r7, #24]
 8001b68:	f7ff ff1e 	bl	80019a8 <PIDRun>
	}
	if(Velo->U > 40000)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001b74:	4293      	cmp	r3, r2
 8001b76:	dd04      	ble.n	8001b82 <CascadeLoop+0xe6>
	{
		Velo->U = 40000;
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001b7e:	60da      	str	r2, [r3, #12]
	{
		Velo->U = -40000;
	}


}
 8001b80:	e007      	b.n	8001b92 <CascadeLoop+0xf6>
	else if (Velo->U < -40000)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	4a05      	ldr	r2, [pc, #20]	; (8001b9c <CascadeLoop+0x100>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	da02      	bge.n	8001b92 <CascadeLoop+0xf6>
		Velo->U = -40000;
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	4a03      	ldr	r2, [pc, #12]	; (8001b9c <CascadeLoop+0x100>)
 8001b90:	60da      	str	r2, [r3, #12]
}
 8001b92:	bf00      	nop
 8001b94:	3728      	adds	r7, #40	; 0x28
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	ffff63c0 	.word	0xffff63c0

08001ba0 <QuinticSetup>:
 *      Author: tanawatp
 */
#include "QuinticTrajectory.h"

void QuinticSetup(QuinticTraj* temp, float32_t vmax, float32_t amax)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	ed87 0a02 	vstr	s0, [r7, #8]
 8001bac:	edc7 0a01 	vstr	s1, [r7, #4]
	temp->v_max = vmax;
 8001bb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bb8:	ee17 2a90 	vmov	r2, s15
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	619a      	str	r2, [r3, #24]
	temp->a_max = amax;
 8001bc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bc8:	ee17 2a90 	vmov	r2, s15
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	61da      	str	r2, [r3, #28]
	temp->State = Ready;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	//temp->final_pos = 300;
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	0000      	movs	r0, r0
	...

08001be8 <QuinticGenerator>:
void QuinticGenerator(QuinticTraj* temp,int8_t ess)
{
 8001be8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	70fb      	strb	r3, [r7, #3]
	//temp->final_pos = temp->final_pos * 8192/120;
	temp->displacement = temp->final_pos - (temp->start_pos+ess);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6819      	ldr	r1, [r3, #0]
 8001bfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c02:	440b      	add	r3, r1
 8001c04:	1ad2      	subs	r2, r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	609a      	str	r2, [r3, #8]
	if(temp->displacement<0)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	da04      	bge.n	8001c1c <QuinticGenerator+0x34>
	{
		temp->Dir = 1;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2020 	strb.w	r2, [r3, #32]
 8001c1a:	e007      	b.n	8001c2c <QuinticGenerator+0x44>
	}
	else if (temp->displacement>0)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	dd03      	ble.n	8001c2c <QuinticGenerator+0x44>
	{
		temp->Dir = 0;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2020 	strb.w	r2, [r3, #32]
	}
	temp->timeAcc = 0.5*sqrtf(23.094*fabs(temp->displacement)/temp->a_max);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe fc23 	bl	800047c <__aeabi_i2d>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4690      	mov	r8, r2
 8001c3c:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001c40:	a388      	add	r3, pc, #544	; (adr r3, 8001e64 <QuinticGenerator+0x27c>)
 8001c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c46:	4640      	mov	r0, r8
 8001c48:	4649      	mov	r1, r9
 8001c4a:	f7fe fc81 	bl	8000550 <__aeabi_dmul>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4690      	mov	r8, r2
 8001c54:	4699      	mov	r9, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7fe fc0e 	bl	800047c <__aeabi_i2d>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4640      	mov	r0, r8
 8001c66:	4649      	mov	r1, r9
 8001c68:	f7fe fd9c 	bl	80007a4 <__aeabi_ddiv>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	f7fe ff44 	bl	8000b00 <__aeabi_d2f>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	ee00 3a10 	vmov	s0, r3
 8001c7e:	f007 fc27 	bl	80094d0 <sqrtf>
 8001c82:	ee10 3a10 	vmov	r3, s0
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe fc0a 	bl	80004a0 <__aeabi_f2d>
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	4b6f      	ldr	r3, [pc, #444]	; (8001e50 <QuinticGenerator+0x268>)
 8001c92:	f7fe fc5d 	bl	8000550 <__aeabi_dmul>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f7fe ff2f 	bl	8000b00 <__aeabi_d2f>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	645a      	str	r2, [r3, #68]	; 0x44
	temp->timeVelo = 1.875*fabs(temp->displacement)/temp->v_max;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fbe5 	bl	800047c <__aeabi_i2d>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4614      	mov	r4, r2
 8001cb8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	4b64      	ldr	r3, [pc, #400]	; (8001e54 <QuinticGenerator+0x26c>)
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	4629      	mov	r1, r5
 8001cc6:	f7fe fc43 	bl	8000550 <__aeabi_dmul>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4614      	mov	r4, r2
 8001cd0:	461d      	mov	r5, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fbd0 	bl	800047c <__aeabi_i2d>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4620      	mov	r0, r4
 8001ce2:	4629      	mov	r1, r5
 8001ce4:	f7fe fd5e 	bl	80007a4 <__aeabi_ddiv>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4610      	mov	r0, r2
 8001cee:	4619      	mov	r1, r3
 8001cf0:	f7fe ff06 	bl	8000b00 <__aeabi_d2f>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	649a      	str	r2, [r3, #72]	; 0x48
	temp->TotalTime = MAX(temp->timeAcc,temp->timeVelo);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001d06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0e:	dd02      	ble.n	8001d16 <QuinticGenerator+0x12e>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d14:	e001      	b.n	8001d1a <QuinticGenerator+0x132>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	63d3      	str	r3, [r2, #60]	; 0x3c
	temp->coeff[0] = temp->start_pos;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	ee07 3a90 	vmov	s15, r3
 8001d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	temp->coeff[1] = 0;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	629a      	str	r2, [r3, #40]	; 0x28
	temp->coeff[2] = 0;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	62da      	str	r2, [r3, #44]	; 0x2c
	temp->coeff[3] = 10.0*temp->displacement/powf(temp->TotalTime,3);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fb99 	bl	800047c <__aeabi_i2d>
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	4b42      	ldr	r3, [pc, #264]	; (8001e58 <QuinticGenerator+0x270>)
 8001d50:	f7fe fbfe 	bl	8000550 <__aeabi_dmul>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4614      	mov	r4, r2
 8001d5a:	461d      	mov	r5, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001d62:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001d66:	eeb0 0a67 	vmov.f32	s0, s15
 8001d6a:	f007 fb59 	bl	8009420 <powf>
 8001d6e:	ee10 3a10 	vmov	r3, s0
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fb94 	bl	80004a0 <__aeabi_f2d>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4620      	mov	r0, r4
 8001d7e:	4629      	mov	r1, r5
 8001d80:	f7fe fd10 	bl	80007a4 <__aeabi_ddiv>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	f7fe feb8 	bl	8000b00 <__aeabi_d2f>
 8001d90:	4602      	mov	r2, r0
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	631a      	str	r2, [r3, #48]	; 0x30
	temp->coeff[4] = -15.0*temp->displacement/powf(temp->TotalTime,4);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fb6e 	bl	800047c <__aeabi_i2d>
 8001da0:	f04f 0200 	mov.w	r2, #0
 8001da4:	4b2d      	ldr	r3, [pc, #180]	; (8001e5c <QuinticGenerator+0x274>)
 8001da6:	f7fe fbd3 	bl	8000550 <__aeabi_dmul>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4614      	mov	r4, r2
 8001db0:	461d      	mov	r5, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001db8:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001dbc:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc0:	f007 fb2e 	bl	8009420 <powf>
 8001dc4:	ee10 3a10 	vmov	r3, s0
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fb69 	bl	80004a0 <__aeabi_f2d>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	4629      	mov	r1, r5
 8001dd6:	f7fe fce5 	bl	80007a4 <__aeabi_ddiv>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	f7fe fe8d 	bl	8000b00 <__aeabi_d2f>
 8001de6:	4602      	mov	r2, r0
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	635a      	str	r2, [r3, #52]	; 0x34
	temp->coeff[5] = 6.0*temp->displacement/powf(temp->TotalTime,5);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fb43 	bl	800047c <__aeabi_i2d>
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <QuinticGenerator+0x278>)
 8001dfc:	f7fe fba8 	bl	8000550 <__aeabi_dmul>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4614      	mov	r4, r2
 8001e06:	461d      	mov	r5, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001e0e:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8001e12:	eeb0 0a67 	vmov.f32	s0, s15
 8001e16:	f007 fb03 	bl	8009420 <powf>
 8001e1a:	ee10 3a10 	vmov	r3, s0
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fb3e 	bl	80004a0 <__aeabi_f2d>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4620      	mov	r0, r4
 8001e2a:	4629      	mov	r1, r5
 8001e2c:	f7fe fcba 	bl	80007a4 <__aeabi_ddiv>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4610      	mov	r0, r2
 8001e36:	4619      	mov	r1, r3
 8001e38:	f7fe fe62 	bl	8000b00 <__aeabi_d2f>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e4c:	f3af 8000 	nop.w
 8001e50:	3fe00000 	.word	0x3fe00000
 8001e54:	3ffe0000 	.word	0x3ffe0000
 8001e58:	40240000 	.word	0x40240000
 8001e5c:	c02e0000 	.word	0xc02e0000
 8001e60:	40180000 	.word	0x40180000
 8001e64:	624dd2f2 	.word	0x624dd2f2
 8001e68:	40371810 	.word	0x40371810

08001e6c <QuinticEvaluator>:
void QuinticEvaluator(QuinticTraj* temp)
{
 8001e6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e70:	ed2d 8b02 	vpush	{d8}
 8001e74:	b084      	sub	sp, #16
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
	float32_t time = temp->time;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	60fb      	str	r3, [r7, #12]
	temp->current_pos = temp->coeff[0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
						+ temp->coeff[1]*time
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001e8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e94:	ee37 8a27 	vadd.f32	s16, s14, s15
						+ temp->coeff[2]*powf(time,2)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	edd3 8a0b 	vldr	s17, [r3, #44]	; 0x2c
 8001e9e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001ea2:	ed97 0a03 	vldr	s0, [r7, #12]
 8001ea6:	f007 fabb 	bl	8009420 <powf>
 8001eaa:	eef0 7a40 	vmov.f32	s15, s0
 8001eae:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001eb2:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[3]*powf(time,3)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	edd3 8a0c 	vldr	s17, [r3, #48]	; 0x30
 8001ebc:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001ec0:	ed97 0a03 	vldr	s0, [r7, #12]
 8001ec4:	f007 faac 	bl	8009420 <powf>
 8001ec8:	eef0 7a40 	vmov.f32	s15, s0
 8001ecc:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001ed0:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[4]*powf(time,4)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	edd3 8a0d 	vldr	s17, [r3, #52]	; 0x34
 8001eda:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001ede:	ed97 0a03 	vldr	s0, [r7, #12]
 8001ee2:	f007 fa9d 	bl	8009420 <powf>
 8001ee6:	eef0 7a40 	vmov.f32	s15, s0
 8001eea:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001eee:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[5]*powf(time,5);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	edd3 8a0e 	vldr	s17, [r3, #56]	; 0x38
 8001ef8:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8001efc:	ed97 0a03 	vldr	s0, [r7, #12]
 8001f00:	f007 fa8e 	bl	8009420 <powf>
 8001f04:	eef0 7a40 	vmov.f32	s15, s0
 8001f08:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001f0c:	ee78 7a27 	vadd.f32	s15, s16, s15
	temp->current_pos = temp->coeff[0]
 8001f10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f14:	ee17 2a90 	vmov	r2, s15
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	60da      	str	r2, [r3, #12]

	temp->current_velo = temp->coeff[1]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe fabd 	bl	80004a0 <__aeabi_f2d>
 8001f26:	4604      	mov	r4, r0
 8001f28:	460d      	mov	r5, r1
						+ 2.0*temp->coeff[2]*time
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fab6 	bl	80004a0 <__aeabi_f2d>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	f7fe f954 	bl	80001e4 <__adddf3>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4690      	mov	r8, r2
 8001f42:	4699      	mov	r9, r3
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f7fe faab 	bl	80004a0 <__aeabi_f2d>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4640      	mov	r0, r8
 8001f50:	4649      	mov	r1, r9
 8001f52:	f7fe fafd 	bl	8000550 <__aeabi_dmul>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	4629      	mov	r1, r5
 8001f5e:	f7fe f941 	bl	80001e4 <__adddf3>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4614      	mov	r4, r2
 8001f68:	461d      	mov	r5, r3
						+ 3.0*temp->coeff[3]*powf(time,2)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe fa96 	bl	80004a0 <__aeabi_f2d>
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	4b8e      	ldr	r3, [pc, #568]	; (80021b4 <QuinticEvaluator+0x348>)
 8001f7a:	f7fe fae9 	bl	8000550 <__aeabi_dmul>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4690      	mov	r8, r2
 8001f84:	4699      	mov	r9, r3
 8001f86:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001f8a:	ed97 0a03 	vldr	s0, [r7, #12]
 8001f8e:	f007 fa47 	bl	8009420 <powf>
 8001f92:	ee10 3a10 	vmov	r3, s0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe fa82 	bl	80004a0 <__aeabi_f2d>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4640      	mov	r0, r8
 8001fa2:	4649      	mov	r1, r9
 8001fa4:	f7fe fad4 	bl	8000550 <__aeabi_dmul>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4620      	mov	r0, r4
 8001fae:	4629      	mov	r1, r5
 8001fb0:	f7fe f918 	bl	80001e4 <__adddf3>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4614      	mov	r4, r2
 8001fba:	461d      	mov	r5, r3
						+ 4.0*temp->coeff[4]*powf(time,3)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe fa6d 	bl	80004a0 <__aeabi_f2d>
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	4b7b      	ldr	r3, [pc, #492]	; (80021b8 <QuinticEvaluator+0x34c>)
 8001fcc:	f7fe fac0 	bl	8000550 <__aeabi_dmul>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4690      	mov	r8, r2
 8001fd6:	4699      	mov	r9, r3
 8001fd8:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001fdc:	ed97 0a03 	vldr	s0, [r7, #12]
 8001fe0:	f007 fa1e 	bl	8009420 <powf>
 8001fe4:	ee10 3a10 	vmov	r3, s0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe fa59 	bl	80004a0 <__aeabi_f2d>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	4640      	mov	r0, r8
 8001ff4:	4649      	mov	r1, r9
 8001ff6:	f7fe faab 	bl	8000550 <__aeabi_dmul>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	4620      	mov	r0, r4
 8002000:	4629      	mov	r1, r5
 8002002:	f7fe f8ef 	bl	80001e4 <__adddf3>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4614      	mov	r4, r2
 800200c:	461d      	mov	r5, r3
						+ 5.0*temp->coeff[5]*powf(time,4);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fa44 	bl	80004a0 <__aeabi_f2d>
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	4b67      	ldr	r3, [pc, #412]	; (80021bc <QuinticEvaluator+0x350>)
 800201e:	f7fe fa97 	bl	8000550 <__aeabi_dmul>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4690      	mov	r8, r2
 8002028:	4699      	mov	r9, r3
 800202a:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800202e:	ed97 0a03 	vldr	s0, [r7, #12]
 8002032:	f007 f9f5 	bl	8009420 <powf>
 8002036:	ee10 3a10 	vmov	r3, s0
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe fa30 	bl	80004a0 <__aeabi_f2d>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4640      	mov	r0, r8
 8002046:	4649      	mov	r1, r9
 8002048:	f7fe fa82 	bl	8000550 <__aeabi_dmul>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4620      	mov	r0, r4
 8002052:	4629      	mov	r1, r5
 8002054:	f7fe f8c6 	bl	80001e4 <__adddf3>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
	temp->current_velo = temp->coeff[1]
 800205c:	4610      	mov	r0, r2
 800205e:	4619      	mov	r1, r3
 8002060:	f7fe fd26 	bl	8000ab0 <__aeabi_d2iz>
 8002064:	4602      	mov	r2, r0
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	611a      	str	r2, [r3, #16]

	temp->current_acc = 2.0*temp->coeff[2]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fa16 	bl	80004a0 <__aeabi_f2d>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	f7fe f8b4 	bl	80001e4 <__adddf3>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4614      	mov	r4, r2
 8002082:	461d      	mov	r5, r3
						+ 6.0*temp->coeff[3]*time
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe fa09 	bl	80004a0 <__aeabi_f2d>
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	4b4b      	ldr	r3, [pc, #300]	; (80021c0 <QuinticEvaluator+0x354>)
 8002094:	f7fe fa5c 	bl	8000550 <__aeabi_dmul>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4690      	mov	r8, r2
 800209e:	4699      	mov	r9, r3
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f7fe f9fd 	bl	80004a0 <__aeabi_f2d>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4640      	mov	r0, r8
 80020ac:	4649      	mov	r1, r9
 80020ae:	f7fe fa4f 	bl	8000550 <__aeabi_dmul>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4620      	mov	r0, r4
 80020b8:	4629      	mov	r1, r5
 80020ba:	f7fe f893 	bl	80001e4 <__adddf3>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4614      	mov	r4, r2
 80020c4:	461d      	mov	r5, r3
						+ 12.0*temp->coeff[4]*powf(time,2)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe f9e8 	bl	80004a0 <__aeabi_f2d>
 80020d0:	f04f 0200 	mov.w	r2, #0
 80020d4:	4b3b      	ldr	r3, [pc, #236]	; (80021c4 <QuinticEvaluator+0x358>)
 80020d6:	f7fe fa3b 	bl	8000550 <__aeabi_dmul>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4690      	mov	r8, r2
 80020e0:	4699      	mov	r9, r3
 80020e2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80020e6:	ed97 0a03 	vldr	s0, [r7, #12]
 80020ea:	f007 f999 	bl	8009420 <powf>
 80020ee:	ee10 3a10 	vmov	r3, s0
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe f9d4 	bl	80004a0 <__aeabi_f2d>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4640      	mov	r0, r8
 80020fe:	4649      	mov	r1, r9
 8002100:	f7fe fa26 	bl	8000550 <__aeabi_dmul>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4620      	mov	r0, r4
 800210a:	4629      	mov	r1, r5
 800210c:	f7fe f86a 	bl	80001e4 <__adddf3>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4614      	mov	r4, r2
 8002116:	461d      	mov	r5, r3
						+ 20.0*temp->coeff[5]*powf(time,3);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe f9bf 	bl	80004a0 <__aeabi_f2d>
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	4b28      	ldr	r3, [pc, #160]	; (80021c8 <QuinticEvaluator+0x35c>)
 8002128:	f7fe fa12 	bl	8000550 <__aeabi_dmul>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4690      	mov	r8, r2
 8002132:	4699      	mov	r9, r3
 8002134:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8002138:	ed97 0a03 	vldr	s0, [r7, #12]
 800213c:	f007 f970 	bl	8009420 <powf>
 8002140:	ee10 3a10 	vmov	r3, s0
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe f9ab 	bl	80004a0 <__aeabi_f2d>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4640      	mov	r0, r8
 8002150:	4649      	mov	r1, r9
 8002152:	f7fe f9fd 	bl	8000550 <__aeabi_dmul>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4620      	mov	r0, r4
 800215c:	4629      	mov	r1, r5
 800215e:	f7fe f841 	bl	80001e4 <__adddf3>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
	temp->current_acc = 2.0*temp->coeff[2]
 8002166:	4610      	mov	r0, r2
 8002168:	4619      	mov	r1, r3
 800216a:	f7fe fca1 	bl	8000ab0 <__aeabi_d2iz>
 800216e:	4602      	mov	r2, r0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	615a      	str	r2, [r3, #20]
	if(time >= temp->TotalTime)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800217a:	ed97 7a03 	vldr	s14, [r7, #12]
 800217e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002186:	da00      	bge.n	800218a <QuinticEvaluator+0x31e>
		temp->start_pos = temp->final_pos;
		temp->current_pos = temp->start_pos;
		temp->current_velo = 0;
		temp->current_acc = 0;
	}
}
 8002188:	e00d      	b.n	80021a6 <QuinticEvaluator+0x33a>
		temp->start_pos = temp->final_pos;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	601a      	str	r2, [r3, #0]
		temp->current_pos = temp->start_pos;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	60da      	str	r2, [r3, #12]
		temp->current_velo = 0;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	611a      	str	r2, [r3, #16]
		temp->current_acc = 0;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	615a      	str	r2, [r3, #20]
}
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	ecbd 8b02 	vpop	{d8}
 80021b0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80021b4:	40080000 	.word	0x40080000
 80021b8:	40100000 	.word	0x40100000
 80021bc:	40140000 	.word	0x40140000
 80021c0:	40180000 	.word	0x40180000
 80021c4:	40280000 	.word	0x40280000
 80021c8:	40340000 	.word	0x40340000

080021cc <QuinticRun>:
void QuinticRun(QuinticTraj* temp, int8_t ess, float32_t dt)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	460b      	mov	r3, r1
 80021d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80021da:	72fb      	strb	r3, [r7, #11]
	switch(temp->State)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d020      	beq.n	8002228 <QuinticRun+0x5c>
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	dc3d      	bgt.n	8002266 <QuinticRun+0x9a>
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d002      	beq.n	80021f4 <QuinticRun+0x28>
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d00b      	beq.n	800220a <QuinticRun+0x3e>
		{
			temp->State = Ready;
		}
		break;
	}
}
 80021f2:	e038      	b.n	8002266 <QuinticRun+0x9a>
		if(temp->start_pos != temp->final_pos)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d031      	beq.n	8002264 <QuinticRun+0x98>
			temp->State = PreCal;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8002208:	e02c      	b.n	8002264 <QuinticRun+0x98>
		temp->time = 0;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	641a      	str	r2, [r3, #64]	; 0x40
		QuinticGenerator(temp,ess);
 8002212:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002216:	4619      	mov	r1, r3
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f7ff fce5 	bl	8001be8 <QuinticGenerator>
		temp->State = Run;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2202      	movs	r2, #2
 8002222:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8002226:	e01e      	b.n	8002266 <QuinticRun+0x9a>
		temp->time = temp->time + dt;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800222e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		QuinticEvaluator(temp);
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f7ff fe15 	bl	8001e6c <QuinticEvaluator>
		if(temp->time > temp->TotalTime)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800224e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002256:	dc00      	bgt.n	800225a <QuinticRun+0x8e>
		break;
 8002258:	e005      	b.n	8002266 <QuinticRun+0x9a>
			temp->State = Ready;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8002262:	e000      	b.n	8002266 <QuinticRun+0x9a>
		break;
 8002264:	bf00      	nop
}
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <InitReadEncoder>:
//{ //get time in micros
//	return __HAL_TIM_GET_COUNTER(&htim5)+ ReadEncoderParam._micros;
//}

void InitReadEncoder(ReadEncoder* Read, uint32_t samplingtime)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	6039      	str	r1, [r7, #0]
	Read->MotorSetDuty = 0;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]
	Read->Pulse_Compare = 0;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	805a      	strh	r2, [r3, #2]
	Read->DIR = 0;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	711a      	strb	r2, [r3, #4]
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
	...

08002298 <QEIGetFeedback>:
//	//Delay
//	QEIData.data[1] = QEIData.data[0];
//	QEIData.timestamp[1] = QEIData.timestamp[0];
//}
void QEIGetFeedback(QEI* temp, uint16_t Hz)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	807b      	strh	r3, [r7, #2]
	temp->QEIPosition = __HAL_TIM_GET_COUNTER(&htim2);
 80022a4:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <QEIGetFeedback+0x4c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	461a      	mov	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	605a      	str	r2, [r3, #4]
	temp->QEIVelocity = (temp->QEIPosition - temp->QEIPosition_minus) * Hz;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	887a      	ldrh	r2, [r7, #2]
 80022bc:	fb02 f303 	mul.w	r3, r2, r3
 80022c0:	ee07 3a90 	vmov	s15, r3
 80022c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	edc3 7a02 	vstr	s15, [r3, #8]
	temp->QEIPosition_minus = temp->QEIPosition;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	601a      	str	r2, [r3, #0]
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20000cf0 	.word	0x20000cf0

080022e8 <SetHome>:
 *      Author: tanawatp
 */
#include "Storage.h"

void SetHome(OperationVar* temp)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
	temp->HomingKey = 1;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	719a      	strb	r2, [r3, #6]
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,35*500);
 80022f6:	4b07      	ldr	r3, [pc, #28]	; (8002314 <SetHome+0x2c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f244 425c 	movw	r2, #17500	; 0x445c
 80022fe:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 8002300:	2201      	movs	r2, #1
 8002302:	2140      	movs	r1, #64	; 0x40
 8002304:	4804      	ldr	r0, [pc, #16]	; (8002318 <SetHome+0x30>)
 8002306:	f003 fa5b 	bl	80057c0 <HAL_GPIO_WritePin>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000da4 	.word	0x20000da4
 8002318:	40020800 	.word	0x40020800

0800231c <TraySetup>:
 */
#include "TrayLocalization.h"
#include "arm_math.h"

void TraySetup(Tray* temp, float32_t x1, uint16_t y1, float32_t x2, uint16_t y2)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	ed87 0a02 	vstr	s0, [r7, #8]
 8002328:	460b      	mov	r3, r1
 800232a:	edc7 0a00 	vstr	s1, [r7]
 800232e:	80fb      	strh	r3, [r7, #6]
 8002330:	4613      	mov	r3, r2
 8002332:	80bb      	strh	r3, [r7, #4]
	temp->Edge1_X = x1;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	601a      	str	r2, [r3, #0]
	temp->Edge1_Y = y1;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	88fa      	ldrh	r2, [r7, #6]
 800233e:	809a      	strh	r2, [r3, #4]
	temp->Edge2_X = x2;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	609a      	str	r2, [r3, #8]
	temp->Edge2_Y = y2;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	88ba      	ldrh	r2, [r7, #4]
 800234a:	819a      	strh	r2, [r3, #12]
}
 800234c:	bf00      	nop
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <TrayLocalization>:
void TrayLocalization(Tray* temp)
{
 8002358:	b5b0      	push	{r4, r5, r7, lr}
 800235a:	ed2d 8b02 	vpush	{d8}
 800235e:	b090      	sub	sp, #64	; 0x40
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
	float32_t RefX_case1[3] = {10.0,30.0,50.0};
 8002364:	4acc      	ldr	r2, [pc, #816]	; (8002698 <TrayLocalization+0x340>)
 8002366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800236a:	ca07      	ldmia	r2, {r0, r1, r2}
 800236c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t RefY_case1[3] = {40*8192/120,25*8192/120,10*8192/120};
 8002370:	4aca      	ldr	r2, [pc, #808]	; (800269c <TrayLocalization+0x344>)
 8002372:	f107 0320 	add.w	r3, r7, #32
 8002376:	e892 0003 	ldmia.w	r2, {r0, r1}
 800237a:	6018      	str	r0, [r3, #0]
 800237c:	3304      	adds	r3, #4
 800237e:	8019      	strh	r1, [r3, #0]

	float32_t RefX_case2[3] = {10.0,25.0,40.0};
 8002380:	4ac7      	ldr	r2, [pc, #796]	; (80026a0 <TrayLocalization+0x348>)
 8002382:	f107 0314 	add.w	r3, r7, #20
 8002386:	ca07      	ldmia	r2, {r0, r1, r2}
 8002388:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t RefY_case2[3] = {50*8192/120,30*8192/120,10*8192/120};
 800238c:	4ac5      	ldr	r2, [pc, #788]	; (80026a4 <TrayLocalization+0x34c>)
 800238e:	f107 030c 	add.w	r3, r7, #12
 8002392:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002396:	6018      	str	r0, [r3, #0]
 8002398:	3304      	adds	r3, #4
 800239a:	8019      	strh	r1, [r3, #0]
	int16_t deltaX = (temp->Edge2_X - temp->Edge1_X)*8192/120;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	ed93 7a02 	vldr	s14, [r3, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	edd3 7a00 	vldr	s15, [r3]
 80023a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023ac:	ed9f 7abe 	vldr	s14, [pc, #760]	; 80026a8 <TrayLocalization+0x350>
 80023b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023b4:	eddf 6abd 	vldr	s13, [pc, #756]	; 80026ac <TrayLocalization+0x354>
 80023b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023c0:	ee17 3a90 	vmov	r3, s15
 80023c4:	877b      	strh	r3, [r7, #58]	; 0x3a
	int16_t deltaY = temp->Edge2_Y - temp->Edge1_Y;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	899a      	ldrh	r2, [r3, #12]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	889b      	ldrh	r3, [r3, #4]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	873b      	strh	r3, [r7, #56]	; 0x38
	float32_t lengh = sqrt(pow(deltaX,2) + pow(deltaY,2));
 80023d4:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe f84f 	bl	800047c <__aeabi_i2d>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	ed9f 1bab 	vldr	d1, [pc, #684]	; 8002690 <TrayLocalization+0x338>
 80023e6:	ec43 2b10 	vmov	d0, r2, r3
 80023ea:	f006 ff7d 	bl	80092e8 <pow>
 80023ee:	ec55 4b10 	vmov	r4, r5, d0
 80023f2:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe f840 	bl	800047c <__aeabi_i2d>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	ed9f 1ba3 	vldr	d1, [pc, #652]	; 8002690 <TrayLocalization+0x338>
 8002404:	ec43 2b10 	vmov	d0, r2, r3
 8002408:	f006 ff6e 	bl	80092e8 <pow>
 800240c:	ec53 2b10 	vmov	r2, r3, d0
 8002410:	4620      	mov	r0, r4
 8002412:	4629      	mov	r1, r5
 8002414:	f7fd fee6 	bl	80001e4 <__adddf3>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	ec43 2b17 	vmov	d7, r2, r3
 8002420:	eeb0 0a47 	vmov.f32	s0, s14
 8002424:	eef0 0a67 	vmov.f32	s1, s15
 8002428:	f006 ffce 	bl	80093c8 <sqrt>
 800242c:	ec53 2b10 	vmov	r2, r3, d0
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	f7fe fb64 	bl	8000b00 <__aeabi_d2f>
 8002438:	4603      	mov	r3, r0
 800243a:	637b      	str	r3, [r7, #52]	; 0x34

	if((3276 <= lengh)&&(lengh <= 3550))
 800243c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002440:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 80026b0 <TrayLocalization+0x358>
 8002444:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244c:	db0d      	blt.n	800246a <TrayLocalization+0x112>
 800244e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002452:	ed9f 7a98 	vldr	s14, [pc, #608]	; 80026b4 <TrayLocalization+0x35c>
 8002456:	eef4 7ac7 	vcmpe.f32	s15, s14
 800245a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800245e:	d804      	bhi.n	800246a <TrayLocalization+0x112>
	{
		temp->Flag = 1;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8002468:	e01a      	b.n	80024a0 <TrayLocalization+0x148>
	}
	else if ((3960 <= lengh)&&(lengh <= 4233))
 800246a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800246e:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80026b8 <TrayLocalization+0x360>
 8002472:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800247a:	db0d      	blt.n	8002498 <TrayLocalization+0x140>
 800247c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002480:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 80026bc <TrayLocalization+0x364>
 8002484:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248c:	d804      	bhi.n	8002498 <TrayLocalization+0x140>
	{
		temp->Flag = 2;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2202      	movs	r2, #2
 8002492:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8002496:	e003      	b.n	80024a0 <TrayLocalization+0x148>
	}
	else
	{
		temp->Flag = 0;//Lenght Error!!
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	}
	float32_t theta;
	arm_atan2_f32(deltaY,deltaX,&theta);
 80024a0:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80024a4:	ee07 3a90 	vmov	s15, r3
 80024a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ac:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80024b0:	ee07 3a10 	vmov	s14, r3
 80024b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80024b8:	f107 0308 	add.w	r3, r7, #8
 80024bc:	4618      	mov	r0, r3
 80024be:	eef0 0a47 	vmov.f32	s1, s14
 80024c2:	eeb0 0a67 	vmov.f32	s0, s15
 80024c6:	f001 fa41 	bl	800394c <arm_atan2_f32>
	temp->angle = theta;
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	649a      	str	r2, [r3, #72]	; 0x48
	int8_t i;
	int8_t j;
	uint8_t ind = 0;
 80024d0:	2300      	movs	r3, #0
 80024d2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	switch(temp->Flag)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f993 3047 	ldrsb.w	r3, [r3, #71]	; 0x47
 80024dc:	2b02      	cmp	r3, #2
 80024de:	f000 80cd 	beq.w	800267c <TrayLocalization+0x324>
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	f300 81ad 	bgt.w	8002842 <TrayLocalization+0x4ea>
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 81a9 	beq.w	8002840 <TrayLocalization+0x4e8>
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	f040 81a7 	bne.w	8002842 <TrayLocalization+0x4ea>
	{
	case 1:
		for(i=0;i<3;i++)
 80024f4:	2300      	movs	r3, #0
 80024f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80024fa:	e0b9      	b.n	8002670 <TrayLocalization+0x318>
		{
			for(j=0;j<3;j++)
 80024fc:	2300      	movs	r3, #0
 80024fe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002502:	e0a9      	b.n	8002658 <TrayLocalization+0x300>
			{
				temp->Holes_X[ind] = temp->Edge1_X
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	ed93 8a00 	vldr	s16, [r3]
								+ arm_cos_f32(theta)*RefX_case1[i]
 800250a:	edd7 7a02 	vldr	s15, [r7, #8]
 800250e:	eeb0 0a67 	vmov.f32	s0, s15
 8002512:	f001 fc41 	bl	8003d98 <arm_cos_f32>
 8002516:	eeb0 7a40 	vmov.f32	s14, s0
 800251a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	3340      	adds	r3, #64	; 0x40
 8002522:	443b      	add	r3, r7
 8002524:	3b18      	subs	r3, #24
 8002526:	edd3 7a00 	vldr	s15, [r3]
 800252a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800252e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002532:	ee17 0a90 	vmov	r0, s15
 8002536:	f7fd ffb3 	bl	80004a0 <__aeabi_f2d>
 800253a:	4604      	mov	r4, r0
 800253c:	460d      	mov	r5, r1
								- arm_sin_f32(theta)*RefY_case1[j]*120.0/8192.0;
 800253e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002542:	eeb0 0a67 	vmov.f32	s0, s15
 8002546:	f001 fcad 	bl	8003ea4 <arm_sin_f32>
 800254a:	eeb0 7a40 	vmov.f32	s14, s0
 800254e:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	3340      	adds	r3, #64	; 0x40
 8002556:	443b      	add	r3, r7
 8002558:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800255c:	ee07 3a90 	vmov	s15, r3
 8002560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002568:	ee17 0a90 	vmov	r0, s15
 800256c:	f7fd ff98 	bl	80004a0 <__aeabi_f2d>
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	4b52      	ldr	r3, [pc, #328]	; (80026c0 <TrayLocalization+0x368>)
 8002576:	f7fd ffeb 	bl	8000550 <__aeabi_dmul>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	4610      	mov	r0, r2
 8002580:	4619      	mov	r1, r3
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	4b4f      	ldr	r3, [pc, #316]	; (80026c4 <TrayLocalization+0x36c>)
 8002588:	f7fe f90c 	bl	80007a4 <__aeabi_ddiv>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4620      	mov	r0, r4
 8002592:	4629      	mov	r1, r5
 8002594:	f7fd fe24 	bl	80001e0 <__aeabi_dsub>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
				temp->Holes_X[ind] = temp->Edge1_X
 800259c:	f897 403d 	ldrb.w	r4, [r7, #61]	; 0x3d
								- arm_sin_f32(theta)*RefY_case1[j]*120.0/8192.0;
 80025a0:	4610      	mov	r0, r2
 80025a2:	4619      	mov	r1, r3
 80025a4:	f7fe faac 	bl	8000b00 <__aeabi_d2f>
 80025a8:	4601      	mov	r1, r0
				temp->Holes_X[ind] = temp->Edge1_X
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	1d23      	adds	r3, r4, #4
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	6019      	str	r1, [r3, #0]
				temp->Holes_Y[ind] = temp->Edge1_Y
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	889b      	ldrh	r3, [r3, #4]
 80025b8:	ee07 3a90 	vmov	s15, r3
								+ arm_cos_f32(theta)*RefY_case1[j]
 80025bc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80025c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80025c4:	eeb0 0a67 	vmov.f32	s0, s15
 80025c8:	f001 fbe6 	bl	8003d98 <arm_cos_f32>
 80025cc:	eeb0 7a40 	vmov.f32	s14, s0
 80025d0:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	3340      	adds	r3, #64	; 0x40
 80025d8:	443b      	add	r3, r7
 80025da:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80025de:	ee07 3a90 	vmov	s15, r3
 80025e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ea:	ee38 8a27 	vadd.f32	s16, s16, s15
								+ arm_sin_f32(theta)*RefX_case1[i]*8192/120;
 80025ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80025f2:	eeb0 0a67 	vmov.f32	s0, s15
 80025f6:	f001 fc55 	bl	8003ea4 <arm_sin_f32>
 80025fa:	eeb0 7a40 	vmov.f32	s14, s0
 80025fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	3340      	adds	r3, #64	; 0x40
 8002606:	443b      	add	r3, r7
 8002608:	3b18      	subs	r3, #24
 800260a:	edd3 7a00 	vldr	s15, [r3]
 800260e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002612:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80026a8 <TrayLocalization+0x350>
 8002616:	ee27 7a87 	vmul.f32	s14, s15, s14
 800261a:	eddf 6a24 	vldr	s13, [pc, #144]	; 80026ac <TrayLocalization+0x354>
 800261e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002622:	ee78 7a27 	vadd.f32	s15, s16, s15
				temp->Holes_Y[ind] = temp->Edge1_Y
 8002626:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800262a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800262e:	ee17 2a90 	vmov	r2, s15
 8002632:	b291      	uxth	r1, r2
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	3318      	adds	r3, #24
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	4413      	add	r3, r2
 800263c:	460a      	mov	r2, r1
 800263e:	809a      	strh	r2, [r3, #4]
				ind += 1;
 8002640:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002644:	3301      	adds	r3, #1
 8002646:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			for(j=0;j<3;j++)
 800264a:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 800264e:	b2db      	uxtb	r3, r3
 8002650:	3301      	adds	r3, #1
 8002652:	b2db      	uxtb	r3, r3
 8002654:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002658:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 800265c:	2b02      	cmp	r3, #2
 800265e:	f77f af51 	ble.w	8002504 <TrayLocalization+0x1ac>
		for(i=0;i<3;i++)
 8002662:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002666:	b2db      	uxtb	r3, r3
 8002668:	3301      	adds	r3, #1
 800266a:	b2db      	uxtb	r3, r3
 800266c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002670:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002674:	2b02      	cmp	r3, #2
 8002676:	f77f af41 	ble.w	80024fc <TrayLocalization+0x1a4>
			}
		}
		break;
 800267a:	e0e2      	b.n	8002842 <TrayLocalization+0x4ea>
	case 2:
		for(i=0;i<3;i++)
 800267c:	2300      	movs	r3, #0
 800267e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002682:	e0d7      	b.n	8002834 <TrayLocalization+0x4dc>
		{
			for(j=0;j<3;j++)
 8002684:	2300      	movs	r3, #0
 8002686:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800268a:	e0c7      	b.n	800281c <TrayLocalization+0x4c4>
 800268c:	f3af 8000 	nop.w
 8002690:	00000000 	.word	0x00000000
 8002694:	40000000 	.word	0x40000000
 8002698:	0800a9c4 	.word	0x0800a9c4
 800269c:	0800a9d0 	.word	0x0800a9d0
 80026a0:	0800a9d8 	.word	0x0800a9d8
 80026a4:	0800a9e4 	.word	0x0800a9e4
 80026a8:	46000000 	.word	0x46000000
 80026ac:	42f00000 	.word	0x42f00000
 80026b0:	454cc000 	.word	0x454cc000
 80026b4:	455de000 	.word	0x455de000
 80026b8:	45778000 	.word	0x45778000
 80026bc:	45844800 	.word	0x45844800
 80026c0:	405e0000 	.word	0x405e0000
 80026c4:	40c00000 	.word	0x40c00000
			{
				temp->Holes_X[ind] = temp->Edge1_X
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	ed93 8a00 	vldr	s16, [r3]
								+ arm_cos_f32(theta)*RefX_case2[i]
 80026ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80026d2:	eeb0 0a67 	vmov.f32	s0, s15
 80026d6:	f001 fb5f 	bl	8003d98 <arm_cos_f32>
 80026da:	eeb0 7a40 	vmov.f32	s14, s0
 80026de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	3340      	adds	r3, #64	; 0x40
 80026e6:	443b      	add	r3, r7
 80026e8:	3b2c      	subs	r3, #44	; 0x2c
 80026ea:	edd3 7a00 	vldr	s15, [r3]
 80026ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80026f6:	ee17 0a90 	vmov	r0, s15
 80026fa:	f7fd fed1 	bl	80004a0 <__aeabi_f2d>
 80026fe:	4604      	mov	r4, r0
 8002700:	460d      	mov	r5, r1
								- arm_sin_f32(theta)*RefY_case2[j]*120.0/8192.0;
 8002702:	edd7 7a02 	vldr	s15, [r7, #8]
 8002706:	eeb0 0a67 	vmov.f32	s0, s15
 800270a:	f001 fbcb 	bl	8003ea4 <arm_sin_f32>
 800270e:	eeb0 7a40 	vmov.f32	s14, s0
 8002712:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	3340      	adds	r3, #64	; 0x40
 800271a:	443b      	add	r3, r7
 800271c:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8002720:	ee07 3a90 	vmov	s15, r3
 8002724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800272c:	ee17 0a90 	vmov	r0, s15
 8002730:	f7fd feb6 	bl	80004a0 <__aeabi_f2d>
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	4b45      	ldr	r3, [pc, #276]	; (8002850 <TrayLocalization+0x4f8>)
 800273a:	f7fd ff09 	bl	8000550 <__aeabi_dmul>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4610      	mov	r0, r2
 8002744:	4619      	mov	r1, r3
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	4b42      	ldr	r3, [pc, #264]	; (8002854 <TrayLocalization+0x4fc>)
 800274c:	f7fe f82a 	bl	80007a4 <__aeabi_ddiv>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4620      	mov	r0, r4
 8002756:	4629      	mov	r1, r5
 8002758:	f7fd fd42 	bl	80001e0 <__aeabi_dsub>
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
				temp->Holes_X[ind] = temp->Edge1_X
 8002760:	f897 403d 	ldrb.w	r4, [r7, #61]	; 0x3d
								- arm_sin_f32(theta)*RefY_case2[j]*120.0/8192.0;
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	f7fe f9ca 	bl	8000b00 <__aeabi_d2f>
 800276c:	4601      	mov	r1, r0
				temp->Holes_X[ind] = temp->Edge1_X
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	1d23      	adds	r3, r4, #4
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	6019      	str	r1, [r3, #0]
				temp->Holes_Y[ind] = temp->Edge1_Y
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	889b      	ldrh	r3, [r3, #4]
 800277c:	ee07 3a90 	vmov	s15, r3
								+ arm_cos_f32(theta)*RefY_case2[j]
 8002780:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002784:	edd7 7a02 	vldr	s15, [r7, #8]
 8002788:	eeb0 0a67 	vmov.f32	s0, s15
 800278c:	f001 fb04 	bl	8003d98 <arm_cos_f32>
 8002790:	eeb0 7a40 	vmov.f32	s14, s0
 8002794:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	3340      	adds	r3, #64	; 0x40
 800279c:	443b      	add	r3, r7
 800279e:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 80027a2:	ee07 3a90 	vmov	s15, r3
 80027a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ae:	ee38 8a27 	vadd.f32	s16, s16, s15
								+ arm_sin_f32(theta)*RefX_case2[i]*8192/120;
 80027b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80027b6:	eeb0 0a67 	vmov.f32	s0, s15
 80027ba:	f001 fb73 	bl	8003ea4 <arm_sin_f32>
 80027be:	eeb0 7a40 	vmov.f32	s14, s0
 80027c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	3340      	adds	r3, #64	; 0x40
 80027ca:	443b      	add	r3, r7
 80027cc:	3b2c      	subs	r3, #44	; 0x2c
 80027ce:	edd3 7a00 	vldr	s15, [r3]
 80027d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002858 <TrayLocalization+0x500>
 80027da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027de:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800285c <TrayLocalization+0x504>
 80027e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027e6:	ee78 7a27 	vadd.f32	s15, s16, s15
				temp->Holes_Y[ind] = temp->Edge1_Y
 80027ea:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80027ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027f2:	ee17 2a90 	vmov	r2, s15
 80027f6:	b291      	uxth	r1, r2
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	3318      	adds	r3, #24
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	4413      	add	r3, r2
 8002800:	460a      	mov	r2, r1
 8002802:	809a      	strh	r2, [r3, #4]
				ind += 1;
 8002804:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002808:	3301      	adds	r3, #1
 800280a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			for(j=0;j<3;j++)
 800280e:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8002812:	b2db      	uxtb	r3, r3
 8002814:	3301      	adds	r3, #1
 8002816:	b2db      	uxtb	r3, r3
 8002818:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800281c:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8002820:	2b02      	cmp	r3, #2
 8002822:	f77f af51 	ble.w	80026c8 <TrayLocalization+0x370>
		for(i=0;i<3;i++)
 8002826:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800282a:	b2db      	uxtb	r3, r3
 800282c:	3301      	adds	r3, #1
 800282e:	b2db      	uxtb	r3, r3
 8002830:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002834:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002838:	2b02      	cmp	r3, #2
 800283a:	f77f af23 	ble.w	8002684 <TrayLocalization+0x32c>
			}
		}
		break;
 800283e:	e000      	b.n	8002842 <TrayLocalization+0x4ea>
	case 0:
		break;
 8002840:	bf00      	nop
	}
}
 8002842:	bf00      	nop
 8002844:	3740      	adds	r7, #64	; 0x40
 8002846:	46bd      	mov	sp, r7
 8002848:	ecbd 8b02 	vpop	{d8}
 800284c:	bdb0      	pop	{r4, r5, r7, pc}
 800284e:	bf00      	nop
 8002850:	405e0000 	.word	0x405e0000
 8002854:	40c00000 	.word	0x40c00000
 8002858:	46000000 	.word	0x46000000
 800285c:	42f00000 	.word	0x42f00000

08002860 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	607b      	str	r3, [r7, #4]
 800286a:	4b0c      	ldr	r3, [pc, #48]	; (800289c <MX_DMA_Init+0x3c>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	4a0b      	ldr	r2, [pc, #44]	; (800289c <MX_DMA_Init+0x3c>)
 8002870:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002874:	6313      	str	r3, [r2, #48]	; 0x30
 8002876:	4b09      	ldr	r3, [pc, #36]	; (800289c <MX_DMA_Init+0x3c>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800287e:	607b      	str	r3, [r7, #4]
 8002880:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002882:	2200      	movs	r2, #0
 8002884:	2100      	movs	r1, #0
 8002886:	2011      	movs	r0, #17
 8002888:	f002 f9d1 	bl	8004c2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800288c:	2011      	movs	r0, #17
 800288e:	f002 f9ea 	bl	8004c66 <HAL_NVIC_EnableIRQ>

}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40023800 	.word	0x40023800

080028a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08a      	sub	sp, #40	; 0x28
 80028a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a6:	f107 0314 	add.w	r3, r7, #20
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	605a      	str	r2, [r3, #4]
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	60da      	str	r2, [r3, #12]
 80028b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	4b4c      	ldr	r3, [pc, #304]	; (80029ec <MX_GPIO_Init+0x14c>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	4a4b      	ldr	r2, [pc, #300]	; (80029ec <MX_GPIO_Init+0x14c>)
 80028c0:	f043 0304 	orr.w	r3, r3, #4
 80028c4:	6313      	str	r3, [r2, #48]	; 0x30
 80028c6:	4b49      	ldr	r3, [pc, #292]	; (80029ec <MX_GPIO_Init+0x14c>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	f003 0304 	and.w	r3, r3, #4
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	4b45      	ldr	r3, [pc, #276]	; (80029ec <MX_GPIO_Init+0x14c>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	4a44      	ldr	r2, [pc, #272]	; (80029ec <MX_GPIO_Init+0x14c>)
 80028dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e0:	6313      	str	r3, [r2, #48]	; 0x30
 80028e2:	4b42      	ldr	r3, [pc, #264]	; (80029ec <MX_GPIO_Init+0x14c>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	4b3e      	ldr	r3, [pc, #248]	; (80029ec <MX_GPIO_Init+0x14c>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	4a3d      	ldr	r2, [pc, #244]	; (80029ec <MX_GPIO_Init+0x14c>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	6313      	str	r3, [r2, #48]	; 0x30
 80028fe:	4b3b      	ldr	r3, [pc, #236]	; (80029ec <MX_GPIO_Init+0x14c>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	607b      	str	r3, [r7, #4]
 800290e:	4b37      	ldr	r3, [pc, #220]	; (80029ec <MX_GPIO_Init+0x14c>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	4a36      	ldr	r2, [pc, #216]	; (80029ec <MX_GPIO_Init+0x14c>)
 8002914:	f043 0302 	orr.w	r3, r3, #2
 8002918:	6313      	str	r3, [r2, #48]	; 0x30
 800291a:	4b34      	ldr	r3, [pc, #208]	; (80029ec <MX_GPIO_Init+0x14c>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	607b      	str	r3, [r7, #4]
 8002924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002926:	2200      	movs	r2, #0
 8002928:	2120      	movs	r1, #32
 800292a:	4831      	ldr	r0, [pc, #196]	; (80029f0 <MX_GPIO_Init+0x150>)
 800292c:	f002 ff48 	bl	80057c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8002930:	2200      	movs	r2, #0
 8002932:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002936:	482f      	ldr	r0, [pc, #188]	; (80029f4 <MX_GPIO_Init+0x154>)
 8002938:	f002 ff42 	bl	80057c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800293c:	2200      	movs	r2, #0
 800293e:	2140      	movs	r1, #64	; 0x40
 8002940:	482d      	ldr	r0, [pc, #180]	; (80029f8 <MX_GPIO_Init+0x158>)
 8002942:	f002 ff3d 	bl	80057c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002946:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800294a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800294c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002956:	f107 0314 	add.w	r3, r7, #20
 800295a:	4619      	mov	r1, r3
 800295c:	4826      	ldr	r0, [pc, #152]	; (80029f8 <MX_GPIO_Init+0x158>)
 800295e:	f002 fdab 	bl	80054b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002962:	2320      	movs	r3, #32
 8002964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002966:	2301      	movs	r3, #1
 8002968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	2300      	movs	r3, #0
 800296c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296e:	2300      	movs	r3, #0
 8002970:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002972:	f107 0314 	add.w	r3, r7, #20
 8002976:	4619      	mov	r1, r3
 8002978:	481d      	ldr	r0, [pc, #116]	; (80029f0 <MX_GPIO_Init+0x150>)
 800297a:	f002 fd9d 	bl	80054b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800297e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002984:	2301      	movs	r3, #1
 8002986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298c:	2300      	movs	r3, #0
 800298e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002990:	f107 0314 	add.w	r3, r7, #20
 8002994:	4619      	mov	r1, r3
 8002996:	4817      	ldr	r0, [pc, #92]	; (80029f4 <MX_GPIO_Init+0x154>)
 8002998:	f002 fd8e 	bl	80054b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800299c:	2340      	movs	r3, #64	; 0x40
 800299e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a0:	2301      	movs	r3, #1
 80029a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a8:	2300      	movs	r3, #0
 80029aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029ac:	f107 0314 	add.w	r3, r7, #20
 80029b0:	4619      	mov	r1, r3
 80029b2:	4811      	ldr	r0, [pc, #68]	; (80029f8 <MX_GPIO_Init+0x158>)
 80029b4:	f002 fd80 	bl	80054b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80029b8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80029bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80029c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c8:	f107 0314 	add.w	r3, r7, #20
 80029cc:	4619      	mov	r1, r3
 80029ce:	4808      	ldr	r0, [pc, #32]	; (80029f0 <MX_GPIO_Init+0x150>)
 80029d0:	f002 fd72 	bl	80054b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80029d4:	2200      	movs	r2, #0
 80029d6:	2100      	movs	r1, #0
 80029d8:	2028      	movs	r0, #40	; 0x28
 80029da:	f002 f928 	bl	8004c2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80029de:	2028      	movs	r0, #40	; 0x28
 80029e0:	f002 f941 	bl	8004c66 <HAL_NVIC_EnableIRQ>

}
 80029e4:	bf00      	nop
 80029e6:	3728      	adds	r7, #40	; 0x28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40023800 	.word	0x40023800
 80029f0:	40020000 	.word	0x40020000
 80029f4:	40020400 	.word	0x40020400
 80029f8:	40020800 	.word	0x40020800

080029fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a00:	4b12      	ldr	r3, [pc, #72]	; (8002a4c <MX_I2C1_Init+0x50>)
 8002a02:	4a13      	ldr	r2, [pc, #76]	; (8002a50 <MX_I2C1_Init+0x54>)
 8002a04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002a06:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <MX_I2C1_Init+0x50>)
 8002a08:	4a12      	ldr	r2, [pc, #72]	; (8002a54 <MX_I2C1_Init+0x58>)
 8002a0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a0c:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <MX_I2C1_Init+0x50>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002a12:	4b0e      	ldr	r3, [pc, #56]	; (8002a4c <MX_I2C1_Init+0x50>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a18:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <MX_I2C1_Init+0x50>)
 8002a1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a20:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <MX_I2C1_Init+0x50>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002a26:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <MX_I2C1_Init+0x50>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a2c:	4b07      	ldr	r3, [pc, #28]	; (8002a4c <MX_I2C1_Init+0x50>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a32:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <MX_I2C1_Init+0x50>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a38:	4804      	ldr	r0, [pc, #16]	; (8002a4c <MX_I2C1_Init+0x50>)
 8002a3a:	f002 fef3 	bl	8005824 <HAL_I2C_Init>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002a44:	f000 fb38 	bl	80030b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a48:	bf00      	nop
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	200002a0 	.word	0x200002a0
 8002a50:	40005400 	.word	0x40005400
 8002a54:	00061a80 	.word	0x00061a80

08002a58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08a      	sub	sp, #40	; 0x28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a60:	f107 0314 	add.w	r3, r7, #20
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	609a      	str	r2, [r3, #8]
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a19      	ldr	r2, [pc, #100]	; (8002adc <HAL_I2C_MspInit+0x84>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d12b      	bne.n	8002ad2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	4b18      	ldr	r3, [pc, #96]	; (8002ae0 <HAL_I2C_MspInit+0x88>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	4a17      	ldr	r2, [pc, #92]	; (8002ae0 <HAL_I2C_MspInit+0x88>)
 8002a84:	f043 0302 	orr.w	r3, r3, #2
 8002a88:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8a:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <HAL_I2C_MspInit+0x88>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a96:	23c0      	movs	r3, #192	; 0xc0
 8002a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a9a:	2312      	movs	r3, #18
 8002a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002aa6:	2304      	movs	r3, #4
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aaa:	f107 0314 	add.w	r3, r7, #20
 8002aae:	4619      	mov	r1, r3
 8002ab0:	480c      	ldr	r0, [pc, #48]	; (8002ae4 <HAL_I2C_MspInit+0x8c>)
 8002ab2:	f002 fd01 	bl	80054b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_I2C_MspInit+0x88>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	4a08      	ldr	r2, [pc, #32]	; (8002ae0 <HAL_I2C_MspInit+0x88>)
 8002ac0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac6:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <HAL_I2C_MspInit+0x88>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002ad2:	bf00      	nop
 8002ad4:	3728      	adds	r7, #40	; 0x28
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40005400 	.word	0x40005400
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	40020400 	.word	0x40020400

08002ae8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002aec:	f001 ff52 	bl	8004994 <HAL_Init>

  /* USER CODE BEGIN Init */
  hmodbus.huart = &huart2;
 8002af0:	4ba7      	ldr	r3, [pc, #668]	; (8002d90 <main+0x2a8>)
 8002af2:	4aa8      	ldr	r2, [pc, #672]	; (8002d94 <main+0x2ac>)
 8002af4:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim11;
 8002af6:	4ba6      	ldr	r3, [pc, #664]	; (8002d90 <main+0x2a8>)
 8002af8:	4aa7      	ldr	r2, [pc, #668]	; (8002d98 <main+0x2b0>)
 8002afa:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8002afc:	4ba4      	ldr	r3, [pc, #656]	; (8002d90 <main+0x2a8>)
 8002afe:	2215      	movs	r2, #21
 8002b00:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize = 200;
 8002b02:	4ba3      	ldr	r3, [pc, #652]	; (8002d90 <main+0x2a8>)
 8002b04:	22c8      	movs	r2, #200	; 0xc8
 8002b06:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8002b08:	49a4      	ldr	r1, [pc, #656]	; (8002d9c <main+0x2b4>)
 8002b0a:	48a1      	ldr	r0, [pc, #644]	; (8002d90 <main+0x2a8>)
 8002b0c:	f7fe fc12 	bl	8001334 <Modbus_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b10:	f000 f97c 	bl	8002e0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b14:	f7ff fec4 	bl	80028a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b18:	f7ff fea2 	bl	8002860 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002b1c:	f000 fe3e 	bl	800379c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002b20:	f000 fb80 	bl	8003224 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002b24:	f000 fc96 	bl	8003454 <MX_TIM5_Init>
  MX_TIM3_Init();
 8002b28:	f000 fbd0 	bl	80032cc <MX_TIM3_Init>
  MX_I2C1_Init();
 8002b2c:	f7ff ff66 	bl	80029fc <MX_I2C1_Init>
  MX_TIM4_Init();
 8002b30:	f000 fc42 	bl	80033b8 <MX_TIM4_Init>
  MX_TIM11_Init();
 8002b34:	f000 fcdc 	bl	80034f0 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  //Setup Initial vaules
  InitKalmanStruct(&KF,Var_Q,Var_R);
 8002b38:	4b99      	ldr	r3, [pc, #612]	; (8002da0 <main+0x2b8>)
 8002b3a:	edd3 7a00 	vldr	s15, [r3]
 8002b3e:	4b99      	ldr	r3, [pc, #612]	; (8002da4 <main+0x2bc>)
 8002b40:	ed93 7a00 	vldr	s14, [r3]
 8002b44:	eef0 0a47 	vmov.f32	s1, s14
 8002b48:	eeb0 0a67 	vmov.f32	s0, s15
 8002b4c:	4896      	ldr	r0, [pc, #600]	; (8002da8 <main+0x2c0>)
 8002b4e:	f7fe f9a9 	bl	8000ea4 <InitKalmanStruct>

  InitReadEncoder(&ReadEncoderParam, 1000);
 8002b52:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b56:	4895      	ldr	r0, [pc, #596]	; (8002dac <main+0x2c4>)
 8002b58:	f7ff fb89 	bl	800226e <InitReadEncoder>

  QuinticSetup(&QuinticVar, vmax, amax);
 8002b5c:	4b94      	ldr	r3, [pc, #592]	; (8002db0 <main+0x2c8>)
 8002b5e:	edd3 7a00 	vldr	s15, [r3]
 8002b62:	4b94      	ldr	r3, [pc, #592]	; (8002db4 <main+0x2cc>)
 8002b64:	ed93 7a00 	vldr	s14, [r3]
 8002b68:	eef0 0a47 	vmov.f32	s1, s14
 8002b6c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b70:	4891      	ldr	r0, [pc, #580]	; (8002db8 <main+0x2d0>)
 8002b72:	f7ff f815 	bl	8001ba0 <QuinticSetup>

  PIDSetup(&PositionLoop, 15, 2, 0.00001, 10);
 8002b76:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8002b7a:	ed9f 1a90 	vldr	s2, [pc, #576]	; 8002dbc <main+0x2d4>
 8002b7e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002b82:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8002b86:	488e      	ldr	r0, [pc, #568]	; (8002dc0 <main+0x2d8>)
 8002b88:	f7fe fede 	bl	8001948 <PIDSetup>
  PIDSetup(&VelocityLoop, 5.0, 0.00000001, 0, 0.00003);
 8002b8c:	eddf 1a8d 	vldr	s3, [pc, #564]	; 8002dc4 <main+0x2dc>
 8002b90:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 8002dc8 <main+0x2e0>
 8002b94:	eddf 0a8d 	vldr	s1, [pc, #564]	; 8002dcc <main+0x2e4>
 8002b98:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002b9c:	488c      	ldr	r0, [pc, #560]	; (8002dd0 <main+0x2e8>)
 8002b9e:	f7fe fed3 	bl	8001948 <PIDSetup>

  TraySetup(&PickTray,  67.8430, 37384,  128.3505, 37384);
 8002ba2:	f249 2208 	movw	r2, #37384	; 0x9208
 8002ba6:	eddf 0a8b 	vldr	s1, [pc, #556]	; 8002dd4 <main+0x2ec>
 8002baa:	f249 2108 	movw	r1, #37384	; 0x9208
 8002bae:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 8002dd8 <main+0x2f0>
 8002bb2:	488a      	ldr	r0, [pc, #552]	; (8002ddc <main+0x2f4>)
 8002bb4:	f7ff fbb2 	bl	800231c <TraySetup>
  TraySetup(&PlaceTray, 100.5948, 6840, 142.2284, 3922);
 8002bb8:	f640 7252 	movw	r2, #3922	; 0xf52
 8002bbc:	eddf 0a88 	vldr	s1, [pc, #544]	; 8002de0 <main+0x2f8>
 8002bc0:	f641 21b8 	movw	r1, #6840	; 0x1ab8
 8002bc4:	ed9f 0a87 	vldr	s0, [pc, #540]	; 8002de4 <main+0x2fc>
 8002bc8:	4887      	ldr	r0, [pc, #540]	; (8002de8 <main+0x300>)
 8002bca:	f7ff fba7 	bl	800231c <TraySetup>
  TrayLocalization(&PickTray);
 8002bce:	4883      	ldr	r0, [pc, #524]	; (8002ddc <main+0x2f4>)
 8002bd0:	f7ff fbc2 	bl	8002358 <TrayLocalization>
  TrayLocalization(&PlaceTray);
 8002bd4:	4884      	ldr	r0, [pc, #528]	; (8002de8 <main+0x300>)
 8002bd6:	f7ff fbbf 	bl	8002358 <TrayLocalization>
  //Timers Start
  HAL_TIM_Base_Start_IT(&htim4);
 8002bda:	4884      	ldr	r0, [pc, #528]	; (8002dec <main+0x304>)
 8002bdc:	f003 fc5a 	bl	8006494 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);  //Start QEI
 8002be0:	2104      	movs	r1, #4
 8002be2:	4883      	ldr	r0, [pc, #524]	; (8002df0 <main+0x308>)
 8002be4:	f003 ffb6 	bl	8006b54 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);//Start PWM
 8002be8:	2108      	movs	r1, #8
 8002bea:	4882      	ldr	r0, [pc, #520]	; (8002df4 <main+0x30c>)
 8002bec:	f003 fd80 	bl	80066f0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8002bf0:	4881      	ldr	r0, [pc, #516]	; (8002df8 <main+0x310>)
 8002bf2:	f003 fc4f 	bl	8006494 <HAL_TIM_Base_Start_IT>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	Modbus_Protocal_Worker();
 8002bf6:	f7fe fc29 	bl	800144c <Modbus_Protocal_Worker>
	if(OpVar.ProxStop == 0)
 8002bfa:	4b80      	ldr	r3, [pc, #512]	; (8002dfc <main+0x314>)
 8002bfc:	795b      	ldrb	r3, [r3, #5]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f040 80b9 	bne.w	8002d76 <main+0x28e>
	{
		switch(OpState)
 8002c04:	4b7e      	ldr	r3, [pc, #504]	; (8002e00 <main+0x318>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b09      	cmp	r3, #9
 8002c0a:	d8f4      	bhi.n	8002bf6 <main+0x10e>
 8002c0c:	a201      	add	r2, pc, #4	; (adr r2, 8002c14 <main+0x12c>)
 8002c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c12:	bf00      	nop
 8002c14:	08002c3d 	.word	0x08002c3d
 8002c18:	08002c4b 	.word	0x08002c4b
 8002c1c:	08002bf7 	.word	0x08002bf7
 8002c20:	08002cff 	.word	0x08002cff
 8002c24:	08002bf7 	.word	0x08002bf7
 8002c28:	08002bf7 	.word	0x08002bf7
 8002c2c:	08002d33 	.word	0x08002d33
 8002c30:	08002d59 	.word	0x08002d59
 8002c34:	08002bf7 	.word	0x08002bf7
 8002c38:	08002d61 	.word	0x08002d61
			{
			case Init:
				OpVar.ControllerEnable = 0;
 8002c3c:	4b6f      	ldr	r3, [pc, #444]	; (8002dfc <main+0x314>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	745a      	strb	r2, [r3, #17]
				SetHome(&OpVar);
 8002c42:	486e      	ldr	r0, [pc, #440]	; (8002dfc <main+0x314>)
 8002c44:	f7ff fb50 	bl	80022e8 <SetHome>
				//OpState = PreProcess;
				//OpState = ControlLoop;
				//QuinticVar.final_pos = 23893;
				//OpState = Homing;
			break;
 8002c48:	e0a0      	b.n	8002d8c <main+0x2a4>
			case PreHoming:
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8002c4a:	4b6a      	ldr	r3, [pc, #424]	; (8002df4 <main+0x30c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	63da      	str	r2, [r3, #60]	; 0x3c
				QuinticVar.current_velo = 0;
 8002c52:	4b59      	ldr	r3, [pc, #356]	; (8002db8 <main+0x2d0>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	611a      	str	r2, [r3, #16]
				if(HAL_GetTick() >= OpVar.waitTime)
 8002c58:	f001 ff02 	bl	8004a60 <HAL_GetTick>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	4a67      	ldr	r2, [pc, #412]	; (8002dfc <main+0x314>)
 8002c60:	8812      	ldrh	r2, [r2, #0]
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d346      	bcc.n	8002cf4 <main+0x20c>
				{
					OpVar.waitTime = 0;
 8002c66:	4b65      	ldr	r3, [pc, #404]	; (8002dfc <main+0x314>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	801a      	strh	r2, [r3, #0]
					OpState = Homing;
 8002c6c:	4b64      	ldr	r3, [pc, #400]	; (8002e00 <main+0x318>)
 8002c6e:	2202      	movs	r2, #2
 8002c70:	701a      	strb	r2, [r3, #0]
					InitKalmanStruct(&KF,Var_Q,Var_R);
 8002c72:	4b4b      	ldr	r3, [pc, #300]	; (8002da0 <main+0x2b8>)
 8002c74:	edd3 7a00 	vldr	s15, [r3]
 8002c78:	4b4a      	ldr	r3, [pc, #296]	; (8002da4 <main+0x2bc>)
 8002c7a:	ed93 7a00 	vldr	s14, [r3]
 8002c7e:	eef0 0a47 	vmov.f32	s1, s14
 8002c82:	eeb0 0a67 	vmov.f32	s0, s15
 8002c86:	4848      	ldr	r0, [pc, #288]	; (8002da8 <main+0x2c0>)
 8002c88:	f7fe f90c 	bl	8000ea4 <InitKalmanStruct>
					PIDSetup(&PositionLoop, 15, 2, 0.00001, 10);
 8002c8c:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8002c90:	ed9f 1a4a 	vldr	s2, [pc, #296]	; 8002dbc <main+0x2d4>
 8002c94:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002c98:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8002c9c:	4848      	ldr	r0, [pc, #288]	; (8002dc0 <main+0x2d8>)
 8002c9e:	f7fe fe53 	bl	8001948 <PIDSetup>
					PIDSetup(&VelocityLoop, 5.0, 0.00000001, 0, 0.00003);
 8002ca2:	eddf 1a48 	vldr	s3, [pc, #288]	; 8002dc4 <main+0x2dc>
 8002ca6:	ed9f 1a48 	vldr	s2, [pc, #288]	; 8002dc8 <main+0x2e0>
 8002caa:	eddf 0a48 	vldr	s1, [pc, #288]	; 8002dcc <main+0x2e4>
 8002cae:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002cb2:	4847      	ldr	r0, [pc, #284]	; (8002dd0 <main+0x2e8>)
 8002cb4:	f7fe fe48 	bl	8001948 <PIDSetup>
					QuinticVar.start_pos = __HAL_TIM_GET_COUNTER(&htim2);
 8002cb8:	4b4d      	ldr	r3, [pc, #308]	; (8002df0 <main+0x308>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	4b3d      	ldr	r3, [pc, #244]	; (8002db8 <main+0x2d0>)
 8002cc2:	601a      	str	r2, [r3, #0]
					QuinticVar.final_pos = __HAL_TIM_GET_COUNTER(&htim2)*0.5;
 8002cc4:	4b4a      	ldr	r3, [pc, #296]	; (8002df0 <main+0x308>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fd fbc6 	bl	800045c <__aeabi_ui2d>
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	4b4b      	ldr	r3, [pc, #300]	; (8002e04 <main+0x31c>)
 8002cd6:	f7fd fc3b 	bl	8000550 <__aeabi_dmul>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4610      	mov	r0, r2
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	f7fd fee5 	bl	8000ab0 <__aeabi_d2iz>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	4a33      	ldr	r2, [pc, #204]	; (8002db8 <main+0x2d0>)
 8002cea:	6053      	str	r3, [r2, #4]
					OpVar.HomingKey = 0;
 8002cec:	4b43      	ldr	r3, [pc, #268]	; (8002dfc <main+0x314>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	719a      	strb	r2, [r3, #6]
				}
				else
				{
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
				}
			break;
 8002cf2:	e04b      	b.n	8002d8c <main+0x2a4>
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8002cf4:	4b3f      	ldr	r3, [pc, #252]	; (8002df4 <main+0x30c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8002cfc:	e046      	b.n	8002d8c <main+0x2a4>
//						OpVar.PosOffset = QEIData.QEIPosition;
//					}
			break;
			case Home_Ok:
				//check if basesystem is TrayMode
				if(registerFrame[0x01].U16 == 4){
 8002cfe:	4b27      	ldr	r3, [pc, #156]	; (8002d9c <main+0x2b4>)
 8002d00:	885b      	ldrh	r3, [r3, #2]
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d041      	beq.n	8002d8a <main+0x2a2>
				}
				else if(registerFrame[0x01].U16 == 8){
 8002d06:	4b25      	ldr	r3, [pc, #148]	; (8002d9c <main+0x2b4>)
 8002d08:	885b      	ldrh	r3, [r3, #2]
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d106      	bne.n	8002d1c <main+0x234>
					OpState = TrayMode;
 8002d0e:	4b3c      	ldr	r3, [pc, #240]	; (8002e00 <main+0x318>)
 8002d10:	2205      	movs	r2, #5
 8002d12:	701a      	strb	r2, [r3, #0]
					OpVar.BaseMode = 0;
 8002d14:	4b39      	ldr	r3, [pc, #228]	; (8002dfc <main+0x314>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	741a      	strb	r2, [r3, #16]
				//check if basesystem is PointMode
				else if(registerFrame[0x01].U16 == 16){
					OpState = PointMode;
					OpVar.BaseMode = 1;
				}
			break;
 8002d1a:	e036      	b.n	8002d8a <main+0x2a2>
				else if(registerFrame[0x01].U16 == 16){
 8002d1c:	4b1f      	ldr	r3, [pc, #124]	; (8002d9c <main+0x2b4>)
 8002d1e:	885b      	ldrh	r3, [r3, #2]
 8002d20:	2b10      	cmp	r3, #16
 8002d22:	d132      	bne.n	8002d8a <main+0x2a2>
					OpState = PointMode;
 8002d24:	4b36      	ldr	r3, [pc, #216]	; (8002e00 <main+0x318>)
 8002d26:	2204      	movs	r2, #4
 8002d28:	701a      	strb	r2, [r3, #0]
					OpVar.BaseMode = 1;
 8002d2a:	4b34      	ldr	r3, [pc, #208]	; (8002dfc <main+0x314>)
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	741a      	strb	r2, [r3, #16]
			break;
 8002d30:	e02b      	b.n	8002d8a <main+0x2a2>
			case TrayMode:
				//OpVar.ControllerEnable = 0;
			break;

			case PreProcess:
				QuinticVar.start_pos = 23893;
 8002d32:	4b21      	ldr	r3, [pc, #132]	; (8002db8 <main+0x2d0>)
 8002d34:	f645 5255 	movw	r2, #23893	; 0x5d55
 8002d38:	601a      	str	r2, [r3, #0]
				QuinticVar.final_pos = PickTray.Holes_Y[0];
 8002d3a:	4b28      	ldr	r3, [pc, #160]	; (8002ddc <main+0x2f4>)
 8002d3c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002d3e:	461a      	mov	r2, r3
 8002d40:	4b1d      	ldr	r3, [pc, #116]	; (8002db8 <main+0x2d0>)
 8002d42:	605a      	str	r2, [r3, #4]
				OpVar.task = GoPick;	//current task.
 8002d44:	4b2d      	ldr	r3, [pc, #180]	; (8002dfc <main+0x314>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	70da      	strb	r2, [r3, #3]
				OpVar.holeInd = 0;
 8002d4a:	4b2c      	ldr	r3, [pc, #176]	; (8002dfc <main+0x314>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	711a      	strb	r2, [r3, #4]
				OpState = ControlLoop;
 8002d50:	4b2b      	ldr	r3, [pc, #172]	; (8002e00 <main+0x318>)
 8002d52:	2207      	movs	r2, #7
 8002d54:	701a      	strb	r2, [r3, #0]
			break;
 8002d56:	e019      	b.n	8002d8c <main+0x2a4>

			case ControlLoop:
				//QEIGetFeedback(&QEIData, 2500);	//Feedback from plant
				OpVar.ControllerEnable = 1;
 8002d58:	4b28      	ldr	r3, [pc, #160]	; (8002dfc <main+0x314>)
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	745a      	strb	r2, [r3, #17]
//							OpState = ControlLoop;
//						}
//					break;
//					}
//				}
			break;
 8002d5e:	e015      	b.n	8002d8c <main+0x2a4>

			case WaitingHome:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 8002d60:	2201      	movs	r2, #1
 8002d62:	2140      	movs	r1, #64	; 0x40
 8002d64:	4828      	ldr	r0, [pc, #160]	; (8002e08 <main+0x320>)
 8002d66:	f002 fd2b 	bl	80057c0 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,35*500);
 8002d6a:	4b22      	ldr	r3, [pc, #136]	; (8002df4 <main+0x30c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f244 425c 	movw	r2, #17500	; 0x445c
 8002d72:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8002d74:	e00a      	b.n	8002d8c <main+0x2a4>
			}
		}
	  else if (OpVar.ProxStop == 1)
 8002d76:	4b21      	ldr	r3, [pc, #132]	; (8002dfc <main+0x314>)
 8002d78:	795b      	ldrb	r3, [r3, #5]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	f47f af3b 	bne.w	8002bf6 <main+0x10e>
	  {
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8002d80:	4b1c      	ldr	r3, [pc, #112]	; (8002df4 <main+0x30c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2200      	movs	r2, #0
 8002d86:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d88:	e735      	b.n	8002bf6 <main+0x10e>
			break;
 8002d8a:	bf00      	nop
	Modbus_Protocal_Worker();
 8002d8c:	e733      	b.n	8002bf6 <main+0x10e>
 8002d8e:	bf00      	nop
 8002d90:	20000684 	.word	0x20000684
 8002d94:	20001074 	.word	0x20001074
 8002d98:	20000fc0 	.word	0x20000fc0
 8002d9c:	20000b5c 	.word	0x20000b5c
 8002da0:	20000208 	.word	0x20000208
 8002da4:	2000020c 	.word	0x2000020c
 8002da8:	200003d0 	.word	0x200003d0
 8002dac:	2000030c 	.word	0x2000030c
 8002db0:	20000200 	.word	0x20000200
 8002db4:	20000204 	.word	0x20000204
 8002db8:	20000320 	.word	0x20000320
 8002dbc:	3727c5ac 	.word	0x3727c5ac
 8002dc0:	20000370 	.word	0x20000370
 8002dc4:	37fba882 	.word	0x37fba882
 8002dc8:	00000000 	.word	0x00000000
 8002dcc:	322bcc77 	.word	0x322bcc77
 8002dd0:	200003a0 	.word	0x200003a0
 8002dd4:	430059ba 	.word	0x430059ba
 8002dd8:	4287af9e 	.word	0x4287af9e
 8002ddc:	200005ec 	.word	0x200005ec
 8002de0:	430e3a78 	.word	0x430e3a78
 8002de4:	42c9308a 	.word	0x42c9308a
 8002de8:	20000638 	.word	0x20000638
 8002dec:	20000e58 	.word	0x20000e58
 8002df0:	20000cf0 	.word	0x20000cf0
 8002df4:	20000da4 	.word	0x20000da4
 8002df8:	20000f0c 	.word	0x20000f0c
 8002dfc:	200002f8 	.word	0x200002f8
 8002e00:	200002f4 	.word	0x200002f4
 8002e04:	3fe00000 	.word	0x3fe00000
 8002e08:	40020800 	.word	0x40020800

08002e0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b094      	sub	sp, #80	; 0x50
 8002e10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e12:	f107 0320 	add.w	r3, r7, #32
 8002e16:	2230      	movs	r2, #48	; 0x30
 8002e18:	2100      	movs	r1, #0
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f006 fa5c 	bl	80092d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e20:	f107 030c 	add.w	r3, r7, #12
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	605a      	str	r2, [r3, #4]
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	60da      	str	r2, [r3, #12]
 8002e2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e30:	2300      	movs	r3, #0
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	4b27      	ldr	r3, [pc, #156]	; (8002ed4 <SystemClock_Config+0xc8>)
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	4a26      	ldr	r2, [pc, #152]	; (8002ed4 <SystemClock_Config+0xc8>)
 8002e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	6413      	str	r3, [r2, #64]	; 0x40
 8002e40:	4b24      	ldr	r3, [pc, #144]	; (8002ed4 <SystemClock_Config+0xc8>)
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	607b      	str	r3, [r7, #4]
 8002e50:	4b21      	ldr	r3, [pc, #132]	; (8002ed8 <SystemClock_Config+0xcc>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a20      	ldr	r2, [pc, #128]	; (8002ed8 <SystemClock_Config+0xcc>)
 8002e56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	4b1e      	ldr	r3, [pc, #120]	; (8002ed8 <SystemClock_Config+0xcc>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e64:	607b      	str	r3, [r7, #4]
 8002e66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e68:	2302      	movs	r3, #2
 8002e6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e70:	2310      	movs	r3, #16
 8002e72:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e74:	2302      	movs	r3, #2
 8002e76:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002e7c:	2308      	movs	r3, #8
 8002e7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002e80:	2364      	movs	r3, #100	; 0x64
 8002e82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e84:	2302      	movs	r3, #2
 8002e86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002e88:	2304      	movs	r3, #4
 8002e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e8c:	f107 0320 	add.w	r3, r7, #32
 8002e90:	4618      	mov	r0, r3
 8002e92:	f002 fe0b 	bl	8005aac <HAL_RCC_OscConfig>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002e9c:	f000 f90c 	bl	80030b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ea0:	230f      	movs	r3, #15
 8002ea2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002eb6:	f107 030c 	add.w	r3, r7, #12
 8002eba:	2103      	movs	r1, #3
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f003 f86d 	bl	8005f9c <HAL_RCC_ClockConfig>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002ec8:	f000 f8f6 	bl	80030b8 <Error_Handler>
  }
}
 8002ecc:	bf00      	nop
 8002ece:	3750      	adds	r7, #80	; 0x50
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	40007000 	.word	0x40007000

08002edc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	80fb      	strh	r3, [r7, #6]
		if(GPIO_Pin == GPIO_PIN_11)
 8002ee6:	88fb      	ldrh	r3, [r7, #6]
 8002ee8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eec:	d127      	bne.n	8002f3e <HAL_GPIO_EXTI_Callback+0x62>
		{
			if(OpVar.HomingKey == 1)
 8002eee:	4b2f      	ldr	r3, [pc, #188]	; (8002fac <HAL_GPIO_EXTI_Callback+0xd0>)
 8002ef0:	799b      	ldrb	r3, [r3, #6]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d118      	bne.n	8002f28 <HAL_GPIO_EXTI_Callback+0x4c>
			{
				//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8002ef6:	4b2e      	ldr	r3, [pc, #184]	; (8002fb0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2200      	movs	r2, #0
 8002efc:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COUNTER(&htim2,0);
 8002efe:	4b2d      	ldr	r3, [pc, #180]	; (8002fb4 <HAL_GPIO_EXTI_Callback+0xd8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2200      	movs	r2, #0
 8002f04:	625a      	str	r2, [r3, #36]	; 0x24
				OpVar.ProxStop = 0;
 8002f06:	4b29      	ldr	r3, [pc, #164]	; (8002fac <HAL_GPIO_EXTI_Callback+0xd0>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	715a      	strb	r2, [r3, #5]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2140      	movs	r1, #64	; 0x40
 8002f10:	4829      	ldr	r0, [pc, #164]	; (8002fb8 <HAL_GPIO_EXTI_Callback+0xdc>)
 8002f12:	f002 fc55 	bl	80057c0 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,35*500);
 8002f16:	4b26      	ldr	r3, [pc, #152]	; (8002fb0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f244 425c 	movw	r2, #17500	; 0x445c
 8002f1e:	63da      	str	r2, [r3, #60]	; 0x3c
				//OpState = WaitingHome;
				OpState = Homing;
 8002f20:	4b26      	ldr	r3, [pc, #152]	; (8002fbc <HAL_GPIO_EXTI_Callback+0xe0>)
 8002f22:	2202      	movs	r2, #2
 8002f24:	701a      	strb	r2, [r3, #0]
 8002f26:	e00a      	b.n	8002f3e <HAL_GPIO_EXTI_Callback+0x62>
			}
			else if(OpVar.HomingKey == 2)
 8002f28:	4b20      	ldr	r3, [pc, #128]	; (8002fac <HAL_GPIO_EXTI_Callback+0xd0>)
 8002f2a:	799b      	ldrb	r3, [r3, #6]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d106      	bne.n	8002f3e <HAL_GPIO_EXTI_Callback+0x62>
			{
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8002f30:	4b1f      	ldr	r3, [pc, #124]	; (8002fb0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2200      	movs	r2, #0
 8002f36:	63da      	str	r2, [r3, #60]	; 0x3c
				OpVar.ProxStop = 1;
 8002f38:	4b1c      	ldr	r3, [pc, #112]	; (8002fac <HAL_GPIO_EXTI_Callback+0xd0>)
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	715a      	strb	r2, [r3, #5]
			}
		}
		if (GPIO_Pin == GPIO_PIN_12)
 8002f3e:	88fb      	ldrh	r3, [r7, #6]
 8002f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f44:	d12e      	bne.n	8002fa4 <HAL_GPIO_EXTI_Callback+0xc8>
		{
			if(OpVar.HomingKey == 1)
 8002f46:	4b19      	ldr	r3, [pc, #100]	; (8002fac <HAL_GPIO_EXTI_Callback+0xd0>)
 8002f48:	799b      	ldrb	r3, [r3, #6]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d11f      	bne.n	8002f8e <HAL_GPIO_EXTI_Callback+0xb2>
			{
				//QEIGetFeedback(&QEIData, 2500);

				//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8002f4e:	4b18      	ldr	r3, [pc, #96]	; (8002fb0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2200      	movs	r2, #0
 8002f54:	63da      	str	r2, [r3, #60]	; 0x3c
//				QuinticVar.start_pos = __HAL_TIM_GET_COUNTER(&htim2);
//				QuinticVar.final_pos = __HAL_TIM_GET_COUNTER(&htim2)*0.5;
				OpVar.HomingKey = 0;
 8002f56:	4b15      	ldr	r3, [pc, #84]	; (8002fac <HAL_GPIO_EXTI_Callback+0xd0>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	719a      	strb	r2, [r3, #6]
				OpVar.ProxStop = 0;
 8002f5c:	4b13      	ldr	r3, [pc, #76]	; (8002fac <HAL_GPIO_EXTI_Callback+0xd0>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	715a      	strb	r2, [r3, #5]
				//OpVar.ControllerEnable = 0;
				OpVar.waitTime = HAL_GetTick()+1000;
 8002f62:	f001 fd7d 	bl	8004a60 <HAL_GetTick>
 8002f66:	4603      	mov	r3, r0
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	4b0e      	ldr	r3, [pc, #56]	; (8002fac <HAL_GPIO_EXTI_Callback+0xd0>)
 8002f72:	801a      	strh	r2, [r3, #0]
				OpVar.ControllerEnable = 1;
 8002f74:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <HAL_GPIO_EXTI_Callback+0xd0>)
 8002f76:	2201      	movs	r2, #1
 8002f78:	745a      	strb	r2, [r3, #17]
				QuinticVar.current_pos = __HAL_TIM_GET_COUNTER(&htim2);
 8002f7a:	4b0e      	ldr	r3, [pc, #56]	; (8002fb4 <HAL_GPIO_EXTI_Callback+0xd8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	461a      	mov	r2, r3
 8002f82:	4b0f      	ldr	r3, [pc, #60]	; (8002fc0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002f84:	60da      	str	r2, [r3, #12]
				OpState = PreHoming;
 8002f86:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <HAL_GPIO_EXTI_Callback+0xe0>)
 8002f88:	2201      	movs	r2, #1
 8002f8a:	701a      	strb	r2, [r3, #0]
			{
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
				OpVar.ProxStop = 1;
			}
		}
}
 8002f8c:	e00a      	b.n	8002fa4 <HAL_GPIO_EXTI_Callback+0xc8>
			else if(OpVar.HomingKey == 2)
 8002f8e:	4b07      	ldr	r3, [pc, #28]	; (8002fac <HAL_GPIO_EXTI_Callback+0xd0>)
 8002f90:	799b      	ldrb	r3, [r3, #6]
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d106      	bne.n	8002fa4 <HAL_GPIO_EXTI_Callback+0xc8>
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8002f96:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	63da      	str	r2, [r3, #60]	; 0x3c
				OpVar.ProxStop = 1;
 8002f9e:	4b03      	ldr	r3, [pc, #12]	; (8002fac <HAL_GPIO_EXTI_Callback+0xd0>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	715a      	strb	r2, [r3, #5]
}
 8002fa4:	bf00      	nop
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	200002f8 	.word	0x200002f8
 8002fb0:	20000da4 	.word	0x20000da4
 8002fb4:	20000cf0 	.word	0x20000cf0
 8002fb8:	40020800 	.word	0x40020800
 8002fbc:	200002f4 	.word	0x200002f4
 8002fc0:	20000320 	.word	0x20000320

08002fc4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a2d      	ldr	r2, [pc, #180]	; (8003084 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d153      	bne.n	800307c <HAL_TIM_PeriodElapsedCallback+0xb8>
	{
		QEIGetFeedback(&QEIData, 2500);
 8002fd4:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8002fd8:	482b      	ldr	r0, [pc, #172]	; (8003088 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002fda:	f7ff f95d 	bl	8002298 <QEIGetFeedback>
		KF.z = QEIData.QEIVelocity;
 8002fde:	4b2a      	ldr	r3, [pc, #168]	; (8003088 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	4a2a      	ldr	r2, [pc, #168]	; (800308c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002fe4:	65d3      	str	r3, [r2, #92]	; 0x5c
		kalman_filter();
 8002fe6:	f7fe f8b7 	bl	8001158 <kalman_filter>
		ZEstimateVelocity = KF.x_hat[1];
 8002fea:	4b28      	ldr	r3, [pc, #160]	; (800308c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	4a28      	ldr	r2, [pc, #160]	; (8003090 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002ff0:	6013      	str	r3, [r2, #0]
		static uint32_t timestamp = 0;
		if (HAL_GetTick() >= timestamp)
 8002ff2:	f001 fd35 	bl	8004a60 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	4b26      	ldr	r3, [pc, #152]	; (8003094 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d309      	bcc.n	8003014 <HAL_TIM_PeriodElapsedCallback+0x50>
		{
		  timestamp = HAL_GetTick() + 200;
 8003000:	f001 fd2e 	bl	8004a60 <HAL_GetTick>
 8003004:	4603      	mov	r3, r0
 8003006:	33c8      	adds	r3, #200	; 0xc8
 8003008:	4a22      	ldr	r2, [pc, #136]	; (8003094 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800300a:	6013      	str	r3, [r2, #0]
		  registerFrame[0x00].U16 = 0b0101100101100001;
 800300c:	4b22      	ldr	r3, [pc, #136]	; (8003098 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800300e:	f645 1261 	movw	r2, #22881	; 0x5961
 8003012:	801a      	strh	r2, [r3, #0]
		}

		if(OpVar.ControllerEnable == 1)
 8003014:	4b21      	ldr	r3, [pc, #132]	; (800309c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003016:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d12e      	bne.n	800307c <HAL_TIM_PeriodElapsedCallback+0xb8>
		{
//			QEIGetFeedback(&QEIData, 2500);
//			KF.z = QEIData.QEIVelocity;
//			kalman_filter();
//			ZEstimateVelocity = KF.x_hat[1];
			QuinticRun(&QuinticVar,PositionLoop.ESS,0.0004);
 800301e:	4b20      	ldr	r3, [pc, #128]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8003020:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 8003024:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 80030a4 <HAL_TIM_PeriodElapsedCallback+0xe0>
 8003028:	4619      	mov	r1, r3
 800302a:	481f      	ldr	r0, [pc, #124]	; (80030a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800302c:	f7ff f8ce 	bl	80021cc <QuinticRun>
			CascadeLoop(&PositionLoop, &VelocityLoop, QEIData.QEIPosition, KF.x_hat[1],&QuinticVar, 3);
 8003030:	4b15      	ldr	r3, [pc, #84]	; (8003088 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	ee07 3a90 	vmov	s15, r3
 8003038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800303c:	4b13      	ldr	r3, [pc, #76]	; (800308c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800303e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003042:	eeb0 1a08 	vmov.f32	s2, #8	; 0x40400000  3.0
 8003046:	4a18      	ldr	r2, [pc, #96]	; (80030a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8003048:	eef0 0a47 	vmov.f32	s1, s14
 800304c:	eeb0 0a67 	vmov.f32	s0, s15
 8003050:	4916      	ldr	r1, [pc, #88]	; (80030ac <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8003052:	4813      	ldr	r0, [pc, #76]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8003054:	f7fe fd22 	bl	8001a9c <CascadeLoop>
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,abs(VelocityLoop.U));
 8003058:	4b14      	ldr	r3, [pc, #80]	; (80030ac <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003060:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003064:	4b12      	ldr	r3, [pc, #72]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, VelocityLoop.MotorDir);
 800306a:	4b10      	ldr	r3, [pc, #64]	; (80030ac <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800306c:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8003070:	b2db      	uxtb	r3, r3
 8003072:	461a      	mov	r2, r3
 8003074:	2140      	movs	r1, #64	; 0x40
 8003076:	480f      	ldr	r0, [pc, #60]	; (80030b4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8003078:	f002 fba2 	bl	80057c0 <HAL_GPIO_WritePin>
		}
	}
}
 800307c:	bf00      	nop
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	20000e58 	.word	0x20000e58
 8003088:	20000314 	.word	0x20000314
 800308c:	200003d0 	.word	0x200003d0
 8003090:	200005e8 	.word	0x200005e8
 8003094:	20000cec 	.word	0x20000cec
 8003098:	20000b5c 	.word	0x20000b5c
 800309c:	200002f8 	.word	0x200002f8
 80030a0:	20000370 	.word	0x20000370
 80030a4:	39d1b717 	.word	0x39d1b717
 80030a8:	20000320 	.word	0x20000320
 80030ac:	200003a0 	.word	0x200003a0
 80030b0:	20000da4 	.word	0x20000da4
 80030b4:	40020800 	.word	0x40020800

080030b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030bc:	b672      	cpsid	i
}
 80030be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030c0:	e7fe      	b.n	80030c0 <Error_Handler+0x8>
	...

080030c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	607b      	str	r3, [r7, #4]
 80030ce:	4b10      	ldr	r3, [pc, #64]	; (8003110 <HAL_MspInit+0x4c>)
 80030d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d2:	4a0f      	ldr	r2, [pc, #60]	; (8003110 <HAL_MspInit+0x4c>)
 80030d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030d8:	6453      	str	r3, [r2, #68]	; 0x44
 80030da:	4b0d      	ldr	r3, [pc, #52]	; (8003110 <HAL_MspInit+0x4c>)
 80030dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030e2:	607b      	str	r3, [r7, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	603b      	str	r3, [r7, #0]
 80030ea:	4b09      	ldr	r3, [pc, #36]	; (8003110 <HAL_MspInit+0x4c>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	4a08      	ldr	r2, [pc, #32]	; (8003110 <HAL_MspInit+0x4c>)
 80030f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f4:	6413      	str	r3, [r2, #64]	; 0x40
 80030f6:	4b06      	ldr	r3, [pc, #24]	; (8003110 <HAL_MspInit+0x4c>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fe:	603b      	str	r3, [r7, #0]
 8003100:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003102:	2007      	movs	r0, #7
 8003104:	f001 fd88 	bl	8004c18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003108:	bf00      	nop
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40023800 	.word	0x40023800

08003114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003118:	e7fe      	b.n	8003118 <NMI_Handler+0x4>

0800311a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800311a:	b480      	push	{r7}
 800311c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800311e:	e7fe      	b.n	800311e <HardFault_Handler+0x4>

08003120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003124:	e7fe      	b.n	8003124 <MemManage_Handler+0x4>

08003126 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003126:	b480      	push	{r7}
 8003128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800312a:	e7fe      	b.n	800312a <BusFault_Handler+0x4>

0800312c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003130:	e7fe      	b.n	8003130 <UsageFault_Handler+0x4>

08003132 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003132:	b480      	push	{r7}
 8003134:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003136:	bf00      	nop
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003144:	bf00      	nop
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800314e:	b480      	push	{r7}
 8003150:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003152:	bf00      	nop
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003160:	f001 fc6a 	bl	8004a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003164:	bf00      	nop
 8003166:	bd80      	pop	{r7, pc}

08003168 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800316c:	4802      	ldr	r0, [pc, #8]	; (8003178 <DMA1_Stream6_IRQHandler+0x10>)
 800316e:	f001 ff2d 	bl	8004fcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003172:	bf00      	nop
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	200010e8 	.word	0x200010e8

0800317c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8003180:	4802      	ldr	r0, [pc, #8]	; (800318c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8003182:	f003 fd75 	bl	8006c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003186:	bf00      	nop
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	20000fc0 	.word	0x20000fc0

08003190 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003194:	4802      	ldr	r0, [pc, #8]	; (80031a0 <TIM2_IRQHandler+0x10>)
 8003196:	f003 fd6b 	bl	8006c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800319a:	bf00      	nop
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	20000cf0 	.word	0x20000cf0

080031a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80031a8:	4802      	ldr	r0, [pc, #8]	; (80031b4 <TIM3_IRQHandler+0x10>)
 80031aa:	f003 fd61 	bl	8006c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80031ae:	bf00      	nop
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	20000da4 	.word	0x20000da4

080031b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80031bc:	4802      	ldr	r0, [pc, #8]	; (80031c8 <TIM4_IRQHandler+0x10>)
 80031be:	f003 fd57 	bl	8006c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80031c2:	bf00      	nop
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20000e58 	.word	0x20000e58

080031cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80031d0:	4802      	ldr	r0, [pc, #8]	; (80031dc <USART2_IRQHandler+0x10>)
 80031d2:	f005 f803 	bl	80081dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80031d6:	bf00      	nop
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	20001074 	.word	0x20001074

080031e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80031e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80031e8:	f002 fb04 	bl	80057f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80031ec:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80031f0:	f002 fb00 	bl	80057f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80031f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80031f8:	f002 fafc 	bl	80057f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80031fc:	bf00      	nop
 80031fe:	bd80      	pop	{r7, pc}

08003200 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003204:	4b06      	ldr	r3, [pc, #24]	; (8003220 <SystemInit+0x20>)
 8003206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320a:	4a05      	ldr	r2, [pc, #20]	; (8003220 <SystemInit+0x20>)
 800320c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003214:	bf00      	nop
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	e000ed00 	.word	0xe000ed00

08003224 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08c      	sub	sp, #48	; 0x30
 8003228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800322a:	f107 030c 	add.w	r3, r7, #12
 800322e:	2224      	movs	r2, #36	; 0x24
 8003230:	2100      	movs	r1, #0
 8003232:	4618      	mov	r0, r3
 8003234:	f006 f850 	bl	80092d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003238:	1d3b      	adds	r3, r7, #4
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003240:	4b21      	ldr	r3, [pc, #132]	; (80032c8 <MX_TIM2_Init+0xa4>)
 8003242:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003246:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003248:	4b1f      	ldr	r3, [pc, #124]	; (80032c8 <MX_TIM2_Init+0xa4>)
 800324a:	2200      	movs	r2, #0
 800324c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800324e:	4b1e      	ldr	r3, [pc, #120]	; (80032c8 <MX_TIM2_Init+0xa4>)
 8003250:	2200      	movs	r2, #0
 8003252:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003254:	4b1c      	ldr	r3, [pc, #112]	; (80032c8 <MX_TIM2_Init+0xa4>)
 8003256:	f04f 32ff 	mov.w	r2, #4294967295
 800325a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800325c:	4b1a      	ldr	r3, [pc, #104]	; (80032c8 <MX_TIM2_Init+0xa4>)
 800325e:	2200      	movs	r2, #0
 8003260:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003262:	4b19      	ldr	r3, [pc, #100]	; (80032c8 <MX_TIM2_Init+0xa4>)
 8003264:	2200      	movs	r2, #0
 8003266:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003268:	2303      	movs	r3, #3
 800326a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800326c:	2300      	movs	r3, #0
 800326e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003270:	2301      	movs	r3, #1
 8003272:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003274:	2300      	movs	r3, #0
 8003276:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800327c:	2300      	movs	r3, #0
 800327e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003280:	2301      	movs	r3, #1
 8003282:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003284:	2300      	movs	r3, #0
 8003286:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003288:	2300      	movs	r3, #0
 800328a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800328c:	f107 030c 	add.w	r3, r7, #12
 8003290:	4619      	mov	r1, r3
 8003292:	480d      	ldr	r0, [pc, #52]	; (80032c8 <MX_TIM2_Init+0xa4>)
 8003294:	f003 fbaa 	bl	80069ec <HAL_TIM_Encoder_Init>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800329e:	f7ff ff0b 	bl	80030b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032a2:	2300      	movs	r3, #0
 80032a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032a6:	2300      	movs	r3, #0
 80032a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032aa:	1d3b      	adds	r3, r7, #4
 80032ac:	4619      	mov	r1, r3
 80032ae:	4806      	ldr	r0, [pc, #24]	; (80032c8 <MX_TIM2_Init+0xa4>)
 80032b0:	f004 fcb4 	bl	8007c1c <HAL_TIMEx_MasterConfigSynchronization>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80032ba:	f7ff fefd 	bl	80030b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80032be:	bf00      	nop
 80032c0:	3730      	adds	r7, #48	; 0x30
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20000cf0 	.word	0x20000cf0

080032cc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08e      	sub	sp, #56	; 0x38
 80032d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	605a      	str	r2, [r3, #4]
 80032dc:	609a      	str	r2, [r3, #8]
 80032de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032e0:	f107 0320 	add.w	r3, r7, #32
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032ea:	1d3b      	adds	r3, r7, #4
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	605a      	str	r2, [r3, #4]
 80032f2:	609a      	str	r2, [r3, #8]
 80032f4:	60da      	str	r2, [r3, #12]
 80032f6:	611a      	str	r2, [r3, #16]
 80032f8:	615a      	str	r2, [r3, #20]
 80032fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80032fc:	4b2c      	ldr	r3, [pc, #176]	; (80033b0 <MX_TIM3_Init+0xe4>)
 80032fe:	4a2d      	ldr	r2, [pc, #180]	; (80033b4 <MX_TIM3_Init+0xe8>)
 8003300:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003302:	4b2b      	ldr	r3, [pc, #172]	; (80033b0 <MX_TIM3_Init+0xe4>)
 8003304:	2200      	movs	r2, #0
 8003306:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003308:	4b29      	ldr	r3, [pc, #164]	; (80033b0 <MX_TIM3_Init+0xe4>)
 800330a:	2200      	movs	r2, #0
 800330c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 800330e:	4b28      	ldr	r3, [pc, #160]	; (80033b0 <MX_TIM3_Init+0xe4>)
 8003310:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8003314:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003316:	4b26      	ldr	r3, [pc, #152]	; (80033b0 <MX_TIM3_Init+0xe4>)
 8003318:	2200      	movs	r2, #0
 800331a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800331c:	4b24      	ldr	r3, [pc, #144]	; (80033b0 <MX_TIM3_Init+0xe4>)
 800331e:	2200      	movs	r2, #0
 8003320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003322:	4823      	ldr	r0, [pc, #140]	; (80033b0 <MX_TIM3_Init+0xe4>)
 8003324:	f003 f85a 	bl	80063dc <HAL_TIM_Base_Init>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800332e:	f7ff fec3 	bl	80030b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003336:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003338:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800333c:	4619      	mov	r1, r3
 800333e:	481c      	ldr	r0, [pc, #112]	; (80033b0 <MX_TIM3_Init+0xe4>)
 8003340:	f003 fedc 	bl	80070fc <HAL_TIM_ConfigClockSource>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800334a:	f7ff feb5 	bl	80030b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800334e:	4818      	ldr	r0, [pc, #96]	; (80033b0 <MX_TIM3_Init+0xe4>)
 8003350:	f003 f968 	bl	8006624 <HAL_TIM_PWM_Init>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800335a:	f7ff fead 	bl	80030b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800335e:	2300      	movs	r3, #0
 8003360:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003362:	2300      	movs	r3, #0
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003366:	f107 0320 	add.w	r3, r7, #32
 800336a:	4619      	mov	r1, r3
 800336c:	4810      	ldr	r0, [pc, #64]	; (80033b0 <MX_TIM3_Init+0xe4>)
 800336e:	f004 fc55 	bl	8007c1c <HAL_TIMEx_MasterConfigSynchronization>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003378:	f7ff fe9e 	bl	80030b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800337c:	2360      	movs	r3, #96	; 0x60
 800337e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003380:	2300      	movs	r3, #0
 8003382:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003388:	2300      	movs	r3, #0
 800338a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800338c:	1d3b      	adds	r3, r7, #4
 800338e:	2208      	movs	r2, #8
 8003390:	4619      	mov	r1, r3
 8003392:	4807      	ldr	r0, [pc, #28]	; (80033b0 <MX_TIM3_Init+0xe4>)
 8003394:	f003 fdf0 	bl	8006f78 <HAL_TIM_PWM_ConfigChannel>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800339e:	f7ff fe8b 	bl	80030b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80033a2:	4803      	ldr	r0, [pc, #12]	; (80033b0 <MX_TIM3_Init+0xe4>)
 80033a4:	f000 f9c0 	bl	8003728 <HAL_TIM_MspPostInit>

}
 80033a8:	bf00      	nop
 80033aa:	3738      	adds	r7, #56	; 0x38
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	20000da4 	.word	0x20000da4
 80033b4:	40000400 	.word	0x40000400

080033b8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033be:	f107 0308 	add.w	r3, r7, #8
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	605a      	str	r2, [r3, #4]
 80033c8:	609a      	str	r2, [r3, #8]
 80033ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033cc:	463b      	mov	r3, r7
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80033d4:	4b1d      	ldr	r3, [pc, #116]	; (800344c <MX_TIM4_Init+0x94>)
 80033d6:	4a1e      	ldr	r2, [pc, #120]	; (8003450 <MX_TIM4_Init+0x98>)
 80033d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 80033da:	4b1c      	ldr	r3, [pc, #112]	; (800344c <MX_TIM4_Init+0x94>)
 80033dc:	2263      	movs	r2, #99	; 0x63
 80033de:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033e0:	4b1a      	ldr	r3, [pc, #104]	; (800344c <MX_TIM4_Init+0x94>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 399;
 80033e6:	4b19      	ldr	r3, [pc, #100]	; (800344c <MX_TIM4_Init+0x94>)
 80033e8:	f240 128f 	movw	r2, #399	; 0x18f
 80033ec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033ee:	4b17      	ldr	r3, [pc, #92]	; (800344c <MX_TIM4_Init+0x94>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033f4:	4b15      	ldr	r3, [pc, #84]	; (800344c <MX_TIM4_Init+0x94>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80033fa:	4814      	ldr	r0, [pc, #80]	; (800344c <MX_TIM4_Init+0x94>)
 80033fc:	f002 ffee 	bl	80063dc <HAL_TIM_Base_Init>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8003406:	f7ff fe57 	bl	80030b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800340a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800340e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003410:	f107 0308 	add.w	r3, r7, #8
 8003414:	4619      	mov	r1, r3
 8003416:	480d      	ldr	r0, [pc, #52]	; (800344c <MX_TIM4_Init+0x94>)
 8003418:	f003 fe70 	bl	80070fc <HAL_TIM_ConfigClockSource>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8003422:	f7ff fe49 	bl	80030b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003426:	2300      	movs	r3, #0
 8003428:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800342a:	2300      	movs	r3, #0
 800342c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800342e:	463b      	mov	r3, r7
 8003430:	4619      	mov	r1, r3
 8003432:	4806      	ldr	r0, [pc, #24]	; (800344c <MX_TIM4_Init+0x94>)
 8003434:	f004 fbf2 	bl	8007c1c <HAL_TIMEx_MasterConfigSynchronization>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800343e:	f7ff fe3b 	bl	80030b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003442:	bf00      	nop
 8003444:	3718      	adds	r7, #24
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	20000e58 	.word	0x20000e58
 8003450:	40000800 	.word	0x40000800

08003454 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800345a:	f107 0308 	add.w	r3, r7, #8
 800345e:	2200      	movs	r2, #0
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	605a      	str	r2, [r3, #4]
 8003464:	609a      	str	r2, [r3, #8]
 8003466:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003468:	463b      	mov	r3, r7
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003470:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <MX_TIM5_Init+0x94>)
 8003472:	4a1e      	ldr	r2, [pc, #120]	; (80034ec <MX_TIM5_Init+0x98>)
 8003474:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8003476:	4b1c      	ldr	r3, [pc, #112]	; (80034e8 <MX_TIM5_Init+0x94>)
 8003478:	2253      	movs	r2, #83	; 0x53
 800347a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800347c:	4b1a      	ldr	r3, [pc, #104]	; (80034e8 <MX_TIM5_Init+0x94>)
 800347e:	2200      	movs	r2, #0
 8003480:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003482:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <MX_TIM5_Init+0x94>)
 8003484:	f04f 32ff 	mov.w	r2, #4294967295
 8003488:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800348a:	4b17      	ldr	r3, [pc, #92]	; (80034e8 <MX_TIM5_Init+0x94>)
 800348c:	2200      	movs	r2, #0
 800348e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003490:	4b15      	ldr	r3, [pc, #84]	; (80034e8 <MX_TIM5_Init+0x94>)
 8003492:	2200      	movs	r2, #0
 8003494:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003496:	4814      	ldr	r0, [pc, #80]	; (80034e8 <MX_TIM5_Init+0x94>)
 8003498:	f002 ffa0 	bl	80063dc <HAL_TIM_Base_Init>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80034a2:	f7ff fe09 	bl	80030b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80034ac:	f107 0308 	add.w	r3, r7, #8
 80034b0:	4619      	mov	r1, r3
 80034b2:	480d      	ldr	r0, [pc, #52]	; (80034e8 <MX_TIM5_Init+0x94>)
 80034b4:	f003 fe22 	bl	80070fc <HAL_TIM_ConfigClockSource>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80034be:	f7ff fdfb 	bl	80030b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034c2:	2300      	movs	r3, #0
 80034c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034c6:	2300      	movs	r3, #0
 80034c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80034ca:	463b      	mov	r3, r7
 80034cc:	4619      	mov	r1, r3
 80034ce:	4806      	ldr	r0, [pc, #24]	; (80034e8 <MX_TIM5_Init+0x94>)
 80034d0:	f004 fba4 	bl	8007c1c <HAL_TIMEx_MasterConfigSynchronization>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80034da:	f7ff fded 	bl	80030b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80034de:	bf00      	nop
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20000f0c 	.word	0x20000f0c
 80034ec:	40000c00 	.word	0x40000c00

080034f0 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80034f6:	1d3b      	adds	r3, r7, #4
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	605a      	str	r2, [r3, #4]
 80034fe:	609a      	str	r2, [r3, #8]
 8003500:	60da      	str	r2, [r3, #12]
 8003502:	611a      	str	r2, [r3, #16]
 8003504:	615a      	str	r2, [r3, #20]
 8003506:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003508:	4b21      	ldr	r3, [pc, #132]	; (8003590 <MX_TIM11_Init+0xa0>)
 800350a:	4a22      	ldr	r2, [pc, #136]	; (8003594 <MX_TIM11_Init+0xa4>)
 800350c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 800350e:	4b20      	ldr	r3, [pc, #128]	; (8003590 <MX_TIM11_Init+0xa0>)
 8003510:	2263      	movs	r2, #99	; 0x63
 8003512:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003514:	4b1e      	ldr	r3, [pc, #120]	; (8003590 <MX_TIM11_Init+0xa0>)
 8003516:	2200      	movs	r2, #0
 8003518:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 800351a:	4b1d      	ldr	r3, [pc, #116]	; (8003590 <MX_TIM11_Init+0xa0>)
 800351c:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8003520:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003522:	4b1b      	ldr	r3, [pc, #108]	; (8003590 <MX_TIM11_Init+0xa0>)
 8003524:	2200      	movs	r2, #0
 8003526:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003528:	4b19      	ldr	r3, [pc, #100]	; (8003590 <MX_TIM11_Init+0xa0>)
 800352a:	2200      	movs	r2, #0
 800352c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800352e:	4818      	ldr	r0, [pc, #96]	; (8003590 <MX_TIM11_Init+0xa0>)
 8003530:	f002 ff54 	bl	80063dc <HAL_TIM_Base_Init>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800353a:	f7ff fdbd 	bl	80030b8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 800353e:	4814      	ldr	r0, [pc, #80]	; (8003590 <MX_TIM11_Init+0xa0>)
 8003540:	f003 f80a 	bl	8006558 <HAL_TIM_OC_Init>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800354a:	f7ff fdb5 	bl	80030b8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 800354e:	2108      	movs	r1, #8
 8003550:	480f      	ldr	r0, [pc, #60]	; (8003590 <MX_TIM11_Init+0xa0>)
 8003552:	f003 f97d 	bl	8006850 <HAL_TIM_OnePulse_Init>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 800355c:	f7ff fdac 	bl	80030b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003560:	2300      	movs	r3, #0
 8003562:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 8003564:	f240 5399 	movw	r3, #1433	; 0x599
 8003568:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800356a:	2300      	movs	r3, #0
 800356c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003572:	1d3b      	adds	r3, r7, #4
 8003574:	2200      	movs	r2, #0
 8003576:	4619      	mov	r1, r3
 8003578:	4805      	ldr	r0, [pc, #20]	; (8003590 <MX_TIM11_Init+0xa0>)
 800357a:	f003 fca1 	bl	8006ec0 <HAL_TIM_OC_ConfigChannel>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8003584:	f7ff fd98 	bl	80030b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003588:	bf00      	nop
 800358a:	3720      	adds	r7, #32
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	20000fc0 	.word	0x20000fc0
 8003594:	40014800 	.word	0x40014800

08003598 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08a      	sub	sp, #40	; 0x28
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a0:	f107 0314 	add.w	r3, r7, #20
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	609a      	str	r2, [r3, #8]
 80035ac:	60da      	str	r2, [r3, #12]
 80035ae:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b8:	d133      	bne.n	8003622 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	4b1b      	ldr	r3, [pc, #108]	; (800362c <HAL_TIM_Encoder_MspInit+0x94>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	4a1a      	ldr	r2, [pc, #104]	; (800362c <HAL_TIM_Encoder_MspInit+0x94>)
 80035c4:	f043 0301 	orr.w	r3, r3, #1
 80035c8:	6413      	str	r3, [r2, #64]	; 0x40
 80035ca:	4b18      	ldr	r3, [pc, #96]	; (800362c <HAL_TIM_Encoder_MspInit+0x94>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d6:	2300      	movs	r3, #0
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	4b14      	ldr	r3, [pc, #80]	; (800362c <HAL_TIM_Encoder_MspInit+0x94>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	4a13      	ldr	r2, [pc, #76]	; (800362c <HAL_TIM_Encoder_MspInit+0x94>)
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	6313      	str	r3, [r2, #48]	; 0x30
 80035e6:	4b11      	ldr	r3, [pc, #68]	; (800362c <HAL_TIM_Encoder_MspInit+0x94>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80035f2:	2303      	movs	r3, #3
 80035f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f6:	2302      	movs	r3, #2
 80035f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fa:	2300      	movs	r3, #0
 80035fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fe:	2300      	movs	r3, #0
 8003600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003602:	2301      	movs	r3, #1
 8003604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003606:	f107 0314 	add.w	r3, r7, #20
 800360a:	4619      	mov	r1, r3
 800360c:	4808      	ldr	r0, [pc, #32]	; (8003630 <HAL_TIM_Encoder_MspInit+0x98>)
 800360e:	f001 ff53 	bl	80054b8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003612:	2200      	movs	r2, #0
 8003614:	2100      	movs	r1, #0
 8003616:	201c      	movs	r0, #28
 8003618:	f001 fb09 	bl	8004c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800361c:	201c      	movs	r0, #28
 800361e:	f001 fb22 	bl	8004c66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003622:	bf00      	nop
 8003624:	3728      	adds	r7, #40	; 0x28
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40023800 	.word	0x40023800
 8003630:	40020000 	.word	0x40020000

08003634 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a34      	ldr	r2, [pc, #208]	; (8003714 <HAL_TIM_Base_MspInit+0xe0>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d116      	bne.n	8003674 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	4b33      	ldr	r3, [pc, #204]	; (8003718 <HAL_TIM_Base_MspInit+0xe4>)
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	4a32      	ldr	r2, [pc, #200]	; (8003718 <HAL_TIM_Base_MspInit+0xe4>)
 8003650:	f043 0302 	orr.w	r3, r3, #2
 8003654:	6413      	str	r3, [r2, #64]	; 0x40
 8003656:	4b30      	ldr	r3, [pc, #192]	; (8003718 <HAL_TIM_Base_MspInit+0xe4>)
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003662:	2200      	movs	r2, #0
 8003664:	2100      	movs	r1, #0
 8003666:	201d      	movs	r0, #29
 8003668:	f001 fae1 	bl	8004c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800366c:	201d      	movs	r0, #29
 800366e:	f001 fafa 	bl	8004c66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003672:	e04a      	b.n	800370a <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a28      	ldr	r2, [pc, #160]	; (800371c <HAL_TIM_Base_MspInit+0xe8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d116      	bne.n	80036ac <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800367e:	2300      	movs	r3, #0
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	4b25      	ldr	r3, [pc, #148]	; (8003718 <HAL_TIM_Base_MspInit+0xe4>)
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	4a24      	ldr	r2, [pc, #144]	; (8003718 <HAL_TIM_Base_MspInit+0xe4>)
 8003688:	f043 0304 	orr.w	r3, r3, #4
 800368c:	6413      	str	r3, [r2, #64]	; 0x40
 800368e:	4b22      	ldr	r3, [pc, #136]	; (8003718 <HAL_TIM_Base_MspInit+0xe4>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	613b      	str	r3, [r7, #16]
 8003698:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 1);
 800369a:	2201      	movs	r2, #1
 800369c:	2100      	movs	r1, #0
 800369e:	201e      	movs	r0, #30
 80036a0:	f001 fac5 	bl	8004c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80036a4:	201e      	movs	r0, #30
 80036a6:	f001 fade 	bl	8004c66 <HAL_NVIC_EnableIRQ>
}
 80036aa:	e02e      	b.n	800370a <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM5)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a1b      	ldr	r2, [pc, #108]	; (8003720 <HAL_TIM_Base_MspInit+0xec>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d10e      	bne.n	80036d4 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80036b6:	2300      	movs	r3, #0
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	4b17      	ldr	r3, [pc, #92]	; (8003718 <HAL_TIM_Base_MspInit+0xe4>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	4a16      	ldr	r2, [pc, #88]	; (8003718 <HAL_TIM_Base_MspInit+0xe4>)
 80036c0:	f043 0308 	orr.w	r3, r3, #8
 80036c4:	6413      	str	r3, [r2, #64]	; 0x40
 80036c6:	4b14      	ldr	r3, [pc, #80]	; (8003718 <HAL_TIM_Base_MspInit+0xe4>)
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	68fb      	ldr	r3, [r7, #12]
}
 80036d2:	e01a      	b.n	800370a <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM11)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a12      	ldr	r2, [pc, #72]	; (8003724 <HAL_TIM_Base_MspInit+0xf0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d115      	bne.n	800370a <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80036de:	2300      	movs	r3, #0
 80036e0:	60bb      	str	r3, [r7, #8]
 80036e2:	4b0d      	ldr	r3, [pc, #52]	; (8003718 <HAL_TIM_Base_MspInit+0xe4>)
 80036e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e6:	4a0c      	ldr	r2, [pc, #48]	; (8003718 <HAL_TIM_Base_MspInit+0xe4>)
 80036e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036ec:	6453      	str	r3, [r2, #68]	; 0x44
 80036ee:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <HAL_TIM_Base_MspInit+0xe4>)
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036f6:	60bb      	str	r3, [r7, #8]
 80036f8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80036fa:	2200      	movs	r2, #0
 80036fc:	2100      	movs	r1, #0
 80036fe:	201a      	movs	r0, #26
 8003700:	f001 fa95 	bl	8004c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003704:	201a      	movs	r0, #26
 8003706:	f001 faae 	bl	8004c66 <HAL_NVIC_EnableIRQ>
}
 800370a:	bf00      	nop
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40000400 	.word	0x40000400
 8003718:	40023800 	.word	0x40023800
 800371c:	40000800 	.word	0x40000800
 8003720:	40000c00 	.word	0x40000c00
 8003724:	40014800 	.word	0x40014800

08003728 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003730:	f107 030c 	add.w	r3, r7, #12
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	609a      	str	r2, [r3, #8]
 800373c:	60da      	str	r2, [r3, #12]
 800373e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a12      	ldr	r2, [pc, #72]	; (8003790 <HAL_TIM_MspPostInit+0x68>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d11e      	bne.n	8003788 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800374a:	2300      	movs	r3, #0
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	4b11      	ldr	r3, [pc, #68]	; (8003794 <HAL_TIM_MspPostInit+0x6c>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	4a10      	ldr	r2, [pc, #64]	; (8003794 <HAL_TIM_MspPostInit+0x6c>)
 8003754:	f043 0304 	orr.w	r3, r3, #4
 8003758:	6313      	str	r3, [r2, #48]	; 0x30
 800375a:	4b0e      	ldr	r3, [pc, #56]	; (8003794 <HAL_TIM_MspPostInit+0x6c>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	60bb      	str	r3, [r7, #8]
 8003764:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003766:	f44f 7380 	mov.w	r3, #256	; 0x100
 800376a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800376c:	2302      	movs	r3, #2
 800376e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003774:	2300      	movs	r3, #0
 8003776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003778:	2302      	movs	r3, #2
 800377a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800377c:	f107 030c 	add.w	r3, r7, #12
 8003780:	4619      	mov	r1, r3
 8003782:	4805      	ldr	r0, [pc, #20]	; (8003798 <HAL_TIM_MspPostInit+0x70>)
 8003784:	f001 fe98 	bl	80054b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003788:	bf00      	nop
 800378a:	3720      	adds	r7, #32
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40000400 	.word	0x40000400
 8003794:	40023800 	.word	0x40023800
 8003798:	40020800 	.word	0x40020800

0800379c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80037a0:	4b12      	ldr	r3, [pc, #72]	; (80037ec <MX_USART2_UART_Init+0x50>)
 80037a2:	4a13      	ldr	r2, [pc, #76]	; (80037f0 <MX_USART2_UART_Init+0x54>)
 80037a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80037a6:	4b11      	ldr	r3, [pc, #68]	; (80037ec <MX_USART2_UART_Init+0x50>)
 80037a8:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80037ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80037ae:	4b0f      	ldr	r3, [pc, #60]	; (80037ec <MX_USART2_UART_Init+0x50>)
 80037b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037b4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80037b6:	4b0d      	ldr	r3, [pc, #52]	; (80037ec <MX_USART2_UART_Init+0x50>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80037bc:	4b0b      	ldr	r3, [pc, #44]	; (80037ec <MX_USART2_UART_Init+0x50>)
 80037be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80037c4:	4b09      	ldr	r3, [pc, #36]	; (80037ec <MX_USART2_UART_Init+0x50>)
 80037c6:	220c      	movs	r2, #12
 80037c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037ca:	4b08      	ldr	r3, [pc, #32]	; (80037ec <MX_USART2_UART_Init+0x50>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80037d0:	4b06      	ldr	r3, [pc, #24]	; (80037ec <MX_USART2_UART_Init+0x50>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80037d6:	4805      	ldr	r0, [pc, #20]	; (80037ec <MX_USART2_UART_Init+0x50>)
 80037d8:	f004 faac 	bl	8007d34 <HAL_UART_Init>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80037e2:	f7ff fc69 	bl	80030b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80037e6:	bf00      	nop
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20001074 	.word	0x20001074
 80037f0:	40004400 	.word	0x40004400

080037f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08a      	sub	sp, #40	; 0x28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037fc:	f107 0314 	add.w	r3, r7, #20
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	605a      	str	r2, [r3, #4]
 8003806:	609a      	str	r2, [r3, #8]
 8003808:	60da      	str	r2, [r3, #12]
 800380a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a34      	ldr	r2, [pc, #208]	; (80038e4 <HAL_UART_MspInit+0xf0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d161      	bne.n	80038da <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003816:	2300      	movs	r3, #0
 8003818:	613b      	str	r3, [r7, #16]
 800381a:	4b33      	ldr	r3, [pc, #204]	; (80038e8 <HAL_UART_MspInit+0xf4>)
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	4a32      	ldr	r2, [pc, #200]	; (80038e8 <HAL_UART_MspInit+0xf4>)
 8003820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003824:	6413      	str	r3, [r2, #64]	; 0x40
 8003826:	4b30      	ldr	r3, [pc, #192]	; (80038e8 <HAL_UART_MspInit+0xf4>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382e:	613b      	str	r3, [r7, #16]
 8003830:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	4b2c      	ldr	r3, [pc, #176]	; (80038e8 <HAL_UART_MspInit+0xf4>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	4a2b      	ldr	r2, [pc, #172]	; (80038e8 <HAL_UART_MspInit+0xf4>)
 800383c:	f043 0301 	orr.w	r3, r3, #1
 8003840:	6313      	str	r3, [r2, #48]	; 0x30
 8003842:	4b29      	ldr	r3, [pc, #164]	; (80038e8 <HAL_UART_MspInit+0xf4>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800384e:	230c      	movs	r3, #12
 8003850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003852:	2302      	movs	r3, #2
 8003854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003856:	2300      	movs	r3, #0
 8003858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800385a:	2303      	movs	r3, #3
 800385c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800385e:	2307      	movs	r3, #7
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003862:	f107 0314 	add.w	r3, r7, #20
 8003866:	4619      	mov	r1, r3
 8003868:	4820      	ldr	r0, [pc, #128]	; (80038ec <HAL_UART_MspInit+0xf8>)
 800386a:	f001 fe25 	bl	80054b8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800386e:	4b20      	ldr	r3, [pc, #128]	; (80038f0 <HAL_UART_MspInit+0xfc>)
 8003870:	4a20      	ldr	r2, [pc, #128]	; (80038f4 <HAL_UART_MspInit+0x100>)
 8003872:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003874:	4b1e      	ldr	r3, [pc, #120]	; (80038f0 <HAL_UART_MspInit+0xfc>)
 8003876:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800387a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800387c:	4b1c      	ldr	r3, [pc, #112]	; (80038f0 <HAL_UART_MspInit+0xfc>)
 800387e:	2240      	movs	r2, #64	; 0x40
 8003880:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003882:	4b1b      	ldr	r3, [pc, #108]	; (80038f0 <HAL_UART_MspInit+0xfc>)
 8003884:	2200      	movs	r2, #0
 8003886:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003888:	4b19      	ldr	r3, [pc, #100]	; (80038f0 <HAL_UART_MspInit+0xfc>)
 800388a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800388e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003890:	4b17      	ldr	r3, [pc, #92]	; (80038f0 <HAL_UART_MspInit+0xfc>)
 8003892:	2200      	movs	r2, #0
 8003894:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003896:	4b16      	ldr	r3, [pc, #88]	; (80038f0 <HAL_UART_MspInit+0xfc>)
 8003898:	2200      	movs	r2, #0
 800389a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800389c:	4b14      	ldr	r3, [pc, #80]	; (80038f0 <HAL_UART_MspInit+0xfc>)
 800389e:	2200      	movs	r2, #0
 80038a0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80038a2:	4b13      	ldr	r3, [pc, #76]	; (80038f0 <HAL_UART_MspInit+0xfc>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038a8:	4b11      	ldr	r3, [pc, #68]	; (80038f0 <HAL_UART_MspInit+0xfc>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80038ae:	4810      	ldr	r0, [pc, #64]	; (80038f0 <HAL_UART_MspInit+0xfc>)
 80038b0:	f001 f9f4 	bl	8004c9c <HAL_DMA_Init>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80038ba:	f7ff fbfd 	bl	80030b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a0b      	ldr	r2, [pc, #44]	; (80038f0 <HAL_UART_MspInit+0xfc>)
 80038c2:	635a      	str	r2, [r3, #52]	; 0x34
 80038c4:	4a0a      	ldr	r2, [pc, #40]	; (80038f0 <HAL_UART_MspInit+0xfc>)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80038ca:	2200      	movs	r2, #0
 80038cc:	2100      	movs	r1, #0
 80038ce:	2026      	movs	r0, #38	; 0x26
 80038d0:	f001 f9ad 	bl	8004c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80038d4:	2026      	movs	r0, #38	; 0x26
 80038d6:	f001 f9c6 	bl	8004c66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80038da:	bf00      	nop
 80038dc:	3728      	adds	r7, #40	; 0x28
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40004400 	.word	0x40004400
 80038e8:	40023800 	.word	0x40023800
 80038ec:	40020000 	.word	0x40020000
 80038f0:	200010e8 	.word	0x200010e8
 80038f4:	400260a0 	.word	0x400260a0

080038f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80038f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003930 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80038fc:	480d      	ldr	r0, [pc, #52]	; (8003934 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80038fe:	490e      	ldr	r1, [pc, #56]	; (8003938 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003900:	4a0e      	ldr	r2, [pc, #56]	; (800393c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003904:	e002      	b.n	800390c <LoopCopyDataInit>

08003906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800390a:	3304      	adds	r3, #4

0800390c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800390c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800390e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003910:	d3f9      	bcc.n	8003906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003912:	4a0b      	ldr	r2, [pc, #44]	; (8003940 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003914:	4c0b      	ldr	r4, [pc, #44]	; (8003944 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003918:	e001      	b.n	800391e <LoopFillZerobss>

0800391a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800391a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800391c:	3204      	adds	r2, #4

0800391e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800391e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003920:	d3fb      	bcc.n	800391a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003922:	f7ff fc6d 	bl	8003200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003926:	f005 fca5 	bl	8009274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800392a:	f7ff f8dd 	bl	8002ae8 <main>
  bx  lr    
 800392e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003930:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003938:	20000280 	.word	0x20000280
  ldr r2, =_sidata
 800393c:	0800b290 	.word	0x0800b290
  ldr r2, =_sbss
 8003940:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 8003944:	2000114c 	.word	0x2000114c

08003948 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003948:	e7fe      	b.n	8003948 <ADC_IRQHandler>
	...

0800394c <arm_atan2_f32>:
                   and compute the right angle.
*/


arm_status arm_atan2_f32(float32_t y,float32_t x,float32_t *result)
{
 800394c:	b480      	push	{r7}
 800394e:	b0a1      	sub	sp, #132	; 0x84
 8003950:	af00      	add	r7, sp, #0
 8003952:	ed87 0a03 	vstr	s0, [r7, #12]
 8003956:	edc7 0a02 	vstr	s1, [r7, #8]
 800395a:	6078      	str	r0, [r7, #4]
    if (x > 0.0f)
 800395c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003960:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003968:	f340 808e 	ble.w	8003a88 <arm_atan2_f32+0x13c>
    {
        *result=arm_atan_f32(y/x);
 800396c:	edd7 6a03 	vldr	s13, [r7, #12]
 8003970:	ed97 7a02 	vldr	s14, [r7, #8]
 8003974:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003978:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
   int sign=0;
 800397c:	2300      	movs	r3, #0
 800397e:	67bb      	str	r3, [r7, #120]	; 0x78
   float32_t res=0.0f;
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	677b      	str	r3, [r7, #116]	; 0x74
   if (x < 0.0f)
 8003986:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800398a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800398e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003992:	d507      	bpl.n	80039a4 <arm_atan2_f32+0x58>
      sign=1;
 8003994:	2301      	movs	r3, #1
 8003996:	67bb      	str	r3, [r7, #120]	; 0x78
      x=-x;
 8003998:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800399c:	eef1 7a67 	vneg.f32	s15, s15
 80039a0:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
   if (x > 1.0f)
 80039a4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80039a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039b4:	dd31      	ble.n	8003a1a <arm_atan2_f32+0xce>
      x = 1.0f / x;
 80039b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039ba:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80039be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039c2:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
 80039c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039c8:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 80039ca:	4bb5      	ldr	r3, [pc, #724]	; (8003ca0 <arm_atan2_f32+0x354>)
 80039cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    int i=1;
 80039ce:	2301      	movs	r3, #1
 80039d0:	66bb      	str	r3, [r7, #104]	; 0x68
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80039d2:	2301      	movs	r3, #1
 80039d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80039d6:	e014      	b.n	8003a02 <arm_atan2_f32+0xb6>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80039d8:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80039dc:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80039e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039e6:	f1c3 0309 	rsb	r3, r3, #9
 80039ea:	4aae      	ldr	r2, [pc, #696]	; (8003ca4 <arm_atan2_f32+0x358>)
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	edd3 7a00 	vldr	s15, [r3]
 80039f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039f8:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80039fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039fe:	3301      	adds	r3, #1
 8003a00:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a04:	2b09      	cmp	r3, #9
 8003a06:	dde7      	ble.n	80039d8 <arm_atan2_f32+0x8c>
    return(res);
 8003a08:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8003a0c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8003ca8 <arm_atan2_f32+0x35c>
 8003a10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a14:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 8003a18:	e028      	b.n	8003a6c <arm_atan2_f32+0x120>
 8003a1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a1c:	667b      	str	r3, [r7, #100]	; 0x64
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8003a1e:	4ba0      	ldr	r3, [pc, #640]	; (8003ca0 <arm_atan2_f32+0x354>)
 8003a20:	663b      	str	r3, [r7, #96]	; 0x60
    int i=1;
 8003a22:	2301      	movs	r3, #1
 8003a24:	65fb      	str	r3, [r7, #92]	; 0x5c
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8003a26:	2301      	movs	r3, #1
 8003a28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a2a:	e014      	b.n	8003a56 <arm_atan2_f32+0x10a>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8003a2c:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8003a30:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003a34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a3a:	f1c3 0309 	rsb	r3, r3, #9
 8003a3e:	4a99      	ldr	r2, [pc, #612]	; (8003ca4 <arm_atan2_f32+0x358>)
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	edd3 7a00 	vldr	s15, [r3]
 8003a48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a4c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8003a50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a52:	3301      	adds	r3, #1
 8003a54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a58:	2b09      	cmp	r3, #9
 8003a5a:	dde7      	ble.n	8003a2c <arm_atan2_f32+0xe0>
    return(res);
 8003a5c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
     res += arm_atan_limited_f32(x);
 8003a60:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8003a64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a68:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
   if (sign)
 8003a6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d005      	beq.n	8003a7e <arm_atan2_f32+0x132>
     res = -res;
 8003a72:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003a76:	eef1 7a67 	vneg.f32	s15, s15
 8003a7a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
   return(res);
 8003a7e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
        *result=arm_atan_f32(y/x);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	601a      	str	r2, [r3, #0]
        return(ARM_MATH_SUCCESS);
 8003a84:	2300      	movs	r3, #0
 8003a86:	e175      	b.n	8003d74 <arm_atan2_f32+0x428>
    }
    if (x < 0.0f)
 8003a88:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a94:	f140 814d 	bpl.w	8003d32 <arm_atan2_f32+0x3e6>
    {
        if (y > 0.0f)
 8003a98:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa4:	f340 8093 	ble.w	8003bce <arm_atan2_f32+0x282>
        {
           *result=arm_atan_f32(y/x) + PI;
 8003aa8:	edd7 6a03 	vldr	s13, [r7, #12]
 8003aac:	ed97 7a02 	vldr	s14, [r7, #8]
 8003ab0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ab4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
   int sign=0;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	657b      	str	r3, [r7, #84]	; 0x54
   float32_t res=0.0f;
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	653b      	str	r3, [r7, #80]	; 0x50
   if (x < 0.0f)
 8003ac2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003ac6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ace:	d507      	bpl.n	8003ae0 <arm_atan2_f32+0x194>
      sign=1;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	657b      	str	r3, [r7, #84]	; 0x54
      x=-x;
 8003ad4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003ad8:	eef1 7a67 	vneg.f32	s15, s15
 8003adc:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
   if (x > 1.0f)
 8003ae0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003ae4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ae8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af0:	dd31      	ble.n	8003b56 <arm_atan2_f32+0x20a>
      x = 1.0f / x;
 8003af2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003af6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003afe:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8003b02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b04:	64fb      	str	r3, [r7, #76]	; 0x4c
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8003b06:	4b66      	ldr	r3, [pc, #408]	; (8003ca0 <arm_atan2_f32+0x354>)
 8003b08:	64bb      	str	r3, [r7, #72]	; 0x48
    int i=1;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	647b      	str	r3, [r7, #68]	; 0x44
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8003b0e:	2301      	movs	r3, #1
 8003b10:	647b      	str	r3, [r7, #68]	; 0x44
 8003b12:	e014      	b.n	8003b3e <arm_atan2_f32+0x1f2>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8003b14:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003b18:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003b1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b22:	f1c3 0309 	rsb	r3, r3, #9
 8003b26:	4a5f      	ldr	r2, [pc, #380]	; (8003ca4 <arm_atan2_f32+0x358>)
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	edd3 7a00 	vldr	s15, [r3]
 8003b30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b34:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8003b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	647b      	str	r3, [r7, #68]	; 0x44
 8003b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b40:	2b09      	cmp	r3, #9
 8003b42:	dde7      	ble.n	8003b14 <arm_atan2_f32+0x1c8>
    return(res);
 8003b44:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8003b48:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8003ca8 <arm_atan2_f32+0x35c>
 8003b4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b50:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8003b54:	e028      	b.n	8003ba8 <arm_atan2_f32+0x25c>
 8003b56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b58:	643b      	str	r3, [r7, #64]	; 0x40
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8003b5a:	4b51      	ldr	r3, [pc, #324]	; (8003ca0 <arm_atan2_f32+0x354>)
 8003b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    int i=1;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	63bb      	str	r3, [r7, #56]	; 0x38
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8003b62:	2301      	movs	r3, #1
 8003b64:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b66:	e014      	b.n	8003b92 <arm_atan2_f32+0x246>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8003b68:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003b6c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003b70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b76:	f1c3 0309 	rsb	r3, r3, #9
 8003b7a:	4a4a      	ldr	r2, [pc, #296]	; (8003ca4 <arm_atan2_f32+0x358>)
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	edd3 7a00 	vldr	s15, [r3]
 8003b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b88:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8003b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8e:	3301      	adds	r3, #1
 8003b90:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b94:	2b09      	cmp	r3, #9
 8003b96:	dde7      	ble.n	8003b68 <arm_atan2_f32+0x21c>
    return(res);
 8003b98:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
     res += arm_atan_limited_f32(x);
 8003b9c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ba4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
   if (sign)
 8003ba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d005      	beq.n	8003bba <arm_atan2_f32+0x26e>
     res = -res;
 8003bae:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003bb2:	eef1 7a67 	vneg.f32	s15, s15
 8003bb6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
   return(res);
 8003bba:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
           *result=arm_atan_f32(y/x) + PI;
 8003bbe:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8003cac <arm_atan2_f32+0x360>
 8003bc2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	edc3 7a00 	vstr	s15, [r3]
 8003bcc:	e0af      	b.n	8003d2e <arm_atan2_f32+0x3e2>
        }
        else if (y < 0.0f)
 8003bce:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bda:	f140 809c 	bpl.w	8003d16 <arm_atan2_f32+0x3ca>
        {
           *result=arm_atan_f32(y/x) - PI;
 8003bde:	edd7 6a03 	vldr	s13, [r7, #12]
 8003be2:	ed97 7a02 	vldr	s14, [r7, #8]
 8003be6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bea:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
   int sign=0;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	633b      	str	r3, [r7, #48]	; 0x30
   float32_t res=0.0f;
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
   if (x < 0.0f)
 8003bf8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003bfc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c04:	d507      	bpl.n	8003c16 <arm_atan2_f32+0x2ca>
      sign=1;
 8003c06:	2301      	movs	r3, #1
 8003c08:	633b      	str	r3, [r7, #48]	; 0x30
      x=-x;
 8003c0a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003c0e:	eef1 7a67 	vneg.f32	s15, s15
 8003c12:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
   if (x > 1.0f)
 8003c16:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003c1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c26:	dd31      	ble.n	8003c8c <arm_atan2_f32+0x340>
      x = 1.0f / x;
 8003c28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c2c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003c30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c34:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8003c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8003c3c:	4b18      	ldr	r3, [pc, #96]	; (8003ca0 <arm_atan2_f32+0x354>)
 8003c3e:	627b      	str	r3, [r7, #36]	; 0x24
    int i=1;
 8003c40:	2301      	movs	r3, #1
 8003c42:	623b      	str	r3, [r7, #32]
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8003c44:	2301      	movs	r3, #1
 8003c46:	623b      	str	r3, [r7, #32]
 8003c48:	e014      	b.n	8003c74 <arm_atan2_f32+0x328>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8003c4a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003c4e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003c52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	f1c3 0309 	rsb	r3, r3, #9
 8003c5c:	4a11      	ldr	r2, [pc, #68]	; (8003ca4 <arm_atan2_f32+0x358>)
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	edd3 7a00 	vldr	s15, [r3]
 8003c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c6a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	3301      	adds	r3, #1
 8003c72:	623b      	str	r3, [r7, #32]
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	2b09      	cmp	r3, #9
 8003c78:	dde7      	ble.n	8003c4a <arm_atan2_f32+0x2fe>
    return(res);
 8003c7a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8003c7e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8003ca8 <arm_atan2_f32+0x35c>
 8003c82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c86:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8003c8a:	e031      	b.n	8003cf0 <arm_atan2_f32+0x3a4>
 8003c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c8e:	61fb      	str	r3, [r7, #28]
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8003c90:	4b03      	ldr	r3, [pc, #12]	; (8003ca0 <arm_atan2_f32+0x354>)
 8003c92:	61bb      	str	r3, [r7, #24]
    int i=1;
 8003c94:	2301      	movs	r3, #1
 8003c96:	617b      	str	r3, [r7, #20]
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8003c98:	2301      	movs	r3, #1
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	e01d      	b.n	8003cda <arm_atan2_f32+0x38e>
 8003c9e:	bf00      	nop
 8003ca0:	bd0492a5 	.word	0xbd0492a5
 8003ca4:	0800b208 	.word	0x0800b208
 8003ca8:	3fc90fdb 	.word	0x3fc90fdb
 8003cac:	40490fdb 	.word	0x40490fdb
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8003cb0:	ed97 7a07 	vldr	s14, [r7, #28]
 8003cb4:	edd7 7a06 	vldr	s15, [r7, #24]
 8003cb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f1c3 0309 	rsb	r3, r3, #9
 8003cc2:	4a2f      	ldr	r2, [pc, #188]	; (8003d80 <arm_atan2_f32+0x434>)
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	edd3 7a00 	vldr	s15, [r3]
 8003ccc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cd0:	edc7 7a06 	vstr	s15, [r7, #24]
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	617b      	str	r3, [r7, #20]
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	2b09      	cmp	r3, #9
 8003cde:	dde7      	ble.n	8003cb0 <arm_atan2_f32+0x364>
    return(res);
 8003ce0:	edd7 7a06 	vldr	s15, [r7, #24]
     res += arm_atan_limited_f32(x);
 8003ce4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cec:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
   if (sign)
 8003cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d005      	beq.n	8003d02 <arm_atan2_f32+0x3b6>
     res = -res;
 8003cf6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003cfa:	eef1 7a67 	vneg.f32	s15, s15
 8003cfe:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
   return(res);
 8003d02:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
           *result=arm_atan_f32(y/x) - PI;
 8003d06:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003d84 <arm_atan2_f32+0x438>
 8003d0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	edc3 7a00 	vstr	s15, [r3]
 8003d14:	e00b      	b.n	8003d2e <arm_atan2_f32+0x3e2>
        }
        else
        {
            if (signbit(y))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <arm_atan2_f32+0x3dc>
            {
               *result= -PI;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a19      	ldr	r2, [pc, #100]	; (8003d88 <arm_atan2_f32+0x43c>)
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	e002      	b.n	8003d2e <arm_atan2_f32+0x3e2>
            }
            else
            {
               *result= PI;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a18      	ldr	r2, [pc, #96]	; (8003d8c <arm_atan2_f32+0x440>)
 8003d2c:	601a      	str	r2, [r3, #0]
            }
        }
        return(ARM_MATH_SUCCESS);
 8003d2e:	2300      	movs	r3, #0
 8003d30:	e020      	b.n	8003d74 <arm_atan2_f32+0x428>
    }
    if (x == 0.0f)
 8003d32:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d36:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d3e:	d117      	bne.n	8003d70 <arm_atan2_f32+0x424>
    {
        if (y > 0.0f)
 8003d40:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d4c:	dd04      	ble.n	8003d58 <arm_atan2_f32+0x40c>
        {
            *result=PIHALFF32;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a0f      	ldr	r2, [pc, #60]	; (8003d90 <arm_atan2_f32+0x444>)
 8003d52:	601a      	str	r2, [r3, #0]
            return(ARM_MATH_SUCCESS);
 8003d54:	2300      	movs	r3, #0
 8003d56:	e00d      	b.n	8003d74 <arm_atan2_f32+0x428>
        }
        if (y < 0.0f)
 8003d58:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d64:	d504      	bpl.n	8003d70 <arm_atan2_f32+0x424>
        {
            *result=-PIHALFF32;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a0a      	ldr	r2, [pc, #40]	; (8003d94 <arm_atan2_f32+0x448>)
 8003d6a:	601a      	str	r2, [r3, #0]
            return(ARM_MATH_SUCCESS);
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	e001      	b.n	8003d74 <arm_atan2_f32+0x428>
        }
    }
    

    return(ARM_MATH_NANINF);
 8003d70:	f06f 0303 	mvn.w	r3, #3

}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3784      	adds	r7, #132	; 0x84
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	0800b208 	.word	0x0800b208
 8003d84:	40490fdb 	.word	0x40490fdb
 8003d88:	c0490fdb 	.word	0xc0490fdb
 8003d8c:	40490fdb 	.word	0x40490fdb
 8003d90:	3fc90fdb 	.word	0x3fc90fdb
 8003d94:	bfc90fdb 	.word	0xbfc90fdb

08003d98 <arm_cos_f32>:
  @param[in]     x  input value in radians
  @return        cos(x)
 */
float32_t arm_cos_f32(
  float32_t x)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b08b      	sub	sp, #44	; 0x2c
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 8003da2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003da6:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003e98 <arm_cos_f32+0x100>
 8003daa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dae:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8003db2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003db6:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8003dba:	edd7 7a06 	vldr	s15, [r7, #24]
 8003dbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dc2:	ee17 3a90 	vmov	r3, s15
 8003dc6:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8003dc8:	edd7 7a06 	vldr	s15, [r7, #24]
 8003dcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd4:	d502      	bpl.n	8003ddc <arm_cos_f32+0x44>
  {
    n--;
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	ee07 3a90 	vmov	s15, r3
 8003de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003de6:	ed97 7a06 	vldr	s14, [r7, #24]
 8003dea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dee:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 8003df2:	edd7 7a06 	vldr	s15, [r7, #24]
 8003df6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003e9c <arm_cos_f32+0x104>
 8003dfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dfe:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 8003e02:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e0a:	ee17 3a90 	vmov	r3, s15
 8003e0e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 8003e10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003e12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e16:	d309      	bcc.n	8003e2c <arm_cos_f32+0x94>
    index = 0;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	84fb      	strh	r3, [r7, #38]	; 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 8003e1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e20:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003e9c <arm_cos_f32+0x104>
 8003e24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e28:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8003e2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003e2e:	ee07 3a90 	vmov	s15, r3
 8003e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e36:	ed97 7a07 	vldr	s14, [r7, #28]
 8003e3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e3e:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 8003e42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003e44:	4a16      	ldr	r2, [pc, #88]	; (8003ea0 <arm_cos_f32+0x108>)
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8003e4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003e50:	3301      	adds	r3, #1
 8003e52:	4a13      	ldr	r2, [pc, #76]	; (8003ea0 <arm_cos_f32+0x108>)
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4413      	add	r3, r2
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  cosVal = (1.0f - fract) * a + fract * b;
 8003e5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e60:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e68:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e70:	edd7 6a05 	vldr	s13, [r7, #20]
 8003e74:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e80:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (cosVal);
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	ee07 3a90 	vmov	s15, r3
}
 8003e8a:	eeb0 0a67 	vmov.f32	s0, s15
 8003e8e:	372c      	adds	r7, #44	; 0x2c
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	3e22f983 	.word	0x3e22f983
 8003e9c:	44000000 	.word	0x44000000
 8003ea0:	0800aa04 	.word	0x0800aa04

08003ea4 <arm_sin_f32>:
  @return        sin(x)
 */

float32_t arm_sin_f32(
  float32_t x)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b08b      	sub	sp, #44	; 0x2c
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 8003eae:	edd7 7a01 	vldr	s15, [r7, #4]
 8003eb2:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8003f9c <arm_sin_f32+0xf8>
 8003eb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003eba:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8003ebe:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ec2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ec6:	ee17 3a90 	vmov	r3, s15
 8003eca:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8003ecc:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ed0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ed8:	d502      	bpl.n	8003ee0 <arm_sin_f32+0x3c>
  {
    n--;
 8003eda:	6a3b      	ldr	r3, [r7, #32]
 8003edc:	3b01      	subs	r3, #1
 8003ede:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	ee07 3a90 	vmov	s15, r3
 8003ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eea:	ed97 7a06 	vldr	s14, [r7, #24]
 8003eee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ef2:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 8003ef6:	edd7 7a06 	vldr	s15, [r7, #24]
 8003efa:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003fa0 <arm_sin_f32+0xfc>
 8003efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f02:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 8003f06:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f0e:	ee17 3a90 	vmov	r3, s15
 8003f12:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 8003f14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003f16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f1a:	d309      	bcc.n	8003f30 <arm_sin_f32+0x8c>
    index = 0;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	84fb      	strh	r3, [r7, #38]	; 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 8003f20:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f24:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003fa0 <arm_sin_f32+0xfc>
 8003f28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003f2c:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8003f30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003f32:	ee07 3a90 	vmov	s15, r3
 8003f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f3a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003f3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f42:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 8003f46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003f48:	4a16      	ldr	r2, [pc, #88]	; (8003fa4 <arm_sin_f32+0x100>)
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8003f52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003f54:	3301      	adds	r3, #1
 8003f56:	4a13      	ldr	r2, [pc, #76]	; (8003fa4 <arm_sin_f32+0x100>)
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 8003f60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f64:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f74:	edd7 6a05 	vldr	s13, [r7, #20]
 8003f78:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f84:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (sinVal);
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	ee07 3a90 	vmov	s15, r3
}
 8003f8e:	eeb0 0a67 	vmov.f32	s0, s15
 8003f92:	372c      	adds	r7, #44	; 0x2c
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	3e22f983 	.word	0x3e22f983
 8003fa0:	44000000 	.word	0x44000000
 8003fa4:	0800aa04 	.word	0x0800aa04

08003fa8 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b08b      	sub	sp, #44	; 0x2c
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	885b      	ldrh	r3, [r3, #2]
 8003fd0:	fb02 f303 	mul.w	r3, r2, r3
 8003fd4:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8003fda:	e013      	b.n	8004004 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	1d1a      	adds	r2, r3, #4
 8003fe0:	627a      	str	r2, [r7, #36]	; 0x24
 8003fe2:	ed93 7a00 	vldr	s14, [r3]
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	1d1a      	adds	r2, r3, #4
 8003fea:	623a      	str	r2, [r7, #32]
 8003fec:	edd3 7a00 	vldr	s15, [r3]
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	1d1a      	adds	r2, r3, #4
 8003ff4:	61fa      	str	r2, [r7, #28]
 8003ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ffa:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	3b01      	subs	r3, #1
 8004002:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1e8      	bne.n	8003fdc <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800400a:	2300      	movs	r3, #0
 800400c:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800400e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8004012:	4618      	mov	r0, r3
 8004014:	372c      	adds	r7, #44	; 0x2c
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800401e:	b480      	push	{r7}
 8004020:	b085      	sub	sp, #20
 8004022:	af00      	add	r7, sp, #0
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	607b      	str	r3, [r7, #4]
 8004028:	460b      	mov	r3, r1
 800402a:	817b      	strh	r3, [r7, #10]
 800402c:	4613      	mov	r3, r2
 800402e:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	897a      	ldrh	r2, [r7, #10]
 8004034:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	893a      	ldrh	r2, [r7, #8]
 800403a:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	605a      	str	r2, [r3, #4]
}
 8004042:	bf00      	nop
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800404e:	b480      	push	{r7}
 8004050:	b0bb      	sub	sp, #236	; 0xec
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	667b      	str	r3, [r7, #100]	; 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	663b      	str	r3, [r7, #96]	; 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	885b      	ldrh	r3, [r3, #2]
 800406e:	65bb      	str	r3, [r7, #88]	; 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 8004070:	f04f 0300 	mov.w	r3, #0
 8004074:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004078:	f04f 0300 	mov.w	r3, #0
 800407c:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800407e:	2300      	movs	r3, #0
 8004080:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 8004084:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004086:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800408a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800408c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8004090:	e03b      	b.n	800410a <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 8004092:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004094:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 800409e:	e00c      	b.n	80040ba <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 80040a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040a4:	1d1a      	adds	r2, r3, #4
 80040a6:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]
        j--;
 80040b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040b4:	3b01      	subs	r3, #1
 80040b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 80040ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1ee      	bne.n	80040a0 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 80040c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040c6:	1d1a      	adds	r2, r3, #4
 80040c8:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80040cc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80040d0:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 80040d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80040d6:	3b01      	subs	r3, #1
 80040d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 80040dc:	e00c      	b.n	80040f8 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 80040de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e2:	1d1a      	adds	r2, r3, #4
 80040e4:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	601a      	str	r2, [r3, #0]
        j--;
 80040ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040f2:	3b01      	subs	r3, #1
 80040f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 80040f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1ee      	bne.n	80040de <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 8004100:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004104:	3b01      	subs	r3, #1
 8004106:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    while (rowCnt > 0U)
 800410a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1bf      	bne.n	8004092 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 8004112:	2300      	movs	r3, #0
 8004114:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004118:	e2c7      	b.n	80046aa <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800411a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800411e:	653b      	str	r3, [r7, #80]	; 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	885b      	ldrh	r3, [r3, #2]
 8004128:	3301      	adds	r3, #1
 800412a:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800412e:	fb01 f303 	mul.w	r3, r1, r3
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      pivot = *pTmp;
 800413a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      selectedRow = column;
 8004144:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004148:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800414c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004150:	3301      	adds	r3, #1
 8004152:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004156:	e02c      	b.n	80041b2 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	885b      	ldrh	r3, [r3, #2]
 8004160:	4619      	mov	r1, r3
 8004162:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004166:	fb03 f101 	mul.w	r1, r3, r1
 800416a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800416e:	440b      	add	r3, r1
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
          newPivot = *pTmp;
 8004178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	657b      	str	r3, [r7, #84]	; 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 8004180:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004184:	eeb0 7ae7 	vabs.f32	s14, s15
 8004188:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800418c:	eef0 7ae7 	vabs.f32	s15, s15
 8004190:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004198:	dd06      	ble.n	80041a8 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800419a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800419e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            pivot = newPivot;
 80041a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 80041a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041ac:	3301      	adds	r3, #1
 80041ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80041b2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80041b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d3cd      	bcc.n	8004158 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 80041bc:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80041c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80041c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041c8:	f000 809b 	beq.w	8004302 <arm_mat_inverse_f32+0x2b4>
 80041cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80041d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041d4:	429a      	cmp	r2, r3
 80041d6:	f000 8094 	beq.w	8004302 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	885b      	ldrh	r3, [r3, #2]
 80041ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80041fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80041fe:	fb03 f202 	mul.w	r2, r3, r2
 8004202:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004206:	4413      	add	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800420e:	4413      	add	r3, r2
 8004210:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004216:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800421a:	fb03 f202 	mul.w	r2, r3, r2
 800421e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004222:	4413      	add	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800422a:	4413      	add	r3, r2
 800422c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004230:	2300      	movs	r3, #0
 8004232:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004236:	e018      	b.n	800426a <arm_mat_inverse_f32+0x21c>
 8004238:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004240:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004244:	1d1a      	adds	r2, r3, #4
 8004246:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800424a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800424e:	6812      	ldr	r2, [r2, #0]
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004256:	1d1a      	adds	r2, r3, #4
 8004258:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800425c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004264:	3301      	adds	r3, #1
 8004266:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800426a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800426e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004270:	429a      	cmp	r2, r3
 8004272:	dbe1      	blt.n	8004238 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	885b      	ldrh	r3, [r3, #2]
 8004288:	647b      	str	r3, [r7, #68]	; 0x44
 800428a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800428c:	643b      	str	r3, [r7, #64]	; 0x40
 800428e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004290:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004292:	fb02 f303 	mul.w	r3, r2, r3
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800429c:	4413      	add	r3, r2
 800429e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042a4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80042a8:	fb02 f303 	mul.w	r3, r2, r3
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80042b2:	4413      	add	r3, r2
 80042b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80042b8:	2300      	movs	r3, #0
 80042ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042be:	e018      	b.n	80042f2 <arm_mat_inverse_f32+0x2a4>
 80042c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042cc:	1d1a      	adds	r2, r3, #4
 80042ce:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80042d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80042d6:	6812      	ldr	r2, [r2, #0]
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80042de:	1d1a      	adds	r2, r3, #4
 80042e0:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80042e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80042ec:	3301      	adds	r3, #1
 80042ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80042f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042f8:	429a      	cmp	r2, r3
 80042fa:	dbe1      	blt.n	80042c0 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 80042fc:	2301      	movs	r3, #1
 80042fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 8004302:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004306:	2b01      	cmp	r3, #1
 8004308:	d009      	beq.n	800431e <arm_mat_inverse_f32+0x2d0>
 800430a:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800430e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004316:	d102      	bne.n	800431e <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 8004318:	f06f 0304 	mvn.w	r3, #4
 800431c:	e208      	b.n	8004730 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800431e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004322:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 8004326:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800432a:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	885b      	ldrh	r3, [r3, #2]
 800433a:	637b      	str	r3, [r7, #52]	; 0x34
 800433c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800433e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	633b      	str	r3, [r7, #48]	; 0x30
 8004346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004348:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800434a:	fb03 f202 	mul.w	r2, r3, r2
 800434e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004352:	4413      	add	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800435a:	4413      	add	r3, r2
 800435c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004360:	2300      	movs	r3, #0
 8004362:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004366:	e011      	b.n	800438c <arm_mat_inverse_f32+0x33e>
 8004368:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800436c:	1d1a      	adds	r2, r3, #4
 800436e:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8004372:	ed93 7a00 	vldr	s14, [r3]
 8004376:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800437a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800437e:	edc3 7a00 	vstr	s15, [r3]
 8004382:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004386:	3301      	adds	r3, #1
 8004388:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800438c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004392:	429a      	cmp	r2, r3
 8004394:	dbe8      	blt.n	8004368 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	885b      	ldrh	r3, [r3, #2]
 80043a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80043a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80043ac:	fb02 f303 	mul.w	r3, r2, r3
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80043b6:	4413      	add	r3, r2
 80043b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043bc:	2300      	movs	r3, #0
 80043be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80043c2:	e011      	b.n	80043e8 <arm_mat_inverse_f32+0x39a>
 80043c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043c8:	1d1a      	adds	r2, r3, #4
 80043ca:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80043ce:	ed93 7a00 	vldr	s14, [r3]
 80043d2:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80043d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043da:	edc3 7a00 	vstr	s15, [r3]
 80043de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043e2:	3301      	adds	r3, #1
 80043e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80043e8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80043ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ee:	429a      	cmp	r2, r3
 80043f0:	dbe8      	blt.n	80043c4 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 80043f2:	2300      	movs	r3, #0
 80043f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      for (;rowNb < pivotRow; rowNb++)
 80043f8:	e0ae      	b.n	8004558 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	885b      	ldrh	r3, [r3, #2]
 8004402:	4619      	mov	r1, r3
 8004404:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004408:	fb03 f101 	mul.w	r1, r3, r1
 800440c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004410:	440b      	add	r3, r1
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           pivot = *pTmp;
 800441a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	885b      	ldrh	r3, [r3, #2]
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	613b      	str	r3, [r7, #16]
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800444a:	fb03 f202 	mul.w	r2, r3, r2
 800444e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004452:	4413      	add	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800445a:	4413      	add	r3, r2
 800445c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004464:	fb03 f202 	mul.w	r2, r3, r2
 8004468:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800446c:	4413      	add	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004474:	4413      	add	r3, r2
 8004476:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800447a:	2300      	movs	r3, #0
 800447c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004480:	e01a      	b.n	80044b8 <arm_mat_inverse_f32+0x46a>
 8004482:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004486:	1d1a      	adds	r2, r3, #4
 8004488:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800448c:	ed93 7a00 	vldr	s14, [r3]
 8004490:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8004494:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004498:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800449c:	1d1a      	adds	r2, r3, #4
 800449e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80044a2:	ed93 7a00 	vldr	s14, [r3]
 80044a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044aa:	edc3 7a00 	vstr	s15, [r3]
 80044ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80044b2:	3301      	adds	r3, #1
 80044b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	429a      	cmp	r2, r3
 80044c0:	dbdf      	blt.n	8004482 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	885b      	ldrh	r3, [r3, #2]
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	60bb      	str	r3, [r7, #8]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80044e2:	fb02 f303 	mul.w	r3, r2, r3
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80044ec:	4413      	add	r3, r2
 80044ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80044f6:	fb02 f303 	mul.w	r3, r2, r3
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004500:	4413      	add	r3, r2
 8004502:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004506:	2300      	movs	r3, #0
 8004508:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800450c:	e01a      	b.n	8004544 <arm_mat_inverse_f32+0x4f6>
 800450e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004512:	1d1a      	adds	r2, r3, #4
 8004514:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004518:	ed93 7a00 	vldr	s14, [r3]
 800451c:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8004520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004524:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004528:	1d1a      	adds	r2, r3, #4
 800452a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800452e:	ed93 7a00 	vldr	s14, [r3]
 8004532:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004536:	edc3 7a00 	vstr	s15, [r3]
 800453a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800453e:	3301      	adds	r3, #1
 8004540:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004544:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	429a      	cmp	r2, r3
 800454c:	dbdf      	blt.n	800450e <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800454e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004552:	3301      	adds	r3, #1
 8004554:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004558:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800455c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800455e:	429a      	cmp	r2, r3
 8004560:	f4ff af4b 	bcc.w	80043fa <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8004564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004566:	3301      	adds	r3, #1
 8004568:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800456c:	e092      	b.n	8004694 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	885b      	ldrh	r3, [r3, #2]
 8004576:	4619      	mov	r1, r3
 8004578:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800457c:	fb03 f101 	mul.w	r1, r3, r1
 8004580:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004584:	440b      	add	r3, r1
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           pivot = *pTmp;
 800458e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	67bb      	str	r3, [r7, #120]	; 0x78
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	677b      	str	r3, [r7, #116]	; 0x74
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	885b      	ldrh	r3, [r3, #2]
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24
 80045aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	623b      	str	r3, [r7, #32]
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80045ba:	fb03 f202 	mul.w	r2, r3, r2
 80045be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045c2:	4413      	add	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80045c8:	4413      	add	r3, r2
 80045ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80045d0:	fb03 f202 	mul.w	r2, r3, r2
 80045d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045d8:	4413      	add	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80045de:	4413      	add	r3, r2
 80045e0:	677b      	str	r3, [r7, #116]	; 0x74
 80045e2:	2300      	movs	r3, #0
 80045e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80045e6:	e014      	b.n	8004612 <arm_mat_inverse_f32+0x5c4>
 80045e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045ea:	1d1a      	adds	r2, r3, #4
 80045ec:	677a      	str	r2, [r7, #116]	; 0x74
 80045ee:	ed93 7a00 	vldr	s14, [r3]
 80045f2:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80045f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045fc:	1d1a      	adds	r2, r3, #4
 80045fe:	67ba      	str	r2, [r7, #120]	; 0x78
 8004600:	ed93 7a00 	vldr	s14, [r3]
 8004604:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004608:	edc3 7a00 	vstr	s15, [r3]
 800460c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800460e:	3301      	adds	r3, #1
 8004610:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004612:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	429a      	cmp	r2, r3
 8004618:	dbe6      	blt.n	80045e8 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	66bb      	str	r3, [r7, #104]	; 0x68
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	885b      	ldrh	r3, [r3, #2]
 800462a:	61fb      	str	r3, [r7, #28]
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	61bb      	str	r3, [r7, #24]
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8004636:	fb02 f303 	mul.w	r3, r2, r3
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800463e:	4413      	add	r3, r2
 8004640:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004646:	fb02 f303 	mul.w	r3, r2, r3
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800464e:	4413      	add	r3, r2
 8004650:	66bb      	str	r3, [r7, #104]	; 0x68
 8004652:	2300      	movs	r3, #0
 8004654:	673b      	str	r3, [r7, #112]	; 0x70
 8004656:	e014      	b.n	8004682 <arm_mat_inverse_f32+0x634>
 8004658:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800465a:	1d1a      	adds	r2, r3, #4
 800465c:	66ba      	str	r2, [r7, #104]	; 0x68
 800465e:	ed93 7a00 	vldr	s14, [r3]
 8004662:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8004666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800466a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800466c:	1d1a      	adds	r2, r3, #4
 800466e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004670:	ed93 7a00 	vldr	s14, [r3]
 8004674:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004678:	edc3 7a00 	vstr	s15, [r3]
 800467c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800467e:	3301      	adds	r3, #1
 8004680:	673b      	str	r3, [r7, #112]	; 0x70
 8004682:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	429a      	cmp	r2, r3
 8004688:	dbe6      	blt.n	8004658 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800468a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800468e:	3301      	adds	r3, #1
 8004690:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004694:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8004698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800469a:	429a      	cmp	r2, r3
 800469c:	f4ff af67 	bcc.w	800456e <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 80046a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046a4:	3301      	adds	r3, #1
 80046a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046b0:	429a      	cmp	r2, r3
 80046b2:	f4ff ad32 	bcc.w	800411a <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80046b6:	2300      	movs	r3, #0
 80046b8:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 80046bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d033      	beq.n	800472c <arm_mat_inverse_f32+0x6de>
 80046c4:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80046c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80046cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d0:	d12c      	bne.n	800472c <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	667b      	str	r3, [r7, #100]	; 0x64
      for (i = 0; i < numRows * numCols; i++)
 80046d8:	2300      	movs	r3, #0
 80046da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80046de:	e010      	b.n	8004702 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 80046e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80046e8:	4413      	add	r3, r2
 80046ea:	edd3 7a00 	vldr	s15, [r3]
 80046ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 80046f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f6:	d10d      	bne.n	8004714 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 80046f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046fc:	3301      	adds	r3, #1
 80046fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004702:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004704:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004706:	fb02 f303 	mul.w	r3, r2, r3
 800470a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800470e:	429a      	cmp	r2, r3
 8004710:	d3e6      	bcc.n	80046e0 <arm_mat_inverse_f32+0x692>
 8004712:	e000      	b.n	8004716 <arm_mat_inverse_f32+0x6c8>
            break;
 8004714:	bf00      	nop
      }

      if (i == numRows * numCols)
 8004716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004718:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800471a:	fb02 f303 	mul.w	r3, r2, r3
 800471e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8004722:	429a      	cmp	r2, r3
 8004724:	d102      	bne.n	800472c <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 8004726:	23fb      	movs	r3, #251	; 0xfb
 8004728:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
    }
  }

  /* Return to application */
  return (status);
 800472c:	f997 30c3 	ldrsb.w	r3, [r7, #195]	; 0xc3
}
 8004730:	4618      	mov	r0, r3
 8004732:	37ec      	adds	r7, #236	; 0xec
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800473c:	b480      	push	{r7}
 800473e:	b093      	sub	sp, #76	; 0x4c
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	643b      	str	r3, [r7, #64]	; 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	885b      	ldrh	r3, [r3, #2]
 8004770:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	885b      	ldrh	r3, [r3, #2]
 8004776:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 8004778:	2300      	movs	r3, #0
 800477a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800477c:	8b7b      	ldrh	r3, [r7, #26]
 800477e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 8004780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	69fa      	ldr	r2, [r7, #28]
 8004786:	4413      	add	r3, r2
 8004788:	63bb      	str	r3, [r7, #56]	; 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800478a:	8b3b      	ldrh	r3, [r7, #24]
 800478c:	633b      	str	r3, [r7, #48]	; 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	643b      	str	r3, [r7, #64]	; 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	637b      	str	r3, [r7, #52]	; 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800479a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800479c:	647b      	str	r3, [r7, #68]	; 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800479e:	8afb      	ldrh	r3, [r7, #22]
 80047a0:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 80047a2:	e017      	b.n	80047d4 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 80047a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047a6:	1d1a      	adds	r2, r3, #4
 80047a8:	647a      	str	r2, [r7, #68]	; 0x44
 80047aa:	ed93 7a00 	vldr	s14, [r3]
 80047ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047b0:	edd3 7a00 	vldr	s15, [r3]
 80047b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80047bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047c0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
          pIn2 += numColsB;
 80047c4:	8b3b      	ldrh	r3, [r7, #24]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047ca:	4413      	add	r3, r2
 80047cc:	643b      	str	r3, [r7, #64]	; 0x40

          /* Decrement loop counter */
          colCnt--;
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	3b01      	subs	r3, #1
 80047d2:	627b      	str	r3, [r7, #36]	; 0x24
        while (colCnt > 0U)
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1e4      	bne.n	80047a4 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 80047da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047dc:	1d1a      	adds	r2, r3, #4
 80047de:	63ba      	str	r2, [r7, #56]	; 0x38
 80047e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047e2:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 80047e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e6:	3b01      	subs	r3, #1
 80047e8:	633b      	str	r3, [r7, #48]	; 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 80047ea:	8b3a      	ldrh	r2, [r7, #24]
 80047ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	6a3a      	ldr	r2, [r7, #32]
 80047f4:	4413      	add	r3, r2
 80047f6:	643b      	str	r3, [r7, #64]	; 0x40

      } while (col > 0U);
 80047f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1ca      	bne.n	8004794 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 80047fe:	8b3b      	ldrh	r3, [r7, #24]
 8004800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004802:	4413      	add	r3, r2
 8004804:	62fb      	str	r3, [r7, #44]	; 0x2c
      pInA = pInA + numColsA;
 8004806:	8afb      	ldrh	r3, [r7, #22]
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800480c:	4413      	add	r3, r2
 800480e:	63fb      	str	r3, [r7, #60]	; 0x3c

      /* Decrement row loop counter */
      row--;
 8004810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004812:	3b01      	subs	r3, #1
 8004814:	62bb      	str	r3, [r7, #40]	; 0x28

    } while (row > 0U);
 8004816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1b1      	bne.n	8004780 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800481c:	2300      	movs	r3, #0
 800481e:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 8004820:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8004824:	4618      	mov	r0, r3
 8004826:	374c      	adds	r7, #76	; 0x4c
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8004830:	b480      	push	{r7}
 8004832:	b08b      	sub	sp, #44	; 0x2c
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	ed87 0a02 	vstr	s0, [r7, #8]
 800483c:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	881b      	ldrh	r3, [r3, #0]
 800484e:	461a      	mov	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	885b      	ldrh	r3, [r3, #2]
 8004854:	fb02 f303 	mul.w	r3, r2, r3
 8004858:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800485e:	e010      	b.n	8004882 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	1d1a      	adds	r2, r3, #4
 8004864:	627a      	str	r2, [r7, #36]	; 0x24
 8004866:	ed93 7a00 	vldr	s14, [r3]
 800486a:	6a3b      	ldr	r3, [r7, #32]
 800486c:	1d1a      	adds	r2, r3, #4
 800486e:	623a      	str	r2, [r7, #32]
 8004870:	edd7 7a02 	vldr	s15, [r7, #8]
 8004874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004878:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	3b01      	subs	r3, #1
 8004880:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1eb      	bne.n	8004860 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8004888:	2300      	movs	r3, #0
 800488a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800488c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004890:	4618      	mov	r0, r3
 8004892:	372c      	adds	r7, #44	; 0x2c
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800489c:	b480      	push	{r7}
 800489e:	b08b      	sub	sp, #44	; 0x2c
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	881b      	ldrh	r3, [r3, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	885b      	ldrh	r3, [r3, #2]
 80048c4:	fb02 f303 	mul.w	r3, r2, r3
 80048c8:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 80048ce:	e013      	b.n	80048f8 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	1d1a      	adds	r2, r3, #4
 80048d4:	627a      	str	r2, [r7, #36]	; 0x24
 80048d6:	ed93 7a00 	vldr	s14, [r3]
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	1d1a      	adds	r2, r3, #4
 80048de:	623a      	str	r2, [r7, #32]
 80048e0:	edd3 7a00 	vldr	s15, [r3]
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	1d1a      	adds	r2, r3, #4
 80048e8:	61fa      	str	r2, [r7, #28]
 80048ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048ee:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	3b01      	subs	r3, #1
 80048f6:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1e8      	bne.n	80048d0 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80048fe:	2300      	movs	r3, #0
 8004900:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8004902:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8004906:	4618      	mov	r0, r3
 8004908:	372c      	adds	r7, #44	; 0x2c
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8004912:	b480      	push	{r7}
 8004914:	b08b      	sub	sp, #44	; 0x2c
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	881b      	ldrh	r3, [r3, #0]
 800492c:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	885b      	ldrh	r3, [r3, #2]
 8004932:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8004934:	89fb      	ldrh	r3, [r7, #14]
 8004936:	61bb      	str	r3, [r7, #24]
 8004938:	2300      	movs	r3, #0
 800493a:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	4413      	add	r3, r2
 8004944:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8004946:	89bb      	ldrh	r3, [r7, #12]
 8004948:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800494a:	e00d      	b.n	8004968 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494e:	1d1a      	adds	r2, r3, #4
 8004950:	627a      	str	r2, [r7, #36]	; 0x24
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	6a3b      	ldr	r3, [r7, #32]
 8004956:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8004958:	89fb      	ldrh	r3, [r7, #14]
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	6a3a      	ldr	r2, [r7, #32]
 800495e:	4413      	add	r3, r2
 8004960:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	3b01      	subs	r3, #1
 8004966:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1ee      	bne.n	800494c <arm_mat_trans_f32+0x3a>
      }

      i++;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	3301      	adds	r3, #1
 8004972:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	3b01      	subs	r3, #1
 8004978:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1dd      	bne.n	800493c <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8004980:	2300      	movs	r3, #0
 8004982:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 8004984:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8004988:	4618      	mov	r0, r3
 800498a:	372c      	adds	r7, #44	; 0x2c
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004998:	4b0e      	ldr	r3, [pc, #56]	; (80049d4 <HAL_Init+0x40>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a0d      	ldr	r2, [pc, #52]	; (80049d4 <HAL_Init+0x40>)
 800499e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80049a4:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <HAL_Init+0x40>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a0a      	ldr	r2, [pc, #40]	; (80049d4 <HAL_Init+0x40>)
 80049aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80049b0:	4b08      	ldr	r3, [pc, #32]	; (80049d4 <HAL_Init+0x40>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a07      	ldr	r2, [pc, #28]	; (80049d4 <HAL_Init+0x40>)
 80049b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049bc:	2003      	movs	r0, #3
 80049be:	f000 f92b 	bl	8004c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80049c2:	2000      	movs	r0, #0
 80049c4:	f000 f808 	bl	80049d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80049c8:	f7fe fb7c 	bl	80030c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	40023c00 	.word	0x40023c00

080049d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80049e0:	4b12      	ldr	r3, [pc, #72]	; (8004a2c <HAL_InitTick+0x54>)
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	4b12      	ldr	r3, [pc, #72]	; (8004a30 <HAL_InitTick+0x58>)
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	4619      	mov	r1, r3
 80049ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80049f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 f943 	bl	8004c82 <HAL_SYSTICK_Config>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e00e      	b.n	8004a24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b0f      	cmp	r3, #15
 8004a0a:	d80a      	bhi.n	8004a22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	6879      	ldr	r1, [r7, #4]
 8004a10:	f04f 30ff 	mov.w	r0, #4294967295
 8004a14:	f000 f90b 	bl	8004c2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a18:	4a06      	ldr	r2, [pc, #24]	; (8004a34 <HAL_InitTick+0x5c>)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	e000      	b.n	8004a24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3708      	adds	r7, #8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	20000210 	.word	0x20000210
 8004a30:	20000218 	.word	0x20000218
 8004a34:	20000214 	.word	0x20000214

08004a38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a3c:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <HAL_IncTick+0x20>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	461a      	mov	r2, r3
 8004a42:	4b06      	ldr	r3, [pc, #24]	; (8004a5c <HAL_IncTick+0x24>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4413      	add	r3, r2
 8004a48:	4a04      	ldr	r2, [pc, #16]	; (8004a5c <HAL_IncTick+0x24>)
 8004a4a:	6013      	str	r3, [r2, #0]
}
 8004a4c:	bf00      	nop
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	20000218 	.word	0x20000218
 8004a5c:	20001148 	.word	0x20001148

08004a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0
  return uwTick;
 8004a64:	4b03      	ldr	r3, [pc, #12]	; (8004a74 <HAL_GetTick+0x14>)
 8004a66:	681b      	ldr	r3, [r3, #0]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	20001148 	.word	0x20001148

08004a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a88:	4b0c      	ldr	r3, [pc, #48]	; (8004abc <__NVIC_SetPriorityGrouping+0x44>)
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a94:	4013      	ands	r3, r2
 8004a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004aaa:	4a04      	ldr	r2, [pc, #16]	; (8004abc <__NVIC_SetPriorityGrouping+0x44>)
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	60d3      	str	r3, [r2, #12]
}
 8004ab0:	bf00      	nop
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	e000ed00 	.word	0xe000ed00

08004ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ac4:	4b04      	ldr	r3, [pc, #16]	; (8004ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	0a1b      	lsrs	r3, r3, #8
 8004aca:	f003 0307 	and.w	r3, r3, #7
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	e000ed00 	.word	0xe000ed00

08004adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	db0b      	blt.n	8004b06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004aee:	79fb      	ldrb	r3, [r7, #7]
 8004af0:	f003 021f 	and.w	r2, r3, #31
 8004af4:	4907      	ldr	r1, [pc, #28]	; (8004b14 <__NVIC_EnableIRQ+0x38>)
 8004af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004afa:	095b      	lsrs	r3, r3, #5
 8004afc:	2001      	movs	r0, #1
 8004afe:	fa00 f202 	lsl.w	r2, r0, r2
 8004b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b06:	bf00      	nop
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	e000e100 	.word	0xe000e100

08004b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	4603      	mov	r3, r0
 8004b20:	6039      	str	r1, [r7, #0]
 8004b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	db0a      	blt.n	8004b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	490c      	ldr	r1, [pc, #48]	; (8004b64 <__NVIC_SetPriority+0x4c>)
 8004b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b36:	0112      	lsls	r2, r2, #4
 8004b38:	b2d2      	uxtb	r2, r2
 8004b3a:	440b      	add	r3, r1
 8004b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b40:	e00a      	b.n	8004b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	4908      	ldr	r1, [pc, #32]	; (8004b68 <__NVIC_SetPriority+0x50>)
 8004b48:	79fb      	ldrb	r3, [r7, #7]
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	3b04      	subs	r3, #4
 8004b50:	0112      	lsls	r2, r2, #4
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	440b      	add	r3, r1
 8004b56:	761a      	strb	r2, [r3, #24]
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	e000e100 	.word	0xe000e100
 8004b68:	e000ed00 	.word	0xe000ed00

08004b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b089      	sub	sp, #36	; 0x24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	f1c3 0307 	rsb	r3, r3, #7
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	bf28      	it	cs
 8004b8a:	2304      	movcs	r3, #4
 8004b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	3304      	adds	r3, #4
 8004b92:	2b06      	cmp	r3, #6
 8004b94:	d902      	bls.n	8004b9c <NVIC_EncodePriority+0x30>
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	3b03      	subs	r3, #3
 8004b9a:	e000      	b.n	8004b9e <NVIC_EncodePriority+0x32>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8004baa:	43da      	mvns	r2, r3
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	401a      	ands	r2, r3
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	fa01 f303 	lsl.w	r3, r1, r3
 8004bbe:	43d9      	mvns	r1, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bc4:	4313      	orrs	r3, r2
         );
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3724      	adds	r7, #36	; 0x24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
	...

08004bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004be4:	d301      	bcc.n	8004bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004be6:	2301      	movs	r3, #1
 8004be8:	e00f      	b.n	8004c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bea:	4a0a      	ldr	r2, [pc, #40]	; (8004c14 <SysTick_Config+0x40>)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bf2:	210f      	movs	r1, #15
 8004bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf8:	f7ff ff8e 	bl	8004b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bfc:	4b05      	ldr	r3, [pc, #20]	; (8004c14 <SysTick_Config+0x40>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c02:	4b04      	ldr	r3, [pc, #16]	; (8004c14 <SysTick_Config+0x40>)
 8004c04:	2207      	movs	r2, #7
 8004c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	e000e010 	.word	0xe000e010

08004c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7ff ff29 	bl	8004a78 <__NVIC_SetPriorityGrouping>
}
 8004c26:	bf00      	nop
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b086      	sub	sp, #24
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	4603      	mov	r3, r0
 8004c36:	60b9      	str	r1, [r7, #8]
 8004c38:	607a      	str	r2, [r7, #4]
 8004c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c40:	f7ff ff3e 	bl	8004ac0 <__NVIC_GetPriorityGrouping>
 8004c44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	68b9      	ldr	r1, [r7, #8]
 8004c4a:	6978      	ldr	r0, [r7, #20]
 8004c4c:	f7ff ff8e 	bl	8004b6c <NVIC_EncodePriority>
 8004c50:	4602      	mov	r2, r0
 8004c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c56:	4611      	mov	r1, r2
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff ff5d 	bl	8004b18 <__NVIC_SetPriority>
}
 8004c5e:	bf00      	nop
 8004c60:	3718      	adds	r7, #24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b082      	sub	sp, #8
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7ff ff31 	bl	8004adc <__NVIC_EnableIRQ>
}
 8004c7a:	bf00      	nop
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b082      	sub	sp, #8
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7ff ffa2 	bl	8004bd4 <SysTick_Config>
 8004c90:	4603      	mov	r3, r0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004ca8:	f7ff feda 	bl	8004a60 <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e099      	b.n	8004dec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 0201 	bic.w	r2, r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cd8:	e00f      	b.n	8004cfa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004cda:	f7ff fec1 	bl	8004a60 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b05      	cmp	r3, #5
 8004ce6:	d908      	bls.n	8004cfa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2220      	movs	r2, #32
 8004cec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2203      	movs	r2, #3
 8004cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e078      	b.n	8004dec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1e8      	bne.n	8004cda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	4b38      	ldr	r3, [pc, #224]	; (8004df4 <HAL_DMA_Init+0x158>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	2b04      	cmp	r3, #4
 8004d52:	d107      	bne.n	8004d64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	f023 0307 	bic.w	r3, r3, #7
 8004d7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	d117      	bne.n	8004dbe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00e      	beq.n	8004dbe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 fb0d 	bl	80053c0 <DMA_CheckFifoParam>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d008      	beq.n	8004dbe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2240      	movs	r2, #64	; 0x40
 8004db0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e016      	b.n	8004dec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fac4 	bl	8005354 <DMA_CalcBaseAndBitshift>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd4:	223f      	movs	r2, #63	; 0x3f
 8004dd6:	409a      	lsls	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	f010803f 	.word	0xf010803f

08004df8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
 8004e04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <HAL_DMA_Start_IT+0x26>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e040      	b.n	8004ea0 <HAL_DMA_Start_IT+0xa8>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d12f      	bne.n	8004e92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2202      	movs	r2, #2
 8004e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	68b9      	ldr	r1, [r7, #8]
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 fa56 	bl	80052f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e50:	223f      	movs	r2, #63	; 0x3f
 8004e52:	409a      	lsls	r2, r3
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0216 	orr.w	r2, r2, #22
 8004e66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d007      	beq.n	8004e80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0208 	orr.w	r2, r2, #8
 8004e7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0201 	orr.w	r2, r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	e005      	b.n	8004e9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004eb6:	f7ff fdd3 	bl	8004a60 <HAL_GetTick>
 8004eba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d008      	beq.n	8004eda <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2280      	movs	r2, #128	; 0x80
 8004ecc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e052      	b.n	8004f80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 0216 	bic.w	r2, r2, #22
 8004ee8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	695a      	ldr	r2, [r3, #20]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ef8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d103      	bne.n	8004f0a <HAL_DMA_Abort+0x62>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d007      	beq.n	8004f1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f022 0208 	bic.w	r2, r2, #8
 8004f18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 0201 	bic.w	r2, r2, #1
 8004f28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f2a:	e013      	b.n	8004f54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f2c:	f7ff fd98 	bl	8004a60 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b05      	cmp	r3, #5
 8004f38:	d90c      	bls.n	8004f54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2203      	movs	r2, #3
 8004f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e015      	b.n	8004f80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1e4      	bne.n	8004f2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f66:	223f      	movs	r2, #63	; 0x3f
 8004f68:	409a      	lsls	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d004      	beq.n	8004fa6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2280      	movs	r2, #128	; 0x80
 8004fa0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e00c      	b.n	8004fc0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2205      	movs	r2, #5
 8004faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 0201 	bic.w	r2, r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004fd8:	4b8e      	ldr	r3, [pc, #568]	; (8005214 <HAL_DMA_IRQHandler+0x248>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a8e      	ldr	r2, [pc, #568]	; (8005218 <HAL_DMA_IRQHandler+0x24c>)
 8004fde:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe2:	0a9b      	lsrs	r3, r3, #10
 8004fe4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff6:	2208      	movs	r2, #8
 8004ff8:	409a      	lsls	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d01a      	beq.n	8005038 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	d013      	beq.n	8005038 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0204 	bic.w	r2, r2, #4
 800501e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005024:	2208      	movs	r2, #8
 8005026:	409a      	lsls	r2, r3
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005030:	f043 0201 	orr.w	r2, r3, #1
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800503c:	2201      	movs	r2, #1
 800503e:	409a      	lsls	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4013      	ands	r3, r2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d012      	beq.n	800506e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00b      	beq.n	800506e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800505a:	2201      	movs	r2, #1
 800505c:	409a      	lsls	r2, r3
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005066:	f043 0202 	orr.w	r2, r3, #2
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005072:	2204      	movs	r2, #4
 8005074:	409a      	lsls	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	4013      	ands	r3, r2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d012      	beq.n	80050a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00b      	beq.n	80050a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005090:	2204      	movs	r2, #4
 8005092:	409a      	lsls	r2, r3
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509c:	f043 0204 	orr.w	r2, r3, #4
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a8:	2210      	movs	r2, #16
 80050aa:	409a      	lsls	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4013      	ands	r3, r2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d043      	beq.n	800513c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0308 	and.w	r3, r3, #8
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d03c      	beq.n	800513c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c6:	2210      	movs	r2, #16
 80050c8:	409a      	lsls	r2, r3
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d018      	beq.n	800510e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d108      	bne.n	80050fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d024      	beq.n	800513c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	4798      	blx	r3
 80050fa:	e01f      	b.n	800513c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005100:	2b00      	cmp	r3, #0
 8005102:	d01b      	beq.n	800513c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	4798      	blx	r3
 800510c:	e016      	b.n	800513c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005118:	2b00      	cmp	r3, #0
 800511a:	d107      	bne.n	800512c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 0208 	bic.w	r2, r2, #8
 800512a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005140:	2220      	movs	r2, #32
 8005142:	409a      	lsls	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4013      	ands	r3, r2
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 808f 	beq.w	800526c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0310 	and.w	r3, r3, #16
 8005158:	2b00      	cmp	r3, #0
 800515a:	f000 8087 	beq.w	800526c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005162:	2220      	movs	r2, #32
 8005164:	409a      	lsls	r2, r3
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b05      	cmp	r3, #5
 8005174:	d136      	bne.n	80051e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0216 	bic.w	r2, r2, #22
 8005184:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	695a      	ldr	r2, [r3, #20]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005194:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	2b00      	cmp	r3, #0
 800519c:	d103      	bne.n	80051a6 <HAL_DMA_IRQHandler+0x1da>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d007      	beq.n	80051b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0208 	bic.w	r2, r2, #8
 80051b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ba:	223f      	movs	r2, #63	; 0x3f
 80051bc:	409a      	lsls	r2, r3
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d07e      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	4798      	blx	r3
        }
        return;
 80051e2:	e079      	b.n	80052d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d01d      	beq.n	800522e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10d      	bne.n	800521c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005204:	2b00      	cmp	r3, #0
 8005206:	d031      	beq.n	800526c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	4798      	blx	r3
 8005210:	e02c      	b.n	800526c <HAL_DMA_IRQHandler+0x2a0>
 8005212:	bf00      	nop
 8005214:	20000210 	.word	0x20000210
 8005218:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005220:	2b00      	cmp	r3, #0
 8005222:	d023      	beq.n	800526c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	4798      	blx	r3
 800522c:	e01e      	b.n	800526c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10f      	bne.n	800525c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0210 	bic.w	r2, r2, #16
 800524a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005260:	2b00      	cmp	r3, #0
 8005262:	d003      	beq.n	800526c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005270:	2b00      	cmp	r3, #0
 8005272:	d032      	beq.n	80052da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d022      	beq.n	80052c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2205      	movs	r2, #5
 8005284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0201 	bic.w	r2, r2, #1
 8005296:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	3301      	adds	r3, #1
 800529c:	60bb      	str	r3, [r7, #8]
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d307      	bcc.n	80052b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1f2      	bne.n	8005298 <HAL_DMA_IRQHandler+0x2cc>
 80052b2:	e000      	b.n	80052b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80052b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d005      	beq.n	80052da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	4798      	blx	r3
 80052d6:	e000      	b.n	80052da <HAL_DMA_IRQHandler+0x30e>
        return;
 80052d8:	bf00      	nop
    }
  }
}
 80052da:	3718      	adds	r7, #24
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
 8005304:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005314:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	2b40      	cmp	r3, #64	; 0x40
 8005324:	d108      	bne.n	8005338 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005336:	e007      	b.n	8005348 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	60da      	str	r2, [r3, #12]
}
 8005348:	bf00      	nop
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	b2db      	uxtb	r3, r3
 8005362:	3b10      	subs	r3, #16
 8005364:	4a14      	ldr	r2, [pc, #80]	; (80053b8 <DMA_CalcBaseAndBitshift+0x64>)
 8005366:	fba2 2303 	umull	r2, r3, r2, r3
 800536a:	091b      	lsrs	r3, r3, #4
 800536c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800536e:	4a13      	ldr	r2, [pc, #76]	; (80053bc <DMA_CalcBaseAndBitshift+0x68>)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	4413      	add	r3, r2
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	461a      	mov	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2b03      	cmp	r3, #3
 8005380:	d909      	bls.n	8005396 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800538a:	f023 0303 	bic.w	r3, r3, #3
 800538e:	1d1a      	adds	r2, r3, #4
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	659a      	str	r2, [r3, #88]	; 0x58
 8005394:	e007      	b.n	80053a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800539e:	f023 0303 	bic.w	r3, r3, #3
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	aaaaaaab 	.word	0xaaaaaaab
 80053bc:	0800b230 	.word	0x0800b230

080053c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053c8:	2300      	movs	r3, #0
 80053ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d11f      	bne.n	800541a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	2b03      	cmp	r3, #3
 80053de:	d856      	bhi.n	800548e <DMA_CheckFifoParam+0xce>
 80053e0:	a201      	add	r2, pc, #4	; (adr r2, 80053e8 <DMA_CheckFifoParam+0x28>)
 80053e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e6:	bf00      	nop
 80053e8:	080053f9 	.word	0x080053f9
 80053ec:	0800540b 	.word	0x0800540b
 80053f0:	080053f9 	.word	0x080053f9
 80053f4:	0800548f 	.word	0x0800548f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d046      	beq.n	8005492 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005408:	e043      	b.n	8005492 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005412:	d140      	bne.n	8005496 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005418:	e03d      	b.n	8005496 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005422:	d121      	bne.n	8005468 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2b03      	cmp	r3, #3
 8005428:	d837      	bhi.n	800549a <DMA_CheckFifoParam+0xda>
 800542a:	a201      	add	r2, pc, #4	; (adr r2, 8005430 <DMA_CheckFifoParam+0x70>)
 800542c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005430:	08005441 	.word	0x08005441
 8005434:	08005447 	.word	0x08005447
 8005438:	08005441 	.word	0x08005441
 800543c:	08005459 	.word	0x08005459
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	73fb      	strb	r3, [r7, #15]
      break;
 8005444:	e030      	b.n	80054a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d025      	beq.n	800549e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005456:	e022      	b.n	800549e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005460:	d11f      	bne.n	80054a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005466:	e01c      	b.n	80054a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	2b02      	cmp	r3, #2
 800546c:	d903      	bls.n	8005476 <DMA_CheckFifoParam+0xb6>
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	2b03      	cmp	r3, #3
 8005472:	d003      	beq.n	800547c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005474:	e018      	b.n	80054a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	73fb      	strb	r3, [r7, #15]
      break;
 800547a:	e015      	b.n	80054a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005480:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00e      	beq.n	80054a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	73fb      	strb	r3, [r7, #15]
      break;
 800548c:	e00b      	b.n	80054a6 <DMA_CheckFifoParam+0xe6>
      break;
 800548e:	bf00      	nop
 8005490:	e00a      	b.n	80054a8 <DMA_CheckFifoParam+0xe8>
      break;
 8005492:	bf00      	nop
 8005494:	e008      	b.n	80054a8 <DMA_CheckFifoParam+0xe8>
      break;
 8005496:	bf00      	nop
 8005498:	e006      	b.n	80054a8 <DMA_CheckFifoParam+0xe8>
      break;
 800549a:	bf00      	nop
 800549c:	e004      	b.n	80054a8 <DMA_CheckFifoParam+0xe8>
      break;
 800549e:	bf00      	nop
 80054a0:	e002      	b.n	80054a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80054a2:	bf00      	nop
 80054a4:	e000      	b.n	80054a8 <DMA_CheckFifoParam+0xe8>
      break;
 80054a6:	bf00      	nop
    }
  } 
  
  return status; 
 80054a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop

080054b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b089      	sub	sp, #36	; 0x24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80054c6:	2300      	movs	r3, #0
 80054c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054ce:	2300      	movs	r3, #0
 80054d0:	61fb      	str	r3, [r7, #28]
 80054d2:	e159      	b.n	8005788 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80054d4:	2201      	movs	r2, #1
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	fa02 f303 	lsl.w	r3, r2, r3
 80054dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	4013      	ands	r3, r2
 80054e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	f040 8148 	bne.w	8005782 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d005      	beq.n	800550a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005506:	2b02      	cmp	r3, #2
 8005508:	d130      	bne.n	800556c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	2203      	movs	r2, #3
 8005516:	fa02 f303 	lsl.w	r3, r2, r3
 800551a:	43db      	mvns	r3, r3
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	4013      	ands	r3, r2
 8005520:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	68da      	ldr	r2, [r3, #12]
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	fa02 f303 	lsl.w	r3, r2, r3
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	4313      	orrs	r3, r2
 8005532:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	69ba      	ldr	r2, [r7, #24]
 8005538:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005540:	2201      	movs	r2, #1
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	fa02 f303 	lsl.w	r3, r2, r3
 8005548:	43db      	mvns	r3, r3
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	4013      	ands	r3, r2
 800554e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	091b      	lsrs	r3, r3, #4
 8005556:	f003 0201 	and.w	r2, r3, #1
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	fa02 f303 	lsl.w	r3, r2, r3
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	4313      	orrs	r3, r2
 8005564:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f003 0303 	and.w	r3, r3, #3
 8005574:	2b03      	cmp	r3, #3
 8005576:	d017      	beq.n	80055a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	005b      	lsls	r3, r3, #1
 8005582:	2203      	movs	r2, #3
 8005584:	fa02 f303 	lsl.w	r3, r2, r3
 8005588:	43db      	mvns	r3, r3
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	4013      	ands	r3, r2
 800558e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	fa02 f303 	lsl.w	r3, r2, r3
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	4313      	orrs	r3, r2
 80055a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f003 0303 	and.w	r3, r3, #3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d123      	bne.n	80055fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	08da      	lsrs	r2, r3, #3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3208      	adds	r2, #8
 80055bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	220f      	movs	r2, #15
 80055cc:	fa02 f303 	lsl.w	r3, r2, r3
 80055d0:	43db      	mvns	r3, r3
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	4013      	ands	r3, r2
 80055d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	691a      	ldr	r2, [r3, #16]
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	f003 0307 	and.w	r3, r3, #7
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	fa02 f303 	lsl.w	r3, r2, r3
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	08da      	lsrs	r2, r3, #3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	3208      	adds	r2, #8
 80055f6:	69b9      	ldr	r1, [r7, #24]
 80055f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	005b      	lsls	r3, r3, #1
 8005606:	2203      	movs	r2, #3
 8005608:	fa02 f303 	lsl.w	r3, r2, r3
 800560c:	43db      	mvns	r3, r3
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	4013      	ands	r3, r2
 8005612:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f003 0203 	and.w	r2, r3, #3
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	fa02 f303 	lsl.w	r3, r2, r3
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	4313      	orrs	r3, r2
 8005628:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 80a2 	beq.w	8005782 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800563e:	2300      	movs	r3, #0
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	4b57      	ldr	r3, [pc, #348]	; (80057a0 <HAL_GPIO_Init+0x2e8>)
 8005644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005646:	4a56      	ldr	r2, [pc, #344]	; (80057a0 <HAL_GPIO_Init+0x2e8>)
 8005648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800564c:	6453      	str	r3, [r2, #68]	; 0x44
 800564e:	4b54      	ldr	r3, [pc, #336]	; (80057a0 <HAL_GPIO_Init+0x2e8>)
 8005650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005656:	60fb      	str	r3, [r7, #12]
 8005658:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800565a:	4a52      	ldr	r2, [pc, #328]	; (80057a4 <HAL_GPIO_Init+0x2ec>)
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	089b      	lsrs	r3, r3, #2
 8005660:	3302      	adds	r3, #2
 8005662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005666:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	f003 0303 	and.w	r3, r3, #3
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	220f      	movs	r2, #15
 8005672:	fa02 f303 	lsl.w	r3, r2, r3
 8005676:	43db      	mvns	r3, r3
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	4013      	ands	r3, r2
 800567c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a49      	ldr	r2, [pc, #292]	; (80057a8 <HAL_GPIO_Init+0x2f0>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d019      	beq.n	80056ba <HAL_GPIO_Init+0x202>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a48      	ldr	r2, [pc, #288]	; (80057ac <HAL_GPIO_Init+0x2f4>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d013      	beq.n	80056b6 <HAL_GPIO_Init+0x1fe>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a47      	ldr	r2, [pc, #284]	; (80057b0 <HAL_GPIO_Init+0x2f8>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d00d      	beq.n	80056b2 <HAL_GPIO_Init+0x1fa>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a46      	ldr	r2, [pc, #280]	; (80057b4 <HAL_GPIO_Init+0x2fc>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d007      	beq.n	80056ae <HAL_GPIO_Init+0x1f6>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a45      	ldr	r2, [pc, #276]	; (80057b8 <HAL_GPIO_Init+0x300>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d101      	bne.n	80056aa <HAL_GPIO_Init+0x1f2>
 80056a6:	2304      	movs	r3, #4
 80056a8:	e008      	b.n	80056bc <HAL_GPIO_Init+0x204>
 80056aa:	2307      	movs	r3, #7
 80056ac:	e006      	b.n	80056bc <HAL_GPIO_Init+0x204>
 80056ae:	2303      	movs	r3, #3
 80056b0:	e004      	b.n	80056bc <HAL_GPIO_Init+0x204>
 80056b2:	2302      	movs	r3, #2
 80056b4:	e002      	b.n	80056bc <HAL_GPIO_Init+0x204>
 80056b6:	2301      	movs	r3, #1
 80056b8:	e000      	b.n	80056bc <HAL_GPIO_Init+0x204>
 80056ba:	2300      	movs	r3, #0
 80056bc:	69fa      	ldr	r2, [r7, #28]
 80056be:	f002 0203 	and.w	r2, r2, #3
 80056c2:	0092      	lsls	r2, r2, #2
 80056c4:	4093      	lsls	r3, r2
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056cc:	4935      	ldr	r1, [pc, #212]	; (80057a4 <HAL_GPIO_Init+0x2ec>)
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	089b      	lsrs	r3, r3, #2
 80056d2:	3302      	adds	r3, #2
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056da:	4b38      	ldr	r3, [pc, #224]	; (80057bc <HAL_GPIO_Init+0x304>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	43db      	mvns	r3, r3
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	4013      	ands	r3, r2
 80056e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d003      	beq.n	80056fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80056fe:	4a2f      	ldr	r2, [pc, #188]	; (80057bc <HAL_GPIO_Init+0x304>)
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005704:	4b2d      	ldr	r3, [pc, #180]	; (80057bc <HAL_GPIO_Init+0x304>)
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	43db      	mvns	r3, r3
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	4013      	ands	r3, r2
 8005712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d003      	beq.n	8005728 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	4313      	orrs	r3, r2
 8005726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005728:	4a24      	ldr	r2, [pc, #144]	; (80057bc <HAL_GPIO_Init+0x304>)
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800572e:	4b23      	ldr	r3, [pc, #140]	; (80057bc <HAL_GPIO_Init+0x304>)
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	43db      	mvns	r3, r3
 8005738:	69ba      	ldr	r2, [r7, #24]
 800573a:	4013      	ands	r3, r2
 800573c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	4313      	orrs	r3, r2
 8005750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005752:	4a1a      	ldr	r2, [pc, #104]	; (80057bc <HAL_GPIO_Init+0x304>)
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005758:	4b18      	ldr	r3, [pc, #96]	; (80057bc <HAL_GPIO_Init+0x304>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	43db      	mvns	r3, r3
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	4013      	ands	r3, r2
 8005766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d003      	beq.n	800577c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	4313      	orrs	r3, r2
 800577a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800577c:	4a0f      	ldr	r2, [pc, #60]	; (80057bc <HAL_GPIO_Init+0x304>)
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	3301      	adds	r3, #1
 8005786:	61fb      	str	r3, [r7, #28]
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	2b0f      	cmp	r3, #15
 800578c:	f67f aea2 	bls.w	80054d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005790:	bf00      	nop
 8005792:	bf00      	nop
 8005794:	3724      	adds	r7, #36	; 0x24
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	40023800 	.word	0x40023800
 80057a4:	40013800 	.word	0x40013800
 80057a8:	40020000 	.word	0x40020000
 80057ac:	40020400 	.word	0x40020400
 80057b0:	40020800 	.word	0x40020800
 80057b4:	40020c00 	.word	0x40020c00
 80057b8:	40021000 	.word	0x40021000
 80057bc:	40013c00 	.word	0x40013c00

080057c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	460b      	mov	r3, r1
 80057ca:	807b      	strh	r3, [r7, #2]
 80057cc:	4613      	mov	r3, r2
 80057ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057d0:	787b      	ldrb	r3, [r7, #1]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057d6:	887a      	ldrh	r2, [r7, #2]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80057dc:	e003      	b.n	80057e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80057de:	887b      	ldrh	r3, [r7, #2]
 80057e0:	041a      	lsls	r2, r3, #16
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	619a      	str	r2, [r3, #24]
}
 80057e6:	bf00      	nop
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
	...

080057f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	4603      	mov	r3, r0
 80057fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80057fe:	4b08      	ldr	r3, [pc, #32]	; (8005820 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005800:	695a      	ldr	r2, [r3, #20]
 8005802:	88fb      	ldrh	r3, [r7, #6]
 8005804:	4013      	ands	r3, r2
 8005806:	2b00      	cmp	r3, #0
 8005808:	d006      	beq.n	8005818 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800580a:	4a05      	ldr	r2, [pc, #20]	; (8005820 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800580c:	88fb      	ldrh	r3, [r7, #6]
 800580e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005810:	88fb      	ldrh	r3, [r7, #6]
 8005812:	4618      	mov	r0, r3
 8005814:	f7fd fb62 	bl	8002edc <HAL_GPIO_EXTI_Callback>
  }
}
 8005818:	bf00      	nop
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	40013c00 	.word	0x40013c00

08005824 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e12b      	b.n	8005a8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d106      	bne.n	8005850 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f7fd f904 	bl	8002a58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2224      	movs	r2, #36	; 0x24
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 0201 	bic.w	r2, r2, #1
 8005866:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005876:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005886:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005888:	f000 fd80 	bl	800638c <HAL_RCC_GetPCLK1Freq>
 800588c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	4a81      	ldr	r2, [pc, #516]	; (8005a98 <HAL_I2C_Init+0x274>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d807      	bhi.n	80058a8 <HAL_I2C_Init+0x84>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4a80      	ldr	r2, [pc, #512]	; (8005a9c <HAL_I2C_Init+0x278>)
 800589c:	4293      	cmp	r3, r2
 800589e:	bf94      	ite	ls
 80058a0:	2301      	movls	r3, #1
 80058a2:	2300      	movhi	r3, #0
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	e006      	b.n	80058b6 <HAL_I2C_Init+0x92>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	4a7d      	ldr	r2, [pc, #500]	; (8005aa0 <HAL_I2C_Init+0x27c>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	bf94      	ite	ls
 80058b0:	2301      	movls	r3, #1
 80058b2:	2300      	movhi	r3, #0
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e0e7      	b.n	8005a8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4a78      	ldr	r2, [pc, #480]	; (8005aa4 <HAL_I2C_Init+0x280>)
 80058c2:	fba2 2303 	umull	r2, r3, r2, r3
 80058c6:	0c9b      	lsrs	r3, r3, #18
 80058c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	430a      	orrs	r2, r1
 80058dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	4a6a      	ldr	r2, [pc, #424]	; (8005a98 <HAL_I2C_Init+0x274>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d802      	bhi.n	80058f8 <HAL_I2C_Init+0xd4>
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	3301      	adds	r3, #1
 80058f6:	e009      	b.n	800590c <HAL_I2C_Init+0xe8>
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80058fe:	fb02 f303 	mul.w	r3, r2, r3
 8005902:	4a69      	ldr	r2, [pc, #420]	; (8005aa8 <HAL_I2C_Init+0x284>)
 8005904:	fba2 2303 	umull	r2, r3, r2, r3
 8005908:	099b      	lsrs	r3, r3, #6
 800590a:	3301      	adds	r3, #1
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	6812      	ldr	r2, [r2, #0]
 8005910:	430b      	orrs	r3, r1
 8005912:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800591e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	495c      	ldr	r1, [pc, #368]	; (8005a98 <HAL_I2C_Init+0x274>)
 8005928:	428b      	cmp	r3, r1
 800592a:	d819      	bhi.n	8005960 <HAL_I2C_Init+0x13c>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	1e59      	subs	r1, r3, #1
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	fbb1 f3f3 	udiv	r3, r1, r3
 800593a:	1c59      	adds	r1, r3, #1
 800593c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005940:	400b      	ands	r3, r1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00a      	beq.n	800595c <HAL_I2C_Init+0x138>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	1e59      	subs	r1, r3, #1
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	fbb1 f3f3 	udiv	r3, r1, r3
 8005954:	3301      	adds	r3, #1
 8005956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800595a:	e051      	b.n	8005a00 <HAL_I2C_Init+0x1dc>
 800595c:	2304      	movs	r3, #4
 800595e:	e04f      	b.n	8005a00 <HAL_I2C_Init+0x1dc>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d111      	bne.n	800598c <HAL_I2C_Init+0x168>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	1e58      	subs	r0, r3, #1
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6859      	ldr	r1, [r3, #4]
 8005970:	460b      	mov	r3, r1
 8005972:	005b      	lsls	r3, r3, #1
 8005974:	440b      	add	r3, r1
 8005976:	fbb0 f3f3 	udiv	r3, r0, r3
 800597a:	3301      	adds	r3, #1
 800597c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005980:	2b00      	cmp	r3, #0
 8005982:	bf0c      	ite	eq
 8005984:	2301      	moveq	r3, #1
 8005986:	2300      	movne	r3, #0
 8005988:	b2db      	uxtb	r3, r3
 800598a:	e012      	b.n	80059b2 <HAL_I2C_Init+0x18e>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	1e58      	subs	r0, r3, #1
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6859      	ldr	r1, [r3, #4]
 8005994:	460b      	mov	r3, r1
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	440b      	add	r3, r1
 800599a:	0099      	lsls	r1, r3, #2
 800599c:	440b      	add	r3, r1
 800599e:	fbb0 f3f3 	udiv	r3, r0, r3
 80059a2:	3301      	adds	r3, #1
 80059a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	bf0c      	ite	eq
 80059ac:	2301      	moveq	r3, #1
 80059ae:	2300      	movne	r3, #0
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <HAL_I2C_Init+0x196>
 80059b6:	2301      	movs	r3, #1
 80059b8:	e022      	b.n	8005a00 <HAL_I2C_Init+0x1dc>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10e      	bne.n	80059e0 <HAL_I2C_Init+0x1bc>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	1e58      	subs	r0, r3, #1
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6859      	ldr	r1, [r3, #4]
 80059ca:	460b      	mov	r3, r1
 80059cc:	005b      	lsls	r3, r3, #1
 80059ce:	440b      	add	r3, r1
 80059d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80059d4:	3301      	adds	r3, #1
 80059d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059de:	e00f      	b.n	8005a00 <HAL_I2C_Init+0x1dc>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	1e58      	subs	r0, r3, #1
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6859      	ldr	r1, [r3, #4]
 80059e8:	460b      	mov	r3, r1
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	440b      	add	r3, r1
 80059ee:	0099      	lsls	r1, r3, #2
 80059f0:	440b      	add	r3, r1
 80059f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80059f6:	3301      	adds	r3, #1
 80059f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a00:	6879      	ldr	r1, [r7, #4]
 8005a02:	6809      	ldr	r1, [r1, #0]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69da      	ldr	r2, [r3, #28]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005a2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	6911      	ldr	r1, [r2, #16]
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	68d2      	ldr	r2, [r2, #12]
 8005a3a:	4311      	orrs	r1, r2
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	6812      	ldr	r2, [r2, #0]
 8005a40:	430b      	orrs	r3, r1
 8005a42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	695a      	ldr	r2, [r3, #20]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	431a      	orrs	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f042 0201 	orr.w	r2, r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2220      	movs	r2, #32
 8005a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	000186a0 	.word	0x000186a0
 8005a9c:	001e847f 	.word	0x001e847f
 8005aa0:	003d08ff 	.word	0x003d08ff
 8005aa4:	431bde83 	.word	0x431bde83
 8005aa8:	10624dd3 	.word	0x10624dd3

08005aac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e267      	b.n	8005f8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d075      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005aca:	4b88      	ldr	r3, [pc, #544]	; (8005cec <HAL_RCC_OscConfig+0x240>)
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f003 030c 	and.w	r3, r3, #12
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d00c      	beq.n	8005af0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ad6:	4b85      	ldr	r3, [pc, #532]	; (8005cec <HAL_RCC_OscConfig+0x240>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ade:	2b08      	cmp	r3, #8
 8005ae0:	d112      	bne.n	8005b08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ae2:	4b82      	ldr	r3, [pc, #520]	; (8005cec <HAL_RCC_OscConfig+0x240>)
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aee:	d10b      	bne.n	8005b08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005af0:	4b7e      	ldr	r3, [pc, #504]	; (8005cec <HAL_RCC_OscConfig+0x240>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d05b      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x108>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d157      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e242      	b.n	8005f8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b10:	d106      	bne.n	8005b20 <HAL_RCC_OscConfig+0x74>
 8005b12:	4b76      	ldr	r3, [pc, #472]	; (8005cec <HAL_RCC_OscConfig+0x240>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a75      	ldr	r2, [pc, #468]	; (8005cec <HAL_RCC_OscConfig+0x240>)
 8005b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b1c:	6013      	str	r3, [r2, #0]
 8005b1e:	e01d      	b.n	8005b5c <HAL_RCC_OscConfig+0xb0>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b28:	d10c      	bne.n	8005b44 <HAL_RCC_OscConfig+0x98>
 8005b2a:	4b70      	ldr	r3, [pc, #448]	; (8005cec <HAL_RCC_OscConfig+0x240>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a6f      	ldr	r2, [pc, #444]	; (8005cec <HAL_RCC_OscConfig+0x240>)
 8005b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b34:	6013      	str	r3, [r2, #0]
 8005b36:	4b6d      	ldr	r3, [pc, #436]	; (8005cec <HAL_RCC_OscConfig+0x240>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a6c      	ldr	r2, [pc, #432]	; (8005cec <HAL_RCC_OscConfig+0x240>)
 8005b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b40:	6013      	str	r3, [r2, #0]
 8005b42:	e00b      	b.n	8005b5c <HAL_RCC_OscConfig+0xb0>
 8005b44:	4b69      	ldr	r3, [pc, #420]	; (8005cec <HAL_RCC_OscConfig+0x240>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a68      	ldr	r2, [pc, #416]	; (8005cec <HAL_RCC_OscConfig+0x240>)
 8005b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b4e:	6013      	str	r3, [r2, #0]
 8005b50:	4b66      	ldr	r3, [pc, #408]	; (8005cec <HAL_RCC_OscConfig+0x240>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a65      	ldr	r2, [pc, #404]	; (8005cec <HAL_RCC_OscConfig+0x240>)
 8005b56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d013      	beq.n	8005b8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b64:	f7fe ff7c 	bl	8004a60 <HAL_GetTick>
 8005b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b6a:	e008      	b.n	8005b7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b6c:	f7fe ff78 	bl	8004a60 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b64      	cmp	r3, #100	; 0x64
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e207      	b.n	8005f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b7e:	4b5b      	ldr	r3, [pc, #364]	; (8005cec <HAL_RCC_OscConfig+0x240>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d0f0      	beq.n	8005b6c <HAL_RCC_OscConfig+0xc0>
 8005b8a:	e014      	b.n	8005bb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b8c:	f7fe ff68 	bl	8004a60 <HAL_GetTick>
 8005b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b92:	e008      	b.n	8005ba6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b94:	f7fe ff64 	bl	8004a60 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	2b64      	cmp	r3, #100	; 0x64
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e1f3      	b.n	8005f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ba6:	4b51      	ldr	r3, [pc, #324]	; (8005cec <HAL_RCC_OscConfig+0x240>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1f0      	bne.n	8005b94 <HAL_RCC_OscConfig+0xe8>
 8005bb2:	e000      	b.n	8005bb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d063      	beq.n	8005c8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bc2:	4b4a      	ldr	r3, [pc, #296]	; (8005cec <HAL_RCC_OscConfig+0x240>)
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f003 030c 	and.w	r3, r3, #12
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00b      	beq.n	8005be6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bce:	4b47      	ldr	r3, [pc, #284]	; (8005cec <HAL_RCC_OscConfig+0x240>)
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bd6:	2b08      	cmp	r3, #8
 8005bd8:	d11c      	bne.n	8005c14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bda:	4b44      	ldr	r3, [pc, #272]	; (8005cec <HAL_RCC_OscConfig+0x240>)
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d116      	bne.n	8005c14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005be6:	4b41      	ldr	r3, [pc, #260]	; (8005cec <HAL_RCC_OscConfig+0x240>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0302 	and.w	r3, r3, #2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d005      	beq.n	8005bfe <HAL_RCC_OscConfig+0x152>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d001      	beq.n	8005bfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e1c7      	b.n	8005f8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bfe:	4b3b      	ldr	r3, [pc, #236]	; (8005cec <HAL_RCC_OscConfig+0x240>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	4937      	ldr	r1, [pc, #220]	; (8005cec <HAL_RCC_OscConfig+0x240>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c12:	e03a      	b.n	8005c8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d020      	beq.n	8005c5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c1c:	4b34      	ldr	r3, [pc, #208]	; (8005cf0 <HAL_RCC_OscConfig+0x244>)
 8005c1e:	2201      	movs	r2, #1
 8005c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c22:	f7fe ff1d 	bl	8004a60 <HAL_GetTick>
 8005c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c28:	e008      	b.n	8005c3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c2a:	f7fe ff19 	bl	8004a60 <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d901      	bls.n	8005c3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e1a8      	b.n	8005f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c3c:	4b2b      	ldr	r3, [pc, #172]	; (8005cec <HAL_RCC_OscConfig+0x240>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d0f0      	beq.n	8005c2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c48:	4b28      	ldr	r3, [pc, #160]	; (8005cec <HAL_RCC_OscConfig+0x240>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	00db      	lsls	r3, r3, #3
 8005c56:	4925      	ldr	r1, [pc, #148]	; (8005cec <HAL_RCC_OscConfig+0x240>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	600b      	str	r3, [r1, #0]
 8005c5c:	e015      	b.n	8005c8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c5e:	4b24      	ldr	r3, [pc, #144]	; (8005cf0 <HAL_RCC_OscConfig+0x244>)
 8005c60:	2200      	movs	r2, #0
 8005c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c64:	f7fe fefc 	bl	8004a60 <HAL_GetTick>
 8005c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c6a:	e008      	b.n	8005c7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c6c:	f7fe fef8 	bl	8004a60 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e187      	b.n	8005f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c7e:	4b1b      	ldr	r3, [pc, #108]	; (8005cec <HAL_RCC_OscConfig+0x240>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1f0      	bne.n	8005c6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0308 	and.w	r3, r3, #8
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d036      	beq.n	8005d04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d016      	beq.n	8005ccc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c9e:	4b15      	ldr	r3, [pc, #84]	; (8005cf4 <HAL_RCC_OscConfig+0x248>)
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ca4:	f7fe fedc 	bl	8004a60 <HAL_GetTick>
 8005ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005caa:	e008      	b.n	8005cbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cac:	f7fe fed8 	bl	8004a60 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d901      	bls.n	8005cbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e167      	b.n	8005f8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cbe:	4b0b      	ldr	r3, [pc, #44]	; (8005cec <HAL_RCC_OscConfig+0x240>)
 8005cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d0f0      	beq.n	8005cac <HAL_RCC_OscConfig+0x200>
 8005cca:	e01b      	b.n	8005d04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ccc:	4b09      	ldr	r3, [pc, #36]	; (8005cf4 <HAL_RCC_OscConfig+0x248>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cd2:	f7fe fec5 	bl	8004a60 <HAL_GetTick>
 8005cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cd8:	e00e      	b.n	8005cf8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cda:	f7fe fec1 	bl	8004a60 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d907      	bls.n	8005cf8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e150      	b.n	8005f8e <HAL_RCC_OscConfig+0x4e2>
 8005cec:	40023800 	.word	0x40023800
 8005cf0:	42470000 	.word	0x42470000
 8005cf4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cf8:	4b88      	ldr	r3, [pc, #544]	; (8005f1c <HAL_RCC_OscConfig+0x470>)
 8005cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cfc:	f003 0302 	and.w	r3, r3, #2
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1ea      	bne.n	8005cda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0304 	and.w	r3, r3, #4
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 8097 	beq.w	8005e40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d12:	2300      	movs	r3, #0
 8005d14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d16:	4b81      	ldr	r3, [pc, #516]	; (8005f1c <HAL_RCC_OscConfig+0x470>)
 8005d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10f      	bne.n	8005d42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d22:	2300      	movs	r3, #0
 8005d24:	60bb      	str	r3, [r7, #8]
 8005d26:	4b7d      	ldr	r3, [pc, #500]	; (8005f1c <HAL_RCC_OscConfig+0x470>)
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	4a7c      	ldr	r2, [pc, #496]	; (8005f1c <HAL_RCC_OscConfig+0x470>)
 8005d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d30:	6413      	str	r3, [r2, #64]	; 0x40
 8005d32:	4b7a      	ldr	r3, [pc, #488]	; (8005f1c <HAL_RCC_OscConfig+0x470>)
 8005d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d3a:	60bb      	str	r3, [r7, #8]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d42:	4b77      	ldr	r3, [pc, #476]	; (8005f20 <HAL_RCC_OscConfig+0x474>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d118      	bne.n	8005d80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d4e:	4b74      	ldr	r3, [pc, #464]	; (8005f20 <HAL_RCC_OscConfig+0x474>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a73      	ldr	r2, [pc, #460]	; (8005f20 <HAL_RCC_OscConfig+0x474>)
 8005d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d5a:	f7fe fe81 	bl	8004a60 <HAL_GetTick>
 8005d5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d60:	e008      	b.n	8005d74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d62:	f7fe fe7d 	bl	8004a60 <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d901      	bls.n	8005d74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e10c      	b.n	8005f8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d74:	4b6a      	ldr	r3, [pc, #424]	; (8005f20 <HAL_RCC_OscConfig+0x474>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d0f0      	beq.n	8005d62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d106      	bne.n	8005d96 <HAL_RCC_OscConfig+0x2ea>
 8005d88:	4b64      	ldr	r3, [pc, #400]	; (8005f1c <HAL_RCC_OscConfig+0x470>)
 8005d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d8c:	4a63      	ldr	r2, [pc, #396]	; (8005f1c <HAL_RCC_OscConfig+0x470>)
 8005d8e:	f043 0301 	orr.w	r3, r3, #1
 8005d92:	6713      	str	r3, [r2, #112]	; 0x70
 8005d94:	e01c      	b.n	8005dd0 <HAL_RCC_OscConfig+0x324>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	2b05      	cmp	r3, #5
 8005d9c:	d10c      	bne.n	8005db8 <HAL_RCC_OscConfig+0x30c>
 8005d9e:	4b5f      	ldr	r3, [pc, #380]	; (8005f1c <HAL_RCC_OscConfig+0x470>)
 8005da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da2:	4a5e      	ldr	r2, [pc, #376]	; (8005f1c <HAL_RCC_OscConfig+0x470>)
 8005da4:	f043 0304 	orr.w	r3, r3, #4
 8005da8:	6713      	str	r3, [r2, #112]	; 0x70
 8005daa:	4b5c      	ldr	r3, [pc, #368]	; (8005f1c <HAL_RCC_OscConfig+0x470>)
 8005dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dae:	4a5b      	ldr	r2, [pc, #364]	; (8005f1c <HAL_RCC_OscConfig+0x470>)
 8005db0:	f043 0301 	orr.w	r3, r3, #1
 8005db4:	6713      	str	r3, [r2, #112]	; 0x70
 8005db6:	e00b      	b.n	8005dd0 <HAL_RCC_OscConfig+0x324>
 8005db8:	4b58      	ldr	r3, [pc, #352]	; (8005f1c <HAL_RCC_OscConfig+0x470>)
 8005dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dbc:	4a57      	ldr	r2, [pc, #348]	; (8005f1c <HAL_RCC_OscConfig+0x470>)
 8005dbe:	f023 0301 	bic.w	r3, r3, #1
 8005dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8005dc4:	4b55      	ldr	r3, [pc, #340]	; (8005f1c <HAL_RCC_OscConfig+0x470>)
 8005dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc8:	4a54      	ldr	r2, [pc, #336]	; (8005f1c <HAL_RCC_OscConfig+0x470>)
 8005dca:	f023 0304 	bic.w	r3, r3, #4
 8005dce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d015      	beq.n	8005e04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dd8:	f7fe fe42 	bl	8004a60 <HAL_GetTick>
 8005ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dde:	e00a      	b.n	8005df6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005de0:	f7fe fe3e 	bl	8004a60 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d901      	bls.n	8005df6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e0cb      	b.n	8005f8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005df6:	4b49      	ldr	r3, [pc, #292]	; (8005f1c <HAL_RCC_OscConfig+0x470>)
 8005df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfa:	f003 0302 	and.w	r3, r3, #2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d0ee      	beq.n	8005de0 <HAL_RCC_OscConfig+0x334>
 8005e02:	e014      	b.n	8005e2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e04:	f7fe fe2c 	bl	8004a60 <HAL_GetTick>
 8005e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e0a:	e00a      	b.n	8005e22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e0c:	f7fe fe28 	bl	8004a60 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e0b5      	b.n	8005f8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e22:	4b3e      	ldr	r3, [pc, #248]	; (8005f1c <HAL_RCC_OscConfig+0x470>)
 8005e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1ee      	bne.n	8005e0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e2e:	7dfb      	ldrb	r3, [r7, #23]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d105      	bne.n	8005e40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e34:	4b39      	ldr	r3, [pc, #228]	; (8005f1c <HAL_RCC_OscConfig+0x470>)
 8005e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e38:	4a38      	ldr	r2, [pc, #224]	; (8005f1c <HAL_RCC_OscConfig+0x470>)
 8005e3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 80a1 	beq.w	8005f8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e4a:	4b34      	ldr	r3, [pc, #208]	; (8005f1c <HAL_RCC_OscConfig+0x470>)
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f003 030c 	and.w	r3, r3, #12
 8005e52:	2b08      	cmp	r3, #8
 8005e54:	d05c      	beq.n	8005f10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d141      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e5e:	4b31      	ldr	r3, [pc, #196]	; (8005f24 <HAL_RCC_OscConfig+0x478>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e64:	f7fe fdfc 	bl	8004a60 <HAL_GetTick>
 8005e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e6a:	e008      	b.n	8005e7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e6c:	f7fe fdf8 	bl	8004a60 <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d901      	bls.n	8005e7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e087      	b.n	8005f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e7e:	4b27      	ldr	r3, [pc, #156]	; (8005f1c <HAL_RCC_OscConfig+0x470>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1f0      	bne.n	8005e6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	69da      	ldr	r2, [r3, #28]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	431a      	orrs	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e98:	019b      	lsls	r3, r3, #6
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea0:	085b      	lsrs	r3, r3, #1
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	041b      	lsls	r3, r3, #16
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eac:	061b      	lsls	r3, r3, #24
 8005eae:	491b      	ldr	r1, [pc, #108]	; (8005f1c <HAL_RCC_OscConfig+0x470>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005eb4:	4b1b      	ldr	r3, [pc, #108]	; (8005f24 <HAL_RCC_OscConfig+0x478>)
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eba:	f7fe fdd1 	bl	8004a60 <HAL_GetTick>
 8005ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ec0:	e008      	b.n	8005ed4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ec2:	f7fe fdcd 	bl	8004a60 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d901      	bls.n	8005ed4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e05c      	b.n	8005f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ed4:	4b11      	ldr	r3, [pc, #68]	; (8005f1c <HAL_RCC_OscConfig+0x470>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d0f0      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x416>
 8005ee0:	e054      	b.n	8005f8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ee2:	4b10      	ldr	r3, [pc, #64]	; (8005f24 <HAL_RCC_OscConfig+0x478>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee8:	f7fe fdba 	bl	8004a60 <HAL_GetTick>
 8005eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ef0:	f7fe fdb6 	bl	8004a60 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e045      	b.n	8005f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f02:	4b06      	ldr	r3, [pc, #24]	; (8005f1c <HAL_RCC_OscConfig+0x470>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1f0      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x444>
 8005f0e:	e03d      	b.n	8005f8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d107      	bne.n	8005f28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e038      	b.n	8005f8e <HAL_RCC_OscConfig+0x4e2>
 8005f1c:	40023800 	.word	0x40023800
 8005f20:	40007000 	.word	0x40007000
 8005f24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f28:	4b1b      	ldr	r3, [pc, #108]	; (8005f98 <HAL_RCC_OscConfig+0x4ec>)
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d028      	beq.n	8005f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d121      	bne.n	8005f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d11a      	bne.n	8005f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f58:	4013      	ands	r3, r2
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d111      	bne.n	8005f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6e:	085b      	lsrs	r3, r3, #1
 8005f70:	3b01      	subs	r3, #1
 8005f72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d107      	bne.n	8005f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d001      	beq.n	8005f8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e000      	b.n	8005f8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3718      	adds	r7, #24
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	40023800 	.word	0x40023800

08005f9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e0cc      	b.n	800614a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fb0:	4b68      	ldr	r3, [pc, #416]	; (8006154 <HAL_RCC_ClockConfig+0x1b8>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0307 	and.w	r3, r3, #7
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d90c      	bls.n	8005fd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fbe:	4b65      	ldr	r3, [pc, #404]	; (8006154 <HAL_RCC_ClockConfig+0x1b8>)
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	b2d2      	uxtb	r2, r2
 8005fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fc6:	4b63      	ldr	r3, [pc, #396]	; (8006154 <HAL_RCC_ClockConfig+0x1b8>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0307 	and.w	r3, r3, #7
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d001      	beq.n	8005fd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e0b8      	b.n	800614a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0302 	and.w	r3, r3, #2
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d020      	beq.n	8006026 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0304 	and.w	r3, r3, #4
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d005      	beq.n	8005ffc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ff0:	4b59      	ldr	r3, [pc, #356]	; (8006158 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	4a58      	ldr	r2, [pc, #352]	; (8006158 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ffa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0308 	and.w	r3, r3, #8
 8006004:	2b00      	cmp	r3, #0
 8006006:	d005      	beq.n	8006014 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006008:	4b53      	ldr	r3, [pc, #332]	; (8006158 <HAL_RCC_ClockConfig+0x1bc>)
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	4a52      	ldr	r2, [pc, #328]	; (8006158 <HAL_RCC_ClockConfig+0x1bc>)
 800600e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006012:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006014:	4b50      	ldr	r3, [pc, #320]	; (8006158 <HAL_RCC_ClockConfig+0x1bc>)
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	494d      	ldr	r1, [pc, #308]	; (8006158 <HAL_RCC_ClockConfig+0x1bc>)
 8006022:	4313      	orrs	r3, r2
 8006024:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0301 	and.w	r3, r3, #1
 800602e:	2b00      	cmp	r3, #0
 8006030:	d044      	beq.n	80060bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d107      	bne.n	800604a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800603a:	4b47      	ldr	r3, [pc, #284]	; (8006158 <HAL_RCC_ClockConfig+0x1bc>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d119      	bne.n	800607a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e07f      	b.n	800614a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	2b02      	cmp	r3, #2
 8006050:	d003      	beq.n	800605a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006056:	2b03      	cmp	r3, #3
 8006058:	d107      	bne.n	800606a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800605a:	4b3f      	ldr	r3, [pc, #252]	; (8006158 <HAL_RCC_ClockConfig+0x1bc>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d109      	bne.n	800607a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e06f      	b.n	800614a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800606a:	4b3b      	ldr	r3, [pc, #236]	; (8006158 <HAL_RCC_ClockConfig+0x1bc>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0302 	and.w	r3, r3, #2
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e067      	b.n	800614a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800607a:	4b37      	ldr	r3, [pc, #220]	; (8006158 <HAL_RCC_ClockConfig+0x1bc>)
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f023 0203 	bic.w	r2, r3, #3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	4934      	ldr	r1, [pc, #208]	; (8006158 <HAL_RCC_ClockConfig+0x1bc>)
 8006088:	4313      	orrs	r3, r2
 800608a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800608c:	f7fe fce8 	bl	8004a60 <HAL_GetTick>
 8006090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006092:	e00a      	b.n	80060aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006094:	f7fe fce4 	bl	8004a60 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	f241 3288 	movw	r2, #5000	; 0x1388
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d901      	bls.n	80060aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e04f      	b.n	800614a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060aa:	4b2b      	ldr	r3, [pc, #172]	; (8006158 <HAL_RCC_ClockConfig+0x1bc>)
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f003 020c 	and.w	r2, r3, #12
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d1eb      	bne.n	8006094 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060bc:	4b25      	ldr	r3, [pc, #148]	; (8006154 <HAL_RCC_ClockConfig+0x1b8>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0307 	and.w	r3, r3, #7
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d20c      	bcs.n	80060e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ca:	4b22      	ldr	r3, [pc, #136]	; (8006154 <HAL_RCC_ClockConfig+0x1b8>)
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	b2d2      	uxtb	r2, r2
 80060d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060d2:	4b20      	ldr	r3, [pc, #128]	; (8006154 <HAL_RCC_ClockConfig+0x1b8>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0307 	and.w	r3, r3, #7
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d001      	beq.n	80060e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e032      	b.n	800614a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0304 	and.w	r3, r3, #4
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d008      	beq.n	8006102 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060f0:	4b19      	ldr	r3, [pc, #100]	; (8006158 <HAL_RCC_ClockConfig+0x1bc>)
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	4916      	ldr	r1, [pc, #88]	; (8006158 <HAL_RCC_ClockConfig+0x1bc>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0308 	and.w	r3, r3, #8
 800610a:	2b00      	cmp	r3, #0
 800610c:	d009      	beq.n	8006122 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800610e:	4b12      	ldr	r3, [pc, #72]	; (8006158 <HAL_RCC_ClockConfig+0x1bc>)
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	00db      	lsls	r3, r3, #3
 800611c:	490e      	ldr	r1, [pc, #56]	; (8006158 <HAL_RCC_ClockConfig+0x1bc>)
 800611e:	4313      	orrs	r3, r2
 8006120:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006122:	f000 f821 	bl	8006168 <HAL_RCC_GetSysClockFreq>
 8006126:	4602      	mov	r2, r0
 8006128:	4b0b      	ldr	r3, [pc, #44]	; (8006158 <HAL_RCC_ClockConfig+0x1bc>)
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	091b      	lsrs	r3, r3, #4
 800612e:	f003 030f 	and.w	r3, r3, #15
 8006132:	490a      	ldr	r1, [pc, #40]	; (800615c <HAL_RCC_ClockConfig+0x1c0>)
 8006134:	5ccb      	ldrb	r3, [r1, r3]
 8006136:	fa22 f303 	lsr.w	r3, r2, r3
 800613a:	4a09      	ldr	r2, [pc, #36]	; (8006160 <HAL_RCC_ClockConfig+0x1c4>)
 800613c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800613e:	4b09      	ldr	r3, [pc, #36]	; (8006164 <HAL_RCC_ClockConfig+0x1c8>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4618      	mov	r0, r3
 8006144:	f7fe fc48 	bl	80049d8 <HAL_InitTick>

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	40023c00 	.word	0x40023c00
 8006158:	40023800 	.word	0x40023800
 800615c:	0800a9ec 	.word	0x0800a9ec
 8006160:	20000210 	.word	0x20000210
 8006164:	20000214 	.word	0x20000214

08006168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800616c:	b094      	sub	sp, #80	; 0x50
 800616e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006170:	2300      	movs	r3, #0
 8006172:	647b      	str	r3, [r7, #68]	; 0x44
 8006174:	2300      	movs	r3, #0
 8006176:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006178:	2300      	movs	r3, #0
 800617a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800617c:	2300      	movs	r3, #0
 800617e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006180:	4b79      	ldr	r3, [pc, #484]	; (8006368 <HAL_RCC_GetSysClockFreq+0x200>)
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f003 030c 	and.w	r3, r3, #12
 8006188:	2b08      	cmp	r3, #8
 800618a:	d00d      	beq.n	80061a8 <HAL_RCC_GetSysClockFreq+0x40>
 800618c:	2b08      	cmp	r3, #8
 800618e:	f200 80e1 	bhi.w	8006354 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006192:	2b00      	cmp	r3, #0
 8006194:	d002      	beq.n	800619c <HAL_RCC_GetSysClockFreq+0x34>
 8006196:	2b04      	cmp	r3, #4
 8006198:	d003      	beq.n	80061a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800619a:	e0db      	b.n	8006354 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800619c:	4b73      	ldr	r3, [pc, #460]	; (800636c <HAL_RCC_GetSysClockFreq+0x204>)
 800619e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80061a0:	e0db      	b.n	800635a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061a2:	4b73      	ldr	r3, [pc, #460]	; (8006370 <HAL_RCC_GetSysClockFreq+0x208>)
 80061a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80061a6:	e0d8      	b.n	800635a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061a8:	4b6f      	ldr	r3, [pc, #444]	; (8006368 <HAL_RCC_GetSysClockFreq+0x200>)
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061b2:	4b6d      	ldr	r3, [pc, #436]	; (8006368 <HAL_RCC_GetSysClockFreq+0x200>)
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d063      	beq.n	8006286 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061be:	4b6a      	ldr	r3, [pc, #424]	; (8006368 <HAL_RCC_GetSysClockFreq+0x200>)
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	099b      	lsrs	r3, r3, #6
 80061c4:	2200      	movs	r2, #0
 80061c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80061c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80061ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061d0:	633b      	str	r3, [r7, #48]	; 0x30
 80061d2:	2300      	movs	r3, #0
 80061d4:	637b      	str	r3, [r7, #52]	; 0x34
 80061d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80061da:	4622      	mov	r2, r4
 80061dc:	462b      	mov	r3, r5
 80061de:	f04f 0000 	mov.w	r0, #0
 80061e2:	f04f 0100 	mov.w	r1, #0
 80061e6:	0159      	lsls	r1, r3, #5
 80061e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061ec:	0150      	lsls	r0, r2, #5
 80061ee:	4602      	mov	r2, r0
 80061f0:	460b      	mov	r3, r1
 80061f2:	4621      	mov	r1, r4
 80061f4:	1a51      	subs	r1, r2, r1
 80061f6:	6139      	str	r1, [r7, #16]
 80061f8:	4629      	mov	r1, r5
 80061fa:	eb63 0301 	sbc.w	r3, r3, r1
 80061fe:	617b      	str	r3, [r7, #20]
 8006200:	f04f 0200 	mov.w	r2, #0
 8006204:	f04f 0300 	mov.w	r3, #0
 8006208:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800620c:	4659      	mov	r1, fp
 800620e:	018b      	lsls	r3, r1, #6
 8006210:	4651      	mov	r1, sl
 8006212:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006216:	4651      	mov	r1, sl
 8006218:	018a      	lsls	r2, r1, #6
 800621a:	4651      	mov	r1, sl
 800621c:	ebb2 0801 	subs.w	r8, r2, r1
 8006220:	4659      	mov	r1, fp
 8006222:	eb63 0901 	sbc.w	r9, r3, r1
 8006226:	f04f 0200 	mov.w	r2, #0
 800622a:	f04f 0300 	mov.w	r3, #0
 800622e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006232:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006236:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800623a:	4690      	mov	r8, r2
 800623c:	4699      	mov	r9, r3
 800623e:	4623      	mov	r3, r4
 8006240:	eb18 0303 	adds.w	r3, r8, r3
 8006244:	60bb      	str	r3, [r7, #8]
 8006246:	462b      	mov	r3, r5
 8006248:	eb49 0303 	adc.w	r3, r9, r3
 800624c:	60fb      	str	r3, [r7, #12]
 800624e:	f04f 0200 	mov.w	r2, #0
 8006252:	f04f 0300 	mov.w	r3, #0
 8006256:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800625a:	4629      	mov	r1, r5
 800625c:	024b      	lsls	r3, r1, #9
 800625e:	4621      	mov	r1, r4
 8006260:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006264:	4621      	mov	r1, r4
 8006266:	024a      	lsls	r2, r1, #9
 8006268:	4610      	mov	r0, r2
 800626a:	4619      	mov	r1, r3
 800626c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800626e:	2200      	movs	r2, #0
 8006270:	62bb      	str	r3, [r7, #40]	; 0x28
 8006272:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006274:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006278:	f7fa fc92 	bl	8000ba0 <__aeabi_uldivmod>
 800627c:	4602      	mov	r2, r0
 800627e:	460b      	mov	r3, r1
 8006280:	4613      	mov	r3, r2
 8006282:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006284:	e058      	b.n	8006338 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006286:	4b38      	ldr	r3, [pc, #224]	; (8006368 <HAL_RCC_GetSysClockFreq+0x200>)
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	099b      	lsrs	r3, r3, #6
 800628c:	2200      	movs	r2, #0
 800628e:	4618      	mov	r0, r3
 8006290:	4611      	mov	r1, r2
 8006292:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006296:	623b      	str	r3, [r7, #32]
 8006298:	2300      	movs	r3, #0
 800629a:	627b      	str	r3, [r7, #36]	; 0x24
 800629c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80062a0:	4642      	mov	r2, r8
 80062a2:	464b      	mov	r3, r9
 80062a4:	f04f 0000 	mov.w	r0, #0
 80062a8:	f04f 0100 	mov.w	r1, #0
 80062ac:	0159      	lsls	r1, r3, #5
 80062ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062b2:	0150      	lsls	r0, r2, #5
 80062b4:	4602      	mov	r2, r0
 80062b6:	460b      	mov	r3, r1
 80062b8:	4641      	mov	r1, r8
 80062ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80062be:	4649      	mov	r1, r9
 80062c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80062c4:	f04f 0200 	mov.w	r2, #0
 80062c8:	f04f 0300 	mov.w	r3, #0
 80062cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80062d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80062d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80062d8:	ebb2 040a 	subs.w	r4, r2, sl
 80062dc:	eb63 050b 	sbc.w	r5, r3, fp
 80062e0:	f04f 0200 	mov.w	r2, #0
 80062e4:	f04f 0300 	mov.w	r3, #0
 80062e8:	00eb      	lsls	r3, r5, #3
 80062ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062ee:	00e2      	lsls	r2, r4, #3
 80062f0:	4614      	mov	r4, r2
 80062f2:	461d      	mov	r5, r3
 80062f4:	4643      	mov	r3, r8
 80062f6:	18e3      	adds	r3, r4, r3
 80062f8:	603b      	str	r3, [r7, #0]
 80062fa:	464b      	mov	r3, r9
 80062fc:	eb45 0303 	adc.w	r3, r5, r3
 8006300:	607b      	str	r3, [r7, #4]
 8006302:	f04f 0200 	mov.w	r2, #0
 8006306:	f04f 0300 	mov.w	r3, #0
 800630a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800630e:	4629      	mov	r1, r5
 8006310:	028b      	lsls	r3, r1, #10
 8006312:	4621      	mov	r1, r4
 8006314:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006318:	4621      	mov	r1, r4
 800631a:	028a      	lsls	r2, r1, #10
 800631c:	4610      	mov	r0, r2
 800631e:	4619      	mov	r1, r3
 8006320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006322:	2200      	movs	r2, #0
 8006324:	61bb      	str	r3, [r7, #24]
 8006326:	61fa      	str	r2, [r7, #28]
 8006328:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800632c:	f7fa fc38 	bl	8000ba0 <__aeabi_uldivmod>
 8006330:	4602      	mov	r2, r0
 8006332:	460b      	mov	r3, r1
 8006334:	4613      	mov	r3, r2
 8006336:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006338:	4b0b      	ldr	r3, [pc, #44]	; (8006368 <HAL_RCC_GetSysClockFreq+0x200>)
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	0c1b      	lsrs	r3, r3, #16
 800633e:	f003 0303 	and.w	r3, r3, #3
 8006342:	3301      	adds	r3, #1
 8006344:	005b      	lsls	r3, r3, #1
 8006346:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006348:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800634a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800634c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006350:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006352:	e002      	b.n	800635a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006354:	4b05      	ldr	r3, [pc, #20]	; (800636c <HAL_RCC_GetSysClockFreq+0x204>)
 8006356:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006358:	bf00      	nop
    }
  }
  return sysclockfreq;
 800635a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800635c:	4618      	mov	r0, r3
 800635e:	3750      	adds	r7, #80	; 0x50
 8006360:	46bd      	mov	sp, r7
 8006362:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006366:	bf00      	nop
 8006368:	40023800 	.word	0x40023800
 800636c:	00f42400 	.word	0x00f42400
 8006370:	007a1200 	.word	0x007a1200

08006374 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006374:	b480      	push	{r7}
 8006376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006378:	4b03      	ldr	r3, [pc, #12]	; (8006388 <HAL_RCC_GetHCLKFreq+0x14>)
 800637a:	681b      	ldr	r3, [r3, #0]
}
 800637c:	4618      	mov	r0, r3
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	20000210 	.word	0x20000210

0800638c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006390:	f7ff fff0 	bl	8006374 <HAL_RCC_GetHCLKFreq>
 8006394:	4602      	mov	r2, r0
 8006396:	4b05      	ldr	r3, [pc, #20]	; (80063ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	0a9b      	lsrs	r3, r3, #10
 800639c:	f003 0307 	and.w	r3, r3, #7
 80063a0:	4903      	ldr	r1, [pc, #12]	; (80063b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063a2:	5ccb      	ldrb	r3, [r1, r3]
 80063a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	40023800 	.word	0x40023800
 80063b0:	0800a9fc 	.word	0x0800a9fc

080063b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80063b8:	f7ff ffdc 	bl	8006374 <HAL_RCC_GetHCLKFreq>
 80063bc:	4602      	mov	r2, r0
 80063be:	4b05      	ldr	r3, [pc, #20]	; (80063d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	0b5b      	lsrs	r3, r3, #13
 80063c4:	f003 0307 	and.w	r3, r3, #7
 80063c8:	4903      	ldr	r1, [pc, #12]	; (80063d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063ca:	5ccb      	ldrb	r3, [r1, r3]
 80063cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	40023800 	.word	0x40023800
 80063d8:	0800a9fc 	.word	0x0800a9fc

080063dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e04c      	b.n	8006488 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d111      	bne.n	800641e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f001 fbb2 	bl	8007b6c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800640c:	2b00      	cmp	r3, #0
 800640e:	d102      	bne.n	8006416 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a1f      	ldr	r2, [pc, #124]	; (8006490 <HAL_TIM_Base_Init+0xb4>)
 8006414:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2202      	movs	r2, #2
 8006422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	3304      	adds	r3, #4
 800642e:	4619      	mov	r1, r3
 8006430:	4610      	mov	r0, r2
 8006432:	f001 f8cf 	bl	80075d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3708      	adds	r7, #8
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	08003635 	.word	0x08003635

08006494 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d001      	beq.n	80064ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e044      	b.n	8006536 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68da      	ldr	r2, [r3, #12]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f042 0201 	orr.w	r2, r2, #1
 80064c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a1e      	ldr	r2, [pc, #120]	; (8006544 <HAL_TIM_Base_Start_IT+0xb0>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d018      	beq.n	8006500 <HAL_TIM_Base_Start_IT+0x6c>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064d6:	d013      	beq.n	8006500 <HAL_TIM_Base_Start_IT+0x6c>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a1a      	ldr	r2, [pc, #104]	; (8006548 <HAL_TIM_Base_Start_IT+0xb4>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d00e      	beq.n	8006500 <HAL_TIM_Base_Start_IT+0x6c>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a19      	ldr	r2, [pc, #100]	; (800654c <HAL_TIM_Base_Start_IT+0xb8>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d009      	beq.n	8006500 <HAL_TIM_Base_Start_IT+0x6c>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a17      	ldr	r2, [pc, #92]	; (8006550 <HAL_TIM_Base_Start_IT+0xbc>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d004      	beq.n	8006500 <HAL_TIM_Base_Start_IT+0x6c>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a16      	ldr	r2, [pc, #88]	; (8006554 <HAL_TIM_Base_Start_IT+0xc0>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d111      	bne.n	8006524 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f003 0307 	and.w	r3, r3, #7
 800650a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2b06      	cmp	r3, #6
 8006510:	d010      	beq.n	8006534 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f042 0201 	orr.w	r2, r2, #1
 8006520:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006522:	e007      	b.n	8006534 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0201 	orr.w	r2, r2, #1
 8006532:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	40010000 	.word	0x40010000
 8006548:	40000400 	.word	0x40000400
 800654c:	40000800 	.word	0x40000800
 8006550:	40000c00 	.word	0x40000c00
 8006554:	40014000 	.word	0x40014000

08006558 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e04c      	b.n	8006604 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d111      	bne.n	800659a <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f001 faf4 	bl	8007b6c <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006588:	2b00      	cmp	r3, #0
 800658a:	d102      	bne.n	8006592 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a1f      	ldr	r2, [pc, #124]	; (800660c <HAL_TIM_OC_Init+0xb4>)
 8006590:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2202      	movs	r2, #2
 800659e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	3304      	adds	r3, #4
 80065aa:	4619      	mov	r1, r3
 80065ac:	4610      	mov	r0, r2
 80065ae:	f001 f811 	bl	80075d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3708      	adds	r7, #8
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	08006611 	.word	0x08006611

08006610 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d101      	bne.n	8006636 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e04c      	b.n	80066d0 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b00      	cmp	r3, #0
 8006640:	d111      	bne.n	8006666 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f001 fa8e 	bl	8007b6c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006654:	2b00      	cmp	r3, #0
 8006656:	d102      	bne.n	800665e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a1f      	ldr	r2, [pc, #124]	; (80066d8 <HAL_TIM_PWM_Init+0xb4>)
 800665c:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2202      	movs	r2, #2
 800666a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	3304      	adds	r3, #4
 8006676:	4619      	mov	r1, r3
 8006678:	4610      	mov	r0, r2
 800667a:	f000 ffab 	bl	80075d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	080066dd 	.word	0x080066dd

080066dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d109      	bne.n	8006714 <HAL_TIM_PWM_Start+0x24>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b01      	cmp	r3, #1
 800670a:	bf14      	ite	ne
 800670c:	2301      	movne	r3, #1
 800670e:	2300      	moveq	r3, #0
 8006710:	b2db      	uxtb	r3, r3
 8006712:	e022      	b.n	800675a <HAL_TIM_PWM_Start+0x6a>
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	2b04      	cmp	r3, #4
 8006718:	d109      	bne.n	800672e <HAL_TIM_PWM_Start+0x3e>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b01      	cmp	r3, #1
 8006724:	bf14      	ite	ne
 8006726:	2301      	movne	r3, #1
 8006728:	2300      	moveq	r3, #0
 800672a:	b2db      	uxtb	r3, r3
 800672c:	e015      	b.n	800675a <HAL_TIM_PWM_Start+0x6a>
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b08      	cmp	r3, #8
 8006732:	d109      	bne.n	8006748 <HAL_TIM_PWM_Start+0x58>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800673a:	b2db      	uxtb	r3, r3
 800673c:	2b01      	cmp	r3, #1
 800673e:	bf14      	ite	ne
 8006740:	2301      	movne	r3, #1
 8006742:	2300      	moveq	r3, #0
 8006744:	b2db      	uxtb	r3, r3
 8006746:	e008      	b.n	800675a <HAL_TIM_PWM_Start+0x6a>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b01      	cmp	r3, #1
 8006752:	bf14      	ite	ne
 8006754:	2301      	movne	r3, #1
 8006756:	2300      	moveq	r3, #0
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e068      	b.n	8006834 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d104      	bne.n	8006772 <HAL_TIM_PWM_Start+0x82>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2202      	movs	r2, #2
 800676c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006770:	e013      	b.n	800679a <HAL_TIM_PWM_Start+0xaa>
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2b04      	cmp	r3, #4
 8006776:	d104      	bne.n	8006782 <HAL_TIM_PWM_Start+0x92>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2202      	movs	r2, #2
 800677c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006780:	e00b      	b.n	800679a <HAL_TIM_PWM_Start+0xaa>
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2b08      	cmp	r3, #8
 8006786:	d104      	bne.n	8006792 <HAL_TIM_PWM_Start+0xa2>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2202      	movs	r2, #2
 800678c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006790:	e003      	b.n	800679a <HAL_TIM_PWM_Start+0xaa>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2202      	movs	r2, #2
 8006796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2201      	movs	r2, #1
 80067a0:	6839      	ldr	r1, [r7, #0]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f001 f9bc 	bl	8007b20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a23      	ldr	r2, [pc, #140]	; (800683c <HAL_TIM_PWM_Start+0x14c>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d107      	bne.n	80067c2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a1d      	ldr	r2, [pc, #116]	; (800683c <HAL_TIM_PWM_Start+0x14c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d018      	beq.n	80067fe <HAL_TIM_PWM_Start+0x10e>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d4:	d013      	beq.n	80067fe <HAL_TIM_PWM_Start+0x10e>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a19      	ldr	r2, [pc, #100]	; (8006840 <HAL_TIM_PWM_Start+0x150>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d00e      	beq.n	80067fe <HAL_TIM_PWM_Start+0x10e>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a17      	ldr	r2, [pc, #92]	; (8006844 <HAL_TIM_PWM_Start+0x154>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d009      	beq.n	80067fe <HAL_TIM_PWM_Start+0x10e>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a16      	ldr	r2, [pc, #88]	; (8006848 <HAL_TIM_PWM_Start+0x158>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d004      	beq.n	80067fe <HAL_TIM_PWM_Start+0x10e>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a14      	ldr	r2, [pc, #80]	; (800684c <HAL_TIM_PWM_Start+0x15c>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d111      	bne.n	8006822 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f003 0307 	and.w	r3, r3, #7
 8006808:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2b06      	cmp	r3, #6
 800680e:	d010      	beq.n	8006832 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f042 0201 	orr.w	r2, r2, #1
 800681e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006820:	e007      	b.n	8006832 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f042 0201 	orr.w	r2, r2, #1
 8006830:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	40010000 	.word	0x40010000
 8006840:	40000400 	.word	0x40000400
 8006844:	40000800 	.word	0x40000800
 8006848:	40000c00 	.word	0x40000c00
 800684c:	40014000 	.word	0x40014000

08006850 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d101      	bne.n	8006864 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e04c      	b.n	80068fe <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b00      	cmp	r3, #0
 800686e:	d111      	bne.n	8006894 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f001 f977 	bl	8007b6c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006882:	2b00      	cmp	r3, #0
 8006884:	d102      	bne.n	800688c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a1f      	ldr	r2, [pc, #124]	; (8006908 <HAL_TIM_OnePulse_Init+0xb8>)
 800688a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2202      	movs	r2, #2
 8006898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	3304      	adds	r3, #4
 80068a4:	4619      	mov	r1, r3
 80068a6:	4610      	mov	r0, r2
 80068a8:	f000 fe94 	bl	80075d4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 0208 	bic.w	r2, r2, #8
 80068ba:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6819      	ldr	r1, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	430a      	orrs	r2, r1
 80068ca:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	0800690d 	.word	0x0800690d

0800690c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006930:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006938:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006940:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006948:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800694a:	7bfb      	ldrb	r3, [r7, #15]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d108      	bne.n	8006962 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006950:	7bbb      	ldrb	r3, [r7, #14]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d105      	bne.n	8006962 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006956:	7b7b      	ldrb	r3, [r7, #13]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d102      	bne.n	8006962 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800695c:	7b3b      	ldrb	r3, [r7, #12]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d001      	beq.n	8006966 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e03b      	b.n	80069de <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2202      	movs	r2, #2
 800696a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2202      	movs	r2, #2
 8006972:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2202      	movs	r2, #2
 800697a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2202      	movs	r2, #2
 8006982:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68da      	ldr	r2, [r3, #12]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f042 0202 	orr.w	r2, r2, #2
 8006994:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68da      	ldr	r2, [r3, #12]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f042 0204 	orr.w	r2, r2, #4
 80069a4:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2201      	movs	r2, #1
 80069ac:	2100      	movs	r1, #0
 80069ae:	4618      	mov	r0, r3
 80069b0:	f001 f8b6 	bl	8007b20 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2201      	movs	r2, #1
 80069ba:	2104      	movs	r1, #4
 80069bc:	4618      	mov	r0, r3
 80069be:	f001 f8af 	bl	8007b20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a08      	ldr	r2, [pc, #32]	; (80069e8 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d107      	bne.n	80069dc <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069da:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	40010000 	.word	0x40010000

080069ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b086      	sub	sp, #24
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d101      	bne.n	8006a00 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e0a2      	b.n	8006b46 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d111      	bne.n	8006a30 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f001 f8a9 	bl	8007b6c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d102      	bne.n	8006a28 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a4a      	ldr	r2, [pc, #296]	; (8006b50 <HAL_TIM_Encoder_Init+0x164>)
 8006a26:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2202      	movs	r2, #2
 8006a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	6812      	ldr	r2, [r2, #0]
 8006a42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a46:	f023 0307 	bic.w	r3, r3, #7
 8006a4a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	3304      	adds	r3, #4
 8006a54:	4619      	mov	r1, r3
 8006a56:	4610      	mov	r0, r2
 8006a58:	f000 fdbc 	bl	80075d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6a1b      	ldr	r3, [r3, #32]
 8006a72:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	697a      	ldr	r2, [r7, #20]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a84:	f023 0303 	bic.w	r3, r3, #3
 8006a88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	689a      	ldr	r2, [r3, #8]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	021b      	lsls	r3, r3, #8
 8006a94:	4313      	orrs	r3, r2
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006aa2:	f023 030c 	bic.w	r3, r3, #12
 8006aa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006aae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ab2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	68da      	ldr	r2, [r3, #12]
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	69db      	ldr	r3, [r3, #28]
 8006abc:	021b      	lsls	r3, r3, #8
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	011a      	lsls	r2, r3, #4
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	6a1b      	ldr	r3, [r3, #32]
 8006ad0:	031b      	lsls	r3, r3, #12
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006ae0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006ae8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	685a      	ldr	r2, [r3, #4]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	011b      	lsls	r3, r3, #4
 8006af4:	4313      	orrs	r3, r2
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3718      	adds	r7, #24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	08003599 	.word	0x08003599

08006b54 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b64:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b6c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b74:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006b7c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d110      	bne.n	8006ba6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d102      	bne.n	8006b90 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b8a:	7b7b      	ldrb	r3, [r7, #13]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d001      	beq.n	8006b94 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e069      	b.n	8006c68 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2202      	movs	r2, #2
 8006b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ba4:	e031      	b.n	8006c0a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b04      	cmp	r3, #4
 8006baa:	d110      	bne.n	8006bce <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bac:	7bbb      	ldrb	r3, [r7, #14]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d102      	bne.n	8006bb8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006bb2:	7b3b      	ldrb	r3, [r7, #12]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d001      	beq.n	8006bbc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e055      	b.n	8006c68 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bcc:	e01d      	b.n	8006c0a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bce:	7bfb      	ldrb	r3, [r7, #15]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d108      	bne.n	8006be6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bd4:	7bbb      	ldrb	r3, [r7, #14]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d105      	bne.n	8006be6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bda:	7b7b      	ldrb	r3, [r7, #13]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d102      	bne.n	8006be6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006be0:	7b3b      	ldrb	r3, [r7, #12]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d001      	beq.n	8006bea <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e03e      	b.n	8006c68 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2202      	movs	r2, #2
 8006bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2202      	movs	r2, #2
 8006bf6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2202      	movs	r2, #2
 8006c06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <HAL_TIM_Encoder_Start+0xc4>
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	2b04      	cmp	r3, #4
 8006c14:	d008      	beq.n	8006c28 <HAL_TIM_Encoder_Start+0xd4>
 8006c16:	e00f      	b.n	8006c38 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	2100      	movs	r1, #0
 8006c20:	4618      	mov	r0, r3
 8006c22:	f000 ff7d 	bl	8007b20 <TIM_CCxChannelCmd>
      break;
 8006c26:	e016      	b.n	8006c56 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	2104      	movs	r1, #4
 8006c30:	4618      	mov	r0, r3
 8006c32:	f000 ff75 	bl	8007b20 <TIM_CCxChannelCmd>
      break;
 8006c36:	e00e      	b.n	8006c56 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	2100      	movs	r1, #0
 8006c40:	4618      	mov	r0, r3
 8006c42:	f000 ff6d 	bl	8007b20 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	2104      	movs	r1, #4
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 ff66 	bl	8007b20 <TIM_CCxChannelCmd>
      break;
 8006c54:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f042 0201 	orr.w	r2, r2, #1
 8006c64:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d128      	bne.n	8006cd8 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f003 0302 	and.w	r3, r3, #2
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d121      	bne.n	8006cd8 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f06f 0202 	mvn.w	r2, #2
 8006c9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	f003 0303 	and.w	r3, r3, #3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d005      	beq.n	8006cbe <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	4798      	blx	r3
 8006cbc:	e009      	b.n	8006cd2 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	f003 0304 	and.w	r3, r3, #4
 8006ce2:	2b04      	cmp	r3, #4
 8006ce4:	d128      	bne.n	8006d38 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	f003 0304 	and.w	r3, r3, #4
 8006cf0:	2b04      	cmp	r3, #4
 8006cf2:	d121      	bne.n	8006d38 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f06f 0204 	mvn.w	r2, #4
 8006cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2202      	movs	r2, #2
 8006d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d005      	beq.n	8006d1e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	4798      	blx	r3
 8006d1c:	e009      	b.n	8006d32 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	f003 0308 	and.w	r3, r3, #8
 8006d42:	2b08      	cmp	r3, #8
 8006d44:	d128      	bne.n	8006d98 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	f003 0308 	and.w	r3, r3, #8
 8006d50:	2b08      	cmp	r3, #8
 8006d52:	d121      	bne.n	8006d98 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f06f 0208 	mvn.w	r2, #8
 8006d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2204      	movs	r2, #4
 8006d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	69db      	ldr	r3, [r3, #28]
 8006d6a:	f003 0303 	and.w	r3, r3, #3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d005      	beq.n	8006d7e <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	4798      	blx	r3
 8006d7c:	e009      	b.n	8006d92 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	f003 0310 	and.w	r3, r3, #16
 8006da2:	2b10      	cmp	r3, #16
 8006da4:	d128      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	f003 0310 	and.w	r3, r3, #16
 8006db0:	2b10      	cmp	r3, #16
 8006db2:	d121      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f06f 0210 	mvn.w	r2, #16
 8006dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2208      	movs	r2, #8
 8006dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d005      	beq.n	8006dde <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	4798      	blx	r3
 8006ddc:	e009      	b.n	8006df2 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	f003 0301 	and.w	r3, r3, #1
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d110      	bne.n	8006e28 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d109      	bne.n	8006e28 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f06f 0201 	mvn.w	r2, #1
 8006e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e32:	2b80      	cmp	r3, #128	; 0x80
 8006e34:	d110      	bne.n	8006e58 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e40:	2b80      	cmp	r3, #128	; 0x80
 8006e42:	d109      	bne.n	8006e58 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e62:	2b40      	cmp	r3, #64	; 0x40
 8006e64:	d110      	bne.n	8006e88 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e70:	2b40      	cmp	r3, #64	; 0x40
 8006e72:	d109      	bne.n	8006e88 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	f003 0320 	and.w	r3, r3, #32
 8006e92:	2b20      	cmp	r3, #32
 8006e94:	d110      	bne.n	8006eb8 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	f003 0320 	and.w	r3, r3, #32
 8006ea0:	2b20      	cmp	r3, #32
 8006ea2:	d109      	bne.n	8006eb8 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f06f 0220 	mvn.w	r2, #32
 8006eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006eb8:	bf00      	nop
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d101      	bne.n	8006ede <HAL_TIM_OC_ConfigChannel+0x1e>
 8006eda:	2302      	movs	r3, #2
 8006edc:	e048      	b.n	8006f70 <HAL_TIM_OC_ConfigChannel+0xb0>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2b0c      	cmp	r3, #12
 8006eea:	d839      	bhi.n	8006f60 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006eec:	a201      	add	r2, pc, #4	; (adr r2, 8006ef4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef2:	bf00      	nop
 8006ef4:	08006f29 	.word	0x08006f29
 8006ef8:	08006f61 	.word	0x08006f61
 8006efc:	08006f61 	.word	0x08006f61
 8006f00:	08006f61 	.word	0x08006f61
 8006f04:	08006f37 	.word	0x08006f37
 8006f08:	08006f61 	.word	0x08006f61
 8006f0c:	08006f61 	.word	0x08006f61
 8006f10:	08006f61 	.word	0x08006f61
 8006f14:	08006f45 	.word	0x08006f45
 8006f18:	08006f61 	.word	0x08006f61
 8006f1c:	08006f61 	.word	0x08006f61
 8006f20:	08006f61 	.word	0x08006f61
 8006f24:	08006f53 	.word	0x08006f53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68b9      	ldr	r1, [r7, #8]
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f000 fbd0 	bl	80076d4 <TIM_OC1_SetConfig>
      break;
 8006f34:	e017      	b.n	8006f66 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68b9      	ldr	r1, [r7, #8]
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f000 fc2f 	bl	80077a0 <TIM_OC2_SetConfig>
      break;
 8006f42:	e010      	b.n	8006f66 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68b9      	ldr	r1, [r7, #8]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f000 fc94 	bl	8007878 <TIM_OC3_SetConfig>
      break;
 8006f50:	e009      	b.n	8006f66 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68b9      	ldr	r1, [r7, #8]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f000 fcf7 	bl	800794c <TIM_OC4_SetConfig>
      break;
 8006f5e:	e002      	b.n	8006f66 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	75fb      	strb	r3, [r7, #23]
      break;
 8006f64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3718      	adds	r7, #24
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d101      	bne.n	8006f96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f92:	2302      	movs	r3, #2
 8006f94:	e0ae      	b.n	80070f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2b0c      	cmp	r3, #12
 8006fa2:	f200 809f 	bhi.w	80070e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006fa6:	a201      	add	r2, pc, #4	; (adr r2, 8006fac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fac:	08006fe1 	.word	0x08006fe1
 8006fb0:	080070e5 	.word	0x080070e5
 8006fb4:	080070e5 	.word	0x080070e5
 8006fb8:	080070e5 	.word	0x080070e5
 8006fbc:	08007021 	.word	0x08007021
 8006fc0:	080070e5 	.word	0x080070e5
 8006fc4:	080070e5 	.word	0x080070e5
 8006fc8:	080070e5 	.word	0x080070e5
 8006fcc:	08007063 	.word	0x08007063
 8006fd0:	080070e5 	.word	0x080070e5
 8006fd4:	080070e5 	.word	0x080070e5
 8006fd8:	080070e5 	.word	0x080070e5
 8006fdc:	080070a3 	.word	0x080070a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68b9      	ldr	r1, [r7, #8]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f000 fb74 	bl	80076d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	699a      	ldr	r2, [r3, #24]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f042 0208 	orr.w	r2, r2, #8
 8006ffa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	699a      	ldr	r2, [r3, #24]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f022 0204 	bic.w	r2, r2, #4
 800700a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6999      	ldr	r1, [r3, #24]
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	691a      	ldr	r2, [r3, #16]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	430a      	orrs	r2, r1
 800701c:	619a      	str	r2, [r3, #24]
      break;
 800701e:	e064      	b.n	80070ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68b9      	ldr	r1, [r7, #8]
 8007026:	4618      	mov	r0, r3
 8007028:	f000 fbba 	bl	80077a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	699a      	ldr	r2, [r3, #24]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800703a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	699a      	ldr	r2, [r3, #24]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800704a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	6999      	ldr	r1, [r3, #24]
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	021a      	lsls	r2, r3, #8
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	430a      	orrs	r2, r1
 800705e:	619a      	str	r2, [r3, #24]
      break;
 8007060:	e043      	b.n	80070ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68b9      	ldr	r1, [r7, #8]
 8007068:	4618      	mov	r0, r3
 800706a:	f000 fc05 	bl	8007878 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	69da      	ldr	r2, [r3, #28]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f042 0208 	orr.w	r2, r2, #8
 800707c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	69da      	ldr	r2, [r3, #28]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f022 0204 	bic.w	r2, r2, #4
 800708c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	69d9      	ldr	r1, [r3, #28]
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	691a      	ldr	r2, [r3, #16]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	430a      	orrs	r2, r1
 800709e:	61da      	str	r2, [r3, #28]
      break;
 80070a0:	e023      	b.n	80070ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68b9      	ldr	r1, [r7, #8]
 80070a8:	4618      	mov	r0, r3
 80070aa:	f000 fc4f 	bl	800794c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	69da      	ldr	r2, [r3, #28]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	69da      	ldr	r2, [r3, #28]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	69d9      	ldr	r1, [r3, #28]
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	021a      	lsls	r2, r3, #8
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	61da      	str	r2, [r3, #28]
      break;
 80070e2:	e002      	b.n	80070ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	75fb      	strb	r3, [r7, #23]
      break;
 80070e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3718      	adds	r7, #24
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007106:	2300      	movs	r3, #0
 8007108:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007110:	2b01      	cmp	r3, #1
 8007112:	d101      	bne.n	8007118 <HAL_TIM_ConfigClockSource+0x1c>
 8007114:	2302      	movs	r3, #2
 8007116:	e0b4      	b.n	8007282 <HAL_TIM_ConfigClockSource+0x186>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2202      	movs	r2, #2
 8007124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007136:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800713e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007150:	d03e      	beq.n	80071d0 <HAL_TIM_ConfigClockSource+0xd4>
 8007152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007156:	f200 8087 	bhi.w	8007268 <HAL_TIM_ConfigClockSource+0x16c>
 800715a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800715e:	f000 8086 	beq.w	800726e <HAL_TIM_ConfigClockSource+0x172>
 8007162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007166:	d87f      	bhi.n	8007268 <HAL_TIM_ConfigClockSource+0x16c>
 8007168:	2b70      	cmp	r3, #112	; 0x70
 800716a:	d01a      	beq.n	80071a2 <HAL_TIM_ConfigClockSource+0xa6>
 800716c:	2b70      	cmp	r3, #112	; 0x70
 800716e:	d87b      	bhi.n	8007268 <HAL_TIM_ConfigClockSource+0x16c>
 8007170:	2b60      	cmp	r3, #96	; 0x60
 8007172:	d050      	beq.n	8007216 <HAL_TIM_ConfigClockSource+0x11a>
 8007174:	2b60      	cmp	r3, #96	; 0x60
 8007176:	d877      	bhi.n	8007268 <HAL_TIM_ConfigClockSource+0x16c>
 8007178:	2b50      	cmp	r3, #80	; 0x50
 800717a:	d03c      	beq.n	80071f6 <HAL_TIM_ConfigClockSource+0xfa>
 800717c:	2b50      	cmp	r3, #80	; 0x50
 800717e:	d873      	bhi.n	8007268 <HAL_TIM_ConfigClockSource+0x16c>
 8007180:	2b40      	cmp	r3, #64	; 0x40
 8007182:	d058      	beq.n	8007236 <HAL_TIM_ConfigClockSource+0x13a>
 8007184:	2b40      	cmp	r3, #64	; 0x40
 8007186:	d86f      	bhi.n	8007268 <HAL_TIM_ConfigClockSource+0x16c>
 8007188:	2b30      	cmp	r3, #48	; 0x30
 800718a:	d064      	beq.n	8007256 <HAL_TIM_ConfigClockSource+0x15a>
 800718c:	2b30      	cmp	r3, #48	; 0x30
 800718e:	d86b      	bhi.n	8007268 <HAL_TIM_ConfigClockSource+0x16c>
 8007190:	2b20      	cmp	r3, #32
 8007192:	d060      	beq.n	8007256 <HAL_TIM_ConfigClockSource+0x15a>
 8007194:	2b20      	cmp	r3, #32
 8007196:	d867      	bhi.n	8007268 <HAL_TIM_ConfigClockSource+0x16c>
 8007198:	2b00      	cmp	r3, #0
 800719a:	d05c      	beq.n	8007256 <HAL_TIM_ConfigClockSource+0x15a>
 800719c:	2b10      	cmp	r3, #16
 800719e:	d05a      	beq.n	8007256 <HAL_TIM_ConfigClockSource+0x15a>
 80071a0:	e062      	b.n	8007268 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6818      	ldr	r0, [r3, #0]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	6899      	ldr	r1, [r3, #8]
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	685a      	ldr	r2, [r3, #4]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	f000 fc95 	bl	8007ae0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80071c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68ba      	ldr	r2, [r7, #8]
 80071cc:	609a      	str	r2, [r3, #8]
      break;
 80071ce:	e04f      	b.n	8007270 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6818      	ldr	r0, [r3, #0]
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	6899      	ldr	r1, [r3, #8]
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	f000 fc7e 	bl	8007ae0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	689a      	ldr	r2, [r3, #8]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071f2:	609a      	str	r2, [r3, #8]
      break;
 80071f4:	e03c      	b.n	8007270 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6818      	ldr	r0, [r3, #0]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	6859      	ldr	r1, [r3, #4]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	461a      	mov	r2, r3
 8007204:	f000 fbf2 	bl	80079ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2150      	movs	r1, #80	; 0x50
 800720e:	4618      	mov	r0, r3
 8007210:	f000 fc4b 	bl	8007aaa <TIM_ITRx_SetConfig>
      break;
 8007214:	e02c      	b.n	8007270 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6818      	ldr	r0, [r3, #0]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	6859      	ldr	r1, [r3, #4]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	461a      	mov	r2, r3
 8007224:	f000 fc11 	bl	8007a4a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2160      	movs	r1, #96	; 0x60
 800722e:	4618      	mov	r0, r3
 8007230:	f000 fc3b 	bl	8007aaa <TIM_ITRx_SetConfig>
      break;
 8007234:	e01c      	b.n	8007270 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6818      	ldr	r0, [r3, #0]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	6859      	ldr	r1, [r3, #4]
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	461a      	mov	r2, r3
 8007244:	f000 fbd2 	bl	80079ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2140      	movs	r1, #64	; 0x40
 800724e:	4618      	mov	r0, r3
 8007250:	f000 fc2b 	bl	8007aaa <TIM_ITRx_SetConfig>
      break;
 8007254:	e00c      	b.n	8007270 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4619      	mov	r1, r3
 8007260:	4610      	mov	r0, r2
 8007262:	f000 fc22 	bl	8007aaa <TIM_ITRx_SetConfig>
      break;
 8007266:	e003      	b.n	8007270 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	73fb      	strb	r3, [r7, #15]
      break;
 800726c:	e000      	b.n	8007270 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800726e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007280:	7bfb      	ldrb	r3, [r7, #15]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800728a:	b480      	push	{r7}
 800728c:	b083      	sub	sp, #12
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007292:	bf00      	nop
 8007294:	370c      	adds	r7, #12
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800729e:	b480      	push	{r7}
 80072a0:	b083      	sub	sp, #12
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072a6:	bf00      	nop
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b083      	sub	sp, #12
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072ba:	bf00      	nop
 80072bc:	370c      	adds	r7, #12
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80072c6:	b480      	push	{r7}
 80072c8:	b083      	sub	sp, #12
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80072ce:	bf00      	nop
 80072d0:	370c      	adds	r7, #12
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr

080072da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072da:	b480      	push	{r7}
 80072dc:	b083      	sub	sp, #12
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072e2:	bf00      	nop
 80072e4:	370c      	adds	r7, #12
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80072ee:	b480      	push	{r7}
 80072f0:	b083      	sub	sp, #12
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80072f6:	bf00      	nop
 80072f8:	370c      	adds	r7, #12
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007302:	b480      	push	{r7}
 8007304:	b083      	sub	sp, #12
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800730a:	bf00      	nop
 800730c:	370c      	adds	r7, #12
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr

08007316 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007316:	b480      	push	{r7}
 8007318:	b083      	sub	sp, #12
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800731e:	bf00      	nop
 8007320:	370c      	adds	r7, #12
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr

0800732a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800732a:	b480      	push	{r7}
 800732c:	b083      	sub	sp, #12
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007332:	bf00      	nop
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
	...

08007340 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8007340:	b480      	push	{r7}
 8007342:	b087      	sub	sp, #28
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	460b      	mov	r3, r1
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d101      	bne.n	800735c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e135      	b.n	80075c8 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007362:	2b01      	cmp	r3, #1
 8007364:	d101      	bne.n	800736a <HAL_TIM_RegisterCallback+0x2a>
 8007366:	2302      	movs	r3, #2
 8007368:	e12e      	b.n	80075c8 <HAL_TIM_RegisterCallback+0x288>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007378:	b2db      	uxtb	r3, r3
 800737a:	2b01      	cmp	r3, #1
 800737c:	f040 80ba 	bne.w	80074f4 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8007380:	7afb      	ldrb	r3, [r7, #11]
 8007382:	2b1a      	cmp	r3, #26
 8007384:	f200 80b3 	bhi.w	80074ee <HAL_TIM_RegisterCallback+0x1ae>
 8007388:	a201      	add	r2, pc, #4	; (adr r2, 8007390 <HAL_TIM_RegisterCallback+0x50>)
 800738a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738e:	bf00      	nop
 8007390:	080073fd 	.word	0x080073fd
 8007394:	08007405 	.word	0x08007405
 8007398:	0800740d 	.word	0x0800740d
 800739c:	08007415 	.word	0x08007415
 80073a0:	0800741d 	.word	0x0800741d
 80073a4:	08007425 	.word	0x08007425
 80073a8:	0800742d 	.word	0x0800742d
 80073ac:	08007435 	.word	0x08007435
 80073b0:	0800743d 	.word	0x0800743d
 80073b4:	08007445 	.word	0x08007445
 80073b8:	0800744d 	.word	0x0800744d
 80073bc:	08007455 	.word	0x08007455
 80073c0:	0800745d 	.word	0x0800745d
 80073c4:	08007465 	.word	0x08007465
 80073c8:	0800746d 	.word	0x0800746d
 80073cc:	08007477 	.word	0x08007477
 80073d0:	08007481 	.word	0x08007481
 80073d4:	0800748b 	.word	0x0800748b
 80073d8:	08007495 	.word	0x08007495
 80073dc:	0800749f 	.word	0x0800749f
 80073e0:	080074a9 	.word	0x080074a9
 80073e4:	080074b3 	.word	0x080074b3
 80073e8:	080074bd 	.word	0x080074bd
 80073ec:	080074c7 	.word	0x080074c7
 80073f0:	080074d1 	.word	0x080074d1
 80073f4:	080074db 	.word	0x080074db
 80073f8:	080074e5 	.word	0x080074e5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8007402:	e0dc      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800740a:	e0d8      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8007412:	e0d4      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800741a:	e0d0      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8007422:	e0cc      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800742a:	e0c8      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8007432:	e0c4      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800743a:	e0c0      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8007442:	e0bc      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800744a:	e0b8      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8007452:	e0b4      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800745a:	e0b0      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8007462:	e0ac      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800746a:	e0a8      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8007474:	e0a3      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800747e:	e09e      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8007488:	e099      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8007492:	e094      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 800749c:	e08f      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 80074a6:	e08a      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 80074b0:	e085      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 80074ba:	e080      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 80074c4:	e07b      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 80074ce:	e076      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 80074d8:	e071      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 80074e2:	e06c      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 80074ec:	e067      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	75fb      	strb	r3, [r7, #23]
        break;
 80074f2:	e064      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d15c      	bne.n	80075ba <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8007500:	7afb      	ldrb	r3, [r7, #11]
 8007502:	2b0d      	cmp	r3, #13
 8007504:	d856      	bhi.n	80075b4 <HAL_TIM_RegisterCallback+0x274>
 8007506:	a201      	add	r2, pc, #4	; (adr r2, 800750c <HAL_TIM_RegisterCallback+0x1cc>)
 8007508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750c:	08007545 	.word	0x08007545
 8007510:	0800754d 	.word	0x0800754d
 8007514:	08007555 	.word	0x08007555
 8007518:	0800755d 	.word	0x0800755d
 800751c:	08007565 	.word	0x08007565
 8007520:	0800756d 	.word	0x0800756d
 8007524:	08007575 	.word	0x08007575
 8007528:	0800757d 	.word	0x0800757d
 800752c:	08007585 	.word	0x08007585
 8007530:	0800758d 	.word	0x0800758d
 8007534:	08007595 	.word	0x08007595
 8007538:	0800759d 	.word	0x0800759d
 800753c:	080075a5 	.word	0x080075a5
 8007540:	080075ad 	.word	0x080075ad
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800754a:	e038      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8007552:	e034      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800755a:	e030      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8007562:	e02c      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800756a:	e028      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8007572:	e024      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800757a:	e020      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8007582:	e01c      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800758a:	e018      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8007592:	e014      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800759a:	e010      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80075a2:	e00c      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80075aa:	e008      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 80075b2:	e004      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	75fb      	strb	r3, [r7, #23]
        break;
 80075b8:	e001      	b.n	80075be <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	371c      	adds	r7, #28
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a34      	ldr	r2, [pc, #208]	; (80076b8 <TIM_Base_SetConfig+0xe4>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d00f      	beq.n	800760c <TIM_Base_SetConfig+0x38>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075f2:	d00b      	beq.n	800760c <TIM_Base_SetConfig+0x38>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a31      	ldr	r2, [pc, #196]	; (80076bc <TIM_Base_SetConfig+0xe8>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d007      	beq.n	800760c <TIM_Base_SetConfig+0x38>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a30      	ldr	r2, [pc, #192]	; (80076c0 <TIM_Base_SetConfig+0xec>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d003      	beq.n	800760c <TIM_Base_SetConfig+0x38>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4a2f      	ldr	r2, [pc, #188]	; (80076c4 <TIM_Base_SetConfig+0xf0>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d108      	bne.n	800761e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	4313      	orrs	r3, r2
 800761c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a25      	ldr	r2, [pc, #148]	; (80076b8 <TIM_Base_SetConfig+0xe4>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d01b      	beq.n	800765e <TIM_Base_SetConfig+0x8a>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800762c:	d017      	beq.n	800765e <TIM_Base_SetConfig+0x8a>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a22      	ldr	r2, [pc, #136]	; (80076bc <TIM_Base_SetConfig+0xe8>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d013      	beq.n	800765e <TIM_Base_SetConfig+0x8a>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a21      	ldr	r2, [pc, #132]	; (80076c0 <TIM_Base_SetConfig+0xec>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d00f      	beq.n	800765e <TIM_Base_SetConfig+0x8a>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a20      	ldr	r2, [pc, #128]	; (80076c4 <TIM_Base_SetConfig+0xf0>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d00b      	beq.n	800765e <TIM_Base_SetConfig+0x8a>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a1f      	ldr	r2, [pc, #124]	; (80076c8 <TIM_Base_SetConfig+0xf4>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d007      	beq.n	800765e <TIM_Base_SetConfig+0x8a>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a1e      	ldr	r2, [pc, #120]	; (80076cc <TIM_Base_SetConfig+0xf8>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d003      	beq.n	800765e <TIM_Base_SetConfig+0x8a>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a1d      	ldr	r2, [pc, #116]	; (80076d0 <TIM_Base_SetConfig+0xfc>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d108      	bne.n	8007670 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	4313      	orrs	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	695b      	ldr	r3, [r3, #20]
 800767a:	4313      	orrs	r3, r2
 800767c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	689a      	ldr	r2, [r3, #8]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a08      	ldr	r2, [pc, #32]	; (80076b8 <TIM_Base_SetConfig+0xe4>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d103      	bne.n	80076a4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	691a      	ldr	r2, [r3, #16]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	615a      	str	r2, [r3, #20]
}
 80076aa:	bf00      	nop
 80076ac:	3714      	adds	r7, #20
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	40010000 	.word	0x40010000
 80076bc:	40000400 	.word	0x40000400
 80076c0:	40000800 	.word	0x40000800
 80076c4:	40000c00 	.word	0x40000c00
 80076c8:	40014000 	.word	0x40014000
 80076cc:	40014400 	.word	0x40014400
 80076d0:	40014800 	.word	0x40014800

080076d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b087      	sub	sp, #28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	f023 0201 	bic.w	r2, r3, #1
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f023 0303 	bic.w	r3, r3, #3
 800770a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	4313      	orrs	r3, r2
 8007714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	f023 0302 	bic.w	r3, r3, #2
 800771c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	4313      	orrs	r3, r2
 8007726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a1c      	ldr	r2, [pc, #112]	; (800779c <TIM_OC1_SetConfig+0xc8>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d10c      	bne.n	800774a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	f023 0308 	bic.w	r3, r3, #8
 8007736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	697a      	ldr	r2, [r7, #20]
 800773e:	4313      	orrs	r3, r2
 8007740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	f023 0304 	bic.w	r3, r3, #4
 8007748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a13      	ldr	r2, [pc, #76]	; (800779c <TIM_OC1_SetConfig+0xc8>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d111      	bne.n	8007776 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	4313      	orrs	r3, r2
 800776a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	693a      	ldr	r2, [r7, #16]
 8007772:	4313      	orrs	r3, r2
 8007774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	685a      	ldr	r2, [r3, #4]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	697a      	ldr	r2, [r7, #20]
 800778e:	621a      	str	r2, [r3, #32]
}
 8007790:	bf00      	nop
 8007792:	371c      	adds	r7, #28
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr
 800779c:	40010000 	.word	0x40010000

080077a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b087      	sub	sp, #28
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	f023 0210 	bic.w	r2, r3, #16
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	021b      	lsls	r3, r3, #8
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	f023 0320 	bic.w	r3, r3, #32
 80077ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	011b      	lsls	r3, r3, #4
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a1e      	ldr	r2, [pc, #120]	; (8007874 <TIM_OC2_SetConfig+0xd4>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d10d      	bne.n	800781c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007806:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	011b      	lsls	r3, r3, #4
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	4313      	orrs	r3, r2
 8007812:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800781a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a15      	ldr	r2, [pc, #84]	; (8007874 <TIM_OC2_SetConfig+0xd4>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d113      	bne.n	800784c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800782a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007832:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	695b      	ldr	r3, [r3, #20]
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	4313      	orrs	r3, r2
 800783e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	693a      	ldr	r2, [r7, #16]
 8007848:	4313      	orrs	r3, r2
 800784a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	693a      	ldr	r2, [r7, #16]
 8007850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	685a      	ldr	r2, [r3, #4]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	621a      	str	r2, [r3, #32]
}
 8007866:	bf00      	nop
 8007868:	371c      	adds	r7, #28
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	40010000 	.word	0x40010000

08007878 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007878:	b480      	push	{r7}
 800787a:	b087      	sub	sp, #28
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a1b      	ldr	r3, [r3, #32]
 8007892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	69db      	ldr	r3, [r3, #28]
 800789e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f023 0303 	bic.w	r3, r3, #3
 80078ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	021b      	lsls	r3, r3, #8
 80078c8:	697a      	ldr	r2, [r7, #20]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a1d      	ldr	r2, [pc, #116]	; (8007948 <TIM_OC3_SetConfig+0xd0>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d10d      	bne.n	80078f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	021b      	lsls	r3, r3, #8
 80078e4:	697a      	ldr	r2, [r7, #20]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a14      	ldr	r2, [pc, #80]	; (8007948 <TIM_OC3_SetConfig+0xd0>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d113      	bne.n	8007922 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007900:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007908:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	011b      	lsls	r3, r3, #4
 8007910:	693a      	ldr	r2, [r7, #16]
 8007912:	4313      	orrs	r3, r2
 8007914:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	011b      	lsls	r3, r3, #4
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	4313      	orrs	r3, r2
 8007920:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	693a      	ldr	r2, [r7, #16]
 8007926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	685a      	ldr	r2, [r3, #4]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	697a      	ldr	r2, [r7, #20]
 800793a:	621a      	str	r2, [r3, #32]
}
 800793c:	bf00      	nop
 800793e:	371c      	adds	r7, #28
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr
 8007948:	40010000 	.word	0x40010000

0800794c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800794c:	b480      	push	{r7}
 800794e:	b087      	sub	sp, #28
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800797a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007982:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	021b      	lsls	r3, r3, #8
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	4313      	orrs	r3, r2
 800798e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007996:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	031b      	lsls	r3, r3, #12
 800799e:	693a      	ldr	r2, [r7, #16]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a10      	ldr	r2, [pc, #64]	; (80079e8 <TIM_OC4_SetConfig+0x9c>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d109      	bne.n	80079c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	695b      	ldr	r3, [r3, #20]
 80079b8:	019b      	lsls	r3, r3, #6
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	4313      	orrs	r3, r2
 80079be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	697a      	ldr	r2, [r7, #20]
 80079c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	685a      	ldr	r2, [r3, #4]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	693a      	ldr	r2, [r7, #16]
 80079d8:	621a      	str	r2, [r3, #32]
}
 80079da:	bf00      	nop
 80079dc:	371c      	adds	r7, #28
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	40010000 	.word	0x40010000

080079ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b087      	sub	sp, #28
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6a1b      	ldr	r3, [r3, #32]
 80079fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6a1b      	ldr	r3, [r3, #32]
 8007a02:	f023 0201 	bic.w	r2, r3, #1
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	011b      	lsls	r3, r3, #4
 8007a1c:	693a      	ldr	r2, [r7, #16]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	f023 030a 	bic.w	r3, r3, #10
 8007a28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	693a      	ldr	r2, [r7, #16]
 8007a36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	621a      	str	r2, [r3, #32]
}
 8007a3e:	bf00      	nop
 8007a40:	371c      	adds	r7, #28
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b087      	sub	sp, #28
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	60f8      	str	r0, [r7, #12]
 8007a52:	60b9      	str	r1, [r7, #8]
 8007a54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6a1b      	ldr	r3, [r3, #32]
 8007a5a:	f023 0210 	bic.w	r2, r3, #16
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6a1b      	ldr	r3, [r3, #32]
 8007a6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	031b      	lsls	r3, r3, #12
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	011b      	lsls	r3, r3, #4
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	697a      	ldr	r2, [r7, #20]
 8007a96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	693a      	ldr	r2, [r7, #16]
 8007a9c:	621a      	str	r2, [r3, #32]
}
 8007a9e:	bf00      	nop
 8007aa0:	371c      	adds	r7, #28
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr

08007aaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007aaa:	b480      	push	{r7}
 8007aac:	b085      	sub	sp, #20
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
 8007ab2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ac0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ac2:	683a      	ldr	r2, [r7, #0]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	f043 0307 	orr.w	r3, r3, #7
 8007acc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	609a      	str	r2, [r3, #8]
}
 8007ad4:	bf00      	nop
 8007ad6:	3714      	adds	r7, #20
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b087      	sub	sp, #28
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
 8007aec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007afa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	021a      	lsls	r2, r3, #8
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	431a      	orrs	r2, r3
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	697a      	ldr	r2, [r7, #20]
 8007b12:	609a      	str	r2, [r3, #8]
}
 8007b14:	bf00      	nop
 8007b16:	371c      	adds	r7, #28
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b087      	sub	sp, #28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	f003 031f 	and.w	r3, r3, #31
 8007b32:	2201      	movs	r2, #1
 8007b34:	fa02 f303 	lsl.w	r3, r2, r3
 8007b38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6a1a      	ldr	r2, [r3, #32]
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	43db      	mvns	r3, r3
 8007b42:	401a      	ands	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6a1a      	ldr	r2, [r3, #32]
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	f003 031f 	and.w	r3, r3, #31
 8007b52:	6879      	ldr	r1, [r7, #4]
 8007b54:	fa01 f303 	lsl.w	r3, r1, r3
 8007b58:	431a      	orrs	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	621a      	str	r2, [r3, #32]
}
 8007b5e:	bf00      	nop
 8007b60:	371c      	adds	r7, #28
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
	...

08007b6c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a1c      	ldr	r2, [pc, #112]	; (8007be8 <TIM_ResetCallback+0x7c>)
 8007b78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a1b      	ldr	r2, [pc, #108]	; (8007bec <TIM_ResetCallback+0x80>)
 8007b80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a1a      	ldr	r2, [pc, #104]	; (8007bf0 <TIM_ResetCallback+0x84>)
 8007b88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a19      	ldr	r2, [pc, #100]	; (8007bf4 <TIM_ResetCallback+0x88>)
 8007b90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a18      	ldr	r2, [pc, #96]	; (8007bf8 <TIM_ResetCallback+0x8c>)
 8007b98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a17      	ldr	r2, [pc, #92]	; (8007bfc <TIM_ResetCallback+0x90>)
 8007ba0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a16      	ldr	r2, [pc, #88]	; (8007c00 <TIM_ResetCallback+0x94>)
 8007ba8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a15      	ldr	r2, [pc, #84]	; (8007c04 <TIM_ResetCallback+0x98>)
 8007bb0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a14      	ldr	r2, [pc, #80]	; (8007c08 <TIM_ResetCallback+0x9c>)
 8007bb8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a13      	ldr	r2, [pc, #76]	; (8007c0c <TIM_ResetCallback+0xa0>)
 8007bc0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a12      	ldr	r2, [pc, #72]	; (8007c10 <TIM_ResetCallback+0xa4>)
 8007bc8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a11      	ldr	r2, [pc, #68]	; (8007c14 <TIM_ResetCallback+0xa8>)
 8007bd0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a10      	ldr	r2, [pc, #64]	; (8007c18 <TIM_ResetCallback+0xac>)
 8007bd8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007bdc:	bf00      	nop
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr
 8007be8:	08002fc5 	.word	0x08002fc5
 8007bec:	0800728b 	.word	0x0800728b
 8007bf0:	08007303 	.word	0x08007303
 8007bf4:	08007317 	.word	0x08007317
 8007bf8:	080072b3 	.word	0x080072b3
 8007bfc:	080072c7 	.word	0x080072c7
 8007c00:	0800729f 	.word	0x0800729f
 8007c04:	080072db 	.word	0x080072db
 8007c08:	080072ef 	.word	0x080072ef
 8007c0c:	0800732b 	.word	0x0800732b
 8007c10:	08007cf9 	.word	0x08007cf9
 8007c14:	08007d0d 	.word	0x08007d0d
 8007c18:	08007d21 	.word	0x08007d21

08007c1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d101      	bne.n	8007c34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c30:	2302      	movs	r3, #2
 8007c32:	e050      	b.n	8007cd6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2202      	movs	r2, #2
 8007c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a1c      	ldr	r2, [pc, #112]	; (8007ce4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d018      	beq.n	8007caa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c80:	d013      	beq.n	8007caa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a18      	ldr	r2, [pc, #96]	; (8007ce8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d00e      	beq.n	8007caa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a16      	ldr	r2, [pc, #88]	; (8007cec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d009      	beq.n	8007caa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a15      	ldr	r2, [pc, #84]	; (8007cf0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d004      	beq.n	8007caa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a13      	ldr	r2, [pc, #76]	; (8007cf4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d10c      	bne.n	8007cc4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	68ba      	ldr	r2, [r7, #8]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68ba      	ldr	r2, [r7, #8]
 8007cc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3714      	adds	r7, #20
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	40010000 	.word	0x40010000
 8007ce8:	40000400 	.word	0x40000400
 8007cec:	40000800 	.word	0x40000800
 8007cf0:	40000c00 	.word	0x40000c00
 8007cf4:	40014000 	.word	0x40014000

08007cf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d00:	bf00      	nop
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d28:	bf00      	nop
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d101      	bne.n	8007d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e04a      	b.n	8007ddc <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d111      	bne.n	8007d76 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 fd2c 	bl	80087b8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d102      	bne.n	8007d6e <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a1e      	ldr	r2, [pc, #120]	; (8007de4 <HAL_UART_Init+0xb0>)
 8007d6c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2224      	movs	r2, #36	; 0x24
 8007d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68da      	ldr	r2, [r3, #12]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d8c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fff6 	bl	8008d80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	691a      	ldr	r2, [r3, #16]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007da2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	695a      	ldr	r2, [r3, #20]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007db2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68da      	ldr	r2, [r3, #12]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007dc2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2220      	movs	r2, #32
 8007dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2220      	movs	r2, #32
 8007dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3708      	adds	r7, #8
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	080037f5 	.word	0x080037f5

08007de8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b087      	sub	sp, #28
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	460b      	mov	r3, r1
 8007df2:	607a      	str	r2, [r7, #4]
 8007df4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007df6:	2300      	movs	r3, #0
 8007df8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d107      	bne.n	8007e10 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e04:	f043 0220 	orr.w	r2, r3, #32
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e08c      	b.n	8007f2a <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d101      	bne.n	8007e1e <HAL_UART_RegisterCallback+0x36>
 8007e1a:	2302      	movs	r3, #2
 8007e1c:	e085      	b.n	8007f2a <HAL_UART_RegisterCallback+0x142>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	2b20      	cmp	r3, #32
 8007e30:	d151      	bne.n	8007ed6 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 8007e32:	7afb      	ldrb	r3, [r7, #11]
 8007e34:	2b0c      	cmp	r3, #12
 8007e36:	d845      	bhi.n	8007ec4 <HAL_UART_RegisterCallback+0xdc>
 8007e38:	a201      	add	r2, pc, #4	; (adr r2, 8007e40 <HAL_UART_RegisterCallback+0x58>)
 8007e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e3e:	bf00      	nop
 8007e40:	08007e75 	.word	0x08007e75
 8007e44:	08007e7d 	.word	0x08007e7d
 8007e48:	08007e85 	.word	0x08007e85
 8007e4c:	08007e8d 	.word	0x08007e8d
 8007e50:	08007e95 	.word	0x08007e95
 8007e54:	08007e9d 	.word	0x08007e9d
 8007e58:	08007ea5 	.word	0x08007ea5
 8007e5c:	08007ead 	.word	0x08007ead
 8007e60:	08007ec5 	.word	0x08007ec5
 8007e64:	08007ec5 	.word	0x08007ec5
 8007e68:	08007ec5 	.word	0x08007ec5
 8007e6c:	08007eb5 	.word	0x08007eb5
 8007e70:	08007ebd 	.word	0x08007ebd
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8007e7a:	e051      	b.n	8007f20 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8007e82:	e04d      	b.n	8007f20 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8007e8a:	e049      	b.n	8007f20 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8007e92:	e045      	b.n	8007f20 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8007e9a:	e041      	b.n	8007f20 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8007ea2:	e03d      	b.n	8007f20 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8007eaa:	e039      	b.n	8007f20 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8007eb2:	e035      	b.n	8007f20 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8007eba:	e031      	b.n	8007f20 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8007ec2:	e02d      	b.n	8007f20 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec8:	f043 0220 	orr.w	r2, r3, #32
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	75fb      	strb	r3, [r7, #23]
        break;
 8007ed4:	e024      	b.n	8007f20 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d116      	bne.n	8007f10 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 8007ee2:	7afb      	ldrb	r3, [r7, #11]
 8007ee4:	2b0b      	cmp	r3, #11
 8007ee6:	d002      	beq.n	8007eee <HAL_UART_RegisterCallback+0x106>
 8007ee8:	2b0c      	cmp	r3, #12
 8007eea:	d004      	beq.n	8007ef6 <HAL_UART_RegisterCallback+0x10e>
 8007eec:	e007      	b.n	8007efe <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8007ef4:	e014      	b.n	8007f20 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8007efc:	e010      	b.n	8007f20 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f02:	f043 0220 	orr.w	r2, r3, #32
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	75fb      	strb	r3, [r7, #23]
        break;
 8007f0e:	e007      	b.n	8007f20 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f14:	f043 0220 	orr.w	r2, r3, #32
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	371c      	adds	r7, #28
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop

08007f38 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	4613      	mov	r3, r2
 8007f44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	2b20      	cmp	r3, #32
 8007f50:	d11d      	bne.n	8007f8e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d002      	beq.n	8007f5e <HAL_UART_Receive_IT+0x26>
 8007f58:	88fb      	ldrh	r3, [r7, #6]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e016      	b.n	8007f90 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d101      	bne.n	8007f70 <HAL_UART_Receive_IT+0x38>
 8007f6c:	2302      	movs	r3, #2
 8007f6e:	e00f      	b.n	8007f90 <HAL_UART_Receive_IT+0x58>
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007f7e:	88fb      	ldrh	r3, [r7, #6]
 8007f80:	461a      	mov	r2, r3
 8007f82:	68b9      	ldr	r1, [r7, #8]
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f000 fcf7 	bl	8008978 <UART_Start_Receive_IT>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	e000      	b.n	8007f90 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007f8e:	2302      	movs	r3, #2
  }
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b08c      	sub	sp, #48	; 0x30
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	2b20      	cmp	r3, #32
 8007fb0:	d165      	bne.n	800807e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d002      	beq.n	8007fbe <HAL_UART_Transmit_DMA+0x26>
 8007fb8:	88fb      	ldrh	r3, [r7, #6]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d101      	bne.n	8007fc2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e05e      	b.n	8008080 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d101      	bne.n	8007fd0 <HAL_UART_Transmit_DMA+0x38>
 8007fcc:	2302      	movs	r3, #2
 8007fce:	e057      	b.n	8008080 <HAL_UART_Transmit_DMA+0xe8>
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007fd8:	68ba      	ldr	r2, [r7, #8]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	88fa      	ldrh	r2, [r7, #6]
 8007fe2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	88fa      	ldrh	r2, [r7, #6]
 8007fe8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2221      	movs	r2, #33	; 0x21
 8007ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ffc:	4a22      	ldr	r2, [pc, #136]	; (8008088 <HAL_UART_Transmit_DMA+0xf0>)
 8007ffe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008004:	4a21      	ldr	r2, [pc, #132]	; (800808c <HAL_UART_Transmit_DMA+0xf4>)
 8008006:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800800c:	4a20      	ldr	r2, [pc, #128]	; (8008090 <HAL_UART_Transmit_DMA+0xf8>)
 800800e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008014:	2200      	movs	r2, #0
 8008016:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008018:	f107 0308 	add.w	r3, r7, #8
 800801c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008024:	6819      	ldr	r1, [r3, #0]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	3304      	adds	r3, #4
 800802c:	461a      	mov	r2, r3
 800802e:	88fb      	ldrh	r3, [r7, #6]
 8008030:	f7fc fee2 	bl	8004df8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800803c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	3314      	adds	r3, #20
 800804c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804e:	69bb      	ldr	r3, [r7, #24]
 8008050:	e853 3f00 	ldrex	r3, [r3]
 8008054:	617b      	str	r3, [r7, #20]
   return(result);
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800805c:	62bb      	str	r3, [r7, #40]	; 0x28
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	3314      	adds	r3, #20
 8008064:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008066:	627a      	str	r2, [r7, #36]	; 0x24
 8008068:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806a:	6a39      	ldr	r1, [r7, #32]
 800806c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800806e:	e841 2300 	strex	r3, r2, [r1]
 8008072:	61fb      	str	r3, [r7, #28]
   return(result);
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1e5      	bne.n	8008046 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800807a:	2300      	movs	r3, #0
 800807c:	e000      	b.n	8008080 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800807e:	2302      	movs	r3, #2
  }
}
 8008080:	4618      	mov	r0, r3
 8008082:	3730      	adds	r7, #48	; 0x30
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	08008829 	.word	0x08008829
 800808c:	080088c5 	.word	0x080088c5
 8008090:	080088e3 	.word	0x080088e3

08008094 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b09a      	sub	sp, #104	; 0x68
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	330c      	adds	r3, #12
 80080a2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080a6:	e853 3f00 	ldrex	r3, [r3]
 80080aa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80080ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080b2:	667b      	str	r3, [r7, #100]	; 0x64
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	330c      	adds	r3, #12
 80080ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80080bc:	657a      	str	r2, [r7, #84]	; 0x54
 80080be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80080c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80080c4:	e841 2300 	strex	r3, r2, [r1]
 80080c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80080ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d1e5      	bne.n	800809c <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	3314      	adds	r3, #20
 80080d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080da:	e853 3f00 	ldrex	r3, [r3]
 80080de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80080e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e2:	f023 0301 	bic.w	r3, r3, #1
 80080e6:	663b      	str	r3, [r7, #96]	; 0x60
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	3314      	adds	r3, #20
 80080ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80080f0:	643a      	str	r2, [r7, #64]	; 0x40
 80080f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80080f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080f8:	e841 2300 	strex	r3, r2, [r1]
 80080fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1e5      	bne.n	80080d0 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008108:	2b01      	cmp	r3, #1
 800810a:	d119      	bne.n	8008140 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	330c      	adds	r3, #12
 8008112:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008114:	6a3b      	ldr	r3, [r7, #32]
 8008116:	e853 3f00 	ldrex	r3, [r3]
 800811a:	61fb      	str	r3, [r7, #28]
   return(result);
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	f023 0310 	bic.w	r3, r3, #16
 8008122:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	330c      	adds	r3, #12
 800812a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800812c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800812e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008130:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008134:	e841 2300 	strex	r3, r2, [r1]
 8008138:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800813a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1e5      	bne.n	800810c <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	695b      	ldr	r3, [r3, #20]
 8008146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800814a:	2b40      	cmp	r3, #64	; 0x40
 800814c:	d136      	bne.n	80081bc <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	3314      	adds	r3, #20
 8008154:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	e853 3f00 	ldrex	r3, [r3]
 800815c:	60bb      	str	r3, [r7, #8]
   return(result);
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008164:	65bb      	str	r3, [r7, #88]	; 0x58
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	3314      	adds	r3, #20
 800816c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800816e:	61ba      	str	r2, [r7, #24]
 8008170:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008172:	6979      	ldr	r1, [r7, #20]
 8008174:	69ba      	ldr	r2, [r7, #24]
 8008176:	e841 2300 	strex	r3, r2, [r1]
 800817a:	613b      	str	r3, [r7, #16]
   return(result);
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1e5      	bne.n	800814e <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008186:	2b00      	cmp	r3, #0
 8008188:	d018      	beq.n	80081bc <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818e:	2200      	movs	r2, #0
 8008190:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008196:	4618      	mov	r0, r3
 8008198:	f7fc fe86 	bl	8004ea8 <HAL_DMA_Abort>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00c      	beq.n	80081bc <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7fd f89a 	bl	80052e0 <HAL_DMA_GetError>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b20      	cmp	r3, #32
 80081b0:	d104      	bne.n	80081bc <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2210      	movs	r2, #16
 80081b6:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80081b8:	2303      	movs	r3, #3
 80081ba:	e00a      	b.n	80081d2 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2220      	movs	r2, #32
 80081c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3768      	adds	r7, #104	; 0x68
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
	...

080081dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b0ba      	sub	sp, #232	; 0xe8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	695b      	ldr	r3, [r3, #20]
 80081fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008202:	2300      	movs	r3, #0
 8008204:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008208:	2300      	movs	r3, #0
 800820a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800820e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008212:	f003 030f 	and.w	r3, r3, #15
 8008216:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800821a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10f      	bne.n	8008242 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008226:	f003 0320 	and.w	r3, r3, #32
 800822a:	2b00      	cmp	r3, #0
 800822c:	d009      	beq.n	8008242 <HAL_UART_IRQHandler+0x66>
 800822e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008232:	f003 0320 	and.w	r3, r3, #32
 8008236:	2b00      	cmp	r3, #0
 8008238:	d003      	beq.n	8008242 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fce3 	bl	8008c06 <UART_Receive_IT>
      return;
 8008240:	e25b      	b.n	80086fa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008242:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008246:	2b00      	cmp	r3, #0
 8008248:	f000 80e1 	beq.w	800840e <HAL_UART_IRQHandler+0x232>
 800824c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008250:	f003 0301 	and.w	r3, r3, #1
 8008254:	2b00      	cmp	r3, #0
 8008256:	d106      	bne.n	8008266 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800825c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 80d4 	beq.w	800840e <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800826a:	f003 0301 	and.w	r3, r3, #1
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00b      	beq.n	800828a <HAL_UART_IRQHandler+0xae>
 8008272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800827a:	2b00      	cmp	r3, #0
 800827c:	d005      	beq.n	800828a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008282:	f043 0201 	orr.w	r2, r3, #1
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800828a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800828e:	f003 0304 	and.w	r3, r3, #4
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00b      	beq.n	80082ae <HAL_UART_IRQHandler+0xd2>
 8008296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800829a:	f003 0301 	and.w	r3, r3, #1
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d005      	beq.n	80082ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a6:	f043 0202 	orr.w	r2, r3, #2
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082b2:	f003 0302 	and.w	r3, r3, #2
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00b      	beq.n	80082d2 <HAL_UART_IRQHandler+0xf6>
 80082ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082be:	f003 0301 	and.w	r3, r3, #1
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d005      	beq.n	80082d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ca:	f043 0204 	orr.w	r2, r3, #4
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80082d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082d6:	f003 0308 	and.w	r3, r3, #8
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d011      	beq.n	8008302 <HAL_UART_IRQHandler+0x126>
 80082de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082e2:	f003 0320 	and.w	r3, r3, #32
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d105      	bne.n	80082f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80082ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082ee:	f003 0301 	and.w	r3, r3, #1
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d005      	beq.n	8008302 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fa:	f043 0208 	orr.w	r2, r3, #8
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008306:	2b00      	cmp	r3, #0
 8008308:	f000 81f2 	beq.w	80086f0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800830c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008310:	f003 0320 	and.w	r3, r3, #32
 8008314:	2b00      	cmp	r3, #0
 8008316:	d008      	beq.n	800832a <HAL_UART_IRQHandler+0x14e>
 8008318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800831c:	f003 0320 	and.w	r3, r3, #32
 8008320:	2b00      	cmp	r3, #0
 8008322:	d002      	beq.n	800832a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 fc6e 	bl	8008c06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	695b      	ldr	r3, [r3, #20]
 8008330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008334:	2b40      	cmp	r3, #64	; 0x40
 8008336:	bf0c      	ite	eq
 8008338:	2301      	moveq	r3, #1
 800833a:	2300      	movne	r3, #0
 800833c:	b2db      	uxtb	r3, r3
 800833e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008346:	f003 0308 	and.w	r3, r3, #8
 800834a:	2b00      	cmp	r3, #0
 800834c:	d103      	bne.n	8008356 <HAL_UART_IRQHandler+0x17a>
 800834e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008352:	2b00      	cmp	r3, #0
 8008354:	d051      	beq.n	80083fa <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fb74 	bl	8008a44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	695b      	ldr	r3, [r3, #20]
 8008362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008366:	2b40      	cmp	r3, #64	; 0x40
 8008368:	d142      	bne.n	80083f0 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	3314      	adds	r3, #20
 8008370:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008374:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008378:	e853 3f00 	ldrex	r3, [r3]
 800837c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008380:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008388:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	3314      	adds	r3, #20
 8008392:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008396:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800839a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80083a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80083a6:	e841 2300 	strex	r3, r2, [r1]
 80083aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80083ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d1d9      	bne.n	800836a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d013      	beq.n	80083e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c2:	4a7f      	ldr	r2, [pc, #508]	; (80085c0 <HAL_UART_IRQHandler+0x3e4>)
 80083c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7fc fddc 	bl	8004f88 <HAL_DMA_Abort_IT>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d019      	beq.n	800840a <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80083e0:	4610      	mov	r0, r2
 80083e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083e4:	e011      	b.n	800840a <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083ee:	e00c      	b.n	800840a <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083f8:	e007      	b.n	800840a <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008408:	e172      	b.n	80086f0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800840a:	bf00      	nop
    return;
 800840c:	e170      	b.n	80086f0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008412:	2b01      	cmp	r3, #1
 8008414:	f040 814c 	bne.w	80086b0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800841c:	f003 0310 	and.w	r3, r3, #16
 8008420:	2b00      	cmp	r3, #0
 8008422:	f000 8145 	beq.w	80086b0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800842a:	f003 0310 	and.w	r3, r3, #16
 800842e:	2b00      	cmp	r3, #0
 8008430:	f000 813e 	beq.w	80086b0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008434:	2300      	movs	r3, #0
 8008436:	60bb      	str	r3, [r7, #8]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	60bb      	str	r3, [r7, #8]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	60bb      	str	r3, [r7, #8]
 8008448:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	695b      	ldr	r3, [r3, #20]
 8008450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008454:	2b40      	cmp	r3, #64	; 0x40
 8008456:	f040 80b5 	bne.w	80085c4 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008466:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800846a:	2b00      	cmp	r3, #0
 800846c:	f000 8142 	beq.w	80086f4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008474:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008478:	429a      	cmp	r2, r3
 800847a:	f080 813b 	bcs.w	80086f4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008484:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800848a:	69db      	ldr	r3, [r3, #28]
 800848c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008490:	f000 8088 	beq.w	80085a4 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	330c      	adds	r3, #12
 800849a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084a2:	e853 3f00 	ldrex	r3, [r3]
 80084a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80084aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	330c      	adds	r3, #12
 80084bc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80084c0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80084c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80084cc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80084d0:	e841 2300 	strex	r3, r2, [r1]
 80084d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80084d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d1d9      	bne.n	8008494 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	3314      	adds	r3, #20
 80084e6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084ea:	e853 3f00 	ldrex	r3, [r3]
 80084ee:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80084f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084f2:	f023 0301 	bic.w	r3, r3, #1
 80084f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	3314      	adds	r3, #20
 8008500:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008504:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008508:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800850c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008510:	e841 2300 	strex	r3, r2, [r1]
 8008514:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008516:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008518:	2b00      	cmp	r3, #0
 800851a:	d1e1      	bne.n	80084e0 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	3314      	adds	r3, #20
 8008522:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008524:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008526:	e853 3f00 	ldrex	r3, [r3]
 800852a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800852c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800852e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008532:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	3314      	adds	r3, #20
 800853c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008540:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008542:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008544:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008546:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008548:	e841 2300 	strex	r3, r2, [r1]
 800854c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800854e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1e3      	bne.n	800851c <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2220      	movs	r2, #32
 8008558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	330c      	adds	r3, #12
 8008568:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800856c:	e853 3f00 	ldrex	r3, [r3]
 8008570:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008574:	f023 0310 	bic.w	r3, r3, #16
 8008578:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	330c      	adds	r3, #12
 8008582:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008586:	65ba      	str	r2, [r7, #88]	; 0x58
 8008588:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800858c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800858e:	e841 2300 	strex	r3, r2, [r1]
 8008592:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008596:	2b00      	cmp	r3, #0
 8008598:	d1e3      	bne.n	8008562 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800859e:	4618      	mov	r0, r3
 80085a0:	f7fc fc82 	bl	8004ea8 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80085b0:	b292      	uxth	r2, r2
 80085b2:	1a8a      	subs	r2, r1, r2
 80085b4:	b292      	uxth	r2, r2
 80085b6:	4611      	mov	r1, r2
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80085bc:	e09a      	b.n	80086f4 <HAL_UART_IRQHandler+0x518>
 80085be:	bf00      	nop
 80085c0:	08008b0b 	.word	0x08008b0b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	1ad3      	subs	r3, r2, r3
 80085d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085d8:	b29b      	uxth	r3, r3
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f000 808c 	beq.w	80086f8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80085e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f000 8087 	beq.w	80086f8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	330c      	adds	r3, #12
 80085f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f4:	e853 3f00 	ldrex	r3, [r3]
 80085f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008600:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	330c      	adds	r3, #12
 800860a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800860e:	647a      	str	r2, [r7, #68]	; 0x44
 8008610:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008612:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008614:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008616:	e841 2300 	strex	r3, r2, [r1]
 800861a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800861c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1e3      	bne.n	80085ea <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	3314      	adds	r3, #20
 8008628:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862c:	e853 3f00 	ldrex	r3, [r3]
 8008630:	623b      	str	r3, [r7, #32]
   return(result);
 8008632:	6a3b      	ldr	r3, [r7, #32]
 8008634:	f023 0301 	bic.w	r3, r3, #1
 8008638:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	3314      	adds	r3, #20
 8008642:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008646:	633a      	str	r2, [r7, #48]	; 0x30
 8008648:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800864c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800864e:	e841 2300 	strex	r3, r2, [r1]
 8008652:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008656:	2b00      	cmp	r3, #0
 8008658:	d1e3      	bne.n	8008622 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2220      	movs	r2, #32
 800865e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	330c      	adds	r3, #12
 800866e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	e853 3f00 	ldrex	r3, [r3]
 8008676:	60fb      	str	r3, [r7, #12]
   return(result);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f023 0310 	bic.w	r3, r3, #16
 800867e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	330c      	adds	r3, #12
 8008688:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800868c:	61fa      	str	r2, [r7, #28]
 800868e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008690:	69b9      	ldr	r1, [r7, #24]
 8008692:	69fa      	ldr	r2, [r7, #28]
 8008694:	e841 2300 	strex	r3, r2, [r1]
 8008698:	617b      	str	r3, [r7, #20]
   return(result);
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d1e3      	bne.n	8008668 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086a4:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 80086a8:	4611      	mov	r1, r2
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80086ae:	e023      	b.n	80086f8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80086b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d009      	beq.n	80086d0 <HAL_UART_IRQHandler+0x4f4>
 80086bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d003      	beq.n	80086d0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 fa33 	bl	8008b34 <UART_Transmit_IT>
    return;
 80086ce:	e014      	b.n	80086fa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80086d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00e      	beq.n	80086fa <HAL_UART_IRQHandler+0x51e>
 80086dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d008      	beq.n	80086fa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fa73 	bl	8008bd4 <UART_EndTransmit_IT>
    return;
 80086ee:	e004      	b.n	80086fa <HAL_UART_IRQHandler+0x51e>
    return;
 80086f0:	bf00      	nop
 80086f2:	e002      	b.n	80086fa <HAL_UART_IRQHandler+0x51e>
      return;
 80086f4:	bf00      	nop
 80086f6:	e000      	b.n	80086fa <HAL_UART_IRQHandler+0x51e>
      return;
 80086f8:	bf00      	nop
  }
}
 80086fa:	37e8      	adds	r7, #232	; 0xe8
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008708:	bf00      	nop
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800871c:	bf00      	nop
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008730:	bf00      	nop
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008744:	bf00      	nop
 8008746:	370c      	adds	r7, #12
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008758:	bf00      	nop
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008794:	bf00      	nop
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	460b      	mov	r3, r1
 80087aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80087ac:	bf00      	nop
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a10      	ldr	r2, [pc, #64]	; (8008804 <UART_InitCallbacksToDefault+0x4c>)
 80087c4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4a0f      	ldr	r2, [pc, #60]	; (8008808 <UART_InitCallbacksToDefault+0x50>)
 80087ca:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4a0f      	ldr	r2, [pc, #60]	; (800880c <UART_InitCallbacksToDefault+0x54>)
 80087d0:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a0e      	ldr	r2, [pc, #56]	; (8008810 <UART_InitCallbacksToDefault+0x58>)
 80087d6:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4a0e      	ldr	r2, [pc, #56]	; (8008814 <UART_InitCallbacksToDefault+0x5c>)
 80087dc:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a0d      	ldr	r2, [pc, #52]	; (8008818 <UART_InitCallbacksToDefault+0x60>)
 80087e2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4a0d      	ldr	r2, [pc, #52]	; (800881c <UART_InitCallbacksToDefault+0x64>)
 80087e8:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a0c      	ldr	r2, [pc, #48]	; (8008820 <UART_InitCallbacksToDefault+0x68>)
 80087ee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a0c      	ldr	r2, [pc, #48]	; (8008824 <UART_InitCallbacksToDefault+0x6c>)
 80087f4:	669a      	str	r2, [r3, #104]	; 0x68

}
 80087f6:	bf00      	nop
 80087f8:	370c      	adds	r7, #12
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	08008715 	.word	0x08008715
 8008808:	08008701 	.word	0x08008701
 800880c:	0800873d 	.word	0x0800873d
 8008810:	08008729 	.word	0x08008729
 8008814:	08008751 	.word	0x08008751
 8008818:	08008765 	.word	0x08008765
 800881c:	08008779 	.word	0x08008779
 8008820:	0800878d 	.word	0x0800878d
 8008824:	080087a1 	.word	0x080087a1

08008828 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b090      	sub	sp, #64	; 0x40
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008834:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008840:	2b00      	cmp	r3, #0
 8008842:	d137      	bne.n	80088b4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008846:	2200      	movs	r2, #0
 8008848:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800884a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	3314      	adds	r3, #20
 8008850:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008854:	e853 3f00 	ldrex	r3, [r3]
 8008858:	623b      	str	r3, [r7, #32]
   return(result);
 800885a:	6a3b      	ldr	r3, [r7, #32]
 800885c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008860:	63bb      	str	r3, [r7, #56]	; 0x38
 8008862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	3314      	adds	r3, #20
 8008868:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800886a:	633a      	str	r2, [r7, #48]	; 0x30
 800886c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008872:	e841 2300 	strex	r3, r2, [r1]
 8008876:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1e5      	bne.n	800884a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800887e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	330c      	adds	r3, #12
 8008884:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	e853 3f00 	ldrex	r3, [r3]
 800888c:	60fb      	str	r3, [r7, #12]
   return(result);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008894:	637b      	str	r3, [r7, #52]	; 0x34
 8008896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	330c      	adds	r3, #12
 800889c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800889e:	61fa      	str	r2, [r7, #28]
 80088a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a2:	69b9      	ldr	r1, [r7, #24]
 80088a4:	69fa      	ldr	r2, [r7, #28]
 80088a6:	e841 2300 	strex	r3, r2, [r1]
 80088aa:	617b      	str	r3, [r7, #20]
   return(result);
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d1e5      	bne.n	800887e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80088b2:	e003      	b.n	80088bc <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 80088b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80088ba:	4798      	blx	r3
}
 80088bc:	bf00      	nop
 80088be:	3740      	adds	r7, #64	; 0x40
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088da:	bf00      	nop
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b084      	sub	sp, #16
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80088ea:	2300      	movs	r3, #0
 80088ec:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	695b      	ldr	r3, [r3, #20]
 80088fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088fe:	2b80      	cmp	r3, #128	; 0x80
 8008900:	bf0c      	ite	eq
 8008902:	2301      	moveq	r3, #1
 8008904:	2300      	movne	r3, #0
 8008906:	b2db      	uxtb	r3, r3
 8008908:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008910:	b2db      	uxtb	r3, r3
 8008912:	2b21      	cmp	r3, #33	; 0x21
 8008914:	d108      	bne.n	8008928 <UART_DMAError+0x46>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d005      	beq.n	8008928 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	2200      	movs	r2, #0
 8008920:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008922:	68b8      	ldr	r0, [r7, #8]
 8008924:	f000 f866 	bl	80089f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008932:	2b40      	cmp	r3, #64	; 0x40
 8008934:	bf0c      	ite	eq
 8008936:	2301      	moveq	r3, #1
 8008938:	2300      	movne	r3, #0
 800893a:	b2db      	uxtb	r3, r3
 800893c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b22      	cmp	r3, #34	; 0x22
 8008948:	d108      	bne.n	800895c <UART_DMAError+0x7a>
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d005      	beq.n	800895c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	2200      	movs	r2, #0
 8008954:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008956:	68b8      	ldr	r0, [r7, #8]
 8008958:	f000 f874 	bl	8008a44 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008960:	f043 0210 	orr.w	r2, r3, #16
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800896c:	68b8      	ldr	r0, [r7, #8]
 800896e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008970:	bf00      	nop
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	4613      	mov	r3, r2
 8008984:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	88fa      	ldrh	r2, [r7, #6]
 8008990:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	88fa      	ldrh	r2, [r7, #6]
 8008996:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2200      	movs	r2, #0
 800899c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2222      	movs	r2, #34	; 0x22
 80089a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d007      	beq.n	80089c6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68da      	ldr	r2, [r3, #12]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80089c4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	695a      	ldr	r2, [r3, #20]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f042 0201 	orr.w	r2, r2, #1
 80089d4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	68da      	ldr	r2, [r3, #12]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f042 0220 	orr.w	r2, r2, #32
 80089e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80089e6:	2300      	movs	r3, #0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3714      	adds	r7, #20
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b089      	sub	sp, #36	; 0x24
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	330c      	adds	r3, #12
 8008a02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	e853 3f00 	ldrex	r3, [r3]
 8008a0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008a12:	61fb      	str	r3, [r7, #28]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	330c      	adds	r3, #12
 8008a1a:	69fa      	ldr	r2, [r7, #28]
 8008a1c:	61ba      	str	r2, [r7, #24]
 8008a1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a20:	6979      	ldr	r1, [r7, #20]
 8008a22:	69ba      	ldr	r2, [r7, #24]
 8008a24:	e841 2300 	strex	r3, r2, [r1]
 8008a28:	613b      	str	r3, [r7, #16]
   return(result);
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1e5      	bne.n	80089fc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2220      	movs	r2, #32
 8008a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008a38:	bf00      	nop
 8008a3a:	3724      	adds	r7, #36	; 0x24
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b095      	sub	sp, #84	; 0x54
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	330c      	adds	r3, #12
 8008a52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a56:	e853 3f00 	ldrex	r3, [r3]
 8008a5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	330c      	adds	r3, #12
 8008a6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a6c:	643a      	str	r2, [r7, #64]	; 0x40
 8008a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a74:	e841 2300 	strex	r3, r2, [r1]
 8008a78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1e5      	bne.n	8008a4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	3314      	adds	r3, #20
 8008a86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a88:	6a3b      	ldr	r3, [r7, #32]
 8008a8a:	e853 3f00 	ldrex	r3, [r3]
 8008a8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a90:	69fb      	ldr	r3, [r7, #28]
 8008a92:	f023 0301 	bic.w	r3, r3, #1
 8008a96:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	3314      	adds	r3, #20
 8008a9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008aa0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008aa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008aa8:	e841 2300 	strex	r3, r2, [r1]
 8008aac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d1e5      	bne.n	8008a80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d119      	bne.n	8008af0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	330c      	adds	r3, #12
 8008ac2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	e853 3f00 	ldrex	r3, [r3]
 8008aca:	60bb      	str	r3, [r7, #8]
   return(result);
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	f023 0310 	bic.w	r3, r3, #16
 8008ad2:	647b      	str	r3, [r7, #68]	; 0x44
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	330c      	adds	r3, #12
 8008ada:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008adc:	61ba      	str	r2, [r7, #24]
 8008ade:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae0:	6979      	ldr	r1, [r7, #20]
 8008ae2:	69ba      	ldr	r2, [r7, #24]
 8008ae4:	e841 2300 	strex	r3, r2, [r1]
 8008ae8:	613b      	str	r3, [r7, #16]
   return(result);
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d1e5      	bne.n	8008abc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2220      	movs	r2, #32
 8008af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008afe:	bf00      	nop
 8008b00:	3754      	adds	r7, #84	; 0x54
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr

08008b0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b084      	sub	sp, #16
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2200      	movs	r2, #0
 8008b22:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b28:	68f8      	ldr	r0, [r7, #12]
 8008b2a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b2c:	bf00      	nop
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	2b21      	cmp	r3, #33	; 0x21
 8008b46:	d13e      	bne.n	8008bc6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b50:	d114      	bne.n	8008b7c <UART_Transmit_IT+0x48>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d110      	bne.n	8008b7c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a1b      	ldr	r3, [r3, #32]
 8008b5e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	881b      	ldrh	r3, [r3, #0]
 8008b64:	461a      	mov	r2, r3
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b6e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6a1b      	ldr	r3, [r3, #32]
 8008b74:	1c9a      	adds	r2, r3, #2
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	621a      	str	r2, [r3, #32]
 8008b7a:	e008      	b.n	8008b8e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a1b      	ldr	r3, [r3, #32]
 8008b80:	1c59      	adds	r1, r3, #1
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	6211      	str	r1, [r2, #32]
 8008b86:	781a      	ldrb	r2, [r3, #0]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	3b01      	subs	r3, #1
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d10f      	bne.n	8008bc2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68da      	ldr	r2, [r3, #12]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008bb0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	68da      	ldr	r2, [r3, #12]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bc0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e000      	b.n	8008bc8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008bc6:	2302      	movs	r3, #2
  }
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3714      	adds	r7, #20
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	68da      	ldr	r2, [r3, #12]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2220      	movs	r2, #32
 8008bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3708      	adds	r7, #8
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b08c      	sub	sp, #48	; 0x30
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	2b22      	cmp	r3, #34	; 0x22
 8008c18:	f040 80ad 	bne.w	8008d76 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c24:	d117      	bne.n	8008c56 <UART_Receive_IT+0x50>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d113      	bne.n	8008c56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c36:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c4e:	1c9a      	adds	r2, r3, #2
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	629a      	str	r2, [r3, #40]	; 0x28
 8008c54:	e026      	b.n	8008ca4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c68:	d007      	beq.n	8008c7a <UART_Receive_IT+0x74>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d10a      	bne.n	8008c88 <UART_Receive_IT+0x82>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	691b      	ldr	r3, [r3, #16]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d106      	bne.n	8008c88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	b2da      	uxtb	r2, r3
 8008c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c84:	701a      	strb	r2, [r3, #0]
 8008c86:	e008      	b.n	8008c9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c94:	b2da      	uxtb	r2, r3
 8008c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c9e:	1c5a      	adds	r2, r3, #1
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	3b01      	subs	r3, #1
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d15c      	bne.n	8008d72 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68da      	ldr	r2, [r3, #12]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f022 0220 	bic.w	r2, r2, #32
 8008cc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	68da      	ldr	r2, [r3, #12]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008cd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	695a      	ldr	r2, [r3, #20]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f022 0201 	bic.w	r2, r2, #1
 8008ce6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2220      	movs	r2, #32
 8008cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d136      	bne.n	8008d66 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	330c      	adds	r3, #12
 8008d04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	e853 3f00 	ldrex	r3, [r3]
 8008d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	f023 0310 	bic.w	r3, r3, #16
 8008d14:	627b      	str	r3, [r7, #36]	; 0x24
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	330c      	adds	r3, #12
 8008d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d1e:	623a      	str	r2, [r7, #32]
 8008d20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d22:	69f9      	ldr	r1, [r7, #28]
 8008d24:	6a3a      	ldr	r2, [r7, #32]
 8008d26:	e841 2300 	strex	r3, r2, [r1]
 8008d2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1e5      	bne.n	8008cfe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 0310 	and.w	r3, r3, #16
 8008d3c:	2b10      	cmp	r3, #16
 8008d3e:	d10a      	bne.n	8008d56 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d40:	2300      	movs	r3, #0
 8008d42:	60fb      	str	r3, [r7, #12]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	60fb      	str	r3, [r7, #12]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	60fb      	str	r3, [r7, #12]
 8008d54:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8008d5e:	4611      	mov	r1, r2
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	4798      	blx	r3
 8008d64:	e003      	b.n	8008d6e <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	e002      	b.n	8008d78 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8008d72:	2300      	movs	r3, #0
 8008d74:	e000      	b.n	8008d78 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8008d76:	2302      	movs	r3, #2
  }
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3730      	adds	r7, #48	; 0x30
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d84:	b0c0      	sub	sp, #256	; 0x100
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d9c:	68d9      	ldr	r1, [r3, #12]
 8008d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	ea40 0301 	orr.w	r3, r0, r1
 8008da8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dae:	689a      	ldr	r2, [r3, #8]
 8008db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	431a      	orrs	r2, r3
 8008db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dbc:	695b      	ldr	r3, [r3, #20]
 8008dbe:	431a      	orrs	r2, r3
 8008dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dc4:	69db      	ldr	r3, [r3, #28]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008dd8:	f021 010c 	bic.w	r1, r1, #12
 8008ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008de6:	430b      	orrs	r3, r1
 8008de8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	695b      	ldr	r3, [r3, #20]
 8008df2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dfa:	6999      	ldr	r1, [r3, #24]
 8008dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	ea40 0301 	orr.w	r3, r0, r1
 8008e06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	4b8f      	ldr	r3, [pc, #572]	; (800904c <UART_SetConfig+0x2cc>)
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d005      	beq.n	8008e20 <UART_SetConfig+0xa0>
 8008e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	4b8d      	ldr	r3, [pc, #564]	; (8009050 <UART_SetConfig+0x2d0>)
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d104      	bne.n	8008e2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e20:	f7fd fac8 	bl	80063b4 <HAL_RCC_GetPCLK2Freq>
 8008e24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008e28:	e003      	b.n	8008e32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e2a:	f7fd faaf 	bl	800638c <HAL_RCC_GetPCLK1Freq>
 8008e2e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e36:	69db      	ldr	r3, [r3, #28]
 8008e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e3c:	f040 810c 	bne.w	8009058 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e44:	2200      	movs	r2, #0
 8008e46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008e4a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008e4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008e52:	4622      	mov	r2, r4
 8008e54:	462b      	mov	r3, r5
 8008e56:	1891      	adds	r1, r2, r2
 8008e58:	65b9      	str	r1, [r7, #88]	; 0x58
 8008e5a:	415b      	adcs	r3, r3
 8008e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008e62:	4621      	mov	r1, r4
 8008e64:	eb12 0801 	adds.w	r8, r2, r1
 8008e68:	4629      	mov	r1, r5
 8008e6a:	eb43 0901 	adc.w	r9, r3, r1
 8008e6e:	f04f 0200 	mov.w	r2, #0
 8008e72:	f04f 0300 	mov.w	r3, #0
 8008e76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008e7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e82:	4690      	mov	r8, r2
 8008e84:	4699      	mov	r9, r3
 8008e86:	4623      	mov	r3, r4
 8008e88:	eb18 0303 	adds.w	r3, r8, r3
 8008e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008e90:	462b      	mov	r3, r5
 8008e92:	eb49 0303 	adc.w	r3, r9, r3
 8008e96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008ea6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008eaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008eae:	460b      	mov	r3, r1
 8008eb0:	18db      	adds	r3, r3, r3
 8008eb2:	653b      	str	r3, [r7, #80]	; 0x50
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	eb42 0303 	adc.w	r3, r2, r3
 8008eba:	657b      	str	r3, [r7, #84]	; 0x54
 8008ebc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008ec0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008ec4:	f7f7 fe6c 	bl	8000ba0 <__aeabi_uldivmod>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	460b      	mov	r3, r1
 8008ecc:	4b61      	ldr	r3, [pc, #388]	; (8009054 <UART_SetConfig+0x2d4>)
 8008ece:	fba3 2302 	umull	r2, r3, r3, r2
 8008ed2:	095b      	lsrs	r3, r3, #5
 8008ed4:	011c      	lsls	r4, r3, #4
 8008ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008eda:	2200      	movs	r2, #0
 8008edc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ee0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008ee4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008ee8:	4642      	mov	r2, r8
 8008eea:	464b      	mov	r3, r9
 8008eec:	1891      	adds	r1, r2, r2
 8008eee:	64b9      	str	r1, [r7, #72]	; 0x48
 8008ef0:	415b      	adcs	r3, r3
 8008ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ef4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008ef8:	4641      	mov	r1, r8
 8008efa:	eb12 0a01 	adds.w	sl, r2, r1
 8008efe:	4649      	mov	r1, r9
 8008f00:	eb43 0b01 	adc.w	fp, r3, r1
 8008f04:	f04f 0200 	mov.w	r2, #0
 8008f08:	f04f 0300 	mov.w	r3, #0
 8008f0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008f10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008f14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f18:	4692      	mov	sl, r2
 8008f1a:	469b      	mov	fp, r3
 8008f1c:	4643      	mov	r3, r8
 8008f1e:	eb1a 0303 	adds.w	r3, sl, r3
 8008f22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008f26:	464b      	mov	r3, r9
 8008f28:	eb4b 0303 	adc.w	r3, fp, r3
 8008f2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008f3c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008f40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008f44:	460b      	mov	r3, r1
 8008f46:	18db      	adds	r3, r3, r3
 8008f48:	643b      	str	r3, [r7, #64]	; 0x40
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	eb42 0303 	adc.w	r3, r2, r3
 8008f50:	647b      	str	r3, [r7, #68]	; 0x44
 8008f52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008f56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008f5a:	f7f7 fe21 	bl	8000ba0 <__aeabi_uldivmod>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	460b      	mov	r3, r1
 8008f62:	4611      	mov	r1, r2
 8008f64:	4b3b      	ldr	r3, [pc, #236]	; (8009054 <UART_SetConfig+0x2d4>)
 8008f66:	fba3 2301 	umull	r2, r3, r3, r1
 8008f6a:	095b      	lsrs	r3, r3, #5
 8008f6c:	2264      	movs	r2, #100	; 0x64
 8008f6e:	fb02 f303 	mul.w	r3, r2, r3
 8008f72:	1acb      	subs	r3, r1, r3
 8008f74:	00db      	lsls	r3, r3, #3
 8008f76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008f7a:	4b36      	ldr	r3, [pc, #216]	; (8009054 <UART_SetConfig+0x2d4>)
 8008f7c:	fba3 2302 	umull	r2, r3, r3, r2
 8008f80:	095b      	lsrs	r3, r3, #5
 8008f82:	005b      	lsls	r3, r3, #1
 8008f84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008f88:	441c      	add	r4, r3
 8008f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f94:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008f98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008f9c:	4642      	mov	r2, r8
 8008f9e:	464b      	mov	r3, r9
 8008fa0:	1891      	adds	r1, r2, r2
 8008fa2:	63b9      	str	r1, [r7, #56]	; 0x38
 8008fa4:	415b      	adcs	r3, r3
 8008fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fa8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008fac:	4641      	mov	r1, r8
 8008fae:	1851      	adds	r1, r2, r1
 8008fb0:	6339      	str	r1, [r7, #48]	; 0x30
 8008fb2:	4649      	mov	r1, r9
 8008fb4:	414b      	adcs	r3, r1
 8008fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8008fb8:	f04f 0200 	mov.w	r2, #0
 8008fbc:	f04f 0300 	mov.w	r3, #0
 8008fc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008fc4:	4659      	mov	r1, fp
 8008fc6:	00cb      	lsls	r3, r1, #3
 8008fc8:	4651      	mov	r1, sl
 8008fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fce:	4651      	mov	r1, sl
 8008fd0:	00ca      	lsls	r2, r1, #3
 8008fd2:	4610      	mov	r0, r2
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	4642      	mov	r2, r8
 8008fda:	189b      	adds	r3, r3, r2
 8008fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008fe0:	464b      	mov	r3, r9
 8008fe2:	460a      	mov	r2, r1
 8008fe4:	eb42 0303 	adc.w	r3, r2, r3
 8008fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008ff8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008ffc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009000:	460b      	mov	r3, r1
 8009002:	18db      	adds	r3, r3, r3
 8009004:	62bb      	str	r3, [r7, #40]	; 0x28
 8009006:	4613      	mov	r3, r2
 8009008:	eb42 0303 	adc.w	r3, r2, r3
 800900c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800900e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009012:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009016:	f7f7 fdc3 	bl	8000ba0 <__aeabi_uldivmod>
 800901a:	4602      	mov	r2, r0
 800901c:	460b      	mov	r3, r1
 800901e:	4b0d      	ldr	r3, [pc, #52]	; (8009054 <UART_SetConfig+0x2d4>)
 8009020:	fba3 1302 	umull	r1, r3, r3, r2
 8009024:	095b      	lsrs	r3, r3, #5
 8009026:	2164      	movs	r1, #100	; 0x64
 8009028:	fb01 f303 	mul.w	r3, r1, r3
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	00db      	lsls	r3, r3, #3
 8009030:	3332      	adds	r3, #50	; 0x32
 8009032:	4a08      	ldr	r2, [pc, #32]	; (8009054 <UART_SetConfig+0x2d4>)
 8009034:	fba2 2303 	umull	r2, r3, r2, r3
 8009038:	095b      	lsrs	r3, r3, #5
 800903a:	f003 0207 	and.w	r2, r3, #7
 800903e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4422      	add	r2, r4
 8009046:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009048:	e105      	b.n	8009256 <UART_SetConfig+0x4d6>
 800904a:	bf00      	nop
 800904c:	40011000 	.word	0x40011000
 8009050:	40011400 	.word	0x40011400
 8009054:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800905c:	2200      	movs	r2, #0
 800905e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009062:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009066:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800906a:	4642      	mov	r2, r8
 800906c:	464b      	mov	r3, r9
 800906e:	1891      	adds	r1, r2, r2
 8009070:	6239      	str	r1, [r7, #32]
 8009072:	415b      	adcs	r3, r3
 8009074:	627b      	str	r3, [r7, #36]	; 0x24
 8009076:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800907a:	4641      	mov	r1, r8
 800907c:	1854      	adds	r4, r2, r1
 800907e:	4649      	mov	r1, r9
 8009080:	eb43 0501 	adc.w	r5, r3, r1
 8009084:	f04f 0200 	mov.w	r2, #0
 8009088:	f04f 0300 	mov.w	r3, #0
 800908c:	00eb      	lsls	r3, r5, #3
 800908e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009092:	00e2      	lsls	r2, r4, #3
 8009094:	4614      	mov	r4, r2
 8009096:	461d      	mov	r5, r3
 8009098:	4643      	mov	r3, r8
 800909a:	18e3      	adds	r3, r4, r3
 800909c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80090a0:	464b      	mov	r3, r9
 80090a2:	eb45 0303 	adc.w	r3, r5, r3
 80090a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80090aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80090b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80090ba:	f04f 0200 	mov.w	r2, #0
 80090be:	f04f 0300 	mov.w	r3, #0
 80090c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80090c6:	4629      	mov	r1, r5
 80090c8:	008b      	lsls	r3, r1, #2
 80090ca:	4621      	mov	r1, r4
 80090cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090d0:	4621      	mov	r1, r4
 80090d2:	008a      	lsls	r2, r1, #2
 80090d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80090d8:	f7f7 fd62 	bl	8000ba0 <__aeabi_uldivmod>
 80090dc:	4602      	mov	r2, r0
 80090de:	460b      	mov	r3, r1
 80090e0:	4b60      	ldr	r3, [pc, #384]	; (8009264 <UART_SetConfig+0x4e4>)
 80090e2:	fba3 2302 	umull	r2, r3, r3, r2
 80090e6:	095b      	lsrs	r3, r3, #5
 80090e8:	011c      	lsls	r4, r3, #4
 80090ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090ee:	2200      	movs	r2, #0
 80090f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80090f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80090f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80090fc:	4642      	mov	r2, r8
 80090fe:	464b      	mov	r3, r9
 8009100:	1891      	adds	r1, r2, r2
 8009102:	61b9      	str	r1, [r7, #24]
 8009104:	415b      	adcs	r3, r3
 8009106:	61fb      	str	r3, [r7, #28]
 8009108:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800910c:	4641      	mov	r1, r8
 800910e:	1851      	adds	r1, r2, r1
 8009110:	6139      	str	r1, [r7, #16]
 8009112:	4649      	mov	r1, r9
 8009114:	414b      	adcs	r3, r1
 8009116:	617b      	str	r3, [r7, #20]
 8009118:	f04f 0200 	mov.w	r2, #0
 800911c:	f04f 0300 	mov.w	r3, #0
 8009120:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009124:	4659      	mov	r1, fp
 8009126:	00cb      	lsls	r3, r1, #3
 8009128:	4651      	mov	r1, sl
 800912a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800912e:	4651      	mov	r1, sl
 8009130:	00ca      	lsls	r2, r1, #3
 8009132:	4610      	mov	r0, r2
 8009134:	4619      	mov	r1, r3
 8009136:	4603      	mov	r3, r0
 8009138:	4642      	mov	r2, r8
 800913a:	189b      	adds	r3, r3, r2
 800913c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009140:	464b      	mov	r3, r9
 8009142:	460a      	mov	r2, r1
 8009144:	eb42 0303 	adc.w	r3, r2, r3
 8009148:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800914c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	67bb      	str	r3, [r7, #120]	; 0x78
 8009156:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009158:	f04f 0200 	mov.w	r2, #0
 800915c:	f04f 0300 	mov.w	r3, #0
 8009160:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009164:	4649      	mov	r1, r9
 8009166:	008b      	lsls	r3, r1, #2
 8009168:	4641      	mov	r1, r8
 800916a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800916e:	4641      	mov	r1, r8
 8009170:	008a      	lsls	r2, r1, #2
 8009172:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009176:	f7f7 fd13 	bl	8000ba0 <__aeabi_uldivmod>
 800917a:	4602      	mov	r2, r0
 800917c:	460b      	mov	r3, r1
 800917e:	4b39      	ldr	r3, [pc, #228]	; (8009264 <UART_SetConfig+0x4e4>)
 8009180:	fba3 1302 	umull	r1, r3, r3, r2
 8009184:	095b      	lsrs	r3, r3, #5
 8009186:	2164      	movs	r1, #100	; 0x64
 8009188:	fb01 f303 	mul.w	r3, r1, r3
 800918c:	1ad3      	subs	r3, r2, r3
 800918e:	011b      	lsls	r3, r3, #4
 8009190:	3332      	adds	r3, #50	; 0x32
 8009192:	4a34      	ldr	r2, [pc, #208]	; (8009264 <UART_SetConfig+0x4e4>)
 8009194:	fba2 2303 	umull	r2, r3, r2, r3
 8009198:	095b      	lsrs	r3, r3, #5
 800919a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800919e:	441c      	add	r4, r3
 80091a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091a4:	2200      	movs	r2, #0
 80091a6:	673b      	str	r3, [r7, #112]	; 0x70
 80091a8:	677a      	str	r2, [r7, #116]	; 0x74
 80091aa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80091ae:	4642      	mov	r2, r8
 80091b0:	464b      	mov	r3, r9
 80091b2:	1891      	adds	r1, r2, r2
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	415b      	adcs	r3, r3
 80091b8:	60fb      	str	r3, [r7, #12]
 80091ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80091be:	4641      	mov	r1, r8
 80091c0:	1851      	adds	r1, r2, r1
 80091c2:	6039      	str	r1, [r7, #0]
 80091c4:	4649      	mov	r1, r9
 80091c6:	414b      	adcs	r3, r1
 80091c8:	607b      	str	r3, [r7, #4]
 80091ca:	f04f 0200 	mov.w	r2, #0
 80091ce:	f04f 0300 	mov.w	r3, #0
 80091d2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80091d6:	4659      	mov	r1, fp
 80091d8:	00cb      	lsls	r3, r1, #3
 80091da:	4651      	mov	r1, sl
 80091dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091e0:	4651      	mov	r1, sl
 80091e2:	00ca      	lsls	r2, r1, #3
 80091e4:	4610      	mov	r0, r2
 80091e6:	4619      	mov	r1, r3
 80091e8:	4603      	mov	r3, r0
 80091ea:	4642      	mov	r2, r8
 80091ec:	189b      	adds	r3, r3, r2
 80091ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80091f0:	464b      	mov	r3, r9
 80091f2:	460a      	mov	r2, r1
 80091f4:	eb42 0303 	adc.w	r3, r2, r3
 80091f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80091fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	663b      	str	r3, [r7, #96]	; 0x60
 8009204:	667a      	str	r2, [r7, #100]	; 0x64
 8009206:	f04f 0200 	mov.w	r2, #0
 800920a:	f04f 0300 	mov.w	r3, #0
 800920e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009212:	4649      	mov	r1, r9
 8009214:	008b      	lsls	r3, r1, #2
 8009216:	4641      	mov	r1, r8
 8009218:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800921c:	4641      	mov	r1, r8
 800921e:	008a      	lsls	r2, r1, #2
 8009220:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009224:	f7f7 fcbc 	bl	8000ba0 <__aeabi_uldivmod>
 8009228:	4602      	mov	r2, r0
 800922a:	460b      	mov	r3, r1
 800922c:	4b0d      	ldr	r3, [pc, #52]	; (8009264 <UART_SetConfig+0x4e4>)
 800922e:	fba3 1302 	umull	r1, r3, r3, r2
 8009232:	095b      	lsrs	r3, r3, #5
 8009234:	2164      	movs	r1, #100	; 0x64
 8009236:	fb01 f303 	mul.w	r3, r1, r3
 800923a:	1ad3      	subs	r3, r2, r3
 800923c:	011b      	lsls	r3, r3, #4
 800923e:	3332      	adds	r3, #50	; 0x32
 8009240:	4a08      	ldr	r2, [pc, #32]	; (8009264 <UART_SetConfig+0x4e4>)
 8009242:	fba2 2303 	umull	r2, r3, r2, r3
 8009246:	095b      	lsrs	r3, r3, #5
 8009248:	f003 020f 	and.w	r2, r3, #15
 800924c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4422      	add	r2, r4
 8009254:	609a      	str	r2, [r3, #8]
}
 8009256:	bf00      	nop
 8009258:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800925c:	46bd      	mov	sp, r7
 800925e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009262:	bf00      	nop
 8009264:	51eb851f 	.word	0x51eb851f

08009268 <__errno>:
 8009268:	4b01      	ldr	r3, [pc, #4]	; (8009270 <__errno+0x8>)
 800926a:	6818      	ldr	r0, [r3, #0]
 800926c:	4770      	bx	lr
 800926e:	bf00      	nop
 8009270:	2000021c 	.word	0x2000021c

08009274 <__libc_init_array>:
 8009274:	b570      	push	{r4, r5, r6, lr}
 8009276:	4d0d      	ldr	r5, [pc, #52]	; (80092ac <__libc_init_array+0x38>)
 8009278:	4c0d      	ldr	r4, [pc, #52]	; (80092b0 <__libc_init_array+0x3c>)
 800927a:	1b64      	subs	r4, r4, r5
 800927c:	10a4      	asrs	r4, r4, #2
 800927e:	2600      	movs	r6, #0
 8009280:	42a6      	cmp	r6, r4
 8009282:	d109      	bne.n	8009298 <__libc_init_array+0x24>
 8009284:	4d0b      	ldr	r5, [pc, #44]	; (80092b4 <__libc_init_array+0x40>)
 8009286:	4c0c      	ldr	r4, [pc, #48]	; (80092b8 <__libc_init_array+0x44>)
 8009288:	f001 fb66 	bl	800a958 <_init>
 800928c:	1b64      	subs	r4, r4, r5
 800928e:	10a4      	asrs	r4, r4, #2
 8009290:	2600      	movs	r6, #0
 8009292:	42a6      	cmp	r6, r4
 8009294:	d105      	bne.n	80092a2 <__libc_init_array+0x2e>
 8009296:	bd70      	pop	{r4, r5, r6, pc}
 8009298:	f855 3b04 	ldr.w	r3, [r5], #4
 800929c:	4798      	blx	r3
 800929e:	3601      	adds	r6, #1
 80092a0:	e7ee      	b.n	8009280 <__libc_init_array+0xc>
 80092a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80092a6:	4798      	blx	r3
 80092a8:	3601      	adds	r6, #1
 80092aa:	e7f2      	b.n	8009292 <__libc_init_array+0x1e>
 80092ac:	0800b288 	.word	0x0800b288
 80092b0:	0800b288 	.word	0x0800b288
 80092b4:	0800b288 	.word	0x0800b288
 80092b8:	0800b28c 	.word	0x0800b28c

080092bc <memcpy>:
 80092bc:	440a      	add	r2, r1
 80092be:	4291      	cmp	r1, r2
 80092c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80092c4:	d100      	bne.n	80092c8 <memcpy+0xc>
 80092c6:	4770      	bx	lr
 80092c8:	b510      	push	{r4, lr}
 80092ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092d2:	4291      	cmp	r1, r2
 80092d4:	d1f9      	bne.n	80092ca <memcpy+0xe>
 80092d6:	bd10      	pop	{r4, pc}

080092d8 <memset>:
 80092d8:	4402      	add	r2, r0
 80092da:	4603      	mov	r3, r0
 80092dc:	4293      	cmp	r3, r2
 80092de:	d100      	bne.n	80092e2 <memset+0xa>
 80092e0:	4770      	bx	lr
 80092e2:	f803 1b01 	strb.w	r1, [r3], #1
 80092e6:	e7f9      	b.n	80092dc <memset+0x4>

080092e8 <pow>:
 80092e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ea:	ed2d 8b02 	vpush	{d8}
 80092ee:	eeb0 8a40 	vmov.f32	s16, s0
 80092f2:	eef0 8a60 	vmov.f32	s17, s1
 80092f6:	ec55 4b11 	vmov	r4, r5, d1
 80092fa:	f000 f909 	bl	8009510 <__ieee754_pow>
 80092fe:	4622      	mov	r2, r4
 8009300:	462b      	mov	r3, r5
 8009302:	4620      	mov	r0, r4
 8009304:	4629      	mov	r1, r5
 8009306:	ec57 6b10 	vmov	r6, r7, d0
 800930a:	f7f7 fbbb 	bl	8000a84 <__aeabi_dcmpun>
 800930e:	2800      	cmp	r0, #0
 8009310:	d13b      	bne.n	800938a <pow+0xa2>
 8009312:	ec51 0b18 	vmov	r0, r1, d8
 8009316:	2200      	movs	r2, #0
 8009318:	2300      	movs	r3, #0
 800931a:	f7f7 fb81 	bl	8000a20 <__aeabi_dcmpeq>
 800931e:	b1b8      	cbz	r0, 8009350 <pow+0x68>
 8009320:	2200      	movs	r2, #0
 8009322:	2300      	movs	r3, #0
 8009324:	4620      	mov	r0, r4
 8009326:	4629      	mov	r1, r5
 8009328:	f7f7 fb7a 	bl	8000a20 <__aeabi_dcmpeq>
 800932c:	2800      	cmp	r0, #0
 800932e:	d146      	bne.n	80093be <pow+0xd6>
 8009330:	ec45 4b10 	vmov	d0, r4, r5
 8009334:	f001 f9f9 	bl	800a72a <finite>
 8009338:	b338      	cbz	r0, 800938a <pow+0xa2>
 800933a:	2200      	movs	r2, #0
 800933c:	2300      	movs	r3, #0
 800933e:	4620      	mov	r0, r4
 8009340:	4629      	mov	r1, r5
 8009342:	f7f7 fb77 	bl	8000a34 <__aeabi_dcmplt>
 8009346:	b300      	cbz	r0, 800938a <pow+0xa2>
 8009348:	f7ff ff8e 	bl	8009268 <__errno>
 800934c:	2322      	movs	r3, #34	; 0x22
 800934e:	e01b      	b.n	8009388 <pow+0xa0>
 8009350:	ec47 6b10 	vmov	d0, r6, r7
 8009354:	f001 f9e9 	bl	800a72a <finite>
 8009358:	b9e0      	cbnz	r0, 8009394 <pow+0xac>
 800935a:	eeb0 0a48 	vmov.f32	s0, s16
 800935e:	eef0 0a68 	vmov.f32	s1, s17
 8009362:	f001 f9e2 	bl	800a72a <finite>
 8009366:	b1a8      	cbz	r0, 8009394 <pow+0xac>
 8009368:	ec45 4b10 	vmov	d0, r4, r5
 800936c:	f001 f9dd 	bl	800a72a <finite>
 8009370:	b180      	cbz	r0, 8009394 <pow+0xac>
 8009372:	4632      	mov	r2, r6
 8009374:	463b      	mov	r3, r7
 8009376:	4630      	mov	r0, r6
 8009378:	4639      	mov	r1, r7
 800937a:	f7f7 fb83 	bl	8000a84 <__aeabi_dcmpun>
 800937e:	2800      	cmp	r0, #0
 8009380:	d0e2      	beq.n	8009348 <pow+0x60>
 8009382:	f7ff ff71 	bl	8009268 <__errno>
 8009386:	2321      	movs	r3, #33	; 0x21
 8009388:	6003      	str	r3, [r0, #0]
 800938a:	ecbd 8b02 	vpop	{d8}
 800938e:	ec47 6b10 	vmov	d0, r6, r7
 8009392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009394:	2200      	movs	r2, #0
 8009396:	2300      	movs	r3, #0
 8009398:	4630      	mov	r0, r6
 800939a:	4639      	mov	r1, r7
 800939c:	f7f7 fb40 	bl	8000a20 <__aeabi_dcmpeq>
 80093a0:	2800      	cmp	r0, #0
 80093a2:	d0f2      	beq.n	800938a <pow+0xa2>
 80093a4:	eeb0 0a48 	vmov.f32	s0, s16
 80093a8:	eef0 0a68 	vmov.f32	s1, s17
 80093ac:	f001 f9bd 	bl	800a72a <finite>
 80093b0:	2800      	cmp	r0, #0
 80093b2:	d0ea      	beq.n	800938a <pow+0xa2>
 80093b4:	ec45 4b10 	vmov	d0, r4, r5
 80093b8:	f001 f9b7 	bl	800a72a <finite>
 80093bc:	e7c3      	b.n	8009346 <pow+0x5e>
 80093be:	4f01      	ldr	r7, [pc, #4]	; (80093c4 <pow+0xdc>)
 80093c0:	2600      	movs	r6, #0
 80093c2:	e7e2      	b.n	800938a <pow+0xa2>
 80093c4:	3ff00000 	.word	0x3ff00000

080093c8 <sqrt>:
 80093c8:	b538      	push	{r3, r4, r5, lr}
 80093ca:	ed2d 8b02 	vpush	{d8}
 80093ce:	ec55 4b10 	vmov	r4, r5, d0
 80093d2:	f000 fdcb 	bl	8009f6c <__ieee754_sqrt>
 80093d6:	4622      	mov	r2, r4
 80093d8:	462b      	mov	r3, r5
 80093da:	4620      	mov	r0, r4
 80093dc:	4629      	mov	r1, r5
 80093de:	eeb0 8a40 	vmov.f32	s16, s0
 80093e2:	eef0 8a60 	vmov.f32	s17, s1
 80093e6:	f7f7 fb4d 	bl	8000a84 <__aeabi_dcmpun>
 80093ea:	b990      	cbnz	r0, 8009412 <sqrt+0x4a>
 80093ec:	2200      	movs	r2, #0
 80093ee:	2300      	movs	r3, #0
 80093f0:	4620      	mov	r0, r4
 80093f2:	4629      	mov	r1, r5
 80093f4:	f7f7 fb1e 	bl	8000a34 <__aeabi_dcmplt>
 80093f8:	b158      	cbz	r0, 8009412 <sqrt+0x4a>
 80093fa:	f7ff ff35 	bl	8009268 <__errno>
 80093fe:	2321      	movs	r3, #33	; 0x21
 8009400:	6003      	str	r3, [r0, #0]
 8009402:	2200      	movs	r2, #0
 8009404:	2300      	movs	r3, #0
 8009406:	4610      	mov	r0, r2
 8009408:	4619      	mov	r1, r3
 800940a:	f7f7 f9cb 	bl	80007a4 <__aeabi_ddiv>
 800940e:	ec41 0b18 	vmov	d8, r0, r1
 8009412:	eeb0 0a48 	vmov.f32	s0, s16
 8009416:	eef0 0a68 	vmov.f32	s1, s17
 800941a:	ecbd 8b02 	vpop	{d8}
 800941e:	bd38      	pop	{r3, r4, r5, pc}

08009420 <powf>:
 8009420:	b508      	push	{r3, lr}
 8009422:	ed2d 8b04 	vpush	{d8-d9}
 8009426:	eeb0 8a60 	vmov.f32	s16, s1
 800942a:	eeb0 9a40 	vmov.f32	s18, s0
 800942e:	f000 fe4f 	bl	800a0d0 <__ieee754_powf>
 8009432:	eeb4 8a48 	vcmp.f32	s16, s16
 8009436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800943a:	eef0 8a40 	vmov.f32	s17, s0
 800943e:	d63e      	bvs.n	80094be <powf+0x9e>
 8009440:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8009444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009448:	d112      	bne.n	8009470 <powf+0x50>
 800944a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800944e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009452:	d039      	beq.n	80094c8 <powf+0xa8>
 8009454:	eeb0 0a48 	vmov.f32	s0, s16
 8009458:	f001 f9ff 	bl	800a85a <finitef>
 800945c:	b378      	cbz	r0, 80094be <powf+0x9e>
 800945e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009466:	d52a      	bpl.n	80094be <powf+0x9e>
 8009468:	f7ff fefe 	bl	8009268 <__errno>
 800946c:	2322      	movs	r3, #34	; 0x22
 800946e:	e014      	b.n	800949a <powf+0x7a>
 8009470:	f001 f9f3 	bl	800a85a <finitef>
 8009474:	b998      	cbnz	r0, 800949e <powf+0x7e>
 8009476:	eeb0 0a49 	vmov.f32	s0, s18
 800947a:	f001 f9ee 	bl	800a85a <finitef>
 800947e:	b170      	cbz	r0, 800949e <powf+0x7e>
 8009480:	eeb0 0a48 	vmov.f32	s0, s16
 8009484:	f001 f9e9 	bl	800a85a <finitef>
 8009488:	b148      	cbz	r0, 800949e <powf+0x7e>
 800948a:	eef4 8a68 	vcmp.f32	s17, s17
 800948e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009492:	d7e9      	bvc.n	8009468 <powf+0x48>
 8009494:	f7ff fee8 	bl	8009268 <__errno>
 8009498:	2321      	movs	r3, #33	; 0x21
 800949a:	6003      	str	r3, [r0, #0]
 800949c:	e00f      	b.n	80094be <powf+0x9e>
 800949e:	eef5 8a40 	vcmp.f32	s17, #0.0
 80094a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094a6:	d10a      	bne.n	80094be <powf+0x9e>
 80094a8:	eeb0 0a49 	vmov.f32	s0, s18
 80094ac:	f001 f9d5 	bl	800a85a <finitef>
 80094b0:	b128      	cbz	r0, 80094be <powf+0x9e>
 80094b2:	eeb0 0a48 	vmov.f32	s0, s16
 80094b6:	f001 f9d0 	bl	800a85a <finitef>
 80094ba:	2800      	cmp	r0, #0
 80094bc:	d1d4      	bne.n	8009468 <powf+0x48>
 80094be:	eeb0 0a68 	vmov.f32	s0, s17
 80094c2:	ecbd 8b04 	vpop	{d8-d9}
 80094c6:	bd08      	pop	{r3, pc}
 80094c8:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80094cc:	e7f7      	b.n	80094be <powf+0x9e>
	...

080094d0 <sqrtf>:
 80094d0:	b508      	push	{r3, lr}
 80094d2:	ed2d 8b02 	vpush	{d8}
 80094d6:	eeb0 8a40 	vmov.f32	s16, s0
 80094da:	f001 f8c7 	bl	800a66c <__ieee754_sqrtf>
 80094de:	eeb4 8a48 	vcmp.f32	s16, s16
 80094e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094e6:	d60c      	bvs.n	8009502 <sqrtf+0x32>
 80094e8:	eddf 8a07 	vldr	s17, [pc, #28]	; 8009508 <sqrtf+0x38>
 80094ec:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80094f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094f4:	d505      	bpl.n	8009502 <sqrtf+0x32>
 80094f6:	f7ff feb7 	bl	8009268 <__errno>
 80094fa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80094fe:	2321      	movs	r3, #33	; 0x21
 8009500:	6003      	str	r3, [r0, #0]
 8009502:	ecbd 8b02 	vpop	{d8}
 8009506:	bd08      	pop	{r3, pc}
	...

08009510 <__ieee754_pow>:
 8009510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009514:	ed2d 8b06 	vpush	{d8-d10}
 8009518:	b089      	sub	sp, #36	; 0x24
 800951a:	ed8d 1b00 	vstr	d1, [sp]
 800951e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009522:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009526:	ea58 0102 	orrs.w	r1, r8, r2
 800952a:	ec57 6b10 	vmov	r6, r7, d0
 800952e:	d115      	bne.n	800955c <__ieee754_pow+0x4c>
 8009530:	19b3      	adds	r3, r6, r6
 8009532:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009536:	4152      	adcs	r2, r2
 8009538:	4299      	cmp	r1, r3
 800953a:	4b89      	ldr	r3, [pc, #548]	; (8009760 <__ieee754_pow+0x250>)
 800953c:	4193      	sbcs	r3, r2
 800953e:	f080 84d2 	bcs.w	8009ee6 <__ieee754_pow+0x9d6>
 8009542:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009546:	4630      	mov	r0, r6
 8009548:	4639      	mov	r1, r7
 800954a:	f7f6 fe4b 	bl	80001e4 <__adddf3>
 800954e:	ec41 0b10 	vmov	d0, r0, r1
 8009552:	b009      	add	sp, #36	; 0x24
 8009554:	ecbd 8b06 	vpop	{d8-d10}
 8009558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800955c:	4b81      	ldr	r3, [pc, #516]	; (8009764 <__ieee754_pow+0x254>)
 800955e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009562:	429c      	cmp	r4, r3
 8009564:	ee10 aa10 	vmov	sl, s0
 8009568:	463d      	mov	r5, r7
 800956a:	dc06      	bgt.n	800957a <__ieee754_pow+0x6a>
 800956c:	d101      	bne.n	8009572 <__ieee754_pow+0x62>
 800956e:	2e00      	cmp	r6, #0
 8009570:	d1e7      	bne.n	8009542 <__ieee754_pow+0x32>
 8009572:	4598      	cmp	r8, r3
 8009574:	dc01      	bgt.n	800957a <__ieee754_pow+0x6a>
 8009576:	d10f      	bne.n	8009598 <__ieee754_pow+0x88>
 8009578:	b172      	cbz	r2, 8009598 <__ieee754_pow+0x88>
 800957a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800957e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009582:	ea55 050a 	orrs.w	r5, r5, sl
 8009586:	d1dc      	bne.n	8009542 <__ieee754_pow+0x32>
 8009588:	e9dd 3200 	ldrd	r3, r2, [sp]
 800958c:	18db      	adds	r3, r3, r3
 800958e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009592:	4152      	adcs	r2, r2
 8009594:	429d      	cmp	r5, r3
 8009596:	e7d0      	b.n	800953a <__ieee754_pow+0x2a>
 8009598:	2d00      	cmp	r5, #0
 800959a:	da3b      	bge.n	8009614 <__ieee754_pow+0x104>
 800959c:	4b72      	ldr	r3, [pc, #456]	; (8009768 <__ieee754_pow+0x258>)
 800959e:	4598      	cmp	r8, r3
 80095a0:	dc51      	bgt.n	8009646 <__ieee754_pow+0x136>
 80095a2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80095a6:	4598      	cmp	r8, r3
 80095a8:	f340 84ac 	ble.w	8009f04 <__ieee754_pow+0x9f4>
 80095ac:	ea4f 5328 	mov.w	r3, r8, asr #20
 80095b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80095b4:	2b14      	cmp	r3, #20
 80095b6:	dd0f      	ble.n	80095d8 <__ieee754_pow+0xc8>
 80095b8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80095bc:	fa22 f103 	lsr.w	r1, r2, r3
 80095c0:	fa01 f303 	lsl.w	r3, r1, r3
 80095c4:	4293      	cmp	r3, r2
 80095c6:	f040 849d 	bne.w	8009f04 <__ieee754_pow+0x9f4>
 80095ca:	f001 0101 	and.w	r1, r1, #1
 80095ce:	f1c1 0302 	rsb	r3, r1, #2
 80095d2:	9304      	str	r3, [sp, #16]
 80095d4:	b182      	cbz	r2, 80095f8 <__ieee754_pow+0xe8>
 80095d6:	e05f      	b.n	8009698 <__ieee754_pow+0x188>
 80095d8:	2a00      	cmp	r2, #0
 80095da:	d15b      	bne.n	8009694 <__ieee754_pow+0x184>
 80095dc:	f1c3 0314 	rsb	r3, r3, #20
 80095e0:	fa48 f103 	asr.w	r1, r8, r3
 80095e4:	fa01 f303 	lsl.w	r3, r1, r3
 80095e8:	4543      	cmp	r3, r8
 80095ea:	f040 8488 	bne.w	8009efe <__ieee754_pow+0x9ee>
 80095ee:	f001 0101 	and.w	r1, r1, #1
 80095f2:	f1c1 0302 	rsb	r3, r1, #2
 80095f6:	9304      	str	r3, [sp, #16]
 80095f8:	4b5c      	ldr	r3, [pc, #368]	; (800976c <__ieee754_pow+0x25c>)
 80095fa:	4598      	cmp	r8, r3
 80095fc:	d132      	bne.n	8009664 <__ieee754_pow+0x154>
 80095fe:	f1b9 0f00 	cmp.w	r9, #0
 8009602:	f280 8478 	bge.w	8009ef6 <__ieee754_pow+0x9e6>
 8009606:	4959      	ldr	r1, [pc, #356]	; (800976c <__ieee754_pow+0x25c>)
 8009608:	4632      	mov	r2, r6
 800960a:	463b      	mov	r3, r7
 800960c:	2000      	movs	r0, #0
 800960e:	f7f7 f8c9 	bl	80007a4 <__aeabi_ddiv>
 8009612:	e79c      	b.n	800954e <__ieee754_pow+0x3e>
 8009614:	2300      	movs	r3, #0
 8009616:	9304      	str	r3, [sp, #16]
 8009618:	2a00      	cmp	r2, #0
 800961a:	d13d      	bne.n	8009698 <__ieee754_pow+0x188>
 800961c:	4b51      	ldr	r3, [pc, #324]	; (8009764 <__ieee754_pow+0x254>)
 800961e:	4598      	cmp	r8, r3
 8009620:	d1ea      	bne.n	80095f8 <__ieee754_pow+0xe8>
 8009622:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009626:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800962a:	ea53 030a 	orrs.w	r3, r3, sl
 800962e:	f000 845a 	beq.w	8009ee6 <__ieee754_pow+0x9d6>
 8009632:	4b4f      	ldr	r3, [pc, #316]	; (8009770 <__ieee754_pow+0x260>)
 8009634:	429c      	cmp	r4, r3
 8009636:	dd08      	ble.n	800964a <__ieee754_pow+0x13a>
 8009638:	f1b9 0f00 	cmp.w	r9, #0
 800963c:	f2c0 8457 	blt.w	8009eee <__ieee754_pow+0x9de>
 8009640:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009644:	e783      	b.n	800954e <__ieee754_pow+0x3e>
 8009646:	2302      	movs	r3, #2
 8009648:	e7e5      	b.n	8009616 <__ieee754_pow+0x106>
 800964a:	f1b9 0f00 	cmp.w	r9, #0
 800964e:	f04f 0000 	mov.w	r0, #0
 8009652:	f04f 0100 	mov.w	r1, #0
 8009656:	f6bf af7a 	bge.w	800954e <__ieee754_pow+0x3e>
 800965a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800965e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009662:	e774      	b.n	800954e <__ieee754_pow+0x3e>
 8009664:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009668:	d106      	bne.n	8009678 <__ieee754_pow+0x168>
 800966a:	4632      	mov	r2, r6
 800966c:	463b      	mov	r3, r7
 800966e:	4630      	mov	r0, r6
 8009670:	4639      	mov	r1, r7
 8009672:	f7f6 ff6d 	bl	8000550 <__aeabi_dmul>
 8009676:	e76a      	b.n	800954e <__ieee754_pow+0x3e>
 8009678:	4b3e      	ldr	r3, [pc, #248]	; (8009774 <__ieee754_pow+0x264>)
 800967a:	4599      	cmp	r9, r3
 800967c:	d10c      	bne.n	8009698 <__ieee754_pow+0x188>
 800967e:	2d00      	cmp	r5, #0
 8009680:	db0a      	blt.n	8009698 <__ieee754_pow+0x188>
 8009682:	ec47 6b10 	vmov	d0, r6, r7
 8009686:	b009      	add	sp, #36	; 0x24
 8009688:	ecbd 8b06 	vpop	{d8-d10}
 800968c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009690:	f000 bc6c 	b.w	8009f6c <__ieee754_sqrt>
 8009694:	2300      	movs	r3, #0
 8009696:	9304      	str	r3, [sp, #16]
 8009698:	ec47 6b10 	vmov	d0, r6, r7
 800969c:	f001 f83c 	bl	800a718 <fabs>
 80096a0:	ec51 0b10 	vmov	r0, r1, d0
 80096a4:	f1ba 0f00 	cmp.w	sl, #0
 80096a8:	d129      	bne.n	80096fe <__ieee754_pow+0x1ee>
 80096aa:	b124      	cbz	r4, 80096b6 <__ieee754_pow+0x1a6>
 80096ac:	4b2f      	ldr	r3, [pc, #188]	; (800976c <__ieee754_pow+0x25c>)
 80096ae:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d123      	bne.n	80096fe <__ieee754_pow+0x1ee>
 80096b6:	f1b9 0f00 	cmp.w	r9, #0
 80096ba:	da05      	bge.n	80096c8 <__ieee754_pow+0x1b8>
 80096bc:	4602      	mov	r2, r0
 80096be:	460b      	mov	r3, r1
 80096c0:	2000      	movs	r0, #0
 80096c2:	492a      	ldr	r1, [pc, #168]	; (800976c <__ieee754_pow+0x25c>)
 80096c4:	f7f7 f86e 	bl	80007a4 <__aeabi_ddiv>
 80096c8:	2d00      	cmp	r5, #0
 80096ca:	f6bf af40 	bge.w	800954e <__ieee754_pow+0x3e>
 80096ce:	9b04      	ldr	r3, [sp, #16]
 80096d0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80096d4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80096d8:	4323      	orrs	r3, r4
 80096da:	d108      	bne.n	80096ee <__ieee754_pow+0x1de>
 80096dc:	4602      	mov	r2, r0
 80096de:	460b      	mov	r3, r1
 80096e0:	4610      	mov	r0, r2
 80096e2:	4619      	mov	r1, r3
 80096e4:	f7f6 fd7c 	bl	80001e0 <__aeabi_dsub>
 80096e8:	4602      	mov	r2, r0
 80096ea:	460b      	mov	r3, r1
 80096ec:	e78f      	b.n	800960e <__ieee754_pow+0xfe>
 80096ee:	9b04      	ldr	r3, [sp, #16]
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	f47f af2c 	bne.w	800954e <__ieee754_pow+0x3e>
 80096f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096fa:	4619      	mov	r1, r3
 80096fc:	e727      	b.n	800954e <__ieee754_pow+0x3e>
 80096fe:	0feb      	lsrs	r3, r5, #31
 8009700:	3b01      	subs	r3, #1
 8009702:	9306      	str	r3, [sp, #24]
 8009704:	9a06      	ldr	r2, [sp, #24]
 8009706:	9b04      	ldr	r3, [sp, #16]
 8009708:	4313      	orrs	r3, r2
 800970a:	d102      	bne.n	8009712 <__ieee754_pow+0x202>
 800970c:	4632      	mov	r2, r6
 800970e:	463b      	mov	r3, r7
 8009710:	e7e6      	b.n	80096e0 <__ieee754_pow+0x1d0>
 8009712:	4b19      	ldr	r3, [pc, #100]	; (8009778 <__ieee754_pow+0x268>)
 8009714:	4598      	cmp	r8, r3
 8009716:	f340 80fb 	ble.w	8009910 <__ieee754_pow+0x400>
 800971a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800971e:	4598      	cmp	r8, r3
 8009720:	4b13      	ldr	r3, [pc, #76]	; (8009770 <__ieee754_pow+0x260>)
 8009722:	dd0c      	ble.n	800973e <__ieee754_pow+0x22e>
 8009724:	429c      	cmp	r4, r3
 8009726:	dc0f      	bgt.n	8009748 <__ieee754_pow+0x238>
 8009728:	f1b9 0f00 	cmp.w	r9, #0
 800972c:	da0f      	bge.n	800974e <__ieee754_pow+0x23e>
 800972e:	2000      	movs	r0, #0
 8009730:	b009      	add	sp, #36	; 0x24
 8009732:	ecbd 8b06 	vpop	{d8-d10}
 8009736:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800973a:	f000 bfc1 	b.w	800a6c0 <__math_oflow>
 800973e:	429c      	cmp	r4, r3
 8009740:	dbf2      	blt.n	8009728 <__ieee754_pow+0x218>
 8009742:	4b0a      	ldr	r3, [pc, #40]	; (800976c <__ieee754_pow+0x25c>)
 8009744:	429c      	cmp	r4, r3
 8009746:	dd19      	ble.n	800977c <__ieee754_pow+0x26c>
 8009748:	f1b9 0f00 	cmp.w	r9, #0
 800974c:	dcef      	bgt.n	800972e <__ieee754_pow+0x21e>
 800974e:	2000      	movs	r0, #0
 8009750:	b009      	add	sp, #36	; 0x24
 8009752:	ecbd 8b06 	vpop	{d8-d10}
 8009756:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800975a:	f000 bfa8 	b.w	800a6ae <__math_uflow>
 800975e:	bf00      	nop
 8009760:	fff00000 	.word	0xfff00000
 8009764:	7ff00000 	.word	0x7ff00000
 8009768:	433fffff 	.word	0x433fffff
 800976c:	3ff00000 	.word	0x3ff00000
 8009770:	3fefffff 	.word	0x3fefffff
 8009774:	3fe00000 	.word	0x3fe00000
 8009778:	41e00000 	.word	0x41e00000
 800977c:	4b60      	ldr	r3, [pc, #384]	; (8009900 <__ieee754_pow+0x3f0>)
 800977e:	2200      	movs	r2, #0
 8009780:	f7f6 fd2e 	bl	80001e0 <__aeabi_dsub>
 8009784:	a354      	add	r3, pc, #336	; (adr r3, 80098d8 <__ieee754_pow+0x3c8>)
 8009786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978a:	4604      	mov	r4, r0
 800978c:	460d      	mov	r5, r1
 800978e:	f7f6 fedf 	bl	8000550 <__aeabi_dmul>
 8009792:	a353      	add	r3, pc, #332	; (adr r3, 80098e0 <__ieee754_pow+0x3d0>)
 8009794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009798:	4606      	mov	r6, r0
 800979a:	460f      	mov	r7, r1
 800979c:	4620      	mov	r0, r4
 800979e:	4629      	mov	r1, r5
 80097a0:	f7f6 fed6 	bl	8000550 <__aeabi_dmul>
 80097a4:	4b57      	ldr	r3, [pc, #348]	; (8009904 <__ieee754_pow+0x3f4>)
 80097a6:	4682      	mov	sl, r0
 80097a8:	468b      	mov	fp, r1
 80097aa:	2200      	movs	r2, #0
 80097ac:	4620      	mov	r0, r4
 80097ae:	4629      	mov	r1, r5
 80097b0:	f7f6 fece 	bl	8000550 <__aeabi_dmul>
 80097b4:	4602      	mov	r2, r0
 80097b6:	460b      	mov	r3, r1
 80097b8:	a14b      	add	r1, pc, #300	; (adr r1, 80098e8 <__ieee754_pow+0x3d8>)
 80097ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097be:	f7f6 fd0f 	bl	80001e0 <__aeabi_dsub>
 80097c2:	4622      	mov	r2, r4
 80097c4:	462b      	mov	r3, r5
 80097c6:	f7f6 fec3 	bl	8000550 <__aeabi_dmul>
 80097ca:	4602      	mov	r2, r0
 80097cc:	460b      	mov	r3, r1
 80097ce:	2000      	movs	r0, #0
 80097d0:	494d      	ldr	r1, [pc, #308]	; (8009908 <__ieee754_pow+0x3f8>)
 80097d2:	f7f6 fd05 	bl	80001e0 <__aeabi_dsub>
 80097d6:	4622      	mov	r2, r4
 80097d8:	4680      	mov	r8, r0
 80097da:	4689      	mov	r9, r1
 80097dc:	462b      	mov	r3, r5
 80097de:	4620      	mov	r0, r4
 80097e0:	4629      	mov	r1, r5
 80097e2:	f7f6 feb5 	bl	8000550 <__aeabi_dmul>
 80097e6:	4602      	mov	r2, r0
 80097e8:	460b      	mov	r3, r1
 80097ea:	4640      	mov	r0, r8
 80097ec:	4649      	mov	r1, r9
 80097ee:	f7f6 feaf 	bl	8000550 <__aeabi_dmul>
 80097f2:	a33f      	add	r3, pc, #252	; (adr r3, 80098f0 <__ieee754_pow+0x3e0>)
 80097f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f8:	f7f6 feaa 	bl	8000550 <__aeabi_dmul>
 80097fc:	4602      	mov	r2, r0
 80097fe:	460b      	mov	r3, r1
 8009800:	4650      	mov	r0, sl
 8009802:	4659      	mov	r1, fp
 8009804:	f7f6 fcec 	bl	80001e0 <__aeabi_dsub>
 8009808:	4602      	mov	r2, r0
 800980a:	460b      	mov	r3, r1
 800980c:	4680      	mov	r8, r0
 800980e:	4689      	mov	r9, r1
 8009810:	4630      	mov	r0, r6
 8009812:	4639      	mov	r1, r7
 8009814:	f7f6 fce6 	bl	80001e4 <__adddf3>
 8009818:	2000      	movs	r0, #0
 800981a:	4632      	mov	r2, r6
 800981c:	463b      	mov	r3, r7
 800981e:	4604      	mov	r4, r0
 8009820:	460d      	mov	r5, r1
 8009822:	f7f6 fcdd 	bl	80001e0 <__aeabi_dsub>
 8009826:	4602      	mov	r2, r0
 8009828:	460b      	mov	r3, r1
 800982a:	4640      	mov	r0, r8
 800982c:	4649      	mov	r1, r9
 800982e:	f7f6 fcd7 	bl	80001e0 <__aeabi_dsub>
 8009832:	9b04      	ldr	r3, [sp, #16]
 8009834:	9a06      	ldr	r2, [sp, #24]
 8009836:	3b01      	subs	r3, #1
 8009838:	4313      	orrs	r3, r2
 800983a:	4682      	mov	sl, r0
 800983c:	468b      	mov	fp, r1
 800983e:	f040 81e7 	bne.w	8009c10 <__ieee754_pow+0x700>
 8009842:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80098f8 <__ieee754_pow+0x3e8>
 8009846:	eeb0 8a47 	vmov.f32	s16, s14
 800984a:	eef0 8a67 	vmov.f32	s17, s15
 800984e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009852:	2600      	movs	r6, #0
 8009854:	4632      	mov	r2, r6
 8009856:	463b      	mov	r3, r7
 8009858:	e9dd 0100 	ldrd	r0, r1, [sp]
 800985c:	f7f6 fcc0 	bl	80001e0 <__aeabi_dsub>
 8009860:	4622      	mov	r2, r4
 8009862:	462b      	mov	r3, r5
 8009864:	f7f6 fe74 	bl	8000550 <__aeabi_dmul>
 8009868:	e9dd 2300 	ldrd	r2, r3, [sp]
 800986c:	4680      	mov	r8, r0
 800986e:	4689      	mov	r9, r1
 8009870:	4650      	mov	r0, sl
 8009872:	4659      	mov	r1, fp
 8009874:	f7f6 fe6c 	bl	8000550 <__aeabi_dmul>
 8009878:	4602      	mov	r2, r0
 800987a:	460b      	mov	r3, r1
 800987c:	4640      	mov	r0, r8
 800987e:	4649      	mov	r1, r9
 8009880:	f7f6 fcb0 	bl	80001e4 <__adddf3>
 8009884:	4632      	mov	r2, r6
 8009886:	463b      	mov	r3, r7
 8009888:	4680      	mov	r8, r0
 800988a:	4689      	mov	r9, r1
 800988c:	4620      	mov	r0, r4
 800988e:	4629      	mov	r1, r5
 8009890:	f7f6 fe5e 	bl	8000550 <__aeabi_dmul>
 8009894:	460b      	mov	r3, r1
 8009896:	4604      	mov	r4, r0
 8009898:	460d      	mov	r5, r1
 800989a:	4602      	mov	r2, r0
 800989c:	4649      	mov	r1, r9
 800989e:	4640      	mov	r0, r8
 80098a0:	f7f6 fca0 	bl	80001e4 <__adddf3>
 80098a4:	4b19      	ldr	r3, [pc, #100]	; (800990c <__ieee754_pow+0x3fc>)
 80098a6:	4299      	cmp	r1, r3
 80098a8:	ec45 4b19 	vmov	d9, r4, r5
 80098ac:	4606      	mov	r6, r0
 80098ae:	460f      	mov	r7, r1
 80098b0:	468b      	mov	fp, r1
 80098b2:	f340 82f1 	ble.w	8009e98 <__ieee754_pow+0x988>
 80098b6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80098ba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80098be:	4303      	orrs	r3, r0
 80098c0:	f000 81e4 	beq.w	8009c8c <__ieee754_pow+0x77c>
 80098c4:	ec51 0b18 	vmov	r0, r1, d8
 80098c8:	2200      	movs	r2, #0
 80098ca:	2300      	movs	r3, #0
 80098cc:	f7f7 f8b2 	bl	8000a34 <__aeabi_dcmplt>
 80098d0:	3800      	subs	r0, #0
 80098d2:	bf18      	it	ne
 80098d4:	2001      	movne	r0, #1
 80098d6:	e72b      	b.n	8009730 <__ieee754_pow+0x220>
 80098d8:	60000000 	.word	0x60000000
 80098dc:	3ff71547 	.word	0x3ff71547
 80098e0:	f85ddf44 	.word	0xf85ddf44
 80098e4:	3e54ae0b 	.word	0x3e54ae0b
 80098e8:	55555555 	.word	0x55555555
 80098ec:	3fd55555 	.word	0x3fd55555
 80098f0:	652b82fe 	.word	0x652b82fe
 80098f4:	3ff71547 	.word	0x3ff71547
 80098f8:	00000000 	.word	0x00000000
 80098fc:	bff00000 	.word	0xbff00000
 8009900:	3ff00000 	.word	0x3ff00000
 8009904:	3fd00000 	.word	0x3fd00000
 8009908:	3fe00000 	.word	0x3fe00000
 800990c:	408fffff 	.word	0x408fffff
 8009910:	4bd5      	ldr	r3, [pc, #852]	; (8009c68 <__ieee754_pow+0x758>)
 8009912:	402b      	ands	r3, r5
 8009914:	2200      	movs	r2, #0
 8009916:	b92b      	cbnz	r3, 8009924 <__ieee754_pow+0x414>
 8009918:	4bd4      	ldr	r3, [pc, #848]	; (8009c6c <__ieee754_pow+0x75c>)
 800991a:	f7f6 fe19 	bl	8000550 <__aeabi_dmul>
 800991e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009922:	460c      	mov	r4, r1
 8009924:	1523      	asrs	r3, r4, #20
 8009926:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800992a:	4413      	add	r3, r2
 800992c:	9305      	str	r3, [sp, #20]
 800992e:	4bd0      	ldr	r3, [pc, #832]	; (8009c70 <__ieee754_pow+0x760>)
 8009930:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009934:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009938:	429c      	cmp	r4, r3
 800993a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800993e:	dd08      	ble.n	8009952 <__ieee754_pow+0x442>
 8009940:	4bcc      	ldr	r3, [pc, #816]	; (8009c74 <__ieee754_pow+0x764>)
 8009942:	429c      	cmp	r4, r3
 8009944:	f340 8162 	ble.w	8009c0c <__ieee754_pow+0x6fc>
 8009948:	9b05      	ldr	r3, [sp, #20]
 800994a:	3301      	adds	r3, #1
 800994c:	9305      	str	r3, [sp, #20]
 800994e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009952:	2400      	movs	r4, #0
 8009954:	00e3      	lsls	r3, r4, #3
 8009956:	9307      	str	r3, [sp, #28]
 8009958:	4bc7      	ldr	r3, [pc, #796]	; (8009c78 <__ieee754_pow+0x768>)
 800995a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800995e:	ed93 7b00 	vldr	d7, [r3]
 8009962:	4629      	mov	r1, r5
 8009964:	ec53 2b17 	vmov	r2, r3, d7
 8009968:	eeb0 9a47 	vmov.f32	s18, s14
 800996c:	eef0 9a67 	vmov.f32	s19, s15
 8009970:	4682      	mov	sl, r0
 8009972:	f7f6 fc35 	bl	80001e0 <__aeabi_dsub>
 8009976:	4652      	mov	r2, sl
 8009978:	4606      	mov	r6, r0
 800997a:	460f      	mov	r7, r1
 800997c:	462b      	mov	r3, r5
 800997e:	ec51 0b19 	vmov	r0, r1, d9
 8009982:	f7f6 fc2f 	bl	80001e4 <__adddf3>
 8009986:	4602      	mov	r2, r0
 8009988:	460b      	mov	r3, r1
 800998a:	2000      	movs	r0, #0
 800998c:	49bb      	ldr	r1, [pc, #748]	; (8009c7c <__ieee754_pow+0x76c>)
 800998e:	f7f6 ff09 	bl	80007a4 <__aeabi_ddiv>
 8009992:	ec41 0b1a 	vmov	d10, r0, r1
 8009996:	4602      	mov	r2, r0
 8009998:	460b      	mov	r3, r1
 800999a:	4630      	mov	r0, r6
 800999c:	4639      	mov	r1, r7
 800999e:	f7f6 fdd7 	bl	8000550 <__aeabi_dmul>
 80099a2:	2300      	movs	r3, #0
 80099a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099a8:	9302      	str	r3, [sp, #8]
 80099aa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80099ae:	46ab      	mov	fp, r5
 80099b0:	106d      	asrs	r5, r5, #1
 80099b2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80099b6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80099ba:	ec41 0b18 	vmov	d8, r0, r1
 80099be:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80099c2:	2200      	movs	r2, #0
 80099c4:	4640      	mov	r0, r8
 80099c6:	4649      	mov	r1, r9
 80099c8:	4614      	mov	r4, r2
 80099ca:	461d      	mov	r5, r3
 80099cc:	f7f6 fdc0 	bl	8000550 <__aeabi_dmul>
 80099d0:	4602      	mov	r2, r0
 80099d2:	460b      	mov	r3, r1
 80099d4:	4630      	mov	r0, r6
 80099d6:	4639      	mov	r1, r7
 80099d8:	f7f6 fc02 	bl	80001e0 <__aeabi_dsub>
 80099dc:	ec53 2b19 	vmov	r2, r3, d9
 80099e0:	4606      	mov	r6, r0
 80099e2:	460f      	mov	r7, r1
 80099e4:	4620      	mov	r0, r4
 80099e6:	4629      	mov	r1, r5
 80099e8:	f7f6 fbfa 	bl	80001e0 <__aeabi_dsub>
 80099ec:	4602      	mov	r2, r0
 80099ee:	460b      	mov	r3, r1
 80099f0:	4650      	mov	r0, sl
 80099f2:	4659      	mov	r1, fp
 80099f4:	f7f6 fbf4 	bl	80001e0 <__aeabi_dsub>
 80099f8:	4642      	mov	r2, r8
 80099fa:	464b      	mov	r3, r9
 80099fc:	f7f6 fda8 	bl	8000550 <__aeabi_dmul>
 8009a00:	4602      	mov	r2, r0
 8009a02:	460b      	mov	r3, r1
 8009a04:	4630      	mov	r0, r6
 8009a06:	4639      	mov	r1, r7
 8009a08:	f7f6 fbea 	bl	80001e0 <__aeabi_dsub>
 8009a0c:	ec53 2b1a 	vmov	r2, r3, d10
 8009a10:	f7f6 fd9e 	bl	8000550 <__aeabi_dmul>
 8009a14:	ec53 2b18 	vmov	r2, r3, d8
 8009a18:	ec41 0b19 	vmov	d9, r0, r1
 8009a1c:	ec51 0b18 	vmov	r0, r1, d8
 8009a20:	f7f6 fd96 	bl	8000550 <__aeabi_dmul>
 8009a24:	a37c      	add	r3, pc, #496	; (adr r3, 8009c18 <__ieee754_pow+0x708>)
 8009a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2a:	4604      	mov	r4, r0
 8009a2c:	460d      	mov	r5, r1
 8009a2e:	f7f6 fd8f 	bl	8000550 <__aeabi_dmul>
 8009a32:	a37b      	add	r3, pc, #492	; (adr r3, 8009c20 <__ieee754_pow+0x710>)
 8009a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a38:	f7f6 fbd4 	bl	80001e4 <__adddf3>
 8009a3c:	4622      	mov	r2, r4
 8009a3e:	462b      	mov	r3, r5
 8009a40:	f7f6 fd86 	bl	8000550 <__aeabi_dmul>
 8009a44:	a378      	add	r3, pc, #480	; (adr r3, 8009c28 <__ieee754_pow+0x718>)
 8009a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4a:	f7f6 fbcb 	bl	80001e4 <__adddf3>
 8009a4e:	4622      	mov	r2, r4
 8009a50:	462b      	mov	r3, r5
 8009a52:	f7f6 fd7d 	bl	8000550 <__aeabi_dmul>
 8009a56:	a376      	add	r3, pc, #472	; (adr r3, 8009c30 <__ieee754_pow+0x720>)
 8009a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5c:	f7f6 fbc2 	bl	80001e4 <__adddf3>
 8009a60:	4622      	mov	r2, r4
 8009a62:	462b      	mov	r3, r5
 8009a64:	f7f6 fd74 	bl	8000550 <__aeabi_dmul>
 8009a68:	a373      	add	r3, pc, #460	; (adr r3, 8009c38 <__ieee754_pow+0x728>)
 8009a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6e:	f7f6 fbb9 	bl	80001e4 <__adddf3>
 8009a72:	4622      	mov	r2, r4
 8009a74:	462b      	mov	r3, r5
 8009a76:	f7f6 fd6b 	bl	8000550 <__aeabi_dmul>
 8009a7a:	a371      	add	r3, pc, #452	; (adr r3, 8009c40 <__ieee754_pow+0x730>)
 8009a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a80:	f7f6 fbb0 	bl	80001e4 <__adddf3>
 8009a84:	4622      	mov	r2, r4
 8009a86:	4606      	mov	r6, r0
 8009a88:	460f      	mov	r7, r1
 8009a8a:	462b      	mov	r3, r5
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	4629      	mov	r1, r5
 8009a90:	f7f6 fd5e 	bl	8000550 <__aeabi_dmul>
 8009a94:	4602      	mov	r2, r0
 8009a96:	460b      	mov	r3, r1
 8009a98:	4630      	mov	r0, r6
 8009a9a:	4639      	mov	r1, r7
 8009a9c:	f7f6 fd58 	bl	8000550 <__aeabi_dmul>
 8009aa0:	4642      	mov	r2, r8
 8009aa2:	4604      	mov	r4, r0
 8009aa4:	460d      	mov	r5, r1
 8009aa6:	464b      	mov	r3, r9
 8009aa8:	ec51 0b18 	vmov	r0, r1, d8
 8009aac:	f7f6 fb9a 	bl	80001e4 <__adddf3>
 8009ab0:	ec53 2b19 	vmov	r2, r3, d9
 8009ab4:	f7f6 fd4c 	bl	8000550 <__aeabi_dmul>
 8009ab8:	4622      	mov	r2, r4
 8009aba:	462b      	mov	r3, r5
 8009abc:	f7f6 fb92 	bl	80001e4 <__adddf3>
 8009ac0:	4642      	mov	r2, r8
 8009ac2:	4682      	mov	sl, r0
 8009ac4:	468b      	mov	fp, r1
 8009ac6:	464b      	mov	r3, r9
 8009ac8:	4640      	mov	r0, r8
 8009aca:	4649      	mov	r1, r9
 8009acc:	f7f6 fd40 	bl	8000550 <__aeabi_dmul>
 8009ad0:	4b6b      	ldr	r3, [pc, #428]	; (8009c80 <__ieee754_pow+0x770>)
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	4606      	mov	r6, r0
 8009ad6:	460f      	mov	r7, r1
 8009ad8:	f7f6 fb84 	bl	80001e4 <__adddf3>
 8009adc:	4652      	mov	r2, sl
 8009ade:	465b      	mov	r3, fp
 8009ae0:	f7f6 fb80 	bl	80001e4 <__adddf3>
 8009ae4:	2000      	movs	r0, #0
 8009ae6:	4604      	mov	r4, r0
 8009ae8:	460d      	mov	r5, r1
 8009aea:	4602      	mov	r2, r0
 8009aec:	460b      	mov	r3, r1
 8009aee:	4640      	mov	r0, r8
 8009af0:	4649      	mov	r1, r9
 8009af2:	f7f6 fd2d 	bl	8000550 <__aeabi_dmul>
 8009af6:	4b62      	ldr	r3, [pc, #392]	; (8009c80 <__ieee754_pow+0x770>)
 8009af8:	4680      	mov	r8, r0
 8009afa:	4689      	mov	r9, r1
 8009afc:	2200      	movs	r2, #0
 8009afe:	4620      	mov	r0, r4
 8009b00:	4629      	mov	r1, r5
 8009b02:	f7f6 fb6d 	bl	80001e0 <__aeabi_dsub>
 8009b06:	4632      	mov	r2, r6
 8009b08:	463b      	mov	r3, r7
 8009b0a:	f7f6 fb69 	bl	80001e0 <__aeabi_dsub>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	460b      	mov	r3, r1
 8009b12:	4650      	mov	r0, sl
 8009b14:	4659      	mov	r1, fp
 8009b16:	f7f6 fb63 	bl	80001e0 <__aeabi_dsub>
 8009b1a:	ec53 2b18 	vmov	r2, r3, d8
 8009b1e:	f7f6 fd17 	bl	8000550 <__aeabi_dmul>
 8009b22:	4622      	mov	r2, r4
 8009b24:	4606      	mov	r6, r0
 8009b26:	460f      	mov	r7, r1
 8009b28:	462b      	mov	r3, r5
 8009b2a:	ec51 0b19 	vmov	r0, r1, d9
 8009b2e:	f7f6 fd0f 	bl	8000550 <__aeabi_dmul>
 8009b32:	4602      	mov	r2, r0
 8009b34:	460b      	mov	r3, r1
 8009b36:	4630      	mov	r0, r6
 8009b38:	4639      	mov	r1, r7
 8009b3a:	f7f6 fb53 	bl	80001e4 <__adddf3>
 8009b3e:	4606      	mov	r6, r0
 8009b40:	460f      	mov	r7, r1
 8009b42:	4602      	mov	r2, r0
 8009b44:	460b      	mov	r3, r1
 8009b46:	4640      	mov	r0, r8
 8009b48:	4649      	mov	r1, r9
 8009b4a:	f7f6 fb4b 	bl	80001e4 <__adddf3>
 8009b4e:	a33e      	add	r3, pc, #248	; (adr r3, 8009c48 <__ieee754_pow+0x738>)
 8009b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b54:	2000      	movs	r0, #0
 8009b56:	4604      	mov	r4, r0
 8009b58:	460d      	mov	r5, r1
 8009b5a:	f7f6 fcf9 	bl	8000550 <__aeabi_dmul>
 8009b5e:	4642      	mov	r2, r8
 8009b60:	ec41 0b18 	vmov	d8, r0, r1
 8009b64:	464b      	mov	r3, r9
 8009b66:	4620      	mov	r0, r4
 8009b68:	4629      	mov	r1, r5
 8009b6a:	f7f6 fb39 	bl	80001e0 <__aeabi_dsub>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	460b      	mov	r3, r1
 8009b72:	4630      	mov	r0, r6
 8009b74:	4639      	mov	r1, r7
 8009b76:	f7f6 fb33 	bl	80001e0 <__aeabi_dsub>
 8009b7a:	a335      	add	r3, pc, #212	; (adr r3, 8009c50 <__ieee754_pow+0x740>)
 8009b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b80:	f7f6 fce6 	bl	8000550 <__aeabi_dmul>
 8009b84:	a334      	add	r3, pc, #208	; (adr r3, 8009c58 <__ieee754_pow+0x748>)
 8009b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8a:	4606      	mov	r6, r0
 8009b8c:	460f      	mov	r7, r1
 8009b8e:	4620      	mov	r0, r4
 8009b90:	4629      	mov	r1, r5
 8009b92:	f7f6 fcdd 	bl	8000550 <__aeabi_dmul>
 8009b96:	4602      	mov	r2, r0
 8009b98:	460b      	mov	r3, r1
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	4639      	mov	r1, r7
 8009b9e:	f7f6 fb21 	bl	80001e4 <__adddf3>
 8009ba2:	9a07      	ldr	r2, [sp, #28]
 8009ba4:	4b37      	ldr	r3, [pc, #220]	; (8009c84 <__ieee754_pow+0x774>)
 8009ba6:	4413      	add	r3, r2
 8009ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bac:	f7f6 fb1a 	bl	80001e4 <__adddf3>
 8009bb0:	4682      	mov	sl, r0
 8009bb2:	9805      	ldr	r0, [sp, #20]
 8009bb4:	468b      	mov	fp, r1
 8009bb6:	f7f6 fc61 	bl	800047c <__aeabi_i2d>
 8009bba:	9a07      	ldr	r2, [sp, #28]
 8009bbc:	4b32      	ldr	r3, [pc, #200]	; (8009c88 <__ieee754_pow+0x778>)
 8009bbe:	4413      	add	r3, r2
 8009bc0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009bc4:	4606      	mov	r6, r0
 8009bc6:	460f      	mov	r7, r1
 8009bc8:	4652      	mov	r2, sl
 8009bca:	465b      	mov	r3, fp
 8009bcc:	ec51 0b18 	vmov	r0, r1, d8
 8009bd0:	f7f6 fb08 	bl	80001e4 <__adddf3>
 8009bd4:	4642      	mov	r2, r8
 8009bd6:	464b      	mov	r3, r9
 8009bd8:	f7f6 fb04 	bl	80001e4 <__adddf3>
 8009bdc:	4632      	mov	r2, r6
 8009bde:	463b      	mov	r3, r7
 8009be0:	f7f6 fb00 	bl	80001e4 <__adddf3>
 8009be4:	2000      	movs	r0, #0
 8009be6:	4632      	mov	r2, r6
 8009be8:	463b      	mov	r3, r7
 8009bea:	4604      	mov	r4, r0
 8009bec:	460d      	mov	r5, r1
 8009bee:	f7f6 faf7 	bl	80001e0 <__aeabi_dsub>
 8009bf2:	4642      	mov	r2, r8
 8009bf4:	464b      	mov	r3, r9
 8009bf6:	f7f6 faf3 	bl	80001e0 <__aeabi_dsub>
 8009bfa:	ec53 2b18 	vmov	r2, r3, d8
 8009bfe:	f7f6 faef 	bl	80001e0 <__aeabi_dsub>
 8009c02:	4602      	mov	r2, r0
 8009c04:	460b      	mov	r3, r1
 8009c06:	4650      	mov	r0, sl
 8009c08:	4659      	mov	r1, fp
 8009c0a:	e610      	b.n	800982e <__ieee754_pow+0x31e>
 8009c0c:	2401      	movs	r4, #1
 8009c0e:	e6a1      	b.n	8009954 <__ieee754_pow+0x444>
 8009c10:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009c60 <__ieee754_pow+0x750>
 8009c14:	e617      	b.n	8009846 <__ieee754_pow+0x336>
 8009c16:	bf00      	nop
 8009c18:	4a454eef 	.word	0x4a454eef
 8009c1c:	3fca7e28 	.word	0x3fca7e28
 8009c20:	93c9db65 	.word	0x93c9db65
 8009c24:	3fcd864a 	.word	0x3fcd864a
 8009c28:	a91d4101 	.word	0xa91d4101
 8009c2c:	3fd17460 	.word	0x3fd17460
 8009c30:	518f264d 	.word	0x518f264d
 8009c34:	3fd55555 	.word	0x3fd55555
 8009c38:	db6fabff 	.word	0xdb6fabff
 8009c3c:	3fdb6db6 	.word	0x3fdb6db6
 8009c40:	33333303 	.word	0x33333303
 8009c44:	3fe33333 	.word	0x3fe33333
 8009c48:	e0000000 	.word	0xe0000000
 8009c4c:	3feec709 	.word	0x3feec709
 8009c50:	dc3a03fd 	.word	0xdc3a03fd
 8009c54:	3feec709 	.word	0x3feec709
 8009c58:	145b01f5 	.word	0x145b01f5
 8009c5c:	be3e2fe0 	.word	0xbe3e2fe0
 8009c60:	00000000 	.word	0x00000000
 8009c64:	3ff00000 	.word	0x3ff00000
 8009c68:	7ff00000 	.word	0x7ff00000
 8009c6c:	43400000 	.word	0x43400000
 8009c70:	0003988e 	.word	0x0003988e
 8009c74:	000bb679 	.word	0x000bb679
 8009c78:	0800b238 	.word	0x0800b238
 8009c7c:	3ff00000 	.word	0x3ff00000
 8009c80:	40080000 	.word	0x40080000
 8009c84:	0800b258 	.word	0x0800b258
 8009c88:	0800b248 	.word	0x0800b248
 8009c8c:	a3b5      	add	r3, pc, #724	; (adr r3, 8009f64 <__ieee754_pow+0xa54>)
 8009c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c92:	4640      	mov	r0, r8
 8009c94:	4649      	mov	r1, r9
 8009c96:	f7f6 faa5 	bl	80001e4 <__adddf3>
 8009c9a:	4622      	mov	r2, r4
 8009c9c:	ec41 0b1a 	vmov	d10, r0, r1
 8009ca0:	462b      	mov	r3, r5
 8009ca2:	4630      	mov	r0, r6
 8009ca4:	4639      	mov	r1, r7
 8009ca6:	f7f6 fa9b 	bl	80001e0 <__aeabi_dsub>
 8009caa:	4602      	mov	r2, r0
 8009cac:	460b      	mov	r3, r1
 8009cae:	ec51 0b1a 	vmov	r0, r1, d10
 8009cb2:	f7f6 fedd 	bl	8000a70 <__aeabi_dcmpgt>
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	f47f ae04 	bne.w	80098c4 <__ieee754_pow+0x3b4>
 8009cbc:	4aa4      	ldr	r2, [pc, #656]	; (8009f50 <__ieee754_pow+0xa40>)
 8009cbe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	f340 8108 	ble.w	8009ed8 <__ieee754_pow+0x9c8>
 8009cc8:	151b      	asrs	r3, r3, #20
 8009cca:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009cce:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009cd2:	fa4a f303 	asr.w	r3, sl, r3
 8009cd6:	445b      	add	r3, fp
 8009cd8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009cdc:	4e9d      	ldr	r6, [pc, #628]	; (8009f54 <__ieee754_pow+0xa44>)
 8009cde:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009ce2:	4116      	asrs	r6, r2
 8009ce4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009ce8:	2000      	movs	r0, #0
 8009cea:	ea23 0106 	bic.w	r1, r3, r6
 8009cee:	f1c2 0214 	rsb	r2, r2, #20
 8009cf2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009cf6:	fa4a fa02 	asr.w	sl, sl, r2
 8009cfa:	f1bb 0f00 	cmp.w	fp, #0
 8009cfe:	4602      	mov	r2, r0
 8009d00:	460b      	mov	r3, r1
 8009d02:	4620      	mov	r0, r4
 8009d04:	4629      	mov	r1, r5
 8009d06:	bfb8      	it	lt
 8009d08:	f1ca 0a00 	rsblt	sl, sl, #0
 8009d0c:	f7f6 fa68 	bl	80001e0 <__aeabi_dsub>
 8009d10:	ec41 0b19 	vmov	d9, r0, r1
 8009d14:	4642      	mov	r2, r8
 8009d16:	464b      	mov	r3, r9
 8009d18:	ec51 0b19 	vmov	r0, r1, d9
 8009d1c:	f7f6 fa62 	bl	80001e4 <__adddf3>
 8009d20:	a37b      	add	r3, pc, #492	; (adr r3, 8009f10 <__ieee754_pow+0xa00>)
 8009d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d26:	2000      	movs	r0, #0
 8009d28:	4604      	mov	r4, r0
 8009d2a:	460d      	mov	r5, r1
 8009d2c:	f7f6 fc10 	bl	8000550 <__aeabi_dmul>
 8009d30:	ec53 2b19 	vmov	r2, r3, d9
 8009d34:	4606      	mov	r6, r0
 8009d36:	460f      	mov	r7, r1
 8009d38:	4620      	mov	r0, r4
 8009d3a:	4629      	mov	r1, r5
 8009d3c:	f7f6 fa50 	bl	80001e0 <__aeabi_dsub>
 8009d40:	4602      	mov	r2, r0
 8009d42:	460b      	mov	r3, r1
 8009d44:	4640      	mov	r0, r8
 8009d46:	4649      	mov	r1, r9
 8009d48:	f7f6 fa4a 	bl	80001e0 <__aeabi_dsub>
 8009d4c:	a372      	add	r3, pc, #456	; (adr r3, 8009f18 <__ieee754_pow+0xa08>)
 8009d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d52:	f7f6 fbfd 	bl	8000550 <__aeabi_dmul>
 8009d56:	a372      	add	r3, pc, #456	; (adr r3, 8009f20 <__ieee754_pow+0xa10>)
 8009d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5c:	4680      	mov	r8, r0
 8009d5e:	4689      	mov	r9, r1
 8009d60:	4620      	mov	r0, r4
 8009d62:	4629      	mov	r1, r5
 8009d64:	f7f6 fbf4 	bl	8000550 <__aeabi_dmul>
 8009d68:	4602      	mov	r2, r0
 8009d6a:	460b      	mov	r3, r1
 8009d6c:	4640      	mov	r0, r8
 8009d6e:	4649      	mov	r1, r9
 8009d70:	f7f6 fa38 	bl	80001e4 <__adddf3>
 8009d74:	4604      	mov	r4, r0
 8009d76:	460d      	mov	r5, r1
 8009d78:	4602      	mov	r2, r0
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	4630      	mov	r0, r6
 8009d7e:	4639      	mov	r1, r7
 8009d80:	f7f6 fa30 	bl	80001e4 <__adddf3>
 8009d84:	4632      	mov	r2, r6
 8009d86:	463b      	mov	r3, r7
 8009d88:	4680      	mov	r8, r0
 8009d8a:	4689      	mov	r9, r1
 8009d8c:	f7f6 fa28 	bl	80001e0 <__aeabi_dsub>
 8009d90:	4602      	mov	r2, r0
 8009d92:	460b      	mov	r3, r1
 8009d94:	4620      	mov	r0, r4
 8009d96:	4629      	mov	r1, r5
 8009d98:	f7f6 fa22 	bl	80001e0 <__aeabi_dsub>
 8009d9c:	4642      	mov	r2, r8
 8009d9e:	4606      	mov	r6, r0
 8009da0:	460f      	mov	r7, r1
 8009da2:	464b      	mov	r3, r9
 8009da4:	4640      	mov	r0, r8
 8009da6:	4649      	mov	r1, r9
 8009da8:	f7f6 fbd2 	bl	8000550 <__aeabi_dmul>
 8009dac:	a35e      	add	r3, pc, #376	; (adr r3, 8009f28 <__ieee754_pow+0xa18>)
 8009dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db2:	4604      	mov	r4, r0
 8009db4:	460d      	mov	r5, r1
 8009db6:	f7f6 fbcb 	bl	8000550 <__aeabi_dmul>
 8009dba:	a35d      	add	r3, pc, #372	; (adr r3, 8009f30 <__ieee754_pow+0xa20>)
 8009dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc0:	f7f6 fa0e 	bl	80001e0 <__aeabi_dsub>
 8009dc4:	4622      	mov	r2, r4
 8009dc6:	462b      	mov	r3, r5
 8009dc8:	f7f6 fbc2 	bl	8000550 <__aeabi_dmul>
 8009dcc:	a35a      	add	r3, pc, #360	; (adr r3, 8009f38 <__ieee754_pow+0xa28>)
 8009dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd2:	f7f6 fa07 	bl	80001e4 <__adddf3>
 8009dd6:	4622      	mov	r2, r4
 8009dd8:	462b      	mov	r3, r5
 8009dda:	f7f6 fbb9 	bl	8000550 <__aeabi_dmul>
 8009dde:	a358      	add	r3, pc, #352	; (adr r3, 8009f40 <__ieee754_pow+0xa30>)
 8009de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de4:	f7f6 f9fc 	bl	80001e0 <__aeabi_dsub>
 8009de8:	4622      	mov	r2, r4
 8009dea:	462b      	mov	r3, r5
 8009dec:	f7f6 fbb0 	bl	8000550 <__aeabi_dmul>
 8009df0:	a355      	add	r3, pc, #340	; (adr r3, 8009f48 <__ieee754_pow+0xa38>)
 8009df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df6:	f7f6 f9f5 	bl	80001e4 <__adddf3>
 8009dfa:	4622      	mov	r2, r4
 8009dfc:	462b      	mov	r3, r5
 8009dfe:	f7f6 fba7 	bl	8000550 <__aeabi_dmul>
 8009e02:	4602      	mov	r2, r0
 8009e04:	460b      	mov	r3, r1
 8009e06:	4640      	mov	r0, r8
 8009e08:	4649      	mov	r1, r9
 8009e0a:	f7f6 f9e9 	bl	80001e0 <__aeabi_dsub>
 8009e0e:	4604      	mov	r4, r0
 8009e10:	460d      	mov	r5, r1
 8009e12:	4602      	mov	r2, r0
 8009e14:	460b      	mov	r3, r1
 8009e16:	4640      	mov	r0, r8
 8009e18:	4649      	mov	r1, r9
 8009e1a:	f7f6 fb99 	bl	8000550 <__aeabi_dmul>
 8009e1e:	2200      	movs	r2, #0
 8009e20:	ec41 0b19 	vmov	d9, r0, r1
 8009e24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009e28:	4620      	mov	r0, r4
 8009e2a:	4629      	mov	r1, r5
 8009e2c:	f7f6 f9d8 	bl	80001e0 <__aeabi_dsub>
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	ec51 0b19 	vmov	r0, r1, d9
 8009e38:	f7f6 fcb4 	bl	80007a4 <__aeabi_ddiv>
 8009e3c:	4632      	mov	r2, r6
 8009e3e:	4604      	mov	r4, r0
 8009e40:	460d      	mov	r5, r1
 8009e42:	463b      	mov	r3, r7
 8009e44:	4640      	mov	r0, r8
 8009e46:	4649      	mov	r1, r9
 8009e48:	f7f6 fb82 	bl	8000550 <__aeabi_dmul>
 8009e4c:	4632      	mov	r2, r6
 8009e4e:	463b      	mov	r3, r7
 8009e50:	f7f6 f9c8 	bl	80001e4 <__adddf3>
 8009e54:	4602      	mov	r2, r0
 8009e56:	460b      	mov	r3, r1
 8009e58:	4620      	mov	r0, r4
 8009e5a:	4629      	mov	r1, r5
 8009e5c:	f7f6 f9c0 	bl	80001e0 <__aeabi_dsub>
 8009e60:	4642      	mov	r2, r8
 8009e62:	464b      	mov	r3, r9
 8009e64:	f7f6 f9bc 	bl	80001e0 <__aeabi_dsub>
 8009e68:	460b      	mov	r3, r1
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	493a      	ldr	r1, [pc, #232]	; (8009f58 <__ieee754_pow+0xa48>)
 8009e6e:	2000      	movs	r0, #0
 8009e70:	f7f6 f9b6 	bl	80001e0 <__aeabi_dsub>
 8009e74:	ec41 0b10 	vmov	d0, r0, r1
 8009e78:	ee10 3a90 	vmov	r3, s1
 8009e7c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009e80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e84:	da2b      	bge.n	8009ede <__ieee754_pow+0x9ce>
 8009e86:	4650      	mov	r0, sl
 8009e88:	f000 fc5a 	bl	800a740 <scalbn>
 8009e8c:	ec51 0b10 	vmov	r0, r1, d0
 8009e90:	ec53 2b18 	vmov	r2, r3, d8
 8009e94:	f7ff bbed 	b.w	8009672 <__ieee754_pow+0x162>
 8009e98:	4b30      	ldr	r3, [pc, #192]	; (8009f5c <__ieee754_pow+0xa4c>)
 8009e9a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009e9e:	429e      	cmp	r6, r3
 8009ea0:	f77f af0c 	ble.w	8009cbc <__ieee754_pow+0x7ac>
 8009ea4:	4b2e      	ldr	r3, [pc, #184]	; (8009f60 <__ieee754_pow+0xa50>)
 8009ea6:	440b      	add	r3, r1
 8009ea8:	4303      	orrs	r3, r0
 8009eaa:	d009      	beq.n	8009ec0 <__ieee754_pow+0x9b0>
 8009eac:	ec51 0b18 	vmov	r0, r1, d8
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	f7f6 fdbe 	bl	8000a34 <__aeabi_dcmplt>
 8009eb8:	3800      	subs	r0, #0
 8009eba:	bf18      	it	ne
 8009ebc:	2001      	movne	r0, #1
 8009ebe:	e447      	b.n	8009750 <__ieee754_pow+0x240>
 8009ec0:	4622      	mov	r2, r4
 8009ec2:	462b      	mov	r3, r5
 8009ec4:	f7f6 f98c 	bl	80001e0 <__aeabi_dsub>
 8009ec8:	4642      	mov	r2, r8
 8009eca:	464b      	mov	r3, r9
 8009ecc:	f7f6 fdc6 	bl	8000a5c <__aeabi_dcmpge>
 8009ed0:	2800      	cmp	r0, #0
 8009ed2:	f43f aef3 	beq.w	8009cbc <__ieee754_pow+0x7ac>
 8009ed6:	e7e9      	b.n	8009eac <__ieee754_pow+0x99c>
 8009ed8:	f04f 0a00 	mov.w	sl, #0
 8009edc:	e71a      	b.n	8009d14 <__ieee754_pow+0x804>
 8009ede:	ec51 0b10 	vmov	r0, r1, d0
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	e7d4      	b.n	8009e90 <__ieee754_pow+0x980>
 8009ee6:	491c      	ldr	r1, [pc, #112]	; (8009f58 <__ieee754_pow+0xa48>)
 8009ee8:	2000      	movs	r0, #0
 8009eea:	f7ff bb30 	b.w	800954e <__ieee754_pow+0x3e>
 8009eee:	2000      	movs	r0, #0
 8009ef0:	2100      	movs	r1, #0
 8009ef2:	f7ff bb2c 	b.w	800954e <__ieee754_pow+0x3e>
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	4639      	mov	r1, r7
 8009efa:	f7ff bb28 	b.w	800954e <__ieee754_pow+0x3e>
 8009efe:	9204      	str	r2, [sp, #16]
 8009f00:	f7ff bb7a 	b.w	80095f8 <__ieee754_pow+0xe8>
 8009f04:	2300      	movs	r3, #0
 8009f06:	f7ff bb64 	b.w	80095d2 <__ieee754_pow+0xc2>
 8009f0a:	bf00      	nop
 8009f0c:	f3af 8000 	nop.w
 8009f10:	00000000 	.word	0x00000000
 8009f14:	3fe62e43 	.word	0x3fe62e43
 8009f18:	fefa39ef 	.word	0xfefa39ef
 8009f1c:	3fe62e42 	.word	0x3fe62e42
 8009f20:	0ca86c39 	.word	0x0ca86c39
 8009f24:	be205c61 	.word	0xbe205c61
 8009f28:	72bea4d0 	.word	0x72bea4d0
 8009f2c:	3e663769 	.word	0x3e663769
 8009f30:	c5d26bf1 	.word	0xc5d26bf1
 8009f34:	3ebbbd41 	.word	0x3ebbbd41
 8009f38:	af25de2c 	.word	0xaf25de2c
 8009f3c:	3f11566a 	.word	0x3f11566a
 8009f40:	16bebd93 	.word	0x16bebd93
 8009f44:	3f66c16c 	.word	0x3f66c16c
 8009f48:	5555553e 	.word	0x5555553e
 8009f4c:	3fc55555 	.word	0x3fc55555
 8009f50:	3fe00000 	.word	0x3fe00000
 8009f54:	000fffff 	.word	0x000fffff
 8009f58:	3ff00000 	.word	0x3ff00000
 8009f5c:	4090cbff 	.word	0x4090cbff
 8009f60:	3f6f3400 	.word	0x3f6f3400
 8009f64:	652b82fe 	.word	0x652b82fe
 8009f68:	3c971547 	.word	0x3c971547

08009f6c <__ieee754_sqrt>:
 8009f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f70:	ec55 4b10 	vmov	r4, r5, d0
 8009f74:	4e55      	ldr	r6, [pc, #340]	; (800a0cc <__ieee754_sqrt+0x160>)
 8009f76:	43ae      	bics	r6, r5
 8009f78:	ee10 0a10 	vmov	r0, s0
 8009f7c:	ee10 3a10 	vmov	r3, s0
 8009f80:	462a      	mov	r2, r5
 8009f82:	4629      	mov	r1, r5
 8009f84:	d110      	bne.n	8009fa8 <__ieee754_sqrt+0x3c>
 8009f86:	ee10 2a10 	vmov	r2, s0
 8009f8a:	462b      	mov	r3, r5
 8009f8c:	f7f6 fae0 	bl	8000550 <__aeabi_dmul>
 8009f90:	4602      	mov	r2, r0
 8009f92:	460b      	mov	r3, r1
 8009f94:	4620      	mov	r0, r4
 8009f96:	4629      	mov	r1, r5
 8009f98:	f7f6 f924 	bl	80001e4 <__adddf3>
 8009f9c:	4604      	mov	r4, r0
 8009f9e:	460d      	mov	r5, r1
 8009fa0:	ec45 4b10 	vmov	d0, r4, r5
 8009fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fa8:	2d00      	cmp	r5, #0
 8009faa:	dc10      	bgt.n	8009fce <__ieee754_sqrt+0x62>
 8009fac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009fb0:	4330      	orrs	r0, r6
 8009fb2:	d0f5      	beq.n	8009fa0 <__ieee754_sqrt+0x34>
 8009fb4:	b15d      	cbz	r5, 8009fce <__ieee754_sqrt+0x62>
 8009fb6:	ee10 2a10 	vmov	r2, s0
 8009fba:	462b      	mov	r3, r5
 8009fbc:	ee10 0a10 	vmov	r0, s0
 8009fc0:	f7f6 f90e 	bl	80001e0 <__aeabi_dsub>
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	f7f6 fbec 	bl	80007a4 <__aeabi_ddiv>
 8009fcc:	e7e6      	b.n	8009f9c <__ieee754_sqrt+0x30>
 8009fce:	1512      	asrs	r2, r2, #20
 8009fd0:	d074      	beq.n	800a0bc <__ieee754_sqrt+0x150>
 8009fd2:	07d4      	lsls	r4, r2, #31
 8009fd4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009fd8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009fdc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009fe0:	bf5e      	ittt	pl
 8009fe2:	0fda      	lsrpl	r2, r3, #31
 8009fe4:	005b      	lslpl	r3, r3, #1
 8009fe6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009fea:	2400      	movs	r4, #0
 8009fec:	0fda      	lsrs	r2, r3, #31
 8009fee:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009ff2:	107f      	asrs	r7, r7, #1
 8009ff4:	005b      	lsls	r3, r3, #1
 8009ff6:	2516      	movs	r5, #22
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009ffe:	1886      	adds	r6, r0, r2
 800a000:	428e      	cmp	r6, r1
 800a002:	bfde      	ittt	le
 800a004:	1b89      	suble	r1, r1, r6
 800a006:	18b0      	addle	r0, r6, r2
 800a008:	18a4      	addle	r4, r4, r2
 800a00a:	0049      	lsls	r1, r1, #1
 800a00c:	3d01      	subs	r5, #1
 800a00e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a012:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a016:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a01a:	d1f0      	bne.n	8009ffe <__ieee754_sqrt+0x92>
 800a01c:	462a      	mov	r2, r5
 800a01e:	f04f 0e20 	mov.w	lr, #32
 800a022:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a026:	4281      	cmp	r1, r0
 800a028:	eb06 0c05 	add.w	ip, r6, r5
 800a02c:	dc02      	bgt.n	800a034 <__ieee754_sqrt+0xc8>
 800a02e:	d113      	bne.n	800a058 <__ieee754_sqrt+0xec>
 800a030:	459c      	cmp	ip, r3
 800a032:	d811      	bhi.n	800a058 <__ieee754_sqrt+0xec>
 800a034:	f1bc 0f00 	cmp.w	ip, #0
 800a038:	eb0c 0506 	add.w	r5, ip, r6
 800a03c:	da43      	bge.n	800a0c6 <__ieee754_sqrt+0x15a>
 800a03e:	2d00      	cmp	r5, #0
 800a040:	db41      	blt.n	800a0c6 <__ieee754_sqrt+0x15a>
 800a042:	f100 0801 	add.w	r8, r0, #1
 800a046:	1a09      	subs	r1, r1, r0
 800a048:	459c      	cmp	ip, r3
 800a04a:	bf88      	it	hi
 800a04c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800a050:	eba3 030c 	sub.w	r3, r3, ip
 800a054:	4432      	add	r2, r6
 800a056:	4640      	mov	r0, r8
 800a058:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a05c:	f1be 0e01 	subs.w	lr, lr, #1
 800a060:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a064:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a068:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a06c:	d1db      	bne.n	800a026 <__ieee754_sqrt+0xba>
 800a06e:	430b      	orrs	r3, r1
 800a070:	d006      	beq.n	800a080 <__ieee754_sqrt+0x114>
 800a072:	1c50      	adds	r0, r2, #1
 800a074:	bf13      	iteet	ne
 800a076:	3201      	addne	r2, #1
 800a078:	3401      	addeq	r4, #1
 800a07a:	4672      	moveq	r2, lr
 800a07c:	f022 0201 	bicne.w	r2, r2, #1
 800a080:	1063      	asrs	r3, r4, #1
 800a082:	0852      	lsrs	r2, r2, #1
 800a084:	07e1      	lsls	r1, r4, #31
 800a086:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a08a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a08e:	bf48      	it	mi
 800a090:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a094:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a098:	4614      	mov	r4, r2
 800a09a:	e781      	b.n	8009fa0 <__ieee754_sqrt+0x34>
 800a09c:	0ad9      	lsrs	r1, r3, #11
 800a09e:	3815      	subs	r0, #21
 800a0a0:	055b      	lsls	r3, r3, #21
 800a0a2:	2900      	cmp	r1, #0
 800a0a4:	d0fa      	beq.n	800a09c <__ieee754_sqrt+0x130>
 800a0a6:	02cd      	lsls	r5, r1, #11
 800a0a8:	d50a      	bpl.n	800a0c0 <__ieee754_sqrt+0x154>
 800a0aa:	f1c2 0420 	rsb	r4, r2, #32
 800a0ae:	fa23 f404 	lsr.w	r4, r3, r4
 800a0b2:	1e55      	subs	r5, r2, #1
 800a0b4:	4093      	lsls	r3, r2
 800a0b6:	4321      	orrs	r1, r4
 800a0b8:	1b42      	subs	r2, r0, r5
 800a0ba:	e78a      	b.n	8009fd2 <__ieee754_sqrt+0x66>
 800a0bc:	4610      	mov	r0, r2
 800a0be:	e7f0      	b.n	800a0a2 <__ieee754_sqrt+0x136>
 800a0c0:	0049      	lsls	r1, r1, #1
 800a0c2:	3201      	adds	r2, #1
 800a0c4:	e7ef      	b.n	800a0a6 <__ieee754_sqrt+0x13a>
 800a0c6:	4680      	mov	r8, r0
 800a0c8:	e7bd      	b.n	800a046 <__ieee754_sqrt+0xda>
 800a0ca:	bf00      	nop
 800a0cc:	7ff00000 	.word	0x7ff00000

0800a0d0 <__ieee754_powf>:
 800a0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0d4:	ee10 4a90 	vmov	r4, s1
 800a0d8:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800a0dc:	ed2d 8b02 	vpush	{d8}
 800a0e0:	ee10 6a10 	vmov	r6, s0
 800a0e4:	eeb0 8a40 	vmov.f32	s16, s0
 800a0e8:	eef0 8a60 	vmov.f32	s17, s1
 800a0ec:	d10c      	bne.n	800a108 <__ieee754_powf+0x38>
 800a0ee:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800a0f2:	0076      	lsls	r6, r6, #1
 800a0f4:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800a0f8:	f240 8296 	bls.w	800a628 <__ieee754_powf+0x558>
 800a0fc:	ee38 0a28 	vadd.f32	s0, s16, s17
 800a100:	ecbd 8b02 	vpop	{d8}
 800a104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a108:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a10c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800a110:	dcf4      	bgt.n	800a0fc <__ieee754_powf+0x2c>
 800a112:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800a116:	dd08      	ble.n	800a12a <__ieee754_powf+0x5a>
 800a118:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800a11c:	d1ee      	bne.n	800a0fc <__ieee754_powf+0x2c>
 800a11e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800a122:	0064      	lsls	r4, r4, #1
 800a124:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800a128:	e7e6      	b.n	800a0f8 <__ieee754_powf+0x28>
 800a12a:	2e00      	cmp	r6, #0
 800a12c:	da20      	bge.n	800a170 <__ieee754_powf+0xa0>
 800a12e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800a132:	da2d      	bge.n	800a190 <__ieee754_powf+0xc0>
 800a134:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800a138:	f2c0 827f 	blt.w	800a63a <__ieee754_powf+0x56a>
 800a13c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800a140:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800a144:	fa48 f703 	asr.w	r7, r8, r3
 800a148:	fa07 f303 	lsl.w	r3, r7, r3
 800a14c:	4543      	cmp	r3, r8
 800a14e:	f040 8274 	bne.w	800a63a <__ieee754_powf+0x56a>
 800a152:	f007 0701 	and.w	r7, r7, #1
 800a156:	f1c7 0702 	rsb	r7, r7, #2
 800a15a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800a15e:	d11f      	bne.n	800a1a0 <__ieee754_powf+0xd0>
 800a160:	2c00      	cmp	r4, #0
 800a162:	f280 8267 	bge.w	800a634 <__ieee754_powf+0x564>
 800a166:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a16a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800a16e:	e7c7      	b.n	800a100 <__ieee754_powf+0x30>
 800a170:	2700      	movs	r7, #0
 800a172:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800a176:	d1f0      	bne.n	800a15a <__ieee754_powf+0x8a>
 800a178:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800a17c:	f000 8254 	beq.w	800a628 <__ieee754_powf+0x558>
 800a180:	dd08      	ble.n	800a194 <__ieee754_powf+0xc4>
 800a182:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800a48c <__ieee754_powf+0x3bc>
 800a186:	2c00      	cmp	r4, #0
 800a188:	bfa8      	it	ge
 800a18a:	eeb0 0a68 	vmovge.f32	s0, s17
 800a18e:	e7b7      	b.n	800a100 <__ieee754_powf+0x30>
 800a190:	2702      	movs	r7, #2
 800a192:	e7ee      	b.n	800a172 <__ieee754_powf+0xa2>
 800a194:	2c00      	cmp	r4, #0
 800a196:	f280 824a 	bge.w	800a62e <__ieee754_powf+0x55e>
 800a19a:	eeb1 0a68 	vneg.f32	s0, s17
 800a19e:	e7af      	b.n	800a100 <__ieee754_powf+0x30>
 800a1a0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800a1a4:	d102      	bne.n	800a1ac <__ieee754_powf+0xdc>
 800a1a6:	ee28 0a08 	vmul.f32	s0, s16, s16
 800a1aa:	e7a9      	b.n	800a100 <__ieee754_powf+0x30>
 800a1ac:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800a1b0:	eeb0 0a48 	vmov.f32	s0, s16
 800a1b4:	d107      	bne.n	800a1c6 <__ieee754_powf+0xf6>
 800a1b6:	2e00      	cmp	r6, #0
 800a1b8:	db05      	blt.n	800a1c6 <__ieee754_powf+0xf6>
 800a1ba:	ecbd 8b02 	vpop	{d8}
 800a1be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c2:	f000 ba53 	b.w	800a66c <__ieee754_sqrtf>
 800a1c6:	f000 fb41 	bl	800a84c <fabsf>
 800a1ca:	b125      	cbz	r5, 800a1d6 <__ieee754_powf+0x106>
 800a1cc:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800a1d0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800a1d4:	d116      	bne.n	800a204 <__ieee754_powf+0x134>
 800a1d6:	2c00      	cmp	r4, #0
 800a1d8:	bfbc      	itt	lt
 800a1da:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800a1de:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800a1e2:	2e00      	cmp	r6, #0
 800a1e4:	da8c      	bge.n	800a100 <__ieee754_powf+0x30>
 800a1e6:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800a1ea:	ea55 0307 	orrs.w	r3, r5, r7
 800a1ee:	d104      	bne.n	800a1fa <__ieee754_powf+0x12a>
 800a1f0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a1f4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a1f8:	e782      	b.n	800a100 <__ieee754_powf+0x30>
 800a1fa:	2f01      	cmp	r7, #1
 800a1fc:	d180      	bne.n	800a100 <__ieee754_powf+0x30>
 800a1fe:	eeb1 0a40 	vneg.f32	s0, s0
 800a202:	e77d      	b.n	800a100 <__ieee754_powf+0x30>
 800a204:	0ff0      	lsrs	r0, r6, #31
 800a206:	3801      	subs	r0, #1
 800a208:	ea57 0300 	orrs.w	r3, r7, r0
 800a20c:	d104      	bne.n	800a218 <__ieee754_powf+0x148>
 800a20e:	ee38 8a48 	vsub.f32	s16, s16, s16
 800a212:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800a216:	e773      	b.n	800a100 <__ieee754_powf+0x30>
 800a218:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800a21c:	dd74      	ble.n	800a308 <__ieee754_powf+0x238>
 800a21e:	4b9c      	ldr	r3, [pc, #624]	; (800a490 <__ieee754_powf+0x3c0>)
 800a220:	429d      	cmp	r5, r3
 800a222:	dc08      	bgt.n	800a236 <__ieee754_powf+0x166>
 800a224:	2c00      	cmp	r4, #0
 800a226:	da0b      	bge.n	800a240 <__ieee754_powf+0x170>
 800a228:	2000      	movs	r0, #0
 800a22a:	ecbd 8b02 	vpop	{d8}
 800a22e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a232:	f000 ba6b 	b.w	800a70c <__math_oflowf>
 800a236:	4b97      	ldr	r3, [pc, #604]	; (800a494 <__ieee754_powf+0x3c4>)
 800a238:	429d      	cmp	r5, r3
 800a23a:	dd08      	ble.n	800a24e <__ieee754_powf+0x17e>
 800a23c:	2c00      	cmp	r4, #0
 800a23e:	dcf3      	bgt.n	800a228 <__ieee754_powf+0x158>
 800a240:	2000      	movs	r0, #0
 800a242:	ecbd 8b02 	vpop	{d8}
 800a246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a24a:	f000 ba59 	b.w	800a700 <__math_uflowf>
 800a24e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a252:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a256:	eddf 6a90 	vldr	s13, [pc, #576]	; 800a498 <__ieee754_powf+0x3c8>
 800a25a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800a25e:	eee0 6a67 	vfms.f32	s13, s0, s15
 800a262:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a266:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800a26a:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a26e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a272:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800a49c <__ieee754_powf+0x3cc>
 800a276:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800a27a:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800a4a0 <__ieee754_powf+0x3d0>
 800a27e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a282:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800a4a4 <__ieee754_powf+0x3d4>
 800a286:	eef0 6a67 	vmov.f32	s13, s15
 800a28a:	eee0 6a07 	vfma.f32	s13, s0, s14
 800a28e:	ee16 3a90 	vmov	r3, s13
 800a292:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a296:	f023 030f 	bic.w	r3, r3, #15
 800a29a:	ee00 3a90 	vmov	s1, r3
 800a29e:	eee0 0a47 	vfms.f32	s1, s0, s14
 800a2a2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800a2a6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800a2aa:	f024 040f 	bic.w	r4, r4, #15
 800a2ae:	ee07 4a10 	vmov	s14, r4
 800a2b2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800a2b6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800a2ba:	ee07 3a90 	vmov	s15, r3
 800a2be:	eee7 0a27 	vfma.f32	s1, s14, s15
 800a2c2:	3f01      	subs	r7, #1
 800a2c4:	ea57 0200 	orrs.w	r2, r7, r0
 800a2c8:	ee07 4a10 	vmov	s14, r4
 800a2cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a2d0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800a2d4:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800a2d8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800a2dc:	ee17 4a10 	vmov	r4, s14
 800a2e0:	bf08      	it	eq
 800a2e2:	eeb0 8a40 	vmoveq.f32	s16, s0
 800a2e6:	2c00      	cmp	r4, #0
 800a2e8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a2ec:	f340 817e 	ble.w	800a5ec <__ieee754_powf+0x51c>
 800a2f0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800a2f4:	f340 80f8 	ble.w	800a4e8 <__ieee754_powf+0x418>
 800a2f8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a2fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a300:	bf4c      	ite	mi
 800a302:	2001      	movmi	r0, #1
 800a304:	2000      	movpl	r0, #0
 800a306:	e790      	b.n	800a22a <__ieee754_powf+0x15a>
 800a308:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800a30c:	bf01      	itttt	eq
 800a30e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800a4a8 <__ieee754_powf+0x3d8>
 800a312:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800a316:	f06f 0217 	mvneq.w	r2, #23
 800a31a:	ee17 5a90 	vmoveq	r5, s15
 800a31e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800a322:	bf18      	it	ne
 800a324:	2200      	movne	r2, #0
 800a326:	3b7f      	subs	r3, #127	; 0x7f
 800a328:	4413      	add	r3, r2
 800a32a:	4a60      	ldr	r2, [pc, #384]	; (800a4ac <__ieee754_powf+0x3dc>)
 800a32c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800a330:	4295      	cmp	r5, r2
 800a332:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800a336:	dd06      	ble.n	800a346 <__ieee754_powf+0x276>
 800a338:	4a5d      	ldr	r2, [pc, #372]	; (800a4b0 <__ieee754_powf+0x3e0>)
 800a33a:	4295      	cmp	r5, r2
 800a33c:	f340 80a4 	ble.w	800a488 <__ieee754_powf+0x3b8>
 800a340:	3301      	adds	r3, #1
 800a342:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800a346:	2500      	movs	r5, #0
 800a348:	4a5a      	ldr	r2, [pc, #360]	; (800a4b4 <__ieee754_powf+0x3e4>)
 800a34a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800a34e:	ee07 1a90 	vmov	s15, r1
 800a352:	ed92 7a00 	vldr	s14, [r2]
 800a356:	4a58      	ldr	r2, [pc, #352]	; (800a4b8 <__ieee754_powf+0x3e8>)
 800a358:	ee37 6a27 	vadd.f32	s12, s14, s15
 800a35c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a360:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800a364:	1049      	asrs	r1, r1, #1
 800a366:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800a36a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800a36e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800a372:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800a376:	ee06 1a10 	vmov	s12, r1
 800a37a:	ee65 4a26 	vmul.f32	s9, s10, s13
 800a37e:	ee36 7a47 	vsub.f32	s14, s12, s14
 800a382:	ee14 6a90 	vmov	r6, s9
 800a386:	4016      	ands	r6, r2
 800a388:	ee05 6a90 	vmov	s11, r6
 800a38c:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800a390:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a394:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800a4bc <__ieee754_powf+0x3ec>
 800a398:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800a39c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800a3a0:	ee25 6a26 	vmul.f32	s12, s10, s13
 800a3a4:	eddf 6a46 	vldr	s13, [pc, #280]	; 800a4c0 <__ieee754_powf+0x3f0>
 800a3a8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800a3ac:	eddf 6a45 	vldr	s13, [pc, #276]	; 800a4c4 <__ieee754_powf+0x3f4>
 800a3b0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a3b4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800a498 <__ieee754_powf+0x3c8>
 800a3b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a3bc:	eddf 6a42 	vldr	s13, [pc, #264]	; 800a4c8 <__ieee754_powf+0x3f8>
 800a3c0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a3c4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800a4cc <__ieee754_powf+0x3fc>
 800a3c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a3cc:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800a3d0:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800a3d4:	ee66 6a86 	vmul.f32	s13, s13, s12
 800a3d8:	eee5 6a07 	vfma.f32	s13, s10, s14
 800a3dc:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800a3e0:	eef0 7a45 	vmov.f32	s15, s10
 800a3e4:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800a3e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3ec:	ee17 1a90 	vmov	r1, s15
 800a3f0:	4011      	ands	r1, r2
 800a3f2:	ee07 1a90 	vmov	s15, r1
 800a3f6:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800a3fa:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800a3fe:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a402:	ee27 7a24 	vmul.f32	s14, s14, s9
 800a406:	eea6 7a27 	vfma.f32	s14, s12, s15
 800a40a:	eeb0 6a47 	vmov.f32	s12, s14
 800a40e:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800a412:	ee16 1a10 	vmov	r1, s12
 800a416:	4011      	ands	r1, r2
 800a418:	ee06 1a90 	vmov	s13, r1
 800a41c:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800a420:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800a4d0 <__ieee754_powf+0x400>
 800a424:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800a4d4 <__ieee754_powf+0x404>
 800a428:	ee37 7a66 	vsub.f32	s14, s14, s13
 800a42c:	ee06 1a10 	vmov	s12, r1
 800a430:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a434:	eddf 7a28 	vldr	s15, [pc, #160]	; 800a4d8 <__ieee754_powf+0x408>
 800a438:	4928      	ldr	r1, [pc, #160]	; (800a4dc <__ieee754_powf+0x40c>)
 800a43a:	eea6 7a27 	vfma.f32	s14, s12, s15
 800a43e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800a442:	edd1 7a00 	vldr	s15, [r1]
 800a446:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a44a:	ee07 3a90 	vmov	s15, r3
 800a44e:	4b24      	ldr	r3, [pc, #144]	; (800a4e0 <__ieee754_powf+0x410>)
 800a450:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a454:	eef0 7a47 	vmov.f32	s15, s14
 800a458:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a45c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a460:	edd5 0a00 	vldr	s1, [r5]
 800a464:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a468:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a46c:	ee17 3a90 	vmov	r3, s15
 800a470:	4013      	ands	r3, r2
 800a472:	ee07 3a90 	vmov	s15, r3
 800a476:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800a47a:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800a47e:	eee6 6a65 	vfms.f32	s13, s12, s11
 800a482:	ee77 7a66 	vsub.f32	s15, s14, s13
 800a486:	e70e      	b.n	800a2a6 <__ieee754_powf+0x1d6>
 800a488:	2501      	movs	r5, #1
 800a48a:	e75d      	b.n	800a348 <__ieee754_powf+0x278>
 800a48c:	00000000 	.word	0x00000000
 800a490:	3f7ffff3 	.word	0x3f7ffff3
 800a494:	3f800007 	.word	0x3f800007
 800a498:	3eaaaaab 	.word	0x3eaaaaab
 800a49c:	3fb8aa3b 	.word	0x3fb8aa3b
 800a4a0:	36eca570 	.word	0x36eca570
 800a4a4:	3fb8aa00 	.word	0x3fb8aa00
 800a4a8:	4b800000 	.word	0x4b800000
 800a4ac:	001cc471 	.word	0x001cc471
 800a4b0:	005db3d6 	.word	0x005db3d6
 800a4b4:	0800b268 	.word	0x0800b268
 800a4b8:	fffff000 	.word	0xfffff000
 800a4bc:	3e6c3255 	.word	0x3e6c3255
 800a4c0:	3e53f142 	.word	0x3e53f142
 800a4c4:	3e8ba305 	.word	0x3e8ba305
 800a4c8:	3edb6db7 	.word	0x3edb6db7
 800a4cc:	3f19999a 	.word	0x3f19999a
 800a4d0:	3f76384f 	.word	0x3f76384f
 800a4d4:	3f763800 	.word	0x3f763800
 800a4d8:	369dc3a0 	.word	0x369dc3a0
 800a4dc:	0800b278 	.word	0x0800b278
 800a4e0:	0800b270 	.word	0x0800b270
 800a4e4:	3338aa3c 	.word	0x3338aa3c
 800a4e8:	f040 8095 	bne.w	800a616 <__ieee754_powf+0x546>
 800a4ec:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800a4e4 <__ieee754_powf+0x414>
 800a4f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a4f4:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800a4f8:	eef4 6ac7 	vcmpe.f32	s13, s14
 800a4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a500:	f73f aefa 	bgt.w	800a2f8 <__ieee754_powf+0x228>
 800a504:	15db      	asrs	r3, r3, #23
 800a506:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800a50a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a50e:	4103      	asrs	r3, r0
 800a510:	4423      	add	r3, r4
 800a512:	494b      	ldr	r1, [pc, #300]	; (800a640 <__ieee754_powf+0x570>)
 800a514:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a518:	3a7f      	subs	r2, #127	; 0x7f
 800a51a:	4111      	asrs	r1, r2
 800a51c:	ea23 0101 	bic.w	r1, r3, r1
 800a520:	ee07 1a10 	vmov	s14, r1
 800a524:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800a528:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800a52c:	f1c2 0217 	rsb	r2, r2, #23
 800a530:	4110      	asrs	r0, r2
 800a532:	2c00      	cmp	r4, #0
 800a534:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a538:	bfb8      	it	lt
 800a53a:	4240      	neglt	r0, r0
 800a53c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800a540:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800a644 <__ieee754_powf+0x574>
 800a544:	eddf 6a40 	vldr	s13, [pc, #256]	; 800a648 <__ieee754_powf+0x578>
 800a548:	ee17 3a10 	vmov	r3, s14
 800a54c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a550:	f023 030f 	bic.w	r3, r3, #15
 800a554:	ee07 3a10 	vmov	s14, r3
 800a558:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a55c:	ee27 0a00 	vmul.f32	s0, s14, s0
 800a560:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800a564:	eddf 7a39 	vldr	s15, [pc, #228]	; 800a64c <__ieee754_powf+0x57c>
 800a568:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800a56c:	eef0 7a40 	vmov.f32	s15, s0
 800a570:	eee7 7a26 	vfma.f32	s15, s14, s13
 800a574:	eeb0 6a67 	vmov.f32	s12, s15
 800a578:	eea7 6a66 	vfms.f32	s12, s14, s13
 800a57c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800a580:	ee30 0a46 	vsub.f32	s0, s0, s12
 800a584:	eddf 6a32 	vldr	s13, [pc, #200]	; 800a650 <__ieee754_powf+0x580>
 800a588:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800a654 <__ieee754_powf+0x584>
 800a58c:	eee7 6a06 	vfma.f32	s13, s14, s12
 800a590:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800a658 <__ieee754_powf+0x588>
 800a594:	eea6 6a87 	vfma.f32	s12, s13, s14
 800a598:	eddf 6a30 	vldr	s13, [pc, #192]	; 800a65c <__ieee754_powf+0x58c>
 800a59c:	eee6 6a07 	vfma.f32	s13, s12, s14
 800a5a0:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800a660 <__ieee754_powf+0x590>
 800a5a4:	eea6 6a87 	vfma.f32	s12, s13, s14
 800a5a8:	eef0 6a67 	vmov.f32	s13, s15
 800a5ac:	eee6 6a47 	vfms.f32	s13, s12, s14
 800a5b0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a5b4:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800a5b8:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800a5bc:	eea7 0a80 	vfma.f32	s0, s15, s0
 800a5c0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a5c4:	ee37 0a40 	vsub.f32	s0, s14, s0
 800a5c8:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a5cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a5d0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a5d4:	ee10 3a10 	vmov	r3, s0
 800a5d8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800a5dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a5e0:	da1f      	bge.n	800a622 <__ieee754_powf+0x552>
 800a5e2:	f000 f947 	bl	800a874 <scalbnf>
 800a5e6:	ee20 0a08 	vmul.f32	s0, s0, s16
 800a5ea:	e589      	b.n	800a100 <__ieee754_powf+0x30>
 800a5ec:	4a1d      	ldr	r2, [pc, #116]	; (800a664 <__ieee754_powf+0x594>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	dd07      	ble.n	800a602 <__ieee754_powf+0x532>
 800a5f2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a5f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5fa:	bf4c      	ite	mi
 800a5fc:	2001      	movmi	r0, #1
 800a5fe:	2000      	movpl	r0, #0
 800a600:	e61f      	b.n	800a242 <__ieee754_powf+0x172>
 800a602:	d108      	bne.n	800a616 <__ieee754_powf+0x546>
 800a604:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a608:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800a60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a610:	f6ff af78 	blt.w	800a504 <__ieee754_powf+0x434>
 800a614:	e7ed      	b.n	800a5f2 <__ieee754_powf+0x522>
 800a616:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800a61a:	f73f af73 	bgt.w	800a504 <__ieee754_powf+0x434>
 800a61e:	2000      	movs	r0, #0
 800a620:	e78c      	b.n	800a53c <__ieee754_powf+0x46c>
 800a622:	ee00 3a10 	vmov	s0, r3
 800a626:	e7de      	b.n	800a5e6 <__ieee754_powf+0x516>
 800a628:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a62c:	e568      	b.n	800a100 <__ieee754_powf+0x30>
 800a62e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800a668 <__ieee754_powf+0x598>
 800a632:	e565      	b.n	800a100 <__ieee754_powf+0x30>
 800a634:	eeb0 0a48 	vmov.f32	s0, s16
 800a638:	e562      	b.n	800a100 <__ieee754_powf+0x30>
 800a63a:	2700      	movs	r7, #0
 800a63c:	e58d      	b.n	800a15a <__ieee754_powf+0x8a>
 800a63e:	bf00      	nop
 800a640:	007fffff 	.word	0x007fffff
 800a644:	35bfbe8c 	.word	0x35bfbe8c
 800a648:	3f317200 	.word	0x3f317200
 800a64c:	3f317218 	.word	0x3f317218
 800a650:	b5ddea0e 	.word	0xb5ddea0e
 800a654:	3331bb4c 	.word	0x3331bb4c
 800a658:	388ab355 	.word	0x388ab355
 800a65c:	bb360b61 	.word	0xbb360b61
 800a660:	3e2aaaab 	.word	0x3e2aaaab
 800a664:	43160000 	.word	0x43160000
 800a668:	00000000 	.word	0x00000000

0800a66c <__ieee754_sqrtf>:
 800a66c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a670:	4770      	bx	lr

0800a672 <with_errno>:
 800a672:	b570      	push	{r4, r5, r6, lr}
 800a674:	4604      	mov	r4, r0
 800a676:	460d      	mov	r5, r1
 800a678:	4616      	mov	r6, r2
 800a67a:	f7fe fdf5 	bl	8009268 <__errno>
 800a67e:	4629      	mov	r1, r5
 800a680:	6006      	str	r6, [r0, #0]
 800a682:	4620      	mov	r0, r4
 800a684:	bd70      	pop	{r4, r5, r6, pc}

0800a686 <xflow>:
 800a686:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a688:	4614      	mov	r4, r2
 800a68a:	461d      	mov	r5, r3
 800a68c:	b108      	cbz	r0, 800a692 <xflow+0xc>
 800a68e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a692:	e9cd 2300 	strd	r2, r3, [sp]
 800a696:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a69a:	4620      	mov	r0, r4
 800a69c:	4629      	mov	r1, r5
 800a69e:	f7f5 ff57 	bl	8000550 <__aeabi_dmul>
 800a6a2:	2222      	movs	r2, #34	; 0x22
 800a6a4:	b003      	add	sp, #12
 800a6a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a6aa:	f7ff bfe2 	b.w	800a672 <with_errno>

0800a6ae <__math_uflow>:
 800a6ae:	b508      	push	{r3, lr}
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a6b6:	f7ff ffe6 	bl	800a686 <xflow>
 800a6ba:	ec41 0b10 	vmov	d0, r0, r1
 800a6be:	bd08      	pop	{r3, pc}

0800a6c0 <__math_oflow>:
 800a6c0:	b508      	push	{r3, lr}
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a6c8:	f7ff ffdd 	bl	800a686 <xflow>
 800a6cc:	ec41 0b10 	vmov	d0, r0, r1
 800a6d0:	bd08      	pop	{r3, pc}

0800a6d2 <with_errnof>:
 800a6d2:	b513      	push	{r0, r1, r4, lr}
 800a6d4:	4604      	mov	r4, r0
 800a6d6:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a6da:	f7fe fdc5 	bl	8009268 <__errno>
 800a6de:	ed9d 0a01 	vldr	s0, [sp, #4]
 800a6e2:	6004      	str	r4, [r0, #0]
 800a6e4:	b002      	add	sp, #8
 800a6e6:	bd10      	pop	{r4, pc}

0800a6e8 <xflowf>:
 800a6e8:	b130      	cbz	r0, 800a6f8 <xflowf+0x10>
 800a6ea:	eef1 7a40 	vneg.f32	s15, s0
 800a6ee:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a6f2:	2022      	movs	r0, #34	; 0x22
 800a6f4:	f7ff bfed 	b.w	800a6d2 <with_errnof>
 800a6f8:	eef0 7a40 	vmov.f32	s15, s0
 800a6fc:	e7f7      	b.n	800a6ee <xflowf+0x6>
	...

0800a700 <__math_uflowf>:
 800a700:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a708 <__math_uflowf+0x8>
 800a704:	f7ff bff0 	b.w	800a6e8 <xflowf>
 800a708:	10000000 	.word	0x10000000

0800a70c <__math_oflowf>:
 800a70c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a714 <__math_oflowf+0x8>
 800a710:	f7ff bfea 	b.w	800a6e8 <xflowf>
 800a714:	70000000 	.word	0x70000000

0800a718 <fabs>:
 800a718:	ec51 0b10 	vmov	r0, r1, d0
 800a71c:	ee10 2a10 	vmov	r2, s0
 800a720:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a724:	ec43 2b10 	vmov	d0, r2, r3
 800a728:	4770      	bx	lr

0800a72a <finite>:
 800a72a:	b082      	sub	sp, #8
 800a72c:	ed8d 0b00 	vstr	d0, [sp]
 800a730:	9801      	ldr	r0, [sp, #4]
 800a732:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a736:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a73a:	0fc0      	lsrs	r0, r0, #31
 800a73c:	b002      	add	sp, #8
 800a73e:	4770      	bx	lr

0800a740 <scalbn>:
 800a740:	b570      	push	{r4, r5, r6, lr}
 800a742:	ec55 4b10 	vmov	r4, r5, d0
 800a746:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a74a:	4606      	mov	r6, r0
 800a74c:	462b      	mov	r3, r5
 800a74e:	b99a      	cbnz	r2, 800a778 <scalbn+0x38>
 800a750:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a754:	4323      	orrs	r3, r4
 800a756:	d036      	beq.n	800a7c6 <scalbn+0x86>
 800a758:	4b39      	ldr	r3, [pc, #228]	; (800a840 <scalbn+0x100>)
 800a75a:	4629      	mov	r1, r5
 800a75c:	ee10 0a10 	vmov	r0, s0
 800a760:	2200      	movs	r2, #0
 800a762:	f7f5 fef5 	bl	8000550 <__aeabi_dmul>
 800a766:	4b37      	ldr	r3, [pc, #220]	; (800a844 <scalbn+0x104>)
 800a768:	429e      	cmp	r6, r3
 800a76a:	4604      	mov	r4, r0
 800a76c:	460d      	mov	r5, r1
 800a76e:	da10      	bge.n	800a792 <scalbn+0x52>
 800a770:	a32b      	add	r3, pc, #172	; (adr r3, 800a820 <scalbn+0xe0>)
 800a772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a776:	e03a      	b.n	800a7ee <scalbn+0xae>
 800a778:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a77c:	428a      	cmp	r2, r1
 800a77e:	d10c      	bne.n	800a79a <scalbn+0x5a>
 800a780:	ee10 2a10 	vmov	r2, s0
 800a784:	4620      	mov	r0, r4
 800a786:	4629      	mov	r1, r5
 800a788:	f7f5 fd2c 	bl	80001e4 <__adddf3>
 800a78c:	4604      	mov	r4, r0
 800a78e:	460d      	mov	r5, r1
 800a790:	e019      	b.n	800a7c6 <scalbn+0x86>
 800a792:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a796:	460b      	mov	r3, r1
 800a798:	3a36      	subs	r2, #54	; 0x36
 800a79a:	4432      	add	r2, r6
 800a79c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a7a0:	428a      	cmp	r2, r1
 800a7a2:	dd08      	ble.n	800a7b6 <scalbn+0x76>
 800a7a4:	2d00      	cmp	r5, #0
 800a7a6:	a120      	add	r1, pc, #128	; (adr r1, 800a828 <scalbn+0xe8>)
 800a7a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7ac:	da1c      	bge.n	800a7e8 <scalbn+0xa8>
 800a7ae:	a120      	add	r1, pc, #128	; (adr r1, 800a830 <scalbn+0xf0>)
 800a7b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7b4:	e018      	b.n	800a7e8 <scalbn+0xa8>
 800a7b6:	2a00      	cmp	r2, #0
 800a7b8:	dd08      	ble.n	800a7cc <scalbn+0x8c>
 800a7ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a7be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a7c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a7c6:	ec45 4b10 	vmov	d0, r4, r5
 800a7ca:	bd70      	pop	{r4, r5, r6, pc}
 800a7cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a7d0:	da19      	bge.n	800a806 <scalbn+0xc6>
 800a7d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a7d6:	429e      	cmp	r6, r3
 800a7d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a7dc:	dd0a      	ble.n	800a7f4 <scalbn+0xb4>
 800a7de:	a112      	add	r1, pc, #72	; (adr r1, 800a828 <scalbn+0xe8>)
 800a7e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d1e2      	bne.n	800a7ae <scalbn+0x6e>
 800a7e8:	a30f      	add	r3, pc, #60	; (adr r3, 800a828 <scalbn+0xe8>)
 800a7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ee:	f7f5 feaf 	bl	8000550 <__aeabi_dmul>
 800a7f2:	e7cb      	b.n	800a78c <scalbn+0x4c>
 800a7f4:	a10a      	add	r1, pc, #40	; (adr r1, 800a820 <scalbn+0xe0>)
 800a7f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d0b8      	beq.n	800a770 <scalbn+0x30>
 800a7fe:	a10e      	add	r1, pc, #56	; (adr r1, 800a838 <scalbn+0xf8>)
 800a800:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a804:	e7b4      	b.n	800a770 <scalbn+0x30>
 800a806:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a80a:	3236      	adds	r2, #54	; 0x36
 800a80c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a810:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a814:	4620      	mov	r0, r4
 800a816:	4b0c      	ldr	r3, [pc, #48]	; (800a848 <scalbn+0x108>)
 800a818:	2200      	movs	r2, #0
 800a81a:	e7e8      	b.n	800a7ee <scalbn+0xae>
 800a81c:	f3af 8000 	nop.w
 800a820:	c2f8f359 	.word	0xc2f8f359
 800a824:	01a56e1f 	.word	0x01a56e1f
 800a828:	8800759c 	.word	0x8800759c
 800a82c:	7e37e43c 	.word	0x7e37e43c
 800a830:	8800759c 	.word	0x8800759c
 800a834:	fe37e43c 	.word	0xfe37e43c
 800a838:	c2f8f359 	.word	0xc2f8f359
 800a83c:	81a56e1f 	.word	0x81a56e1f
 800a840:	43500000 	.word	0x43500000
 800a844:	ffff3cb0 	.word	0xffff3cb0
 800a848:	3c900000 	.word	0x3c900000

0800a84c <fabsf>:
 800a84c:	ee10 3a10 	vmov	r3, s0
 800a850:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a854:	ee00 3a10 	vmov	s0, r3
 800a858:	4770      	bx	lr

0800a85a <finitef>:
 800a85a:	b082      	sub	sp, #8
 800a85c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a860:	9801      	ldr	r0, [sp, #4]
 800a862:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a866:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800a86a:	bfac      	ite	ge
 800a86c:	2000      	movge	r0, #0
 800a86e:	2001      	movlt	r0, #1
 800a870:	b002      	add	sp, #8
 800a872:	4770      	bx	lr

0800a874 <scalbnf>:
 800a874:	ee10 3a10 	vmov	r3, s0
 800a878:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800a87c:	d025      	beq.n	800a8ca <scalbnf+0x56>
 800a87e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a882:	d302      	bcc.n	800a88a <scalbnf+0x16>
 800a884:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a888:	4770      	bx	lr
 800a88a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800a88e:	d122      	bne.n	800a8d6 <scalbnf+0x62>
 800a890:	4b2a      	ldr	r3, [pc, #168]	; (800a93c <scalbnf+0xc8>)
 800a892:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800a940 <scalbnf+0xcc>
 800a896:	4298      	cmp	r0, r3
 800a898:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a89c:	db16      	blt.n	800a8cc <scalbnf+0x58>
 800a89e:	ee10 3a10 	vmov	r3, s0
 800a8a2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a8a6:	3a19      	subs	r2, #25
 800a8a8:	4402      	add	r2, r0
 800a8aa:	2afe      	cmp	r2, #254	; 0xfe
 800a8ac:	dd15      	ble.n	800a8da <scalbnf+0x66>
 800a8ae:	ee10 3a10 	vmov	r3, s0
 800a8b2:	eddf 7a24 	vldr	s15, [pc, #144]	; 800a944 <scalbnf+0xd0>
 800a8b6:	eddf 6a24 	vldr	s13, [pc, #144]	; 800a948 <scalbnf+0xd4>
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	eeb0 7a67 	vmov.f32	s14, s15
 800a8c0:	bfb8      	it	lt
 800a8c2:	eef0 7a66 	vmovlt.f32	s15, s13
 800a8c6:	ee27 0a27 	vmul.f32	s0, s14, s15
 800a8ca:	4770      	bx	lr
 800a8cc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a94c <scalbnf+0xd8>
 800a8d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a8d4:	4770      	bx	lr
 800a8d6:	0dd2      	lsrs	r2, r2, #23
 800a8d8:	e7e6      	b.n	800a8a8 <scalbnf+0x34>
 800a8da:	2a00      	cmp	r2, #0
 800a8dc:	dd06      	ble.n	800a8ec <scalbnf+0x78>
 800a8de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a8e2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a8e6:	ee00 3a10 	vmov	s0, r3
 800a8ea:	4770      	bx	lr
 800a8ec:	f112 0f16 	cmn.w	r2, #22
 800a8f0:	da1a      	bge.n	800a928 <scalbnf+0xb4>
 800a8f2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a8f6:	4298      	cmp	r0, r3
 800a8f8:	ee10 3a10 	vmov	r3, s0
 800a8fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a900:	dd0a      	ble.n	800a918 <scalbnf+0xa4>
 800a902:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800a944 <scalbnf+0xd0>
 800a906:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800a948 <scalbnf+0xd4>
 800a90a:	eef0 7a40 	vmov.f32	s15, s0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	bf18      	it	ne
 800a912:	eeb0 0a47 	vmovne.f32	s0, s14
 800a916:	e7db      	b.n	800a8d0 <scalbnf+0x5c>
 800a918:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800a94c <scalbnf+0xd8>
 800a91c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800a950 <scalbnf+0xdc>
 800a920:	eef0 7a40 	vmov.f32	s15, s0
 800a924:	2b00      	cmp	r3, #0
 800a926:	e7f3      	b.n	800a910 <scalbnf+0x9c>
 800a928:	3219      	adds	r2, #25
 800a92a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a92e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a932:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a954 <scalbnf+0xe0>
 800a936:	ee07 3a10 	vmov	s14, r3
 800a93a:	e7c4      	b.n	800a8c6 <scalbnf+0x52>
 800a93c:	ffff3cb0 	.word	0xffff3cb0
 800a940:	4c000000 	.word	0x4c000000
 800a944:	7149f2ca 	.word	0x7149f2ca
 800a948:	f149f2ca 	.word	0xf149f2ca
 800a94c:	0da24260 	.word	0x0da24260
 800a950:	8da24260 	.word	0x8da24260
 800a954:	33000000 	.word	0x33000000

0800a958 <_init>:
 800a958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a95a:	bf00      	nop
 800a95c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a95e:	bc08      	pop	{r3}
 800a960:	469e      	mov	lr, r3
 800a962:	4770      	bx	lr

0800a964 <_fini>:
 800a964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a966:	bf00      	nop
 800a968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a96a:	bc08      	pop	{r3}
 800a96c:	469e      	mov	lr, r3
 800a96e:	4770      	bx	lr
